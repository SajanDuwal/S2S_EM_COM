
COM_S2S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2fc  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c04  0800c43c  0800c43c  0001c43c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d040  0800d040  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800d040  0800d040  0001d040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d048  0800d048  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d048  0800d048  0001d048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d04c  0800d04c  0001d04c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800d050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b00  20000068  0800d0b8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b68  0800d0b8  00020b68  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022034  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ea5  00000000  00000000  00042109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f18  00000000  00000000  00046fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017b0  00000000  00000000  00048ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002251e  00000000  00000000  0004a678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002330a  00000000  00000000  0006cb96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4650  00000000  00000000  0008fea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008500  00000000  00000000  001544f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0015c9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000068 	.word	0x20000068
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c424 	.word	0x0800c424

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000006c 	.word	0x2000006c
 800017c:	0800c424 	.word	0x0800c424

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002a4:	f080 811b 	bcs.w	80004de <__udivmoddi4+0x28e>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8118 	bls.w	80004de <__udivmoddi4+0x28e>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002d2:	f080 8106 	bcs.w	80004e2 <__udivmoddi4+0x292>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8103 	bls.w	80004e2 <__udivmoddi4+0x292>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ec 	beq.w	80004d8 <__udivmoddi4+0x288>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f7 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 808f 	bne.w	800045e <__udivmoddi4+0x20e>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80ca 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80ba 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	4323      	orrs	r3, r4
 80003c2:	fa00 f901 	lsl.w	r9, r0, r1
 80003c6:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fbb5 f8f0 	udiv	r8, r5, r0
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	fb00 5518 	mls	r5, r0, r8, r5
 80003d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003dc:	fb08 f50e 	mul.w	r5, r8, lr
 80003e0:	42a5      	cmp	r5, r4
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f0 	udiv	r3, r4, r0
 8000408:	fb00 4413 	mls	r4, r0, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800042e:	fba0 8302 	umull	r8, r3, r0, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	429c      	cmp	r4, r3
 8000438:	46c6      	mov	lr, r8
 800043a:	461d      	mov	r5, r3
 800043c:	d355      	bcc.n	80004ea <__udivmoddi4+0x29a>
 800043e:	d052      	beq.n	80004e6 <__udivmoddi4+0x296>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb9 030e 	subs.w	r3, r9, lr
 8000446:	eb64 0405 	sbc.w	r4, r4, r5
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40cb      	lsrs	r3, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	431f      	orrs	r7, r3
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	2100      	movs	r1, #0
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c3 0120 	rsb	r1, r3, #32
 8000462:	fa02 fc03 	lsl.w	ip, r2, r3
 8000466:	fa20 f201 	lsr.w	r2, r0, r1
 800046a:	fa25 f101 	lsr.w	r1, r5, r1
 800046e:	409d      	lsls	r5, r3
 8000470:	432a      	orrs	r2, r5
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	fbb1 f0f7 	udiv	r0, r1, r7
 800047e:	fb07 1510 	mls	r5, r7, r0, r1
 8000482:	0c11      	lsrs	r1, r2, #16
 8000484:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000488:	fb00 f50e 	mul.w	r5, r0, lr
 800048c:	428d      	cmp	r5, r1
 800048e:	fa04 f403 	lsl.w	r4, r4, r3
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428d      	cmp	r5, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3802      	subs	r0, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1b49      	subs	r1, r1, r5
 80004a8:	b292      	uxth	r2, r2
 80004aa:	fbb1 f5f7 	udiv	r5, r1, r7
 80004ae:	fb07 1115 	mls	r1, r7, r5, r1
 80004b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b6:	fb05 f10e 	mul.w	r1, r5, lr
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x280>
 80004be:	eb1c 0202 	adds.w	r2, ip, r2
 80004c2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c6:	d216      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c8:	4291      	cmp	r1, r2
 80004ca:	d914      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004cc:	3d02      	subs	r5, #2
 80004ce:	4462      	add	r2, ip
 80004d0:	1a52      	subs	r2, r2, r1
 80004d2:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d6:	e739      	b.n	800034c <__udivmoddi4+0xfc>
 80004d8:	4631      	mov	r1, r6
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004de:	4639      	mov	r1, r7
 80004e0:	e6e7      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e2:	4610      	mov	r0, r2
 80004e4:	e6fc      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e6:	45c1      	cmp	r9, r8
 80004e8:	d2aa      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb63 050c 	sbc.w	r5, r3, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4645      	mov	r5, r8
 80004f8:	e7ea      	b.n	80004d0 <__udivmoddi4+0x280>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4640      	mov	r0, r8
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	46d0      	mov	r8, sl
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3d02      	subs	r5, #2
 8000508:	4462      	add	r2, ip
 800050a:	e733      	b.n	8000374 <__udivmoddi4+0x124>
 800050c:	4608      	mov	r0, r1
 800050e:	e70b      	b.n	8000328 <__udivmoddi4+0xd8>
 8000510:	4464      	add	r4, ip
 8000512:	3802      	subs	r0, #2
 8000514:	e743      	b.n	800039e <__udivmoddi4+0x14e>
 8000516:	bf00      	nop

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <updatePacket>:
uint8_t ax_buffer[150] = { 0 };
uint8_t ax_buff_stuffed[150] = { 0 };

uint8_t info_packet[INFO_LENGTH];

void updatePacket(uint8_t *OBC_Rx_buffer) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b088      	sub	sp, #32
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	info_packet[0] = OBC_Rx_buffer[1];  	// Packet Type
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	785a      	ldrb	r2, [r3, #1]
 8000528:	4b21      	ldr	r3, [pc, #132]	; (80005b0 <updatePacket+0x94>)
 800052a:	701a      	strb	r2, [r3, #0]
	int j = 1;
 800052c:	2301      	movs	r3, #1
 800052e:	61fb      	str	r3, [r7, #28]
	int k = 3;
 8000530:	2303      	movs	r3, #3
 8000532:	61bb      	str	r3, [r7, #24]
	int len_of_payload = OBC_Rx_buffer[2];  // length of info_field
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3302      	adds	r3, #2
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	60fb      	str	r3, [r7, #12]
	myDebug("\nlen_of_payload: %d\r\n", len_of_payload);
 800053c:	68f9      	ldr	r1, [r7, #12]
 800053e:	481d      	ldr	r0, [pc, #116]	; (80005b4 <updatePacket+0x98>)
 8000540:	f000 f964 	bl	800080c <myDebug>
	for (int i = 0; i < len_of_payload; i++) {
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]
 8000548:	e011      	b.n	800056e <updatePacket+0x52>
		info_packet[j] = OBC_Rx_buffer[k];
 800054a:	69bb      	ldr	r3, [r7, #24]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	4413      	add	r3, r2
 8000550:	7819      	ldrb	r1, [r3, #0]
 8000552:	4a17      	ldr	r2, [pc, #92]	; (80005b0 <updatePacket+0x94>)
 8000554:	69fb      	ldr	r3, [r7, #28]
 8000556:	4413      	add	r3, r2
 8000558:	460a      	mov	r2, r1
 800055a:	701a      	strb	r2, [r3, #0]
		j++;
 800055c:	69fb      	ldr	r3, [r7, #28]
 800055e:	3301      	adds	r3, #1
 8000560:	61fb      	str	r3, [r7, #28]
		k++;
 8000562:	69bb      	ldr	r3, [r7, #24]
 8000564:	3301      	adds	r3, #1
 8000566:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < len_of_payload; i++) {
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	3301      	adds	r3, #1
 800056c:	617b      	str	r3, [r7, #20]
 800056e:	697a      	ldr	r2, [r7, #20]
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	429a      	cmp	r2, r3
 8000574:	dbe9      	blt.n	800054a <updatePacket+0x2e>
	}
	myDebug("info_packet: 0x%x\r\n", info_packet);
 8000576:	490e      	ldr	r1, [pc, #56]	; (80005b0 <updatePacket+0x94>)
 8000578:	480f      	ldr	r0, [pc, #60]	; (80005b8 <updatePacket+0x9c>)
 800057a:	f000 f947 	bl	800080c <myDebug>
	for (int i = 0; i < len_of_payload; i++) {
 800057e:	2300      	movs	r3, #0
 8000580:	613b      	str	r3, [r7, #16]
 8000582:	e00a      	b.n	800059a <updatePacket+0x7e>
		myDebug("%02x ", info_packet[i]);
 8000584:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <updatePacket+0x94>)
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	4413      	add	r3, r2
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	4619      	mov	r1, r3
 800058e:	480b      	ldr	r0, [pc, #44]	; (80005bc <updatePacket+0xa0>)
 8000590:	f000 f93c 	bl	800080c <myDebug>
	for (int i = 0; i < len_of_payload; i++) {
 8000594:	693b      	ldr	r3, [r7, #16]
 8000596:	3301      	adds	r3, #1
 8000598:	613b      	str	r3, [r7, #16]
 800059a:	693a      	ldr	r2, [r7, #16]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	429a      	cmp	r2, r3
 80005a0:	dbf0      	blt.n	8000584 <updatePacket+0x68>
	}
	myDebug("\r\n");
 80005a2:	4807      	ldr	r0, [pc, #28]	; (80005c0 <updatePacket+0xa4>)
 80005a4:	f000 f932 	bl	800080c <myDebug>
}
 80005a8:	bf00      	nop
 80005aa:	3720      	adds	r7, #32
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	200001b4 	.word	0x200001b4
 80005b4:	0800c43c 	.word	0x0800c43c
 80005b8:	0800c454 	.word	0x0800c454
 80005bc:	0800c468 	.word	0x0800c468
 80005c0:	0800c470 	.word	0x0800c470

080005c4 <getHDLCPacket>:

void getHDLCPacket(uint8_t *data, uint8_t data_len) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	70fb      	strb	r3, [r7, #3]

	myDebug("After Bit stuffing: \n");
 80005d0:	4834      	ldr	r0, [pc, #208]	; (80006a4 <getHDLCPacket+0xe0>)
 80005d2:	f000 f91b 	bl	800080c <myDebug>
	myDebug("length of stuffed_packet: %d\r\n", data_len);
 80005d6:	78fb      	ldrb	r3, [r7, #3]
 80005d8:	4619      	mov	r1, r3
 80005da:	4833      	ldr	r0, [pc, #204]	; (80006a8 <getHDLCPacket+0xe4>)
 80005dc:	f000 f916 	bl	800080c <myDebug>
	for (int j = 0; j < data_len; j++) {
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
 80005e4:	e00a      	b.n	80005fc <getHDLCPacket+0x38>
		myDebug("%02x ", data[j]);
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	4413      	add	r3, r2
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	4619      	mov	r1, r3
 80005f0:	482e      	ldr	r0, [pc, #184]	; (80006ac <getHDLCPacket+0xe8>)
 80005f2:	f000 f90b 	bl	800080c <myDebug>
	for (int j = 0; j < data_len; j++) {
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	3301      	adds	r3, #1
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	78fb      	ldrb	r3, [r7, #3]
 80005fe:	697a      	ldr	r2, [r7, #20]
 8000600:	429a      	cmp	r2, r3
 8000602:	dbf0      	blt.n	80005e6 <getHDLCPacket+0x22>
	}
	myDebug("\r\n");
 8000604:	482a      	ldr	r0, [pc, #168]	; (80006b0 <getHDLCPacket+0xec>)
 8000606:	f000 f901 	bl	800080c <myDebug>

	uint16_t crc = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	817b      	strh	r3, [r7, #10]
	crc = calculateCRC_CCITT_AX25(data, data_len);
 800060e:	78fb      	ldrb	r3, [r7, #3]
 8000610:	4619      	mov	r1, r3
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f000 f976 	bl	8000904 <calculateCRC_CCITT_AX25>
 8000618:	4603      	mov	r3, r0
 800061a:	817b      	strh	r3, [r7, #10]

	temp_tx_buffer[0] = 0x7e;
 800061c:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <getHDLCPacket+0xf0>)
 800061e:	227e      	movs	r2, #126	; 0x7e
 8000620:	701a      	strb	r2, [r3, #0]

	int i = 1;
 8000622:	2301      	movs	r3, #1
 8000624:	613b      	str	r3, [r7, #16]
	for (int k = 0; k < data_len; k++) {
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	e00e      	b.n	800064a <getHDLCPacket+0x86>
		temp_tx_buffer[i] = data[k];
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	4413      	add	r3, r2
 8000632:	7819      	ldrb	r1, [r3, #0]
 8000634:	4a1f      	ldr	r2, [pc, #124]	; (80006b4 <getHDLCPacket+0xf0>)
 8000636:	693b      	ldr	r3, [r7, #16]
 8000638:	4413      	add	r3, r2
 800063a:	460a      	mov	r2, r1
 800063c:	701a      	strb	r2, [r3, #0]
		i++;
 800063e:	693b      	ldr	r3, [r7, #16]
 8000640:	3301      	adds	r3, #1
 8000642:	613b      	str	r3, [r7, #16]
	for (int k = 0; k < data_len; k++) {
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	3301      	adds	r3, #1
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	78fb      	ldrb	r3, [r7, #3]
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	429a      	cmp	r2, r3
 8000650:	dbec      	blt.n	800062c <getHDLCPacket+0x68>
	}

	// Store CRC result in the packet array
	temp_tx_buffer[i] = (crc >> 8) & 0xFF; // Most significant byte
 8000652:	897b      	ldrh	r3, [r7, #10]
 8000654:	0a1b      	lsrs	r3, r3, #8
 8000656:	b29b      	uxth	r3, r3
 8000658:	b2d9      	uxtb	r1, r3
 800065a:	4a16      	ldr	r2, [pc, #88]	; (80006b4 <getHDLCPacket+0xf0>)
 800065c:	693b      	ldr	r3, [r7, #16]
 800065e:	4413      	add	r3, r2
 8000660:	460a      	mov	r2, r1
 8000662:	701a      	strb	r2, [r3, #0]
	i++;
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	3301      	adds	r3, #1
 8000668:	613b      	str	r3, [r7, #16]
	temp_tx_buffer[i] = crc & 0xFF;        // Least significant byte
 800066a:	897b      	ldrh	r3, [r7, #10]
 800066c:	b2d9      	uxtb	r1, r3
 800066e:	4a11      	ldr	r2, [pc, #68]	; (80006b4 <getHDLCPacket+0xf0>)
 8000670:	693b      	ldr	r3, [r7, #16]
 8000672:	4413      	add	r3, r2
 8000674:	460a      	mov	r2, r1
 8000676:	701a      	strb	r2, [r3, #0]
	i++;
 8000678:	693b      	ldr	r3, [r7, #16]
 800067a:	3301      	adds	r3, #1
 800067c:	613b      	str	r3, [r7, #16]

	temp_tx_buffer[i] = 0x7e;
 800067e:	4a0d      	ldr	r2, [pc, #52]	; (80006b4 <getHDLCPacket+0xf0>)
 8000680:	693b      	ldr	r3, [r7, #16]
 8000682:	4413      	add	r3, r2
 8000684:	227e      	movs	r2, #126	; 0x7e
 8000686:	701a      	strb	r2, [r3, #0]
//	for (int j = 0; j < destuffed_size - 1; j++) {
//		myDebug("%02x ", tem[j]);
//	}
//	myDebug("\r\n");

	memset(ax_buffer, '\0', sizeof(ax_buffer));
 8000688:	2296      	movs	r2, #150	; 0x96
 800068a:	2100      	movs	r1, #0
 800068c:	480a      	ldr	r0, [pc, #40]	; (80006b8 <getHDLCPacket+0xf4>)
 800068e:	f00b fa47 	bl	800bb20 <memset>
	memset(ax_buff_stuffed, '\0', sizeof(ax_buff_stuffed));
 8000692:	2296      	movs	r2, #150	; 0x96
 8000694:	2100      	movs	r1, #0
 8000696:	4809      	ldr	r0, [pc, #36]	; (80006bc <getHDLCPacket+0xf8>)
 8000698:	f00b fa42 	bl	800bb20 <memset>

}
 800069c:	bf00      	nop
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	0800c474 	.word	0x0800c474
 80006a8:	0800c48c 	.word	0x0800c48c
 80006ac:	0800c468 	.word	0x0800c468
 80006b0:	0800c470 	.word	0x0800c470
 80006b4:	2000036c 	.word	0x2000036c
 80006b8:	20000084 	.word	0x20000084
 80006bc:	2000011c 	.word	0x2000011c

080006c0 <getAX25Packet>:

void getAX25Packet(uint8_t *OBC_data_Field, uint8_t size) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	70fb      	strb	r3, [r7, #3]

	updatePacket(OBC_data_Field);
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f7ff ff25 	bl	800051c <updatePacket>

	//destination field   9N2SI -0
	ax_buffer[0] = 0x72; //	ASCII->9, HEX->0x39, 1 bit shifted->0b01110010, Shifted HEX->0x72
 80006d2:	4b3a      	ldr	r3, [pc, #232]	; (80007bc <getAX25Packet+0xfc>)
 80006d4:	2272      	movs	r2, #114	; 0x72
 80006d6:	701a      	strb	r2, [r3, #0]
	ax_buffer[1] = 0x9C; //	ASCII->N, HEX->0x4E, 1 bit shifted->0b10011100, Shifted HEX->0x9C
 80006d8:	4b38      	ldr	r3, [pc, #224]	; (80007bc <getAX25Packet+0xfc>)
 80006da:	229c      	movs	r2, #156	; 0x9c
 80006dc:	705a      	strb	r2, [r3, #1]
	ax_buffer[2] = 0x64; //	ASCII->2, HEX->0x32, 1 bit shifted->0b01100100, Shifted HEX->0x64
 80006de:	4b37      	ldr	r3, [pc, #220]	; (80007bc <getAX25Packet+0xfc>)
 80006e0:	2264      	movs	r2, #100	; 0x64
 80006e2:	709a      	strb	r2, [r3, #2]
	ax_buffer[3] = 0xA6; //	ASCII->S, HEX->0x53, 1 bit shifted->0b10100110, Shifted HEX->0xA6
 80006e4:	4b35      	ldr	r3, [pc, #212]	; (80007bc <getAX25Packet+0xfc>)
 80006e6:	22a6      	movs	r2, #166	; 0xa6
 80006e8:	70da      	strb	r2, [r3, #3]
	ax_buffer[4] = 0x64; //	ASCII->I, HEX->0x49, 1 bit shifted->0b10010010, Shifted HEX->0x92
 80006ea:	4b34      	ldr	r3, [pc, #208]	; (80007bc <getAX25Packet+0xfc>)
 80006ec:	2264      	movs	r2, #100	; 0x64
 80006ee:	711a      	strb	r2, [r3, #4]
	ax_buffer[5] = 0x40; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 80006f0:	4b32      	ldr	r3, [pc, #200]	; (80007bc <getAX25Packet+0xfc>)
 80006f2:	2240      	movs	r2, #64	; 0x40
 80006f4:	715a      	strb	r2, [r3, #5]
	ax_buffer[6] = 0xE0; //	0b111SSID0, SSID->0000 and LSB is set to 0; if more addresses follow, HEX->0xE0
 80006f6:	4b31      	ldr	r3, [pc, #196]	; (80007bc <getAX25Packet+0xfc>)
 80006f8:	22e0      	movs	r2, #224	; 0xe0
 80006fa:	719a      	strb	r2, [r3, #6]

	//source field   9N2SI -0
	ax_buffer[7] = 0x72; //	ASCII->9, HEX->0x39, 1 bit shifted->0b01110010, Shifted HEX->0x72
 80006fc:	4b2f      	ldr	r3, [pc, #188]	; (80007bc <getAX25Packet+0xfc>)
 80006fe:	2272      	movs	r2, #114	; 0x72
 8000700:	71da      	strb	r2, [r3, #7]
	ax_buffer[8] = 0x9C; //	ASCII->N, HEX->0x4E, 1 bit shifted->0b10011100, Shifted HEX->0x9C
 8000702:	4b2e      	ldr	r3, [pc, #184]	; (80007bc <getAX25Packet+0xfc>)
 8000704:	229c      	movs	r2, #156	; 0x9c
 8000706:	721a      	strb	r2, [r3, #8]
	ax_buffer[9] = 0x64; //	ASCII->2, HEX->0x32, 1 bit shifted->0b01100100, Shifted HEX->0x64
 8000708:	4b2c      	ldr	r3, [pc, #176]	; (80007bc <getAX25Packet+0xfc>)
 800070a:	2264      	movs	r2, #100	; 0x64
 800070c:	725a      	strb	r2, [r3, #9]
	ax_buffer[10] = 0xA6; //	ASCII->S, HEX->0x53, 1 bit shifted->0b10100110, Shifted HEX->0xA6
 800070e:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <getAX25Packet+0xfc>)
 8000710:	22a6      	movs	r2, #166	; 0xa6
 8000712:	729a      	strb	r2, [r3, #10]
	ax_buffer[11] = 0x64; //	ASCII->I, HEX->0x49, 1 bit shifted->0b10010010, Shifted HEX->0x92
 8000714:	4b29      	ldr	r3, [pc, #164]	; (80007bc <getAX25Packet+0xfc>)
 8000716:	2264      	movs	r2, #100	; 0x64
 8000718:	72da      	strb	r2, [r3, #11]
	ax_buffer[12] = 0x40; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 800071a:	4b28      	ldr	r3, [pc, #160]	; (80007bc <getAX25Packet+0xfc>)
 800071c:	2240      	movs	r2, #64	; 0x40
 800071e:	731a      	strb	r2, [r3, #12]
	ax_buffer[13] = 0x61; //	0b011SSID1, SSID->0000 and LSB is set to 1 if this is the last address, HEX->0x61
 8000720:	4b26      	ldr	r3, [pc, #152]	; (80007bc <getAX25Packet+0xfc>)
 8000722:	2261      	movs	r2, #97	; 0x61
 8000724:	735a      	strb	r2, [r3, #13]

	//control bit
	ax_buffer[14] = 0x03; //  Unnumbered Information Frame, AX.25 is always 0b00000011 i.e 0x03 in HEX
 8000726:	4b25      	ldr	r3, [pc, #148]	; (80007bc <getAX25Packet+0xfc>)
 8000728:	2203      	movs	r2, #3
 800072a:	739a      	strb	r2, [r3, #14]

	//protocol identifier
	ax_buffer[15] = 0xF0; //	No Layer-3 Implemented so, 0b11110000 i.e 0xF0 in HEX
 800072c:	4b23      	ldr	r3, [pc, #140]	; (80007bc <getAX25Packet+0xfc>)
 800072e:	22f0      	movs	r2, #240	; 0xf0
 8000730:	73da      	strb	r2, [r3, #15]

	int i = 16;
 8000732:	2310      	movs	r3, #16
 8000734:	617b      	str	r3, [r7, #20]

	for (int k = 0; k < size; k++) {
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	e00e      	b.n	800075a <getAX25Packet+0x9a>
		ax_buffer[i] = info_packet[k];
 800073c:	4a20      	ldr	r2, [pc, #128]	; (80007c0 <getAX25Packet+0x100>)
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	4413      	add	r3, r2
 8000742:	7819      	ldrb	r1, [r3, #0]
 8000744:	4a1d      	ldr	r2, [pc, #116]	; (80007bc <getAX25Packet+0xfc>)
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	4413      	add	r3, r2
 800074a:	460a      	mov	r2, r1
 800074c:	701a      	strb	r2, [r3, #0]
		i++;
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	3301      	adds	r3, #1
 8000752:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < size; k++) {
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	3301      	adds	r3, #1
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	78fb      	ldrb	r3, [r7, #3]
 800075c:	693a      	ldr	r2, [r7, #16]
 800075e:	429a      	cmp	r2, r3
 8000760:	dbec      	blt.n	800073c <getAX25Packet+0x7c>
	}

	myDebug("Before Bit stuffing: \n");
 8000762:	4818      	ldr	r0, [pc, #96]	; (80007c4 <getAX25Packet+0x104>)
 8000764:	f000 f852 	bl	800080c <myDebug>
	myDebug("length before Bit Stuffing: %d \r\n", i);
 8000768:	6979      	ldr	r1, [r7, #20]
 800076a:	4817      	ldr	r0, [pc, #92]	; (80007c8 <getAX25Packet+0x108>)
 800076c:	f000 f84e 	bl	800080c <myDebug>
	for (int j = 0; j < i; j++) {
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	e00a      	b.n	800078c <getAX25Packet+0xcc>
		myDebug("%02x ", ax_buffer[j]);
 8000776:	4a11      	ldr	r2, [pc, #68]	; (80007bc <getAX25Packet+0xfc>)
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	4413      	add	r3, r2
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	4619      	mov	r1, r3
 8000780:	4812      	ldr	r0, [pc, #72]	; (80007cc <getAX25Packet+0x10c>)
 8000782:	f000 f843 	bl	800080c <myDebug>
	for (int j = 0; j < i; j++) {
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	3301      	adds	r3, #1
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fa      	ldr	r2, [r7, #12]
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	429a      	cmp	r2, r3
 8000792:	dbf0      	blt.n	8000776 <getAX25Packet+0xb6>
	}
	myDebug("\r\n");
 8000794:	480e      	ldr	r0, [pc, #56]	; (80007d0 <getAX25Packet+0x110>)
 8000796:	f000 f839 	bl	800080c <myDebug>

	// Bit Stuffing
	int stuffed_size = bit_stuffing(ax_buffer, ax_buff_stuffed, i);
 800079a:	697a      	ldr	r2, [r7, #20]
 800079c:	490d      	ldr	r1, [pc, #52]	; (80007d4 <getAX25Packet+0x114>)
 800079e:	4807      	ldr	r0, [pc, #28]	; (80007bc <getAX25Packet+0xfc>)
 80007a0:	f000 f8ef 	bl	8000982 <bit_stuffing>
 80007a4:	60b8      	str	r0, [r7, #8]

	getHDLCPacket(ax_buff_stuffed, stuffed_size);
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	4619      	mov	r1, r3
 80007ac:	4809      	ldr	r0, [pc, #36]	; (80007d4 <getAX25Packet+0x114>)
 80007ae:	f7ff ff09 	bl	80005c4 <getHDLCPacket>
}
 80007b2:	bf00      	nop
 80007b4:	3718      	adds	r7, #24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000084 	.word	0x20000084
 80007c0:	200001b4 	.word	0x200001b4
 80007c4:	0800c4ac 	.word	0x0800c4ac
 80007c8:	0800c4c4 	.word	0x0800c4c4
 80007cc:	0800c468 	.word	0x0800c468
 80007d0:	0800c470 	.word	0x0800c470
 80007d4:	2000011c 	.word	0x2000011c

080007d8 <delay_us>:
 */


#include "com_debug.h"

void delay_us(uint32_t us) {
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	uint32_t delay_counter_disp;
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <delay_us+0x30>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2200      	movs	r2, #0
 80007e6:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 80007e8:	e002      	b.n	80007f0 <delay_us+0x18>
		delay_counter_disp++;
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	3301      	adds	r3, #1
 80007ee:	60fb      	str	r3, [r7, #12]
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <delay_us+0x30>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d8f6      	bhi.n	80007ea <delay_us+0x12>
	// wait for the counter to reach the us input in the parameter
}
 80007fc:	bf00      	nop
 80007fe:	bf00      	nop
 8000800:	3714      	adds	r7, #20
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr
 8000808:	200004d0 	.word	0x200004d0

0800080c <myDebug>:

void myDebug(const char *fmt, ...) {
 800080c:	b40f      	push	{r0, r1, r2, r3}
 800080e:	b580      	push	{r7, lr}
 8000810:	b082      	sub	sp, #8
 8000812:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	693a      	ldr	r2, [r7, #16]
 800081e:	2164      	movs	r1, #100	; 0x64
 8000820:	480a      	ldr	r0, [pc, #40]	; (800084c <myDebug+0x40>)
 8000822:	f00b f96f 	bl	800bb04 <vsniprintf>
	va_end(args);
	int len = bufferSize(temp);
 8000826:	4809      	ldr	r0, [pc, #36]	; (800084c <myDebug+0x40>)
 8000828:	f000 f814 	bl	8000854 <bufferSize>
 800082c:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) temp, len, 1000);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	b29a      	uxth	r2, r3
 8000832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000836:	4905      	ldr	r1, [pc, #20]	; (800084c <myDebug+0x40>)
 8000838:	4805      	ldr	r0, [pc, #20]	; (8000850 <myDebug+0x44>)
 800083a:	f005 ff22 	bl	8006682 <HAL_UART_Transmit>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000848:	b004      	add	sp, #16
 800084a:	4770      	bx	lr
 800084c:	20000218 	.word	0x20000218
 8000850:	200005b4 	.word	0x200005b4

08000854 <bufferSize>:
	va_end(args);
	int len = bufferSize(temp);
	HAL_UART_Transmit(&huart2, (uint8_t*) temp, len, 1000);
}

int bufferSize(char *buffer) {
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	int i = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 8000860:	e002      	b.n	8000868 <bufferSize+0x14>
		i++;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	3301      	adds	r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	1c5a      	adds	r2, r3, #1
 800086c:	607a      	str	r2, [r7, #4]
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d1f6      	bne.n	8000862 <bufferSize+0xe>
	return i;
 8000874:	68fb      	ldr	r3, [r7, #12]
}
 8000876:	4618      	mov	r0, r3
 8000878:	3714      	adds	r7, #20
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800088c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800088e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4313      	orrs	r3, r2
 8000896:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800089c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4013      	ands	r3, r2
 80008a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008a4:	68fb      	ldr	r3, [r7, #12]
}
 80008a6:	bf00      	nop
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80008b4:	2004      	movs	r0, #4
 80008b6:	f7ff ffe3 	bl	8000880 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ba:	2001      	movs	r0, #1
 80008bc:	f7ff ffe0 	bl	8000880 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2100      	movs	r1, #0
 80008c4:	200b      	movs	r0, #11
 80008c6:	f002 fe96 	bl	80035f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008ca:	200b      	movs	r0, #11
 80008cc:	f002 fead 	bl	800362a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2100      	movs	r1, #0
 80008d4:	200c      	movs	r0, #12
 80008d6:	f002 fe8e 	bl	80035f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80008da:	200c      	movs	r0, #12
 80008dc:	f002 fea5 	bl	800362a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2100      	movs	r1, #0
 80008e4:	200d      	movs	r0, #13
 80008e6:	f002 fe86 	bl	80035f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80008ea:	200d      	movs	r0, #13
 80008ec:	f002 fe9d 	bl	800362a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2100      	movs	r1, #0
 80008f4:	200e      	movs	r0, #14
 80008f6:	f002 fe7e 	bl	80035f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80008fa:	200e      	movs	r0, #14
 80008fc:	f002 fe95 	bl	800362a <HAL_NVIC_EnableIRQ>

}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}

08000904 <calculateCRC_CCITT_AX25>:
 */

#include "error_handler.h"

// Function to calculate CRC-CCITT for AX.25 frames
uint16_t calculateCRC_CCITT_AX25(const uint8_t *data, size_t length) {
 8000904:	b480      	push	{r7}
 8000906:	b087      	sub	sp, #28
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0xFFFF; // Initialize CRC register with 0xFFFF
 800090e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000912:	82fb      	strh	r3, [r7, #22]
	uint16_t CRC_POLY = 0x1021; // CRC polynomial for CCITT (0x1021)
 8000914:	f241 0321 	movw	r3, #4129	; 0x1021
 8000918:	817b      	strh	r3, [r7, #10]

	// Iterate through each byte of the input data
	for (size_t i = 0; i < length; i++) {
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	e026      	b.n	800096e <calculateCRC_CCITT_AX25+0x6a>
		crc ^= ((uint16_t) data[i] << 8); // XOR CRC with next byte of input data
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	4413      	add	r3, r2
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	021b      	lsls	r3, r3, #8
 800092a:	b21a      	sxth	r2, r3
 800092c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000930:	4053      	eors	r3, r2
 8000932:	b21b      	sxth	r3, r3
 8000934:	82fb      	strh	r3, [r7, #22]

		// Iterate through each bit of the current byte
		for (int j = 0; j < 8; j++) {
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	e012      	b.n	8000962 <calculateCRC_CCITT_AX25+0x5e>
			if (crc & 0x8000) { // If MSB of CRC is 1
 800093c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000940:	2b00      	cmp	r3, #0
 8000942:	da08      	bge.n	8000956 <calculateCRC_CCITT_AX25+0x52>
				crc = (crc << 1) ^ CRC_POLY; // Left shift CRC and XOR with polynomial
 8000944:	8afb      	ldrh	r3, [r7, #22]
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	b21a      	sxth	r2, r3
 800094a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800094e:	4053      	eors	r3, r2
 8000950:	b21b      	sxth	r3, r3
 8000952:	82fb      	strh	r3, [r7, #22]
 8000954:	e002      	b.n	800095c <calculateCRC_CCITT_AX25+0x58>
			} else {
				crc <<= 1; // Left shift CRC
 8000956:	8afb      	ldrh	r3, [r7, #22]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++) {
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	3301      	adds	r3, #1
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	2b07      	cmp	r3, #7
 8000966:	dde9      	ble.n	800093c <calculateCRC_CCITT_AX25+0x38>
	for (size_t i = 0; i < length; i++) {
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	3301      	adds	r3, #1
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	429a      	cmp	r2, r3
 8000974:	d3d4      	bcc.n	8000920 <calculateCRC_CCITT_AX25+0x1c>
			}
		}
	}

	return crc; // Return calculated CRC
 8000976:	8afb      	ldrh	r3, [r7, #22]
}
 8000978:	4618      	mov	r0, r3
 800097a:	371c      	adds	r7, #28
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr

08000982 <bit_stuffing>:
	}
	crcReg = crcReg ^ 0xFFFF;						// Final XOR with 0xFFFF
	return crcReg;
}

int bit_stuffing(uint8_t *data, uint8_t *output_data, int length) {
 8000982:	b480      	push	{r7}
 8000984:	b08f      	sub	sp, #60	; 0x3c
 8000986:	af00      	add	r7, sp, #0
 8000988:	60f8      	str	r0, [r7, #12]
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607a      	str	r2, [r7, #4]
	int out_index = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	637b      	str	r3, [r7, #52]	; 0x34
	int bit_count = 0; // Count of consecutive 1 bits
 8000992:	2300      	movs	r3, #0
 8000994:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t current_byte = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	int bit_pos = 7;
 800099c:	2307      	movs	r3, #7
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
	int stuffed_size = 0; // Track size of output data after bit stuffing
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
	int bits_stuffed = 0; // Number of bits stuffed since last size increase
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]

	//myDebug("Error handler: before Bit stuffing \n");

	for (int i = 0; i < length; i++) {
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
 80009ac:	e078      	b.n	8000aa0 <bit_stuffing+0x11e>
		for (int bit = 7; bit >= 0; bit--) {
 80009ae:	2307      	movs	r3, #7
 80009b0:	61bb      	str	r3, [r7, #24]
 80009b2:	e06f      	b.n	8000a94 <bit_stuffing+0x112>
			int bit_val = (data[i] >> bit) & 1;
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	68fa      	ldr	r2, [r7, #12]
 80009b8:	4413      	add	r3, r2
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	69bb      	ldr	r3, [r7, #24]
 80009c0:	fa42 f303 	asr.w	r3, r2, r3
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	617b      	str	r3, [r7, #20]

		//	myDebug("%d ", bit_val);

			current_byte |= (bit_val << bit_pos);
 80009ca:	697a      	ldr	r2, [r7, #20]
 80009cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	b25a      	sxtb	r2, r3
 80009d4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80009d8:	4313      	orrs	r3, r2
 80009da:	b25b      	sxtb	r3, r3
 80009dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			bit_pos--;
 80009e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e2:	3b01      	subs	r3, #1
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28

			if (bit_val) {
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d02f      	beq.n	8000a4c <bit_stuffing+0xca>
				bit_count++;
 80009ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009ee:	3301      	adds	r3, #1
 80009f0:	633b      	str	r3, [r7, #48]	; 0x30
				if (bit_count == 5) {
 80009f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f4:	2b05      	cmp	r3, #5
 80009f6:	d12b      	bne.n	8000a50 <bit_stuffing+0xce>
					// Insert a 0 bit after five consecutive 1s
					if (bit_pos < 0) {
 80009f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	da10      	bge.n	8000a20 <bit_stuffing+0x9e>
						output_data[out_index++] = current_byte;
 80009fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a00:	1c5a      	adds	r2, r3, #1
 8000a02:	637a      	str	r2, [r7, #52]	; 0x34
 8000a04:	461a      	mov	r2, r3
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	4413      	add	r3, r2
 8000a0a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000a0e:	701a      	strb	r2, [r3, #0]
						stuffed_size++;
 8000a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a12:	3301      	adds	r3, #1
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
						current_byte = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						bit_pos = 7;
 8000a1c:	2307      	movs	r3, #7
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
					}
					current_byte &= ~(1 << bit_pos);
 8000a20:	2201      	movs	r2, #1
 8000a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	b25b      	sxtb	r3, r3
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	b25a      	sxtb	r2, r3
 8000a2e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000a32:	4013      	ands	r3, r2
 8000a34:	b25b      	sxtb	r3, r3
 8000a36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					bit_pos--;
 8000a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a3c:	3b01      	subs	r3, #1
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
					bits_stuffed++;
 8000a40:	6a3b      	ldr	r3, [r7, #32]
 8000a42:	3301      	adds	r3, #1
 8000a44:	623b      	str	r3, [r7, #32]
					bit_count = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	633b      	str	r3, [r7, #48]	; 0x30
 8000a4a:	e001      	b.n	8000a50 <bit_stuffing+0xce>
				}
			} else {
				bit_count = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	633b      	str	r3, [r7, #48]	; 0x30
			}

			if (bit_pos < 0) {
 8000a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	da10      	bge.n	8000a78 <bit_stuffing+0xf6>
				output_data[out_index++] = current_byte;
 8000a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a58:	1c5a      	adds	r2, r3, #1
 8000a5a:	637a      	str	r2, [r7, #52]	; 0x34
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	4413      	add	r3, r2
 8000a62:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000a66:	701a      	strb	r2, [r3, #0]
				stuffed_size++;
 8000a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
				current_byte = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				bit_pos = 7;
 8000a74:	2307      	movs	r3, #7
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			// Check if we've stuffed enough bits to increase size
			if (bits_stuffed >= 9 && bit_pos >= 0) {
 8000a78:	6a3b      	ldr	r3, [r7, #32]
 8000a7a:	2b08      	cmp	r3, #8
 8000a7c:	dd07      	ble.n	8000a8e <bit_stuffing+0x10c>
 8000a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	db04      	blt.n	8000a8e <bit_stuffing+0x10c>
				stuffed_size++;
 8000a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a86:	3301      	adds	r3, #1
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
				bits_stuffed = 0; // Reset bits_stuffed after increasing size
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
		for (int bit = 7; bit >= 0; bit--) {
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	3b01      	subs	r3, #1
 8000a92:	61bb      	str	r3, [r7, #24]
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	da8c      	bge.n	80009b4 <bit_stuffing+0x32>
	for (int i = 0; i < length; i++) {
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
 8000aa0:	69fa      	ldr	r2, [r7, #28]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	db82      	blt.n	80009ae <bit_stuffing+0x2c>
			}
		}
	}
	//myDebug("\n");

	if (bit_pos < 7) {
 8000aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aaa:	2b06      	cmp	r3, #6
 8000aac:	dc0b      	bgt.n	8000ac6 <bit_stuffing+0x144>
		output_data[out_index++] = current_byte;
 8000aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab0:	1c5a      	adds	r2, r3, #1
 8000ab2:	637a      	str	r2, [r7, #52]	; 0x34
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	4413      	add	r3, r2
 8000aba:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000abe:	701a      	strb	r2, [r3, #0]
		stuffed_size++;
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
//			myDebug("%d ", bit_val);
//		}
//	}
//	myDebug("\n");

	return out_index; // Return the size of output data after bit stuffing
 8000ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	373c      	adds	r7, #60	; 0x3c
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr

08000ad2 <bit_destuffing>:

int bit_destuffing(uint8_t *data, uint8_t *output_data, int length) {
 8000ad2:	b480      	push	{r7}
 8000ad4:	b08d      	sub	sp, #52	; 0x34
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	60f8      	str	r0, [r7, #12]
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
    int out_index = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
    int bit_count = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t current_byte = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int bit_pos = 7;
 8000aec:	2307      	movs	r3, #7
 8000aee:	623b      	str	r3, [r7, #32]

    for (int i = 0; i < length; i++) {
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
 8000af4:	e052      	b.n	8000b9c <bit_destuffing+0xca>
        for (int bit = 7; bit >= 0; bit--) {
 8000af6:	2307      	movs	r3, #7
 8000af8:	61bb      	str	r3, [r7, #24]
 8000afa:	e049      	b.n	8000b90 <bit_destuffing+0xbe>
            int bit_val = (data[i] >> bit) & 1;
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	4413      	add	r3, r2
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	461a      	mov	r2, r3
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	fa42 f303 	asr.w	r3, r2, r3
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	617b      	str	r3, [r7, #20]

            if (bit_val) {
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d011      	beq.n	8000b3c <bit_destuffing+0x6a>
                bit_count++;
 8000b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
                current_byte |= (bit_val << bit_pos);
 8000b1e:	697a      	ldr	r2, [r7, #20]
 8000b20:	6a3b      	ldr	r3, [r7, #32]
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	b25a      	sxtb	r2, r3
 8000b28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	b25b      	sxtb	r3, r3
 8000b30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                bit_pos--;
 8000b34:	6a3b      	ldr	r3, [r7, #32]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	623b      	str	r3, [r7, #32]
 8000b3a:	e015      	b.n	8000b68 <bit_destuffing+0x96>
            } else {
                if (bit_count == 5) {
 8000b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b3e:	2b05      	cmp	r3, #5
 8000b40:	d102      	bne.n	8000b48 <bit_destuffing+0x76>
                    // Skip this bit as it is a stuffed bit
                    bit_count = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
                    continue;
 8000b46:	e020      	b.n	8000b8a <bit_destuffing+0xb8>
                } else {
                    bit_count = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
                    current_byte |= (bit_val << bit_pos);
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	6a3b      	ldr	r3, [r7, #32]
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	b25a      	sxtb	r2, r3
 8000b56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	b25b      	sxtb	r3, r3
 8000b5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    bit_pos--;
 8000b62:	6a3b      	ldr	r3, [r7, #32]
 8000b64:	3b01      	subs	r3, #1
 8000b66:	623b      	str	r3, [r7, #32]
                }
            }

            if (bit_pos < 0) {
 8000b68:	6a3b      	ldr	r3, [r7, #32]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	da0d      	bge.n	8000b8a <bit_destuffing+0xb8>
                output_data[out_index++] = current_byte;
 8000b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b70:	1c5a      	adds	r2, r3, #1
 8000b72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000b74:	461a      	mov	r2, r3
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	4413      	add	r3, r2
 8000b7a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000b7e:	701a      	strb	r2, [r3, #0]
                current_byte = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                bit_pos = 7;
 8000b86:	2307      	movs	r3, #7
 8000b88:	623b      	str	r3, [r7, #32]
        for (int bit = 7; bit >= 0; bit--) {
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	61bb      	str	r3, [r7, #24]
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	dab2      	bge.n	8000afc <bit_destuffing+0x2a>
    for (int i = 0; i < length; i++) {
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	61fb      	str	r3, [r7, #28]
 8000b9c:	69fa      	ldr	r2, [r7, #28]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	dba8      	blt.n	8000af6 <bit_destuffing+0x24>
            }
        }
    }

    // Ensure the last byte is written if it's partially filled
    if (bit_pos < 7) {
 8000ba4:	6a3b      	ldr	r3, [r7, #32]
 8000ba6:	2b06      	cmp	r3, #6
 8000ba8:	dc08      	bgt.n	8000bbc <bit_destuffing+0xea>
        output_data[out_index++] = current_byte;
 8000baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bac:	1c5a      	adds	r2, r3, #1
 8000bae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000bba:	701a      	strb	r2, [r3, #0]
//			myDebug("%d ", bit_val);
//		}
//	}
//	myDebug("\n");

    return out_index;
 8000bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3734      	adds	r7, #52	; 0x34
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr

08000bc8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000be4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4013      	ands	r3, r2
 8000bea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bec:	68fb      	ldr	r3, [r7, #12]
}
 8000bee:	bf00      	nop
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr

08000bf8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f7ff ffdb 	bl	8000bc8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c12:	2002      	movs	r0, #2
 8000c14:	f7ff ffd8 	bl	8000bc8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c18:	2004      	movs	r0, #4
 8000c1a:	f7ff ffd5 	bl	8000bc8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 8000c24:	481f      	ldr	r0, [pc, #124]	; (8000ca4 <MX_GPIO_Init+0xac>)
 8000c26:	f003 f9fd 	bl	8004024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2138      	movs	r1, #56	; 0x38
 8000c2e:	481e      	ldr	r0, [pc, #120]	; (8000ca8 <MX_GPIO_Init+0xb0>)
 8000c30:	f003 f9f8 	bl	8004024 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000c34:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000c38:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c42:	2302      	movs	r3, #2
 8000c44:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4816      	ldr	r0, [pc, #88]	; (8000ca4 <MX_GPIO_Init+0xac>)
 8000c4c:	f003 f88a 	bl	8003d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000c50:	2338      	movs	r3, #56	; 0x38
 8000c52:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	4619      	mov	r1, r3
 8000c64:	4810      	ldr	r0, [pc, #64]	; (8000ca8 <MX_GPIO_Init+0xb0>)
 8000c66:	f003 f87d 	bl	8003d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c6e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c74:	2301      	movs	r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c80:	f003 f870 	bl	8003d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000c84:	2340      	movs	r3, #64	; 0x40
 8000c86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c88:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	4619      	mov	r1, r3
 8000c96:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <MX_GPIO_Init+0xb0>)
 8000c98:	f003 f864 	bl	8003d64 <HAL_GPIO_Init>

}
 8000c9c:	bf00      	nop
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	48000400 	.word	0x48000400
 8000ca8:	48000800 	.word	0x48000800

08000cac <countsDataBetweenFlags>:
int countsDataBetweenFlags(uint8_t *data, int data_length);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int countsDataBetweenFlags(uint8_t *data, int data_length) {
 8000cac:	b480      	push	{r7}
 8000cae:	b087      	sub	sp, #28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
	int found_first_7e = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
	int start_index = 0, end_index = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < data_length; i++) {
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	e013      	b.n	8000cf0 <countsDataBetweenFlags+0x44>
		if (data[i] == 0x7e) {
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b7e      	cmp	r3, #126	; 0x7e
 8000cd2:	d10a      	bne.n	8000cea <countsDataBetweenFlags+0x3e>
			if (!found_first_7e) {
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d104      	bne.n	8000ce4 <countsDataBetweenFlags+0x38>
				found_first_7e = 1;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	617b      	str	r3, [r7, #20]
				start_index = i;
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	e002      	b.n	8000cea <countsDataBetweenFlags+0x3e>
			} else {
				end_index = i;
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	60fb      	str	r3, [r7, #12]
				break;
 8000ce8:	e006      	b.n	8000cf8 <countsDataBetweenFlags+0x4c>
	for (int i = 0; i < data_length; i++) {
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	3301      	adds	r3, #1
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68ba      	ldr	r2, [r7, #8]
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	dbe7      	blt.n	8000cc8 <countsDataBetweenFlags+0x1c>
			}
		}
	}

	if (end_index > start_index) {
 8000cf8:	68fa      	ldr	r2, [r7, #12]
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	dd04      	ble.n	8000d0a <countsDataBetweenFlags+0x5e>
		return end_index - start_index + 1;
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	3301      	adds	r3, #1
 8000d08:	e001      	b.n	8000d0e <countsDataBetweenFlags+0x62>
	} else {
		return -1; // Return -1 if two 0x7E flags are not found
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	371c      	adds	r7, #28
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr

08000d18 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d1e:	f002 fb27 	bl	8003370 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d22:	f000 fa6b 	bl	80011fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d26:	f7ff ff67 	bl	8000bf8 <MX_GPIO_Init>
	MX_DMA_Init();
 8000d2a:	f7ff fdc1 	bl	80008b0 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000d2e:	f002 f911 	bl	8002f54 <MX_USART2_UART_Init>
	MX_LPUART1_UART_Init();
 8000d32:	f002 f875 	bl	8002e20 <MX_LPUART1_UART_Init>
	MX_TIM2_Init();
 8000d36:	f001 ff3d 	bl	8002bb4 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8000d3a:	f002 f8bf 	bl	8002ebc <MX_USART1_UART_Init>
	MX_SubGHz_Phy_Init();
 8000d3e:	f00a fb30 	bl	800b3a2 <MX_SubGHz_Phy_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim2);
 8000d42:	487f      	ldr	r0, [pc, #508]	; (8000f40 <main+0x228>)
 8000d44:	f005 f9c6 	bl	80060d4 <HAL_TIM_Base_Start>

	myDebug("########## Slippers2Sat SATELLITE COM: BEGIN ##########\r\n");
 8000d48:	487e      	ldr	r0, [pc, #504]	; (8000f44 <main+0x22c>)
 8000d4a:	f7ff fd5f 	bl	800080c <myDebug>
	myDebug("########## COMMUNICATION PARAMETERS ##########\r\n");
 8000d4e:	487e      	ldr	r0, [pc, #504]	; (8000f48 <main+0x230>)
 8000d50:	f7ff fd5c 	bl	800080c <myDebug>
	myDebug("Modulation: GFSK PACKET\r\n");
 8000d54:	487d      	ldr	r0, [pc, #500]	; (8000f4c <main+0x234>)
 8000d56:	f7ff fd59 	bl	800080c <myDebug>
	myDebug("FREQUENCY MODES: DOWNLINK FREQ: %luHz and UPLINK FREQ: %lu Hz\r\n",
 8000d5a:	4a7d      	ldr	r2, [pc, #500]	; (8000f50 <main+0x238>)
 8000d5c:	497d      	ldr	r1, [pc, #500]	; (8000f54 <main+0x23c>)
 8000d5e:	487e      	ldr	r0, [pc, #504]	; (8000f58 <main+0x240>)
 8000d60:	f7ff fd54 	bl	800080c <myDebug>
	FREQ_437_MHZ, FREQ_435_MHZ);
	myDebug("STM32 BSP_SubGHz-WL Radio: Low Power\n");
 8000d64:	487d      	ldr	r0, [pc, #500]	; (8000f5c <main+0x244>)
 8000d66:	f7ff fd51 	bl	800080c <myDebug>
	myDebug(
 8000d6a:	230e      	movs	r3, #14
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	2301      	movs	r3, #1
 8000d70:	2200      	movs	r2, #0
 8000d72:	2104      	movs	r1, #4
 8000d74:	487a      	ldr	r0, [pc, #488]	; (8000f60 <main+0x248>)
 8000d76:	f7ff fd49 	bl	800080c <myDebug>
			"POWER CONFIG:::- \n"
					"\t PA_DUTY_CYCLE: %x, HP_MAX: %x, PA_SEL: %x, POWER TX: %u dBm\r\n",
			PA_DUTY_CYCLE, HP_MAX, PA_SEL, POWER);

	myDebug("\n########## Wait for Handshake ##########\r\n");
 8000d7a:	487a      	ldr	r0, [pc, #488]	; (8000f64 <main+0x24c>)
 8000d7c:	f7ff fd46 	bl	800080c <myDebug>

	pkt_params.PacketType = PACKET_TYPE_GFSK;
 8000d80:	4b79      	ldr	r3, [pc, #484]	; (8000f68 <main+0x250>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
	pkt_params.Params.Gfsk.PayloadLength = RX_BUFF_LENGTH;
 8000d86:	4b78      	ldr	r3, [pc, #480]	; (8000f68 <main+0x250>)
 8000d88:	2264      	movs	r2, #100	; 0x64
 8000d8a:	721a      	strb	r2, [r3, #8]
	pkt_params.Params.Gfsk.PreambleLength = 8; /*Convert byte into bit*/
 8000d8c:	4b76      	ldr	r3, [pc, #472]	; (8000f68 <main+0x250>)
 8000d8e:	2208      	movs	r2, #8
 8000d90:	805a      	strh	r2, [r3, #2]
	pkt_params.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8000d92:	4b75      	ldr	r3, [pc, #468]	; (8000f68 <main+0x250>)
 8000d94:	2204      	movs	r2, #4
 8000d96:	711a      	strb	r2, [r3, #4]
	pkt_params.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8000d98:	4b73      	ldr	r3, [pc, #460]	; (8000f68 <main+0x250>)
 8000d9a:	2218      	movs	r2, #24
 8000d9c:	715a      	strb	r2, [r3, #5]
	pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8000d9e:	4b72      	ldr	r3, [pc, #456]	; (8000f68 <main+0x250>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	719a      	strb	r2, [r3, #6]
	pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8000da4:	4b70      	ldr	r3, [pc, #448]	; (8000f68 <main+0x250>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	71da      	strb	r2, [r3, #7]
	pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8000daa:	4b6f      	ldr	r3, [pc, #444]	; (8000f68 <main+0x250>)
 8000dac:	22f2      	movs	r2, #242	; 0xf2
 8000dae:	725a      	strb	r2, [r3, #9]
	pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8000db0:	4b6d      	ldr	r3, [pc, #436]	; (8000f68 <main+0x250>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	729a      	strb	r2, [r3, #10]

	mod_params.PacketType = PACKET_TYPE_GFSK;
 8000db6:	4b6d      	ldr	r3, [pc, #436]	; (8000f6c <main+0x254>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]
	mod_params.Params.Gfsk.Bandwidth = RX_BW_29300; /*Not used in TX*/
 8000dbc:	4b6b      	ldr	r3, [pc, #428]	; (8000f6c <main+0x254>)
 8000dbe:	220d      	movs	r2, #13
 8000dc0:	735a      	strb	r2, [r3, #13]
	mod_params.Params.Gfsk.BitRate = DEMO_DEFAULT_BR_1200;
 8000dc2:	4b6a      	ldr	r3, [pc, #424]	; (8000f6c <main+0x254>)
 8000dc4:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000dc8:	605a      	str	r2, [r3, #4]
	mod_params.Params.Gfsk.Fdev = DEMO_DEFAULT_FDEV_1200;
 8000dca:	4b68      	ldr	r3, [pc, #416]	; (8000f6c <main+0x254>)
 8000dcc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000dd0:	609a      	str	r2, [r3, #8]
	mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8000dd2:	4b66      	ldr	r3, [pc, #408]	; (8000f6c <main+0x254>)
 8000dd4:	220b      	movs	r2, #11
 8000dd6:	731a      	strb	r2, [r3, #12]

	SUBGRF_Init(DioIrqHndlr);
 8000dd8:	4865      	ldr	r0, [pc, #404]	; (8000f70 <main+0x258>)
 8000dda:	f009 f899 	bl	8009f10 <SUBGRF_Init>
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8000dde:	2100      	movs	r1, #0
 8000de0:	2000      	movs	r0, #0
 8000de2:	f009 ff01 	bl	800abe8 <SUBGRF_SetBufferBaseAddress>
	SUBGRF_SetPacketParams(&pkt_params);
 8000de6:	4860      	ldr	r0, [pc, #384]	; (8000f68 <main+0x250>)
 8000de8:	f009 fe60 	bl	800aaac <SUBGRF_SetPacketParams>
	SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00,
 8000dec:	4a61      	ldr	r2, [pc, #388]	; (8000f74 <main+0x25c>)
 8000dee:	f107 030c 	add.w	r3, r7, #12
 8000df2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000df6:	e883 0003 	stmia.w	r3, {r0, r1}
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f009 f91d 	bl	800a03e <SUBGRF_SetSyncWord>
					0x00 });
	SUBGRF_SetWhiteningSeed(0x01FF);
 8000e04:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000e08:	f009 f968 	bl	800a0dc <SUBGRF_SetWhiteningSeed>
	SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 8000e0c:	4850      	ldr	r0, [pc, #320]	; (8000f50 <main+0x238>)
 8000e0e:	f009 fc41 	bl	800a694 <SUBGRF_SetRfFrequency>
	SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 8000e12:	2301      	movs	r3, #1
 8000e14:	2201      	movs	r2, #1
 8000e16:	2100      	movs	r1, #0
 8000e18:	2004      	movs	r0, #4
 8000e1a:	f009 fbbd 	bl	800a598 <SUBGRF_SetPaConfig>
	SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME); // Set to RFO_LP for low power
 8000e1e:	2202      	movs	r2, #2
 8000e20:	210e      	movs	r1, #14
 8000e22:	2001      	movs	r0, #1
 8000e24:	f009 fca2 	bl	800a76c <SUBGRF_SetTxParams>
	SUBGRF_SetModulationParams(&mod_params);
 8000e28:	4850      	ldr	r0, [pc, #320]	; (8000f6c <main+0x254>)
 8000e2a:	f009 fd6d 	bl	800a908 <SUBGRF_SetModulationParams>
	SUBGRF_SetDioIrqParams(
 8000e2e:	2300      	movs	r3, #0
 8000e30:	2200      	movs	r2, #0
 8000e32:	f240 210f 	movw	r1, #527	; 0x20f
 8000e36:	f240 200f 	movw	r0, #527	; 0x20f
 8000e3a:	f009 fbcf 	bl	800a5dc <SUBGRF_SetDioIrqParams>
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
			IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID, IRQ_RADIO_NONE,
			IRQ_RADIO_NONE);

	while (OBC_HANDSHAKE_FLAG == 0) {
 8000e3e:	e001      	b.n	8000e44 <main+0x12c>
		WAIT_FOR_HANDSHAKE();
 8000e40:	f001 fc26 	bl	8002690 <WAIT_FOR_HANDSHAKE>
	while (OBC_HANDSHAKE_FLAG == 0) {
 8000e44:	4b4c      	ldr	r3, [pc, #304]	; (8000f78 <main+0x260>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d0f9      	beq.n	8000e40 <main+0x128>
	}

	myDebug(
 8000e4c:	484b      	ldr	r0, [pc, #300]	; (8000f7c <main+0x264>)
 8000e4e:	f7ff fcdd 	bl	800080c <myDebug>
			"\n########## Operation Starts, Perform any one operation: ##########\r\n");
	myDebug("1. Transmit from Satellite\r\n");
 8000e52:	484b      	ldr	r0, [pc, #300]	; (8000f80 <main+0x268>)
 8000e54:	f7ff fcda 	bl	800080c <myDebug>
	myDebug("2. Wait to receive GS Command\r\n");
 8000e58:	484a      	ldr	r0, [pc, #296]	; (8000f84 <main+0x26c>)
 8000e5a:	f7ff fcd7 	bl	800080c <myDebug>

	myDebug("\n########## RX Configuration: ##########\n");
 8000e5e:	484a      	ldr	r0, [pc, #296]	; (8000f88 <main+0x270>)
 8000e60:	f7ff fcd4 	bl	800080c <myDebug>

	myDebug("FREQUENCY MODS: UPLINK FREQ: %lu Hz\r\n", FREQ_435_MHZ);
 8000e64:	493a      	ldr	r1, [pc, #232]	; (8000f50 <main+0x238>)
 8000e66:	4849      	ldr	r0, [pc, #292]	; (8000f8c <main+0x274>)
 8000e68:	f7ff fcd0 	bl	800080c <myDebug>
	myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 8000e6c:	4b3f      	ldr	r3, [pc, #252]	; (8000f6c <main+0x254>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	4619      	mov	r1, r3
 8000e72:	4847      	ldr	r0, [pc, #284]	; (8000f90 <main+0x278>)
 8000e74:	f7ff fcca 	bl	800080c <myDebug>
	myDebug("Frequency Deviation: 	%d\n\r", mod_params.Params.Gfsk.Fdev);
 8000e78:	4b3c      	ldr	r3, [pc, #240]	; (8000f6c <main+0x254>)
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4845      	ldr	r0, [pc, #276]	; (8000f94 <main+0x27c>)
 8000e80:	f7ff fcc4 	bl	800080c <myDebug>
	myDebug("RECEVING BANDWIDTH: 	%d\n\r", mod_params.Params.Gfsk.Bandwidth);
 8000e84:	4b39      	ldr	r3, [pc, #228]	; (8000f6c <main+0x254>)
 8000e86:	7b5b      	ldrb	r3, [r3, #13]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4843      	ldr	r0, [pc, #268]	; (8000f98 <main+0x280>)
 8000e8c:	f7ff fcbe 	bl	800080c <myDebug>
	myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8000e90:	4b35      	ldr	r3, [pc, #212]	; (8000f68 <main+0x250>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4619      	mov	r1, r3
 8000e96:	4841      	ldr	r0, [pc, #260]	; (8000f9c <main+0x284>)
 8000e98:	f7ff fcb8 	bl	800080c <myDebug>
	myDebug("PayloadLength 			%d\n\r", pkt_params.Params.Gfsk.PayloadLength);
 8000e9c:	4b32      	ldr	r3, [pc, #200]	; (8000f68 <main+0x250>)
 8000e9e:	7a1b      	ldrb	r3, [r3, #8]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	483f      	ldr	r0, [pc, #252]	; (8000fa0 <main+0x288>)
 8000ea4:	f7ff fcb2 	bl	800080c <myDebug>
	myDebug("PreambleLength 		%d\n\r", pkt_params.Params.Gfsk.PreambleLength);
 8000ea8:	4b2f      	ldr	r3, [pc, #188]	; (8000f68 <main+0x250>)
 8000eaa:	885b      	ldrh	r3, [r3, #2]
 8000eac:	4619      	mov	r1, r3
 8000eae:	483d      	ldr	r0, [pc, #244]	; (8000fa4 <main+0x28c>)
 8000eb0:	f7ff fcac 	bl	800080c <myDebug>
	myDebug("PreambleMinDetect		%d\n\r",
			pkt_params.Params.Gfsk.PreambleMinDetect);
 8000eb4:	4b2c      	ldr	r3, [pc, #176]	; (8000f68 <main+0x250>)
 8000eb6:	791b      	ldrb	r3, [r3, #4]
	myDebug("PreambleMinDetect		%d\n\r",
 8000eb8:	4619      	mov	r1, r3
 8000eba:	483b      	ldr	r0, [pc, #236]	; (8000fa8 <main+0x290>)
 8000ebc:	f7ff fca6 	bl	800080c <myDebug>
	myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 8000ec0:	4b29      	ldr	r3, [pc, #164]	; (8000f68 <main+0x250>)
 8000ec2:	79db      	ldrb	r3, [r3, #7]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4839      	ldr	r0, [pc, #228]	; (8000fac <main+0x294>)
 8000ec8:	f7ff fca0 	bl	800080c <myDebug>
	myDebug("__________*******************__________\r\n");
 8000ecc:	4838      	ldr	r0, [pc, #224]	; (8000fb0 <main+0x298>)
 8000ece:	f7ff fc9d 	bl	800080c <myDebug>

	SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 8000ed2:	481f      	ldr	r0, [pc, #124]	; (8000f50 <main+0x238>)
 8000ed4:	f009 fbde 	bl	800a694 <SUBGRF_SetRfFrequency>
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 8000ed8:	2100      	movs	r1, #0
 8000eda:	2001      	movs	r0, #1
 8000edc:	f00a f822 	bl	800af24 <SUBGRF_SetSwitch>
	SUBGRF_SetRxBoosted(0xFFFFFF);
 8000ee0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8000ee4:	f009 fa02 	bl	800a2ec <SUBGRF_SetRxBoosted>

	HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 8000ee8:	4b32      	ldr	r3, [pc, #200]	; (8000fb4 <main+0x29c>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4931      	ldr	r1, [pc, #196]	; (8000fb8 <main+0x2a0>)
 8000ef2:	4832      	ldr	r0, [pc, #200]	; (8000fbc <main+0x2a4>)
 8000ef4:	f005 fd10 	bl	8006918 <HAL_UART_Receive_DMA>

	HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 8000ef8:	4b2e      	ldr	r3, [pc, #184]	; (8000fb4 <main+0x29c>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	461a      	mov	r2, r3
 8000f00:	492d      	ldr	r1, [pc, #180]	; (8000fb8 <main+0x2a0>)
 8000f02:	482f      	ldr	r0, [pc, #188]	; (8000fc0 <main+0x2a8>)
 8000f04:	f005 fd08 	bl	8006918 <HAL_UART_Receive_DMA>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		delay_us(500000);
 8000f08:	482e      	ldr	r0, [pc, #184]	; (8000fc4 <main+0x2ac>)
 8000f0a:	f7ff fc65 	bl	80007d8 <delay_us>

		if (OBC_SUCCESS_DATA_RX_FLAG) {
 8000f0e:	4b2e      	ldr	r3, [pc, #184]	; (8000fc8 <main+0x2b0>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 813f 	beq.w	8001196 <main+0x47e>

			getAX25Packet(OBC_UART_RX, obc_ilen);
 8000f18:	4b2c      	ldr	r3, [pc, #176]	; (8000fcc <main+0x2b4>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4826      	ldr	r0, [pc, #152]	; (8000fb8 <main+0x2a0>)
 8000f20:	f7ff fbce 	bl	80006c0 <getAX25Packet>

			tx_buffer_len = countsDataBetweenFlags(temp_tx_buffer,
 8000f24:	2196      	movs	r1, #150	; 0x96
 8000f26:	482a      	ldr	r0, [pc, #168]	; (8000fd0 <main+0x2b8>)
 8000f28:	f7ff fec0 	bl	8000cac <countsDataBetweenFlags>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	4a29      	ldr	r2, [pc, #164]	; (8000fd4 <main+0x2bc>)
 8000f30:	6013      	str	r3, [r2, #0]
					sizeof(temp_tx_buffer));

			myDebug("AX.25 complete GS packet ready to TX: 0x%x\r\n",
 8000f32:	4927      	ldr	r1, [pc, #156]	; (8000fd0 <main+0x2b8>)
 8000f34:	4828      	ldr	r0, [pc, #160]	; (8000fd8 <main+0x2c0>)
 8000f36:	f7ff fc69 	bl	800080c <myDebug>
					temp_tx_buffer);
			for (int j = 0; j < tx_buffer_len; j++) {
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	e061      	b.n	8001004 <main+0x2ec>
 8000f40:	200004d0 	.word	0x200004d0
 8000f44:	0800c4e8 	.word	0x0800c4e8
 8000f48:	0800c524 	.word	0x0800c524
 8000f4c:	0800c558 	.word	0x0800c558
 8000f50:	19f25968 	.word	0x19f25968
 8000f54:	1a11d018 	.word	0x1a11d018
 8000f58:	0800c574 	.word	0x0800c574
 8000f5c:	0800c5b4 	.word	0x0800c5b4
 8000f60:	0800c5dc 	.word	0x0800c5dc
 8000f64:	0800c630 	.word	0x0800c630
 8000f68:	2000027c 	.word	0x2000027c
 8000f6c:	20000290 	.word	0x20000290
 8000f70:	08001781 	.word	0x08001781
 8000f74:	0800c8c8 	.word	0x0800c8c8
 8000f78:	200004a0 	.word	0x200004a0
 8000f7c:	0800c65c 	.word	0x0800c65c
 8000f80:	0800c6a4 	.word	0x0800c6a4
 8000f84:	0800c6c4 	.word	0x0800c6c4
 8000f88:	0800c6e4 	.word	0x0800c6e4
 8000f8c:	0800c710 	.word	0x0800c710
 8000f90:	0800c738 	.word	0x0800c738
 8000f94:	0800c748 	.word	0x0800c748
 8000f98:	0800c764 	.word	0x0800c764
 8000f9c:	0800c780 	.word	0x0800c780
 8000fa0:	0800c794 	.word	0x0800c794
 8000fa4:	0800c7ac 	.word	0x0800c7ac
 8000fa8:	0800c7c4 	.word	0x0800c7c4
 8000fac:	0800c7dc 	.word	0x0800c7dc
 8000fb0:	0800c7f0 	.word	0x0800c7f0
 8000fb4:	20000001 	.word	0x20000001
 8000fb8:	20000314 	.word	0x20000314
 8000fbc:	20000648 	.word	0x20000648
 8000fc0:	20000520 	.word	0x20000520
 8000fc4:	0007a120 	.word	0x0007a120
 8000fc8:	20000368 	.word	0x20000368
 8000fcc:	20000311 	.word	0x20000311
 8000fd0:	2000036c 	.word	0x2000036c
 8000fd4:	2000049c 	.word	0x2000049c
 8000fd8:	0800c81c 	.word	0x0800c81c
				tx_buffer[j] = temp_tx_buffer[j];
 8000fdc:	4a6f      	ldr	r2, [pc, #444]	; (800119c <main+0x484>)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	7819      	ldrb	r1, [r3, #0]
 8000fe4:	4a6e      	ldr	r2, [pc, #440]	; (80011a0 <main+0x488>)
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	4413      	add	r3, r2
 8000fea:	460a      	mov	r2, r1
 8000fec:	701a      	strb	r2, [r3, #0]
				myDebug("%02x ", tx_buffer[j]);
 8000fee:	4a6c      	ldr	r2, [pc, #432]	; (80011a0 <main+0x488>)
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	486a      	ldr	r0, [pc, #424]	; (80011a4 <main+0x48c>)
 8000ffa:	f7ff fc07 	bl	800080c <myDebug>
			for (int j = 0; j < tx_buffer_len; j++) {
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	3301      	adds	r3, #1
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	4b68      	ldr	r3, [pc, #416]	; (80011a8 <main+0x490>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	697a      	ldr	r2, [r7, #20]
 800100a:	429a      	cmp	r2, r3
 800100c:	dbe6      	blt.n	8000fdc <main+0x2c4>
			}
			myDebug("\r\n");
 800100e:	4867      	ldr	r0, [pc, #412]	; (80011ac <main+0x494>)
 8001010:	f7ff fbfc 	bl	800080c <myDebug>

			myDebug("size of tx_buffer = %d\r\n", tx_buffer_len);
 8001014:	4b64      	ldr	r3, [pc, #400]	; (80011a8 <main+0x490>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4619      	mov	r1, r3
 800101a:	4865      	ldr	r0, [pc, #404]	; (80011b0 <main+0x498>)
 800101c:	f7ff fbf6 	bl	800080c <myDebug>

			memset(OBC_UART_RX, '\0', obc_ilen);
 8001020:	4b64      	ldr	r3, [pc, #400]	; (80011b4 <main+0x49c>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	2100      	movs	r1, #0
 8001028:	4863      	ldr	r0, [pc, #396]	; (80011b8 <main+0x4a0>)
 800102a:	f00a fd79 	bl	800bb20 <memset>
			memset(temp_tx_buffer, '\0', sizeof(temp_tx_buffer));
 800102e:	2296      	movs	r2, #150	; 0x96
 8001030:	2100      	movs	r1, #0
 8001032:	485a      	ldr	r0, [pc, #360]	; (800119c <main+0x484>)
 8001034:	f00a fd74 	bl	800bb20 <memset>

			pkt_params.PacketType = PACKET_TYPE_GFSK;
 8001038:	4b60      	ldr	r3, [pc, #384]	; (80011bc <main+0x4a4>)
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
			pkt_params.Params.Gfsk.PayloadLength = tx_buffer_len;
 800103e:	4b5a      	ldr	r3, [pc, #360]	; (80011a8 <main+0x490>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	b2da      	uxtb	r2, r3
 8001044:	4b5d      	ldr	r3, [pc, #372]	; (80011bc <main+0x4a4>)
 8001046:	721a      	strb	r2, [r3, #8]
			pkt_params.Params.Gfsk.PreambleLength = 8; /*Convert byte into bit*/
 8001048:	4b5c      	ldr	r3, [pc, #368]	; (80011bc <main+0x4a4>)
 800104a:	2208      	movs	r2, #8
 800104c:	805a      	strh	r2, [r3, #2]
			pkt_params.Params.Gfsk.PreambleMinDetect =
 800104e:	4b5b      	ldr	r3, [pc, #364]	; (80011bc <main+0x4a4>)
 8001050:	2204      	movs	r2, #4
 8001052:	711a      	strb	r2, [r3, #4]
					RADIO_PREAMBLE_DETECTOR_08_BITS;
			pkt_params.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8001054:	4b59      	ldr	r3, [pc, #356]	; (80011bc <main+0x4a4>)
 8001056:	2218      	movs	r2, #24
 8001058:	715a      	strb	r2, [r3, #5]
			pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800105a:	4b58      	ldr	r3, [pc, #352]	; (80011bc <main+0x4a4>)
 800105c:	2200      	movs	r2, #0
 800105e:	719a      	strb	r2, [r3, #6]
			pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8001060:	4b56      	ldr	r3, [pc, #344]	; (80011bc <main+0x4a4>)
 8001062:	2200      	movs	r2, #0
 8001064:	71da      	strb	r2, [r3, #7]
			pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8001066:	4b55      	ldr	r3, [pc, #340]	; (80011bc <main+0x4a4>)
 8001068:	22f2      	movs	r2, #242	; 0xf2
 800106a:	725a      	strb	r2, [r3, #9]
			pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800106c:	4b53      	ldr	r3, [pc, #332]	; (80011bc <main+0x4a4>)
 800106e:	2201      	movs	r2, #1
 8001070:	729a      	strb	r2, [r3, #10]

			mod_params.PacketType = PACKET_TYPE_GFSK;
 8001072:	4b53      	ldr	r3, [pc, #332]	; (80011c0 <main+0x4a8>)
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]
			mod_params.Params.Gfsk.Bandwidth = RX_BW_29300; /*Not used in TX*/
 8001078:	4b51      	ldr	r3, [pc, #324]	; (80011c0 <main+0x4a8>)
 800107a:	220d      	movs	r2, #13
 800107c:	735a      	strb	r2, [r3, #13]
			mod_params.Params.Gfsk.BitRate = DEMO_DEFAULT_BR_4800;
 800107e:	4b50      	ldr	r3, [pc, #320]	; (80011c0 <main+0x4a8>)
 8001080:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8001084:	605a      	str	r2, [r3, #4]
			mod_params.Params.Gfsk.Fdev = DEMO_DEFAULT_FDEV_4800;
 8001086:	4b4e      	ldr	r3, [pc, #312]	; (80011c0 <main+0x4a8>)
 8001088:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800108c:	609a      	str	r2, [r3, #8]
			mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800108e:	4b4c      	ldr	r3, [pc, #304]	; (80011c0 <main+0x4a8>)
 8001090:	220b      	movs	r2, #11
 8001092:	731a      	strb	r2, [r3, #12]

			SUBGRF_Init(DioIrqHndlr);
 8001094:	484b      	ldr	r0, [pc, #300]	; (80011c4 <main+0x4ac>)
 8001096:	f008 ff3b 	bl	8009f10 <SUBGRF_Init>
			SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 800109a:	2100      	movs	r1, #0
 800109c:	2000      	movs	r0, #0
 800109e:	f009 fda3 	bl	800abe8 <SUBGRF_SetBufferBaseAddress>
			SUBGRF_SetPayload(tx_buffer, tx_buffer_len);
 80010a2:	4b41      	ldr	r3, [pc, #260]	; (80011a8 <main+0x490>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	4619      	mov	r1, r3
 80010aa:	483d      	ldr	r0, [pc, #244]	; (80011a0 <main+0x488>)
 80010ac:	f008 ff82 	bl	8009fb4 <SUBGRF_SetPayload>
			SUBGRF_SetPacketParams(&pkt_params);
 80010b0:	4842      	ldr	r0, [pc, #264]	; (80011bc <main+0x4a4>)
 80010b2:	f009 fcfb 	bl	800aaac <SUBGRF_SetPacketParams>
			SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00,
 80010b6:	4a44      	ldr	r2, [pc, #272]	; (80011c8 <main+0x4b0>)
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010be:	e883 0003 	stmia.w	r3, {r0, r1}
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	4618      	mov	r0, r3
 80010c6:	f008 ffba 	bl	800a03e <SUBGRF_SetSyncWord>
							0x00, 0x00, 0x00 });
			SUBGRF_SetWhiteningSeed(0x01FF);
 80010ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80010ce:	f009 f805 	bl	800a0dc <SUBGRF_SetWhiteningSeed>
			SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 80010d2:	483e      	ldr	r0, [pc, #248]	; (80011cc <main+0x4b4>)
 80010d4:	f009 fade 	bl	800a694 <SUBGRF_SetRfFrequency>
			SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 80010d8:	2301      	movs	r3, #1
 80010da:	2201      	movs	r2, #1
 80010dc:	2100      	movs	r1, #0
 80010de:	2004      	movs	r0, #4
 80010e0:	f009 fa5a 	bl	800a598 <SUBGRF_SetPaConfig>
			SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME); // Set to RFO_LP for low power
 80010e4:	2202      	movs	r2, #2
 80010e6:	210e      	movs	r1, #14
 80010e8:	2001      	movs	r0, #1
 80010ea:	f009 fb3f 	bl	800a76c <SUBGRF_SetTxParams>
			SUBGRF_SetModulationParams(&mod_params);
 80010ee:	4834      	ldr	r0, [pc, #208]	; (80011c0 <main+0x4a8>)
 80010f0:	f009 fc0a 	bl	800a908 <SUBGRF_SetModulationParams>
			SUBGRF_SetDioIrqParams(
 80010f4:	2300      	movs	r3, #0
 80010f6:	2200      	movs	r2, #0
 80010f8:	f240 210f 	movw	r1, #527	; 0x20f
 80010fc:	f240 200f 	movw	r0, #527	; 0x20f
 8001100:	f009 fa6c 	bl	800a5dc <SUBGRF_SetDioIrqParams>
							| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
					IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
							| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
					IRQ_RADIO_NONE, IRQ_RADIO_NONE);

			myDebug("\n########## TX Configuration: ##########\n");
 8001104:	4832      	ldr	r0, [pc, #200]	; (80011d0 <main+0x4b8>)
 8001106:	f7ff fb81 	bl	800080c <myDebug>

			myDebug("FREQUENCY MODS: DOWNLINK FREQ: %lu Hz\r\n", FREQ_437_MHZ);
 800110a:	4930      	ldr	r1, [pc, #192]	; (80011cc <main+0x4b4>)
 800110c:	4831      	ldr	r0, [pc, #196]	; (80011d4 <main+0x4bc>)
 800110e:	f7ff fb7d 	bl	800080c <myDebug>
			myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 8001112:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <main+0x4a8>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	4619      	mov	r1, r3
 8001118:	482f      	ldr	r0, [pc, #188]	; (80011d8 <main+0x4c0>)
 800111a:	f7ff fb77 	bl	800080c <myDebug>
			myDebug("Frequency Deviation: 	%d\n\r",
 800111e:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <main+0x4a8>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	4619      	mov	r1, r3
 8001124:	482d      	ldr	r0, [pc, #180]	; (80011dc <main+0x4c4>)
 8001126:	f7ff fb71 	bl	800080c <myDebug>
					mod_params.Params.Gfsk.Fdev);
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
					mod_params.Params.Gfsk.Bandwidth);
 800112a:	4b25      	ldr	r3, [pc, #148]	; (80011c0 <main+0x4a8>)
 800112c:	7b5b      	ldrb	r3, [r3, #13]
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 800112e:	4619      	mov	r1, r3
 8001130:	482b      	ldr	r0, [pc, #172]	; (80011e0 <main+0x4c8>)
 8001132:	f7ff fb6b 	bl	800080c <myDebug>
			myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8001136:	4b21      	ldr	r3, [pc, #132]	; (80011bc <main+0x4a4>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	4619      	mov	r1, r3
 800113c:	4829      	ldr	r0, [pc, #164]	; (80011e4 <main+0x4cc>)
 800113e:	f7ff fb65 	bl	800080c <myDebug>
			myDebug("PayloadLength 			%d\n\r",
					pkt_params.Params.Gfsk.PayloadLength);
 8001142:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <main+0x4a4>)
 8001144:	7a1b      	ldrb	r3, [r3, #8]
			myDebug("PayloadLength 			%d\n\r",
 8001146:	4619      	mov	r1, r3
 8001148:	4827      	ldr	r0, [pc, #156]	; (80011e8 <main+0x4d0>)
 800114a:	f7ff fb5f 	bl	800080c <myDebug>
			myDebug("PreambleLength 		%d\n\r",
					pkt_params.Params.Gfsk.PreambleLength);
 800114e:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <main+0x4a4>)
 8001150:	885b      	ldrh	r3, [r3, #2]
			myDebug("PreambleLength 		%d\n\r",
 8001152:	4619      	mov	r1, r3
 8001154:	4825      	ldr	r0, [pc, #148]	; (80011ec <main+0x4d4>)
 8001156:	f7ff fb59 	bl	800080c <myDebug>
			myDebug("PreambleMinDetect		%d\n\r",
					pkt_params.Params.Gfsk.PreambleMinDetect);
 800115a:	4b18      	ldr	r3, [pc, #96]	; (80011bc <main+0x4a4>)
 800115c:	791b      	ldrb	r3, [r3, #4]
			myDebug("PreambleMinDetect		%d\n\r",
 800115e:	4619      	mov	r1, r3
 8001160:	4823      	ldr	r0, [pc, #140]	; (80011f0 <main+0x4d8>)
 8001162:	f7ff fb53 	bl	800080c <myDebug>
			myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <main+0x4a4>)
 8001168:	79db      	ldrb	r3, [r3, #7]
 800116a:	4619      	mov	r1, r3
 800116c:	4821      	ldr	r0, [pc, #132]	; (80011f4 <main+0x4dc>)
 800116e:	f7ff fb4d 	bl	800080c <myDebug>
			myDebug("__________*******************__________\r\n");
 8001172:	4821      	ldr	r0, [pc, #132]	; (80011f8 <main+0x4e0>)
 8001174:	f7ff fb4a 	bl	800080c <myDebug>

			SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8001178:	4814      	ldr	r0, [pc, #80]	; (80011cc <main+0x4b4>)
 800117a:	f009 fa8b 	bl	800a694 <SUBGRF_SetRfFrequency>
			//SUBGRF_SetSwitch(RFO_HP, RFSWITCH_TX); /*Set RF switch*/
			SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX); /*Set RF switch*/
 800117e:	2101      	movs	r1, #1
 8001180:	2001      	movs	r0, #1
 8001182:	f009 fecf 	bl	800af24 <SUBGRF_SetSwitch>
			SUBGRF_SendPayload(tx_buffer, tx_buffer_len, 0);
 8001186:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <main+0x490>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2200      	movs	r2, #0
 800118e:	4619      	mov	r1, r3
 8001190:	4803      	ldr	r0, [pc, #12]	; (80011a0 <main+0x488>)
 8001192:	f008 ff41 	bl	800a018 <SUBGRF_SendPayload>
		}

		/* USER CODE END WHILE */
		MX_SubGHz_Phy_Process();
 8001196:	f00a f90c 	bl	800b3b2 <MX_SubGHz_Phy_Process>
		delay_us(500000);
 800119a:	e6b5      	b.n	8000f08 <main+0x1f0>
 800119c:	2000036c 	.word	0x2000036c
 80011a0:	20000404 	.word	0x20000404
 80011a4:	0800c84c 	.word	0x0800c84c
 80011a8:	2000049c 	.word	0x2000049c
 80011ac:	0800c854 	.word	0x0800c854
 80011b0:	0800c858 	.word	0x0800c858
 80011b4:	20000311 	.word	0x20000311
 80011b8:	20000314 	.word	0x20000314
 80011bc:	2000027c 	.word	0x2000027c
 80011c0:	20000290 	.word	0x20000290
 80011c4:	08001781 	.word	0x08001781
 80011c8:	0800c8c8 	.word	0x0800c8c8
 80011cc:	1a11d018 	.word	0x1a11d018
 80011d0:	0800c874 	.word	0x0800c874
 80011d4:	0800c8a0 	.word	0x0800c8a0
 80011d8:	0800c738 	.word	0x0800c738
 80011dc:	0800c748 	.word	0x0800c748
 80011e0:	0800c764 	.word	0x0800c764
 80011e4:	0800c780 	.word	0x0800c780
 80011e8:	0800c794 	.word	0x0800c794
 80011ec:	0800c7ac 	.word	0x0800c7ac
 80011f0:	0800c7c4 	.word	0x0800c7c4
 80011f4:	0800c7dc 	.word	0x0800c7dc
 80011f8:	0800c7f0 	.word	0x0800c7f0

080011fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b09a      	sub	sp, #104	; 0x68
 8001200:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001202:	f107 0320 	add.w	r3, r7, #32
 8001206:	2248      	movs	r2, #72	; 0x48
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f00a fc88 	bl	800bb20 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]
 800121e:	615a      	str	r2, [r3, #20]
 8001220:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001222:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <SystemClock_Config+0xbc>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800122a:	4a23      	ldr	r2, [pc, #140]	; (80012b8 <SystemClock_Config+0xbc>)
 800122c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <SystemClock_Config+0xbc>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	683b      	ldr	r3, [r7, #0]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800123e:	2301      	movs	r3, #1
 8001240:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8001242:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8001248:	2300      	movs	r3, #0
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800124c:	2302      	movs	r3, #2
 800124e:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001250:	2303      	movs	r3, #3
 8001252:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001254:	2310      	movs	r3, #16
 8001256:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 6;
 8001258:	2306      	movs	r3, #6
 800125a:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800125c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001260:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001262:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001266:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001268:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800126c:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	4618      	mov	r0, r3
 8001274:	f003 f9c0 	bl	80045f8 <HAL_RCC_OscConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0x86>
		Error_Handler();
 800127e:	f001 fa01 	bl	8002684 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3 | RCC_CLOCKTYPE_HCLK
 8001282:	234f      	movs	r3, #79	; 0x4f
 8001284:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001286:	2303      	movs	r3, #3
 8001288:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	2102      	movs	r1, #2
 800129e:	4618      	mov	r0, r3
 80012a0:	f003 fd2c 	bl	8004cfc <HAL_RCC_ClockConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <SystemClock_Config+0xb2>
		Error_Handler();
 80012aa:	f001 f9eb 	bl	8002684 <Error_Handler>
	}
}
 80012ae:	bf00      	nop
 80012b0:	3768      	adds	r7, #104	; 0x68
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	58000400 	.word	0x58000400

080012bc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	if (huart == &huart2 || huart == &hlpuart1 || huart == &huart1) {
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4aa6      	ldr	r2, [pc, #664]	; (8001560 <HAL_UART_RxCpltCallback+0x2a4>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d008      	beq.n	80012de <HAL_UART_RxCpltCallback+0x22>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4aa5      	ldr	r2, [pc, #660]	; (8001564 <HAL_UART_RxCpltCallback+0x2a8>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d004      	beq.n	80012de <HAL_UART_RxCpltCallback+0x22>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4aa4      	ldr	r2, [pc, #656]	; (8001568 <HAL_UART_RxCpltCallback+0x2ac>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	f040 8229 	bne.w	8001730 <HAL_UART_RxCpltCallback+0x474>

		if (OBC_HANDSHAKE_FLAG) {
 80012de:	4ba3      	ldr	r3, [pc, #652]	; (800156c <HAL_UART_RxCpltCallback+0x2b0>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 8224 	beq.w	8001730 <HAL_UART_RxCpltCallback+0x474>
			if (DIGIPEATER_STATUS == 1 && BEACON_COUNT == 0
 80012e8:	4ba1      	ldr	r3, [pc, #644]	; (8001570 <HAL_UART_RxCpltCallback+0x2b4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	f040 81ad 	bne.w	800164c <HAL_UART_RxCpltCallback+0x390>
 80012f2:	4ba0      	ldr	r3, [pc, #640]	; (8001574 <HAL_UART_RxCpltCallback+0x2b8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f040 81a8 	bne.w	800164c <HAL_UART_RxCpltCallback+0x390>
					&& DIGIPEATER_RX_FLAG == 1) {
 80012fc:	4b9e      	ldr	r3, [pc, #632]	; (8001578 <HAL_UART_RxCpltCallback+0x2bc>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b01      	cmp	r3, #1
 8001302:	f040 81a3 	bne.w	800164c <HAL_UART_RxCpltCallback+0x390>
				OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001306:	4b9d      	ldr	r3, [pc, #628]	; (800157c <HAL_UART_RxCpltCallback+0x2c0>)
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]

				myDebug("\n--> Digipeater Data Received from OBC: 0x%x\r\n",
 800130c:	499c      	ldr	r1, [pc, #624]	; (8001580 <HAL_UART_RxCpltCallback+0x2c4>)
 800130e:	489d      	ldr	r0, [pc, #628]	; (8001584 <HAL_UART_RxCpltCallback+0x2c8>)
 8001310:	f7ff fa7c 	bl	800080c <myDebug>
						OBC_UART_RX);
				for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
 8001318:	e00a      	b.n	8001330 <HAL_UART_RxCpltCallback+0x74>
					myDebug("%02x ", OBC_UART_RX[i]);
 800131a:	4a99      	ldr	r2, [pc, #612]	; (8001580 <HAL_UART_RxCpltCallback+0x2c4>)
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	4413      	add	r3, r2
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	4619      	mov	r1, r3
 8001324:	4898      	ldr	r0, [pc, #608]	; (8001588 <HAL_UART_RxCpltCallback+0x2cc>)
 8001326:	f7ff fa71 	bl	800080c <myDebug>
				for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3301      	adds	r3, #1
 800132e:	61fb      	str	r3, [r7, #28]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	2b53      	cmp	r3, #83	; 0x53
 8001334:	d9f1      	bls.n	800131a <HAL_UART_RxCpltCallback+0x5e>
				}
				myDebug("\r\n");
 8001336:	4895      	ldr	r0, [pc, #596]	; (800158c <HAL_UART_RxCpltCallback+0x2d0>)
 8001338:	f7ff fa68 	bl	800080c <myDebug>

				if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 800133c:	4b90      	ldr	r3, [pc, #576]	; (8001580 <HAL_UART_RxCpltCallback+0x2c4>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b53      	cmp	r3, #83	; 0x53
 8001342:	f040 8159 	bne.w	80015f8 <HAL_UART_RxCpltCallback+0x33c>
 8001346:	4b8e      	ldr	r3, [pc, #568]	; (8001580 <HAL_UART_RxCpltCallback+0x2c4>)
 8001348:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800134c:	2b7e      	cmp	r3, #126	; 0x7e
 800134e:	f040 8153 	bne.w	80015f8 <HAL_UART_RxCpltCallback+0x33c>
					myDebug("--> Correct Digipeater Data received from OBC\n");
 8001352:	488f      	ldr	r0, [pc, #572]	; (8001590 <HAL_UART_RxCpltCallback+0x2d4>)
 8001354:	f7ff fa5a 	bl	800080c <myDebug>
					obc_ilen = OBC_UART_RX[2];  //len of info
 8001358:	4b89      	ldr	r3, [pc, #548]	; (8001580 <HAL_UART_RxCpltCallback+0x2c4>)
 800135a:	789a      	ldrb	r2, [r3, #2]
 800135c:	4b8d      	ldr	r3, [pc, #564]	; (8001594 <HAL_UART_RxCpltCallback+0x2d8>)
 800135e:	701a      	strb	r2, [r3, #0]
					PACKET_TYPE = OBC_UART_RX[1]; //packet_type
 8001360:	4b87      	ldr	r3, [pc, #540]	; (8001580 <HAL_UART_RxCpltCallback+0x2c4>)
 8001362:	785a      	ldrb	r2, [r3, #1]
 8001364:	4b8c      	ldr	r3, [pc, #560]	; (8001598 <HAL_UART_RxCpltCallback+0x2dc>)
 8001366:	701a      	strb	r2, [r3, #0]
					DIGIPEATER_FLAG = 1;
 8001368:	4b8c      	ldr	r3, [pc, #560]	; (800159c <HAL_UART_RxCpltCallback+0x2e0>)
 800136a:	2201      	movs	r2, #1
 800136c:	601a      	str	r2, [r3, #0]

					getAX25Packet(OBC_UART_RX, obc_ilen);
 800136e:	4b89      	ldr	r3, [pc, #548]	; (8001594 <HAL_UART_RxCpltCallback+0x2d8>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	4619      	mov	r1, r3
 8001374:	4882      	ldr	r0, [pc, #520]	; (8001580 <HAL_UART_RxCpltCallback+0x2c4>)
 8001376:	f7ff f9a3 	bl	80006c0 <getAX25Packet>

					tx_buffer_len = countsDataBetweenFlags(temp_tx_buffer,
 800137a:	2196      	movs	r1, #150	; 0x96
 800137c:	4888      	ldr	r0, [pc, #544]	; (80015a0 <HAL_UART_RxCpltCallback+0x2e4>)
 800137e:	f7ff fc95 	bl	8000cac <countsDataBetweenFlags>
 8001382:	4603      	mov	r3, r0
 8001384:	4a87      	ldr	r2, [pc, #540]	; (80015a4 <HAL_UART_RxCpltCallback+0x2e8>)
 8001386:	6013      	str	r3, [r2, #0]
							sizeof(temp_tx_buffer));

					myDebug("Digipeater Packet complete, ready to TX: 0x%x\r\n",
 8001388:	4985      	ldr	r1, [pc, #532]	; (80015a0 <HAL_UART_RxCpltCallback+0x2e4>)
 800138a:	4887      	ldr	r0, [pc, #540]	; (80015a8 <HAL_UART_RxCpltCallback+0x2ec>)
 800138c:	f7ff fa3e 	bl	800080c <myDebug>
							temp_tx_buffer);
					for (int j = 0; j < tx_buffer_len; j++) {
 8001390:	2300      	movs	r3, #0
 8001392:	61bb      	str	r3, [r7, #24]
 8001394:	e013      	b.n	80013be <HAL_UART_RxCpltCallback+0x102>
						tx_buffer[j] = temp_tx_buffer[j];
 8001396:	4a82      	ldr	r2, [pc, #520]	; (80015a0 <HAL_UART_RxCpltCallback+0x2e4>)
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	4413      	add	r3, r2
 800139c:	7819      	ldrb	r1, [r3, #0]
 800139e:	4a83      	ldr	r2, [pc, #524]	; (80015ac <HAL_UART_RxCpltCallback+0x2f0>)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	4413      	add	r3, r2
 80013a4:	460a      	mov	r2, r1
 80013a6:	701a      	strb	r2, [r3, #0]
						myDebug("%02x ", tx_buffer[j]);
 80013a8:	4a80      	ldr	r2, [pc, #512]	; (80015ac <HAL_UART_RxCpltCallback+0x2f0>)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	4413      	add	r3, r2
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	4875      	ldr	r0, [pc, #468]	; (8001588 <HAL_UART_RxCpltCallback+0x2cc>)
 80013b4:	f7ff fa2a 	bl	800080c <myDebug>
					for (int j = 0; j < tx_buffer_len; j++) {
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	3301      	adds	r3, #1
 80013bc:	61bb      	str	r3, [r7, #24]
 80013be:	4b79      	ldr	r3, [pc, #484]	; (80015a4 <HAL_UART_RxCpltCallback+0x2e8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	dbe6      	blt.n	8001396 <HAL_UART_RxCpltCallback+0xda>
					}
					myDebug("\r\n");
 80013c8:	4870      	ldr	r0, [pc, #448]	; (800158c <HAL_UART_RxCpltCallback+0x2d0>)
 80013ca:	f7ff fa1f 	bl	800080c <myDebug>

					myDebug("size of tx_buffer = %d\r\n", tx_buffer_len);
 80013ce:	4b75      	ldr	r3, [pc, #468]	; (80015a4 <HAL_UART_RxCpltCallback+0x2e8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4619      	mov	r1, r3
 80013d4:	4876      	ldr	r0, [pc, #472]	; (80015b0 <HAL_UART_RxCpltCallback+0x2f4>)
 80013d6:	f7ff fa19 	bl	800080c <myDebug>

					memset(OBC_UART_RX, '\0', obc_ilen);
 80013da:	4b6e      	ldr	r3, [pc, #440]	; (8001594 <HAL_UART_RxCpltCallback+0x2d8>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	2100      	movs	r1, #0
 80013e2:	4867      	ldr	r0, [pc, #412]	; (8001580 <HAL_UART_RxCpltCallback+0x2c4>)
 80013e4:	f00a fb9c 	bl	800bb20 <memset>
					memset(temp_tx_buffer, '\0', sizeof(temp_tx_buffer));
 80013e8:	2296      	movs	r2, #150	; 0x96
 80013ea:	2100      	movs	r1, #0
 80013ec:	486c      	ldr	r0, [pc, #432]	; (80015a0 <HAL_UART_RxCpltCallback+0x2e4>)
 80013ee:	f00a fb97 	bl	800bb20 <memset>

					delay_us(500000);
 80013f2:	4870      	ldr	r0, [pc, #448]	; (80015b4 <HAL_UART_RxCpltCallback+0x2f8>)
 80013f4:	f7ff f9f0 	bl	80007d8 <delay_us>

					pkt_params.PacketType = PACKET_TYPE_GFSK;
 80013f8:	4b6f      	ldr	r3, [pc, #444]	; (80015b8 <HAL_UART_RxCpltCallback+0x2fc>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]
					pkt_params.Params.Gfsk.PayloadLength = tx_buffer_len;
 80013fe:	4b69      	ldr	r3, [pc, #420]	; (80015a4 <HAL_UART_RxCpltCallback+0x2e8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	b2da      	uxtb	r2, r3
 8001404:	4b6c      	ldr	r3, [pc, #432]	; (80015b8 <HAL_UART_RxCpltCallback+0x2fc>)
 8001406:	721a      	strb	r2, [r3, #8]
					pkt_params.Params.Gfsk.PreambleLength = 8; /*Convert byte into bit*/
 8001408:	4b6b      	ldr	r3, [pc, #428]	; (80015b8 <HAL_UART_RxCpltCallback+0x2fc>)
 800140a:	2208      	movs	r2, #8
 800140c:	805a      	strh	r2, [r3, #2]
					pkt_params.Params.Gfsk.PreambleMinDetect =
 800140e:	4b6a      	ldr	r3, [pc, #424]	; (80015b8 <HAL_UART_RxCpltCallback+0x2fc>)
 8001410:	2204      	movs	r2, #4
 8001412:	711a      	strb	r2, [r3, #4]
							RADIO_PREAMBLE_DETECTOR_08_BITS;
					pkt_params.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8001414:	4b68      	ldr	r3, [pc, #416]	; (80015b8 <HAL_UART_RxCpltCallback+0x2fc>)
 8001416:	2218      	movs	r2, #24
 8001418:	715a      	strb	r2, [r3, #5]
					pkt_params.Params.Gfsk.AddrComp =
 800141a:	4b67      	ldr	r3, [pc, #412]	; (80015b8 <HAL_UART_RxCpltCallback+0x2fc>)
 800141c:	2200      	movs	r2, #0
 800141e:	719a      	strb	r2, [r3, #6]
							RADIO_ADDRESSCOMP_FILT_OFF;
					pkt_params.Params.Gfsk.HeaderType =
 8001420:	4b65      	ldr	r3, [pc, #404]	; (80015b8 <HAL_UART_RxCpltCallback+0x2fc>)
 8001422:	2200      	movs	r2, #0
 8001424:	71da      	strb	r2, [r3, #7]
							RADIO_PACKET_FIXED_LENGTH;
					pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8001426:	4b64      	ldr	r3, [pc, #400]	; (80015b8 <HAL_UART_RxCpltCallback+0x2fc>)
 8001428:	22f2      	movs	r2, #242	; 0xf2
 800142a:	725a      	strb	r2, [r3, #9]
					pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800142c:	4b62      	ldr	r3, [pc, #392]	; (80015b8 <HAL_UART_RxCpltCallback+0x2fc>)
 800142e:	2201      	movs	r2, #1
 8001430:	729a      	strb	r2, [r3, #10]

					mod_params.PacketType = PACKET_TYPE_GFSK;
 8001432:	4b62      	ldr	r3, [pc, #392]	; (80015bc <HAL_UART_RxCpltCallback+0x300>)
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]
					mod_params.Params.Gfsk.Bandwidth = RX_BW_29300; /*Not used in TX*/
 8001438:	4b60      	ldr	r3, [pc, #384]	; (80015bc <HAL_UART_RxCpltCallback+0x300>)
 800143a:	220d      	movs	r2, #13
 800143c:	735a      	strb	r2, [r3, #13]
					mod_params.Params.Gfsk.BitRate = DEMO_DEFAULT_BR_1200;
 800143e:	4b5f      	ldr	r3, [pc, #380]	; (80015bc <HAL_UART_RxCpltCallback+0x300>)
 8001440:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001444:	605a      	str	r2, [r3, #4]
					mod_params.Params.Gfsk.Fdev = DEMO_DEFAULT_FDEV_1200;
 8001446:	4b5d      	ldr	r3, [pc, #372]	; (80015bc <HAL_UART_RxCpltCallback+0x300>)
 8001448:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800144c:	609a      	str	r2, [r3, #8]
					mod_params.Params.Gfsk.ModulationShaping =
 800144e:	4b5b      	ldr	r3, [pc, #364]	; (80015bc <HAL_UART_RxCpltCallback+0x300>)
 8001450:	220b      	movs	r2, #11
 8001452:	731a      	strb	r2, [r3, #12]
							MOD_SHAPING_G_BT_1;

					SUBGRF_Init(DioIrqHndlr);
 8001454:	485a      	ldr	r0, [pc, #360]	; (80015c0 <HAL_UART_RxCpltCallback+0x304>)
 8001456:	f008 fd5b 	bl	8009f10 <SUBGRF_Init>
					SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 800145a:	2100      	movs	r1, #0
 800145c:	2000      	movs	r0, #0
 800145e:	f009 fbc3 	bl	800abe8 <SUBGRF_SetBufferBaseAddress>
					SUBGRF_SetPayload(tx_buffer, tx_buffer_len);
 8001462:	4b50      	ldr	r3, [pc, #320]	; (80015a4 <HAL_UART_RxCpltCallback+0x2e8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	4619      	mov	r1, r3
 800146a:	4850      	ldr	r0, [pc, #320]	; (80015ac <HAL_UART_RxCpltCallback+0x2f0>)
 800146c:	f008 fda2 	bl	8009fb4 <SUBGRF_SetPayload>
					SUBGRF_SetPacketParams(&pkt_params);
 8001470:	4851      	ldr	r0, [pc, #324]	; (80015b8 <HAL_UART_RxCpltCallback+0x2fc>)
 8001472:	f009 fb1b 	bl	800aaac <SUBGRF_SetPacketParams>
					SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00,
 8001476:	4a53      	ldr	r2, [pc, #332]	; (80015c4 <HAL_UART_RxCpltCallback+0x308>)
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001480:	e883 0003 	stmia.w	r3, {r0, r1}
 8001484:	f107 030c 	add.w	r3, r7, #12
 8001488:	4618      	mov	r0, r3
 800148a:	f008 fdd8 	bl	800a03e <SUBGRF_SetSyncWord>
									0x00, 0x00, 0x00, 0x00 });
					SUBGRF_SetWhiteningSeed(0x01FF);
 800148e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001492:	f008 fe23 	bl	800a0dc <SUBGRF_SetWhiteningSeed>
					SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8001496:	484c      	ldr	r0, [pc, #304]	; (80015c8 <HAL_UART_RxCpltCallback+0x30c>)
 8001498:	f009 f8fc 	bl	800a694 <SUBGRF_SetRfFrequency>
					SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 800149c:	2301      	movs	r3, #1
 800149e:	2201      	movs	r2, #1
 80014a0:	2100      	movs	r1, #0
 80014a2:	2004      	movs	r0, #4
 80014a4:	f009 f878 	bl	800a598 <SUBGRF_SetPaConfig>
					SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME); // Set to RFO_LP for low power
 80014a8:	2202      	movs	r2, #2
 80014aa:	210e      	movs	r1, #14
 80014ac:	2001      	movs	r0, #1
 80014ae:	f009 f95d 	bl	800a76c <SUBGRF_SetTxParams>
					SUBGRF_SetModulationParams(&mod_params);
 80014b2:	4842      	ldr	r0, [pc, #264]	; (80015bc <HAL_UART_RxCpltCallback+0x300>)
 80014b4:	f009 fa28 	bl	800a908 <SUBGRF_SetModulationParams>
					SUBGRF_SetDioIrqParams(
 80014b8:	2300      	movs	r3, #0
 80014ba:	2200      	movs	r2, #0
 80014bc:	f240 210f 	movw	r1, #527	; 0x20f
 80014c0:	f240 200f 	movw	r0, #527	; 0x20f
 80014c4:	f009 f88a 	bl	800a5dc <SUBGRF_SetDioIrqParams>
									| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
							IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
									| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
							IRQ_RADIO_NONE, IRQ_RADIO_NONE);

					myDebug("\n########## TX Configuration: ##########\n");
 80014c8:	4840      	ldr	r0, [pc, #256]	; (80015cc <HAL_UART_RxCpltCallback+0x310>)
 80014ca:	f7ff f99f 	bl	800080c <myDebug>

					myDebug("FREQUENCY MODS: DOWNLINK FREQ: %lu Hz\r\n",
 80014ce:	493e      	ldr	r1, [pc, #248]	; (80015c8 <HAL_UART_RxCpltCallback+0x30c>)
 80014d0:	483f      	ldr	r0, [pc, #252]	; (80015d0 <HAL_UART_RxCpltCallback+0x314>)
 80014d2:	f7ff f99b 	bl	800080c <myDebug>
					FREQ_437_MHZ);
					myDebug("Bit Rate: 	%d\n\r",
 80014d6:	4b39      	ldr	r3, [pc, #228]	; (80015bc <HAL_UART_RxCpltCallback+0x300>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	4619      	mov	r1, r3
 80014dc:	483d      	ldr	r0, [pc, #244]	; (80015d4 <HAL_UART_RxCpltCallback+0x318>)
 80014de:	f7ff f995 	bl	800080c <myDebug>
							mod_params.Params.Gfsk.BitRate);
					myDebug("Frequency Deviation: 	%d\n\r",
 80014e2:	4b36      	ldr	r3, [pc, #216]	; (80015bc <HAL_UART_RxCpltCallback+0x300>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	4619      	mov	r1, r3
 80014e8:	483b      	ldr	r0, [pc, #236]	; (80015d8 <HAL_UART_RxCpltCallback+0x31c>)
 80014ea:	f7ff f98f 	bl	800080c <myDebug>
							mod_params.Params.Gfsk.Fdev);
					myDebug("RECEVING BANDWIDTH: 	%d\n\r",
							mod_params.Params.Gfsk.Bandwidth);
 80014ee:	4b33      	ldr	r3, [pc, #204]	; (80015bc <HAL_UART_RxCpltCallback+0x300>)
 80014f0:	7b5b      	ldrb	r3, [r3, #13]
					myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 80014f2:	4619      	mov	r1, r3
 80014f4:	4839      	ldr	r0, [pc, #228]	; (80015dc <HAL_UART_RxCpltCallback+0x320>)
 80014f6:	f7ff f989 	bl	800080c <myDebug>
					myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 80014fa:	4b2f      	ldr	r3, [pc, #188]	; (80015b8 <HAL_UART_RxCpltCallback+0x2fc>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	4619      	mov	r1, r3
 8001500:	4837      	ldr	r0, [pc, #220]	; (80015e0 <HAL_UART_RxCpltCallback+0x324>)
 8001502:	f7ff f983 	bl	800080c <myDebug>
					myDebug("PayloadLength 			%d\n\r",
							pkt_params.Params.Gfsk.PayloadLength);
 8001506:	4b2c      	ldr	r3, [pc, #176]	; (80015b8 <HAL_UART_RxCpltCallback+0x2fc>)
 8001508:	7a1b      	ldrb	r3, [r3, #8]
					myDebug("PayloadLength 			%d\n\r",
 800150a:	4619      	mov	r1, r3
 800150c:	4835      	ldr	r0, [pc, #212]	; (80015e4 <HAL_UART_RxCpltCallback+0x328>)
 800150e:	f7ff f97d 	bl	800080c <myDebug>
					myDebug("PreambleLength 		%d\n\r",
							pkt_params.Params.Gfsk.PreambleLength);
 8001512:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <HAL_UART_RxCpltCallback+0x2fc>)
 8001514:	885b      	ldrh	r3, [r3, #2]
					myDebug("PreambleLength 		%d\n\r",
 8001516:	4619      	mov	r1, r3
 8001518:	4833      	ldr	r0, [pc, #204]	; (80015e8 <HAL_UART_RxCpltCallback+0x32c>)
 800151a:	f7ff f977 	bl	800080c <myDebug>
					myDebug("PreambleMinDetect		%d\n\r",
							pkt_params.Params.Gfsk.PreambleMinDetect);
 800151e:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <HAL_UART_RxCpltCallback+0x2fc>)
 8001520:	791b      	ldrb	r3, [r3, #4]
					myDebug("PreambleMinDetect		%d\n\r",
 8001522:	4619      	mov	r1, r3
 8001524:	4831      	ldr	r0, [pc, #196]	; (80015ec <HAL_UART_RxCpltCallback+0x330>)
 8001526:	f7ff f971 	bl	800080c <myDebug>
					myDebug("HeaderType 			%d\n\r",
							pkt_params.Params.Gfsk.HeaderType);
 800152a:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <HAL_UART_RxCpltCallback+0x2fc>)
 800152c:	79db      	ldrb	r3, [r3, #7]
					myDebug("HeaderType 			%d\n\r",
 800152e:	4619      	mov	r1, r3
 8001530:	482f      	ldr	r0, [pc, #188]	; (80015f0 <HAL_UART_RxCpltCallback+0x334>)
 8001532:	f7ff f96b 	bl	800080c <myDebug>
					myDebug("__________*******************__________\r\n");
 8001536:	482f      	ldr	r0, [pc, #188]	; (80015f4 <HAL_UART_RxCpltCallback+0x338>)
 8001538:	f7ff f968 	bl	800080c <myDebug>

					SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 800153c:	4822      	ldr	r0, [pc, #136]	; (80015c8 <HAL_UART_RxCpltCallback+0x30c>)
 800153e:	f009 f8a9 	bl	800a694 <SUBGRF_SetRfFrequency>
					//SUBGRF_SetSwitch(RFO_HP, RFSWITCH_TX); /*Set RF switch*/
					SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX); /*Set RF switch*/
 8001542:	2101      	movs	r1, #1
 8001544:	2001      	movs	r0, #1
 8001546:	f009 fced 	bl	800af24 <SUBGRF_SetSwitch>
					SUBGRF_SendPayload(tx_buffer, tx_buffer_len, 0);
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <HAL_UART_RxCpltCallback+0x2e8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2200      	movs	r2, #0
 8001552:	4619      	mov	r1, r3
 8001554:	4815      	ldr	r0, [pc, #84]	; (80015ac <HAL_UART_RxCpltCallback+0x2f0>)
 8001556:	f008 fd5f 	bl	800a018 <SUBGRF_SendPayload>
				if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 800155a:	bf00      	nop
 800155c:	e0d7      	b.n	800170e <HAL_UART_RxCpltCallback+0x452>
 800155e:	bf00      	nop
 8001560:	20000648 	.word	0x20000648
 8001564:	20000520 	.word	0x20000520
 8001568:	200005b4 	.word	0x200005b4
 800156c:	200004a0 	.word	0x200004a0
 8001570:	200004a4 	.word	0x200004a4
 8001574:	20000004 	.word	0x20000004
 8001578:	200004b0 	.word	0x200004b0
 800157c:	20000368 	.word	0x20000368
 8001580:	20000314 	.word	0x20000314
 8001584:	0800c8d0 	.word	0x0800c8d0
 8001588:	0800c84c 	.word	0x0800c84c
 800158c:	0800c854 	.word	0x0800c854
 8001590:	0800c900 	.word	0x0800c900
 8001594:	20000311 	.word	0x20000311
 8001598:	200004a8 	.word	0x200004a8
 800159c:	200004ac 	.word	0x200004ac
 80015a0:	2000036c 	.word	0x2000036c
 80015a4:	2000049c 	.word	0x2000049c
 80015a8:	0800c930 	.word	0x0800c930
 80015ac:	20000404 	.word	0x20000404
 80015b0:	0800c858 	.word	0x0800c858
 80015b4:	0007a120 	.word	0x0007a120
 80015b8:	2000027c 	.word	0x2000027c
 80015bc:	20000290 	.word	0x20000290
 80015c0:	08001781 	.word	0x08001781
 80015c4:	0800c8c8 	.word	0x0800c8c8
 80015c8:	1a11d018 	.word	0x1a11d018
 80015cc:	0800c874 	.word	0x0800c874
 80015d0:	0800c8a0 	.word	0x0800c8a0
 80015d4:	0800c738 	.word	0x0800c738
 80015d8:	0800c748 	.word	0x0800c748
 80015dc:	0800c764 	.word	0x0800c764
 80015e0:	0800c780 	.word	0x0800c780
 80015e4:	0800c794 	.word	0x0800c794
 80015e8:	0800c7ac 	.word	0x0800c7ac
 80015ec:	0800c7c4 	.word	0x0800c7c4
 80015f0:	0800c7dc 	.word	0x0800c7dc
 80015f4:	0800c7f0 	.word	0x0800c7f0

				} else {
					myDebug(
 80015f8:	484f      	ldr	r0, [pc, #316]	; (8001738 <HAL_UART_RxCpltCallback+0x47c>)
 80015fa:	f7ff f907 	bl	800080c <myDebug>
							"*** Incorrect Digipeater Data received from OBC\n");
					if (HAL_UART_Transmit(&huart2, OBC_UART_RX, obc_plen, 2000)
 80015fe:	4b4f      	ldr	r3, [pc, #316]	; (800173c <HAL_UART_RxCpltCallback+0x480>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	b29a      	uxth	r2, r3
 8001604:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001608:	494d      	ldr	r1, [pc, #308]	; (8001740 <HAL_UART_RxCpltCallback+0x484>)
 800160a:	484e      	ldr	r0, [pc, #312]	; (8001744 <HAL_UART_RxCpltCallback+0x488>)
 800160c:	f005 f839 	bl	8006682 <HAL_UART_Transmit>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00b      	beq.n	800162e <HAL_UART_RxCpltCallback+0x372>
							== HAL_OK
							|| HAL_UART_Transmit(&hlpuart1, OBC_UART_RX,
 8001616:	4b49      	ldr	r3, [pc, #292]	; (800173c <HAL_UART_RxCpltCallback+0x480>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	b29a      	uxth	r2, r3
 800161c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001620:	4947      	ldr	r1, [pc, #284]	; (8001740 <HAL_UART_RxCpltCallback+0x484>)
 8001622:	4849      	ldr	r0, [pc, #292]	; (8001748 <HAL_UART_RxCpltCallback+0x48c>)
 8001624:	f005 f82d 	bl	8006682 <HAL_UART_Transmit>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d16f      	bne.n	800170e <HAL_UART_RxCpltCallback+0x452>
									obc_plen, 2000) == HAL_OK) {
						myDebug(
 800162e:	4847      	ldr	r0, [pc, #284]	; (800174c <HAL_UART_RxCpltCallback+0x490>)
 8001630:	f7ff f8ec 	bl	800080c <myDebug>
								"*** Incorrect Digipeater Data re-transmit to OBC\n");
						memset(OBC_UART_RX, '\0', sizeof(OBC_UART_RX));
 8001634:	2254      	movs	r2, #84	; 0x54
 8001636:	2100      	movs	r1, #0
 8001638:	4841      	ldr	r0, [pc, #260]	; (8001740 <HAL_UART_RxCpltCallback+0x484>)
 800163a:	f00a fa71 	bl	800bb20 <memset>
						OBC_SUCCESS_DATA_RX_FLAG = 0;
 800163e:	4b44      	ldr	r3, [pc, #272]	; (8001750 <HAL_UART_RxCpltCallback+0x494>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
						DIGIPEATER_FLAG = 0;
 8001644:	4b43      	ldr	r3, [pc, #268]	; (8001754 <HAL_UART_RxCpltCallback+0x498>)
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
				if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 800164a:	e060      	b.n	800170e <HAL_UART_RxCpltCallback+0x452>
					}
				}

			} else {
				myDebug("\n--> Command Received from OBC: 0x%x\r\n",
 800164c:	493c      	ldr	r1, [pc, #240]	; (8001740 <HAL_UART_RxCpltCallback+0x484>)
 800164e:	4842      	ldr	r0, [pc, #264]	; (8001758 <HAL_UART_RxCpltCallback+0x49c>)
 8001650:	f7ff f8dc 	bl	800080c <myDebug>
						OBC_UART_RX);
				for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	e00a      	b.n	8001670 <HAL_UART_RxCpltCallback+0x3b4>
					myDebug("%02x ", OBC_UART_RX[i]);
 800165a:	4a39      	ldr	r2, [pc, #228]	; (8001740 <HAL_UART_RxCpltCallback+0x484>)
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	4413      	add	r3, r2
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	4619      	mov	r1, r3
 8001664:	483d      	ldr	r0, [pc, #244]	; (800175c <HAL_UART_RxCpltCallback+0x4a0>)
 8001666:	f7ff f8d1 	bl	800080c <myDebug>
				for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3301      	adds	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	2b53      	cmp	r3, #83	; 0x53
 8001674:	d9f1      	bls.n	800165a <HAL_UART_RxCpltCallback+0x39e>
				}
				myDebug("\r\n");
 8001676:	483a      	ldr	r0, [pc, #232]	; (8001760 <HAL_UART_RxCpltCallback+0x4a4>)
 8001678:	f7ff f8c8 	bl	800080c <myDebug>
				if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 800167c:	4b30      	ldr	r3, [pc, #192]	; (8001740 <HAL_UART_RxCpltCallback+0x484>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b53      	cmp	r3, #83	; 0x53
 8001682:	d11d      	bne.n	80016c0 <HAL_UART_RxCpltCallback+0x404>
 8001684:	4b2e      	ldr	r3, [pc, #184]	; (8001740 <HAL_UART_RxCpltCallback+0x484>)
 8001686:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800168a:	2b7e      	cmp	r3, #126	; 0x7e
 800168c:	d118      	bne.n	80016c0 <HAL_UART_RxCpltCallback+0x404>
					myDebug("--> Correct command received from OBC\n");
 800168e:	4835      	ldr	r0, [pc, #212]	; (8001764 <HAL_UART_RxCpltCallback+0x4a8>)
 8001690:	f7ff f8bc 	bl	800080c <myDebug>
					obc_ilen = OBC_UART_RX[2];  //len of info
 8001694:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <HAL_UART_RxCpltCallback+0x484>)
 8001696:	789a      	ldrb	r2, [r3, #2]
 8001698:	4b33      	ldr	r3, [pc, #204]	; (8001768 <HAL_UART_RxCpltCallback+0x4ac>)
 800169a:	701a      	strb	r2, [r3, #0]
					PACKET_TYPE = OBC_UART_RX[1]; //packet_type
 800169c:	4b28      	ldr	r3, [pc, #160]	; (8001740 <HAL_UART_RxCpltCallback+0x484>)
 800169e:	785a      	ldrb	r2, [r3, #1]
 80016a0:	4b32      	ldr	r3, [pc, #200]	; (800176c <HAL_UART_RxCpltCallback+0x4b0>)
 80016a2:	701a      	strb	r2, [r3, #0]

					if (PACKET_TYPE == 0xB1) {
 80016a4:	4b31      	ldr	r3, [pc, #196]	; (800176c <HAL_UART_RxCpltCallback+0x4b0>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2bb1      	cmp	r3, #177	; 0xb1
 80016aa:	d105      	bne.n	80016b8 <HAL_UART_RxCpltCallback+0x3fc>
						BEACON_COUNT = 2;
 80016ac:	4b30      	ldr	r3, [pc, #192]	; (8001770 <HAL_UART_RxCpltCallback+0x4b4>)
 80016ae:	2202      	movs	r2, #2
 80016b0:	601a      	str	r2, [r3, #0]
						COUNT_BEACON = 2;
 80016b2:	4b30      	ldr	r3, [pc, #192]	; (8001774 <HAL_UART_RxCpltCallback+0x4b8>)
 80016b4:	2202      	movs	r2, #2
 80016b6:	601a      	str	r2, [r3, #0]
					}

					OBC_SUCCESS_DATA_RX_FLAG = 1;
 80016b8:	4b25      	ldr	r3, [pc, #148]	; (8001750 <HAL_UART_RxCpltCallback+0x494>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	e027      	b.n	8001710 <HAL_UART_RxCpltCallback+0x454>
				} else {
					myDebug("*** Incorrect command received from OBC\n");
 80016c0:	482d      	ldr	r0, [pc, #180]	; (8001778 <HAL_UART_RxCpltCallback+0x4bc>)
 80016c2:	f7ff f8a3 	bl	800080c <myDebug>
					if (HAL_UART_Transmit(&huart2, OBC_UART_RX, obc_plen, 2000)
 80016c6:	4b1d      	ldr	r3, [pc, #116]	; (800173c <HAL_UART_RxCpltCallback+0x480>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80016d0:	491b      	ldr	r1, [pc, #108]	; (8001740 <HAL_UART_RxCpltCallback+0x484>)
 80016d2:	481c      	ldr	r0, [pc, #112]	; (8001744 <HAL_UART_RxCpltCallback+0x488>)
 80016d4:	f004 ffd5 	bl	8006682 <HAL_UART_Transmit>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00b      	beq.n	80016f6 <HAL_UART_RxCpltCallback+0x43a>
							== HAL_OK
							|| HAL_UART_Transmit(&hlpuart1, OBC_UART_RX,
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <HAL_UART_RxCpltCallback+0x480>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80016e8:	4915      	ldr	r1, [pc, #84]	; (8001740 <HAL_UART_RxCpltCallback+0x484>)
 80016ea:	4817      	ldr	r0, [pc, #92]	; (8001748 <HAL_UART_RxCpltCallback+0x48c>)
 80016ec:	f004 ffc9 	bl	8006682 <HAL_UART_Transmit>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10c      	bne.n	8001710 <HAL_UART_RxCpltCallback+0x454>
									obc_plen, 2000) == HAL_OK) {
						myDebug("*** Incorrect command re-transmit to OBC\n");
 80016f6:	4821      	ldr	r0, [pc, #132]	; (800177c <HAL_UART_RxCpltCallback+0x4c0>)
 80016f8:	f7ff f888 	bl	800080c <myDebug>
						memset(OBC_UART_RX, '\0', sizeof(OBC_UART_RX));
 80016fc:	2254      	movs	r2, #84	; 0x54
 80016fe:	2100      	movs	r1, #0
 8001700:	480f      	ldr	r0, [pc, #60]	; (8001740 <HAL_UART_RxCpltCallback+0x484>)
 8001702:	f00a fa0d 	bl	800bb20 <memset>
						OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001706:	4b12      	ldr	r3, [pc, #72]	; (8001750 <HAL_UART_RxCpltCallback+0x494>)
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	e000      	b.n	8001710 <HAL_UART_RxCpltCallback+0x454>
				if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 800170e:	bf00      	nop
					}
				}
			}

			HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 8001710:	4b0a      	ldr	r3, [pc, #40]	; (800173c <HAL_UART_RxCpltCallback+0x480>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b29b      	uxth	r3, r3
 8001716:	461a      	mov	r2, r3
 8001718:	4909      	ldr	r1, [pc, #36]	; (8001740 <HAL_UART_RxCpltCallback+0x484>)
 800171a:	480a      	ldr	r0, [pc, #40]	; (8001744 <HAL_UART_RxCpltCallback+0x488>)
 800171c:	f005 f8fc 	bl	8006918 <HAL_UART_Receive_DMA>

			HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_UART_RxCpltCallback+0x480>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	b29b      	uxth	r3, r3
 8001726:	461a      	mov	r2, r3
 8001728:	4905      	ldr	r1, [pc, #20]	; (8001740 <HAL_UART_RxCpltCallback+0x484>)
 800172a:	4807      	ldr	r0, [pc, #28]	; (8001748 <HAL_UART_RxCpltCallback+0x48c>)
 800172c:	f005 f8f4 	bl	8006918 <HAL_UART_Receive_DMA>
		}
	}
}
 8001730:	bf00      	nop
 8001732:	3720      	adds	r7, #32
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	0800c960 	.word	0x0800c960
 800173c:	20000001 	.word	0x20000001
 8001740:	20000314 	.word	0x20000314
 8001744:	20000648 	.word	0x20000648
 8001748:	20000520 	.word	0x20000520
 800174c:	0800c994 	.word	0x0800c994
 8001750:	20000368 	.word	0x20000368
 8001754:	200004ac 	.word	0x200004ac
 8001758:	0800c9c8 	.word	0x0800c9c8
 800175c:	0800c84c 	.word	0x0800c84c
 8001760:	0800c854 	.word	0x0800c854
 8001764:	0800c9f0 	.word	0x0800c9f0
 8001768:	20000311 	.word	0x20000311
 800176c:	200004a8 	.word	0x200004a8
 8001770:	20000004 	.word	0x20000004
 8001774:	20000008 	.word	0x20000008
 8001778:	0800ca18 	.word	0x0800ca18
 800177c:	0800ca44 	.word	0x0800ca44

08001780 <DioIrqHndlr>:

void DioIrqHndlr(RadioIrqMasks_t radioIrq) {
 8001780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001784:	b0bd      	sub	sp, #244	; 0xf4
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	84fb      	strh	r3, [r7, #38]	; 0x26
	if (radioIrq == IRQ_RX_DONE) {
 800178c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800178e:	2b02      	cmp	r3, #2
 8001790:	f040 8611 	bne.w	80023b6 <DioIrqHndlr+0xc36>
		SUBGRF_GetPayload(rx_buffer, &rx_buffer_len, RX_BUFF_LENGTH);
 8001794:	2264      	movs	r2, #100	; 0x64
 8001796:	49b1      	ldr	r1, [pc, #708]	; (8001a5c <DioIrqHndlr+0x2dc>)
 8001798:	48b1      	ldr	r0, [pc, #708]	; (8001a60 <DioIrqHndlr+0x2e0>)
 800179a:	f008 fc1b 	bl	8009fd4 <SUBGRF_GetPayload>
		rssi_value = SUBGRF_GetRssiInst();
 800179e:	f009 fa3a 	bl	800ac16 <SUBGRF_GetRssiInst>
 80017a2:	4603      	mov	r3, r0
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	4aaf      	ldr	r2, [pc, #700]	; (8001a64 <DioIrqHndlr+0x2e4>)
 80017a8:	7013      	strb	r3, [r2, #0]
		myDebug("\nGS Command Received: 0x%x\r\n");
 80017aa:	48af      	ldr	r0, [pc, #700]	; (8001a68 <DioIrqHndlr+0x2e8>)
 80017ac:	f7ff f82e 	bl	800080c <myDebug>

		uint8_t temp_rx_buffer_len = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
		temp_rx_buffer_len = countsDataBetweenFlags(rx_buffer, rx_buffer_len);
 80017b6:	4ba9      	ldr	r3, [pc, #676]	; (8001a5c <DioIrqHndlr+0x2dc>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	4619      	mov	r1, r3
 80017bc:	48a8      	ldr	r0, [pc, #672]	; (8001a60 <DioIrqHndlr+0x2e0>)
 80017be:	f7ff fa75 	bl	8000cac <countsDataBetweenFlags>
 80017c2:	4603      	mov	r3, r0
 80017c4:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

		if (temp_rx_buffer_len != -1) {
 80017c8:	466b      	mov	r3, sp
 80017ca:	607b      	str	r3, [r7, #4]

			uint8_t temp_check_buff[temp_rx_buffer_len];
 80017cc:	f897 20bf 	ldrb.w	r2, [r7, #191]	; 0xbf
 80017d0:	4611      	mov	r1, r2
 80017d2:	6239      	str	r1, [r7, #32]
 80017d4:	460b      	mov	r3, r1
 80017d6:	3b01      	subs	r3, #1
 80017d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80017dc:	b2cb      	uxtb	r3, r1
 80017de:	2200      	movs	r2, #0
 80017e0:	461c      	mov	r4, r3
 80017e2:	4615      	mov	r5, r2
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	f04f 0300 	mov.w	r3, #0
 80017ec:	00eb      	lsls	r3, r5, #3
 80017ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017f2:	00e2      	lsls	r2, r4, #3
 80017f4:	b2cb      	uxtb	r3, r1
 80017f6:	2200      	movs	r2, #0
 80017f8:	4698      	mov	r8, r3
 80017fa:	4691      	mov	r9, r2
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	f04f 0300 	mov.w	r3, #0
 8001804:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001808:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800180c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001810:	460b      	mov	r3, r1
 8001812:	3307      	adds	r3, #7
 8001814:	08db      	lsrs	r3, r3, #3
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	ebad 0d03 	sub.w	sp, sp, r3
 800181c:	466b      	mov	r3, sp
 800181e:	3300      	adds	r3, #0
 8001820:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			for (int i = 0; i < temp_rx_buffer_len; i++) {
 8001824:	2300      	movs	r3, #0
 8001826:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800182a:	e01a      	b.n	8001862 <DioIrqHndlr+0xe2>
				temp_check_buff[i] = rx_buffer[i];
 800182c:	4a8c      	ldr	r2, [pc, #560]	; (8001a60 <DioIrqHndlr+0x2e0>)
 800182e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001832:	4413      	add	r3, r2
 8001834:	7819      	ldrb	r1, [r3, #0]
 8001836:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800183a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800183e:	4413      	add	r3, r2
 8001840:	460a      	mov	r2, r1
 8001842:	701a      	strb	r2, [r3, #0]
				myDebug("%02x ", temp_check_buff[i]);
 8001844:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001848:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800184c:	4413      	add	r3, r2
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	4619      	mov	r1, r3
 8001852:	4886      	ldr	r0, [pc, #536]	; (8001a6c <DioIrqHndlr+0x2ec>)
 8001854:	f7fe ffda 	bl	800080c <myDebug>
			for (int i = 0; i < temp_rx_buffer_len; i++) {
 8001858:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800185c:	3301      	adds	r3, #1
 800185e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001862:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001866:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800186a:	429a      	cmp	r2, r3
 800186c:	dbde      	blt.n	800182c <DioIrqHndlr+0xac>
			}
			myDebug("\r\n");
 800186e:	4880      	ldr	r0, [pc, #512]	; (8001a70 <DioIrqHndlr+0x2f0>)
 8001870:	f7fe ffcc 	bl	800080c <myDebug>

			memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001874:	2264      	movs	r2, #100	; 0x64
 8001876:	2100      	movs	r1, #0
 8001878:	4879      	ldr	r0, [pc, #484]	; (8001a60 <DioIrqHndlr+0x2e0>)
 800187a:	f00a f951 	bl	800bb20 <memset>

			uint8_t crc_buff_len = temp_rx_buffer_len - 4;
 800187e:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001882:	3b04      	subs	r3, #4
 8001884:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
			uint8_t crc_buff[crc_buff_len];
 8001888:	f897 50b3 	ldrb.w	r5, [r7, #179]	; 0xb3
 800188c:	462b      	mov	r3, r5
 800188e:	3b01      	subs	r3, #1
 8001890:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001894:	b2eb      	uxtb	r3, r5
 8001896:	2200      	movs	r2, #0
 8001898:	61bb      	str	r3, [r7, #24]
 800189a:	61fa      	str	r2, [r7, #28]
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80018a8:	4649      	mov	r1, r9
 80018aa:	00cb      	lsls	r3, r1, #3
 80018ac:	4644      	mov	r4, r8
 80018ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018b2:	4641      	mov	r1, r8
 80018b4:	00ca      	lsls	r2, r1, #3
 80018b6:	b2eb      	uxtb	r3, r5
 80018b8:	2200      	movs	r2, #0
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	617a      	str	r2, [r7, #20]
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	f04f 0300 	mov.w	r3, #0
 80018c6:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80018ca:	4649      	mov	r1, r9
 80018cc:	00cb      	lsls	r3, r1, #3
 80018ce:	4644      	mov	r4, r8
 80018d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018d4:	4641      	mov	r1, r8
 80018d6:	00ca      	lsls	r2, r1, #3
 80018d8:	462b      	mov	r3, r5
 80018da:	3307      	adds	r3, #7
 80018dc:	08db      	lsrs	r3, r3, #3
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	ebad 0d03 	sub.w	sp, sp, r3
 80018e4:	466b      	mov	r3, sp
 80018e6:	3300      	adds	r3, #0
 80018e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

			myDebug("\nGS Command Testing: 0x%x\r\n");
 80018ec:	4861      	ldr	r0, [pc, #388]	; (8001a74 <DioIrqHndlr+0x2f4>)
 80018ee:	f7fe ff8d 	bl	800080c <myDebug>

			int j = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			for (int i = 1; i <= crc_buff_len; i++) {
 80018f8:	2301      	movs	r3, #1
 80018fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80018fe:	e020      	b.n	8001942 <DioIrqHndlr+0x1c2>
				crc_buff[j] = temp_check_buff[i];
 8001900:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001908:	4413      	add	r3, r2
 800190a:	7819      	ldrb	r1, [r3, #0]
 800190c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001910:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001914:	4413      	add	r3, r2
 8001916:	460a      	mov	r2, r1
 8001918:	701a      	strb	r2, [r3, #0]
				myDebug("%02x ", crc_buff[j]);
 800191a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800191e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001922:	4413      	add	r3, r2
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	4619      	mov	r1, r3
 8001928:	4850      	ldr	r0, [pc, #320]	; (8001a6c <DioIrqHndlr+0x2ec>)
 800192a:	f7fe ff6f 	bl	800080c <myDebug>
				j++;
 800192e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001932:	3301      	adds	r3, #1
 8001934:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			for (int i = 1; i <= crc_buff_len; i++) {
 8001938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800193c:	3301      	adds	r3, #1
 800193e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001942:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8001946:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800194a:	429a      	cmp	r2, r3
 800194c:	ddd8      	ble.n	8001900 <DioIrqHndlr+0x180>
			}
			myDebug("\r\n");
 800194e:	4848      	ldr	r0, [pc, #288]	; (8001a70 <DioIrqHndlr+0x2f0>)
 8001950:	f7fe ff5c 	bl	800080c <myDebug>

			uint16_t crc = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			crc = calculateCRC_CCITT_AX25(crc_buff, crc_buff_len);
 800195a:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800195e:	4619      	mov	r1, r3
 8001960:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001964:	f7fe ffce 	bl	8000904 <calculateCRC_CCITT_AX25>
 8001968:	4603      	mov	r3, r0
 800196a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6

			uint8_t calc_crc[2];
			calc_crc[0] = (crc >> 8) & 0xFF;
 800196e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001972:	0a1b      	lsrs	r3, r3, #8
 8001974:	b29b      	uxth	r3, r3
 8001976:	b2db      	uxtb	r3, r3
 8001978:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			calc_crc[1] = crc & 0xFF;
 800197c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001980:	b2db      	uxtb	r3, r3
 8001982:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95

			uint8_t msb_crc = temp_check_buff[temp_rx_buffer_len - 3];
 8001986:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800198a:	3b03      	subs	r3, #3
 800198c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001990:	5cd3      	ldrb	r3, [r2, r3]
 8001992:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
			uint8_t lsb_crc = temp_check_buff[temp_rx_buffer_len - 2];
 8001996:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800199a:	3b02      	subs	r3, #2
 800199c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80019a0:	5cd3      	ldrb	r3, [r2, r3]
 80019a2:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4

			if (calc_crc[0] == msb_crc && calc_crc[1] == lsb_crc) {
 80019a6:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 80019aa:	f897 20a5 	ldrb.w	r2, [r7, #165]	; 0xa5
 80019ae:	429a      	cmp	r2, r3
 80019b0:	f040 84c8 	bne.w	8002344 <DioIrqHndlr+0xbc4>
 80019b4:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80019b8:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 80019bc:	429a      	cmp	r2, r3
 80019be:	f040 84c1 	bne.w	8002344 <DioIrqHndlr+0xbc4>
 80019c2:	466b      	mov	r3, sp
 80019c4:	461e      	mov	r6, r3
				myDebug("GS Command checksum correct: 0x%x\r\n");
 80019c6:	482c      	ldr	r0, [pc, #176]	; (8001a78 <DioIrqHndlr+0x2f8>)
 80019c8:	f7fe ff20 	bl	800080c <myDebug>

				uint8_t gs_cmd_buff[100];
				int gs_cmd_len = bit_destuffing(crc_buff, gs_cmd_buff,
 80019cc:	f897 20b3 	ldrb.w	r2, [r7, #179]	; 0xb3
 80019d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019d4:	4619      	mov	r1, r3
 80019d6:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80019da:	f7ff f87a 	bl	8000ad2 <bit_destuffing>
 80019de:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
						crc_buff_len);
				gs_cmd_len--;
 80019e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019e6:	3b01      	subs	r3, #1
 80019e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
				myDebug("\nMain GS Command Length: %d\r\n", gs_cmd_len);
 80019ec:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80019f0:	4822      	ldr	r0, [pc, #136]	; (8001a7c <DioIrqHndlr+0x2fc>)
 80019f2:	f7fe ff0b 	bl	800080c <myDebug>
				uint8_t main_gs_cmd[gs_cmd_len];
 80019f6:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80019fa:	1e63      	subs	r3, r4, #1
 80019fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001a00:	4622      	mov	r2, r4
 8001a02:	2300      	movs	r3, #0
 8001a04:	60ba      	str	r2, [r7, #8]
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001a14:	4649      	mov	r1, r9
 8001a16:	00cb      	lsls	r3, r1, #3
 8001a18:	46c4      	mov	ip, r8
 8001a1a:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 8001a1e:	4641      	mov	r1, r8
 8001a20:	00ca      	lsls	r2, r1, #3
 8001a22:	4622      	mov	r2, r4
 8001a24:	2300      	movs	r3, #0
 8001a26:	4692      	mov	sl, r2
 8001a28:	469b      	mov	fp, r3
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001a36:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001a3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001a3e:	4623      	mov	r3, r4
 8001a40:	3307      	adds	r3, #7
 8001a42:	08db      	lsrs	r3, r3, #3
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	ebad 0d03 	sub.w	sp, sp, r3
 8001a4a:	466b      	mov	r3, sp
 8001a4c:	3300      	adds	r3, #0
 8001a4e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
				for (int i = 0; i < gs_cmd_len; i++) {
 8001a52:	2300      	movs	r3, #0
 8001a54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001a58:	e024      	b.n	8001aa4 <DioIrqHndlr+0x324>
 8001a5a:	bf00      	nop
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	200002ac 	.word	0x200002ac
 8001a64:	20000310 	.word	0x20000310
 8001a68:	0800ca70 	.word	0x0800ca70
 8001a6c:	0800c84c 	.word	0x0800c84c
 8001a70:	0800c854 	.word	0x0800c854
 8001a74:	0800ca90 	.word	0x0800ca90
 8001a78:	0800caac 	.word	0x0800caac
 8001a7c:	0800cad0 	.word	0x0800cad0
					main_gs_cmd[i] = gs_cmd_buff[i];
 8001a80:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001a88:	4413      	add	r3, r2
 8001a8a:	7819      	ldrb	r1, [r3, #0]
 8001a8c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001a94:	4413      	add	r3, r2
 8001a96:	460a      	mov	r2, r1
 8001a98:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < gs_cmd_len; i++) {
 8001a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001aa4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001aa8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001aac:	429a      	cmp	r2, r3
 8001aae:	dbe7      	blt.n	8001a80 <DioIrqHndlr+0x300>
				}

				if (COUNT_BEACON == 1) {
 8001ab0:	4b94      	ldr	r3, [pc, #592]	; (8001d04 <DioIrqHndlr+0x584>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	f040 8143 	bne.w	8001d40 <DioIrqHndlr+0x5c0>

					if ((main_gs_cmd[18] == 0xDF && main_gs_cmd[19] == 0xAB
 8001aba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001abe:	7c9b      	ldrb	r3, [r3, #18]
 8001ac0:	2bdf      	cmp	r3, #223	; 0xdf
 8001ac2:	d109      	bne.n	8001ad8 <DioIrqHndlr+0x358>
 8001ac4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ac8:	7cdb      	ldrb	r3, [r3, #19]
 8001aca:	2bab      	cmp	r3, #171	; 0xab
 8001acc:	d104      	bne.n	8001ad8 <DioIrqHndlr+0x358>
							&& main_gs_cmd[20] == 0xD1) // Enable Digipeater Mission
 8001ace:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ad2:	7d1b      	ldrb	r3, [r3, #20]
 8001ad4:	2bd1      	cmp	r3, #209	; 0xd1
 8001ad6:	d00e      	beq.n	8001af6 <DioIrqHndlr+0x376>
							|| (main_gs_cmd[18] == 0x53
 8001ad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001adc:	7c9b      	ldrb	r3, [r3, #18]
 8001ade:	2b53      	cmp	r3, #83	; 0x53
 8001ae0:	d12d      	bne.n	8001b3e <DioIrqHndlr+0x3be>
									&& main_gs_cmd[19] == 0x02
 8001ae2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ae6:	7cdb      	ldrb	r3, [r3, #19]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d128      	bne.n	8001b3e <DioIrqHndlr+0x3be>
									&& main_gs_cmd[20] == 0x53)) { // Digipeater Packet
 8001aec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001af0:	7d1b      	ldrb	r3, [r3, #20]
 8001af2:	2b53      	cmp	r3, #83	; 0x53
 8001af4:	d123      	bne.n	8001b3e <DioIrqHndlr+0x3be>

						myDebug("\n********GS Command failed: 0x%x\r\n");
 8001af6:	4884      	ldr	r0, [pc, #528]	; (8001d08 <DioIrqHndlr+0x588>)
 8001af8:	f7fe fe88 	bl	800080c <myDebug>

						OBC_UART_RX[0] = 0x53;	//header
 8001afc:	4b83      	ldr	r3, [pc, #524]	; (8001d0c <DioIrqHndlr+0x58c>)
 8001afe:	2253      	movs	r2, #83	; 0x53
 8001b00:	701a      	strb	r2, [r3, #0]
						OBC_UART_RX[1] = 0xac;	//packet_ type
 8001b02:	4b82      	ldr	r3, [pc, #520]	; (8001d0c <DioIrqHndlr+0x58c>)
 8001b04:	22ac      	movs	r2, #172	; 0xac
 8001b06:	705a      	strb	r2, [r3, #1]
						OBC_UART_RX[2] = 0x04;	//length of info
 8001b08:	4b80      	ldr	r3, [pc, #512]	; (8001d0c <DioIrqHndlr+0x58c>)
 8001b0a:	2204      	movs	r2, #4
 8001b0c:	709a      	strb	r2, [r3, #2]
						OBC_UART_RX[3] = 0x02;	//mcu_no
 8001b0e:	4b7f      	ldr	r3, [pc, #508]	; (8001d0c <DioIrqHndlr+0x58c>)
 8001b10:	2202      	movs	r2, #2
 8001b12:	70da      	strb	r2, [r3, #3]
						OBC_UART_RX[4] = 0xfc;	//false command
 8001b14:	4b7d      	ldr	r3, [pc, #500]	; (8001d0c <DioIrqHndlr+0x58c>)
 8001b16:	22fc      	movs	r2, #252	; 0xfc
 8001b18:	711a      	strb	r2, [r3, #4]
						OBC_UART_RX[5] = 0xee;	//error prefix
 8001b1a:	4b7c      	ldr	r3, [pc, #496]	; (8001d0c <DioIrqHndlr+0x58c>)
 8001b1c:	22ee      	movs	r2, #238	; 0xee
 8001b1e:	715a      	strb	r2, [r3, #5]
						obc_ilen = OBC_UART_RX[2];
 8001b20:	4b7a      	ldr	r3, [pc, #488]	; (8001d0c <DioIrqHndlr+0x58c>)
 8001b22:	789a      	ldrb	r2, [r3, #2]
 8001b24:	4b7a      	ldr	r3, [pc, #488]	; (8001d10 <DioIrqHndlr+0x590>)
 8001b26:	701a      	strb	r2, [r3, #0]

						OBC_SUCCESS_DATA_RX_FLAG = 1;
 8001b28:	4b7a      	ldr	r3, [pc, #488]	; (8001d14 <DioIrqHndlr+0x594>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]

						memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001b2e:	4623      	mov	r3, r4
 8001b30:	461a      	mov	r2, r3
 8001b32:	2100      	movs	r1, #0
 8001b34:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001b38:	f009 fff2 	bl	800bb20 <memset>
 8001b3c:	e3e4      	b.n	8002308 <DioIrqHndlr+0xb88>

					} else if (main_gs_cmd[18] == 0xFD
 8001b3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b42:	7c9b      	ldrb	r3, [r3, #18]
 8001b44:	2bfd      	cmp	r3, #253	; 0xfd
 8001b46:	f040 8083 	bne.w	8001c50 <DioIrqHndlr+0x4d0>
							&& main_gs_cmd[19] == 0xBA
 8001b4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b4e:	7cdb      	ldrb	r3, [r3, #19]
 8001b50:	2bba      	cmp	r3, #186	; 0xba
 8001b52:	d17d      	bne.n	8001c50 <DioIrqHndlr+0x4d0>
							&& main_gs_cmd[20] == 0xD0) {
 8001b54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b58:	7d1b      	ldrb	r3, [r3, #20]
 8001b5a:	2bd0      	cmp	r3, #208	; 0xd0
 8001b5c:	d178      	bne.n	8001c50 <DioIrqHndlr+0x4d0>

						BEACON_COUNT = 2;
 8001b5e:	4b6e      	ldr	r3, [pc, #440]	; (8001d18 <DioIrqHndlr+0x598>)
 8001b60:	2202      	movs	r2, #2
 8001b62:	601a      	str	r2, [r3, #0]
						OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001b64:	4b6b      	ldr	r3, [pc, #428]	; (8001d14 <DioIrqHndlr+0x594>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
						DIGIPEATER_STATUS = 0;
 8001b6a:	4b6c      	ldr	r3, [pc, #432]	; (8001d1c <DioIrqHndlr+0x59c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
						DIGIPEATER_FLAG = 0;
 8001b70:	4b6b      	ldr	r3, [pc, #428]	; (8001d20 <DioIrqHndlr+0x5a0>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]

						myDebug(" \n-------> Digipeater MODE OFF\n ");
 8001b76:	486b      	ldr	r0, [pc, #428]	; (8001d24 <DioIrqHndlr+0x5a4>)
 8001b78:	f7fe fe48 	bl	800080c <myDebug>

						OBC_UART_RX[0] = 0x53;	//header
 8001b7c:	4b63      	ldr	r3, [pc, #396]	; (8001d0c <DioIrqHndlr+0x58c>)
 8001b7e:	2253      	movs	r2, #83	; 0x53
 8001b80:	701a      	strb	r2, [r3, #0]
						OBC_UART_RX[1] = 0xac;	//packet_ type
 8001b82:	4b62      	ldr	r3, [pc, #392]	; (8001d0c <DioIrqHndlr+0x58c>)
 8001b84:	22ac      	movs	r2, #172	; 0xac
 8001b86:	705a      	strb	r2, [r3, #1]
						OBC_UART_RX[2] = 0x04;	//length of info
 8001b88:	4b60      	ldr	r3, [pc, #384]	; (8001d0c <DioIrqHndlr+0x58c>)
 8001b8a:	2204      	movs	r2, #4
 8001b8c:	709a      	strb	r2, [r3, #2]
						OBC_UART_RX[3] = 0x02;	//mcu_no
 8001b8e:	4b5f      	ldr	r3, [pc, #380]	; (8001d0c <DioIrqHndlr+0x58c>)
 8001b90:	2202      	movs	r2, #2
 8001b92:	70da      	strb	r2, [r3, #3]
						OBC_UART_RX[4] = 0x00;	//Digipeater OFF
 8001b94:	4b5d      	ldr	r3, [pc, #372]	; (8001d0c <DioIrqHndlr+0x58c>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	711a      	strb	r2, [r3, #4]
						OBC_UART_RX[5] = 0xdd;	//Digipeater prefix
 8001b9a:	4b5c      	ldr	r3, [pc, #368]	; (8001d0c <DioIrqHndlr+0x58c>)
 8001b9c:	22dd      	movs	r2, #221	; 0xdd
 8001b9e:	715a      	strb	r2, [r3, #5]
						obc_ilen = OBC_UART_RX[2];
 8001ba0:	4b5a      	ldr	r3, [pc, #360]	; (8001d0c <DioIrqHndlr+0x58c>)
 8001ba2:	789a      	ldrb	r2, [r3, #2]
 8001ba4:	4b5a      	ldr	r3, [pc, #360]	; (8001d10 <DioIrqHndlr+0x590>)
 8001ba6:	701a      	strb	r2, [r3, #0]

						if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001ba8:	b2a2      	uxth	r2, r4
 8001baa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001bae:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001bb2:	485d      	ldr	r0, [pc, #372]	; (8001d28 <DioIrqHndlr+0x5a8>)
 8001bb4:	f004 fd65 	bl	8006682 <HAL_UART_Transmit>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00a      	beq.n	8001bd4 <DioIrqHndlr+0x454>
								sizeof(main_gs_cmd), 2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8001bbe:	b2a2      	uxth	r2, r4
 8001bc0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001bc4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001bc8:	4858      	ldr	r0, [pc, #352]	; (8001d2c <DioIrqHndlr+0x5ac>)
 8001bca:	f004 fd5a 	bl	8006682 <HAL_UART_Transmit>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d039      	beq.n	8001c48 <DioIrqHndlr+0x4c8>
										sizeof(main_gs_cmd), 2000)) {

							for (int i = 0; i < gs_cmd_len; i++) {
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001bda:	e00e      	b.n	8001bfa <DioIrqHndlr+0x47a>
								myDebug("%02x ", main_gs_cmd[i]);
 8001bdc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001be0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001be4:	4413      	add	r3, r2
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	4619      	mov	r1, r3
 8001bea:	4851      	ldr	r0, [pc, #324]	; (8001d30 <DioIrqHndlr+0x5b0>)
 8001bec:	f7fe fe0e 	bl	800080c <myDebug>
							for (int i = 0; i < gs_cmd_len; i++) {
 8001bf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001bfa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001bfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c02:	429a      	cmp	r2, r3
 8001c04:	dbea      	blt.n	8001bdc <DioIrqHndlr+0x45c>
							}

							memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001c06:	4623      	mov	r3, r4
 8001c08:	461a      	mov	r2, r3
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001c10:	f009 ff86 	bl	800bb20 <memset>
							memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001c14:	2264      	movs	r2, #100	; 0x64
 8001c16:	2100      	movs	r1, #0
 8001c18:	4846      	ldr	r0, [pc, #280]	; (8001d34 <DioIrqHndlr+0x5b4>)
 8001c1a:	f009 ff81 	bl	800bb20 <memset>
							memset(temp_check_buff, '\0',
									sizeof(temp_check_buff));
 8001c1e:	6a3b      	ldr	r3, [r7, #32]
							memset(temp_check_buff, '\0',
 8001c20:	461a      	mov	r2, r3
 8001c22:	2100      	movs	r1, #0
 8001c24:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001c28:	f009 ff7a 	bl	800bb20 <memset>
							memset(crc_buff, '\0', sizeof(crc_buff));
 8001c2c:	462b      	mov	r3, r5
 8001c2e:	461a      	mov	r2, r3
 8001c30:	2100      	movs	r1, #0
 8001c32:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001c36:	f009 ff73 	bl	800bb20 <memset>
							memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001c3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c3e:	2264      	movs	r2, #100	; 0x64
 8001c40:	2100      	movs	r1, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f009 ff6c 	bl	800bb20 <memset>
						}

						OBC_SUCCESS_DATA_RX_FLAG = 1;
 8001c48:	4b32      	ldr	r3, [pc, #200]	; (8001d14 <DioIrqHndlr+0x594>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	e35b      	b.n	8002308 <DioIrqHndlr+0xb88>

					} else {
						myDebug("\nLength of Command sent to OBC: %d\r\n",
 8001c50:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8001c54:	4838      	ldr	r0, [pc, #224]	; (8001d38 <DioIrqHndlr+0x5b8>)
 8001c56:	f7fe fdd9 	bl	800080c <myDebug>
								gs_cmd_len);
						if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001c5a:	b2a2      	uxth	r2, r4
 8001c5c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c60:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001c64:	4830      	ldr	r0, [pc, #192]	; (8001d28 <DioIrqHndlr+0x5a8>)
 8001c66:	f004 fd0c 	bl	8006682 <HAL_UART_Transmit>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d00b      	beq.n	8001c88 <DioIrqHndlr+0x508>
								sizeof(main_gs_cmd), 2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8001c70:	b2a2      	uxth	r2, r4
 8001c72:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c76:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001c7a:	482c      	ldr	r0, [pc, #176]	; (8001d2c <DioIrqHndlr+0x5ac>)
 8001c7c:	f004 fd01 	bl	8006682 <HAL_UART_Transmit>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 8340 	beq.w	8002308 <DioIrqHndlr+0xb88>
										sizeof(main_gs_cmd), 2000)) {

							for (int i = 0; i < gs_cmd_len; i++) {
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001c8e:	e00e      	b.n	8001cae <DioIrqHndlr+0x52e>
								myDebug("%02x ", main_gs_cmd[i]);
 8001c90:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001c94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001c98:	4413      	add	r3, r2
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4824      	ldr	r0, [pc, #144]	; (8001d30 <DioIrqHndlr+0x5b0>)
 8001ca0:	f7fe fdb4 	bl	800080c <myDebug>
							for (int i = 0; i < gs_cmd_len; i++) {
 8001ca4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001ca8:	3301      	adds	r3, #1
 8001caa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001cae:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001cb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	dbea      	blt.n	8001c90 <DioIrqHndlr+0x510>
							}

							memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001cba:	4623      	mov	r3, r4
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001cc4:	f009 ff2c 	bl	800bb20 <memset>
							memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001cc8:	2264      	movs	r2, #100	; 0x64
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4819      	ldr	r0, [pc, #100]	; (8001d34 <DioIrqHndlr+0x5b4>)
 8001cce:	f009 ff27 	bl	800bb20 <memset>
							memset(temp_check_buff, '\0',
									sizeof(temp_check_buff));
 8001cd2:	6a3b      	ldr	r3, [r7, #32]
							memset(temp_check_buff, '\0',
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001cdc:	f009 ff20 	bl	800bb20 <memset>
							memset(crc_buff, '\0', sizeof(crc_buff));
 8001ce0:	462b      	mov	r3, r5
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001cea:	f009 ff19 	bl	800bb20 <memset>
							memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001cee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cf2:	2264      	movs	r2, #100	; 0x64
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f009 ff12 	bl	800bb20 <memset>

							myDebug("\n\n_____OBC__RECEIVER_____\r\n");
 8001cfc:	480f      	ldr	r0, [pc, #60]	; (8001d3c <DioIrqHndlr+0x5bc>)
 8001cfe:	f7fe fd85 	bl	800080c <myDebug>
 8001d02:	e301      	b.n	8002308 <DioIrqHndlr+0xb88>
 8001d04:	20000008 	.word	0x20000008
 8001d08:	0800caf0 	.word	0x0800caf0
 8001d0c:	20000314 	.word	0x20000314
 8001d10:	20000311 	.word	0x20000311
 8001d14:	20000368 	.word	0x20000368
 8001d18:	20000004 	.word	0x20000004
 8001d1c:	200004a4 	.word	0x200004a4
 8001d20:	200004ac 	.word	0x200004ac
 8001d24:	0800cb14 	.word	0x0800cb14
 8001d28:	20000648 	.word	0x20000648
 8001d2c:	20000520 	.word	0x20000520
 8001d30:	0800c84c 	.word	0x0800c84c
 8001d34:	200002ac 	.word	0x200002ac
 8001d38:	0800cb38 	.word	0x0800cb38
 8001d3c:	0800cb60 	.word	0x0800cb60
						}

					}
				} else if (COUNT_BEACON == 0) {
 8001d40:	4bba      	ldr	r3, [pc, #744]	; (800202c <DioIrqHndlr+0x8ac>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f040 82df 	bne.w	8002308 <DioIrqHndlr+0xb88>
					if (DIGIPEATER_STATUS == 1) {
 8001d4a:	4bb9      	ldr	r3, [pc, #740]	; (8002030 <DioIrqHndlr+0x8b0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	f040 8116 	bne.w	8001f80 <DioIrqHndlr+0x800>
						if (main_gs_cmd[18] == 0xFD && main_gs_cmd[19] == 0xBA
 8001d54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d58:	7c9b      	ldrb	r3, [r3, #18]
 8001d5a:	2bfd      	cmp	r3, #253	; 0xfd
 8001d5c:	f040 8083 	bne.w	8001e66 <DioIrqHndlr+0x6e6>
 8001d60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d64:	7cdb      	ldrb	r3, [r3, #19]
 8001d66:	2bba      	cmp	r3, #186	; 0xba
 8001d68:	d17d      	bne.n	8001e66 <DioIrqHndlr+0x6e6>
								&& main_gs_cmd[20] == 0xD0) {
 8001d6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d6e:	7d1b      	ldrb	r3, [r3, #20]
 8001d70:	2bd0      	cmp	r3, #208	; 0xd0
 8001d72:	d178      	bne.n	8001e66 <DioIrqHndlr+0x6e6>

							BEACON_COUNT = 2;
 8001d74:	4baf      	ldr	r3, [pc, #700]	; (8002034 <DioIrqHndlr+0x8b4>)
 8001d76:	2202      	movs	r2, #2
 8001d78:	601a      	str	r2, [r3, #0]
							OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001d7a:	4baf      	ldr	r3, [pc, #700]	; (8002038 <DioIrqHndlr+0x8b8>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
							DIGIPEATER_STATUS = 0;
 8001d80:	4bab      	ldr	r3, [pc, #684]	; (8002030 <DioIrqHndlr+0x8b0>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
							DIGIPEATER_FLAG = 0;
 8001d86:	4bad      	ldr	r3, [pc, #692]	; (800203c <DioIrqHndlr+0x8bc>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]

							myDebug(" \n-------> Digipeater MODE OFF\n ");
 8001d8c:	48ac      	ldr	r0, [pc, #688]	; (8002040 <DioIrqHndlr+0x8c0>)
 8001d8e:	f7fe fd3d 	bl	800080c <myDebug>

							OBC_UART_RX[0] = 0x53;	//header
 8001d92:	4bac      	ldr	r3, [pc, #688]	; (8002044 <DioIrqHndlr+0x8c4>)
 8001d94:	2253      	movs	r2, #83	; 0x53
 8001d96:	701a      	strb	r2, [r3, #0]
							OBC_UART_RX[1] = 0xac;	//packet_ type
 8001d98:	4baa      	ldr	r3, [pc, #680]	; (8002044 <DioIrqHndlr+0x8c4>)
 8001d9a:	22ac      	movs	r2, #172	; 0xac
 8001d9c:	705a      	strb	r2, [r3, #1]
							OBC_UART_RX[2] = 0x04;	//length of info
 8001d9e:	4ba9      	ldr	r3, [pc, #676]	; (8002044 <DioIrqHndlr+0x8c4>)
 8001da0:	2204      	movs	r2, #4
 8001da2:	709a      	strb	r2, [r3, #2]
							OBC_UART_RX[3] = 0x02;	//mcu_no
 8001da4:	4ba7      	ldr	r3, [pc, #668]	; (8002044 <DioIrqHndlr+0x8c4>)
 8001da6:	2202      	movs	r2, #2
 8001da8:	70da      	strb	r2, [r3, #3]
							OBC_UART_RX[4] = 0x00;	//Digipeater OFF
 8001daa:	4ba6      	ldr	r3, [pc, #664]	; (8002044 <DioIrqHndlr+0x8c4>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	711a      	strb	r2, [r3, #4]
							OBC_UART_RX[5] = 0xdd;	//Digipeater prefix
 8001db0:	4ba4      	ldr	r3, [pc, #656]	; (8002044 <DioIrqHndlr+0x8c4>)
 8001db2:	22dd      	movs	r2, #221	; 0xdd
 8001db4:	715a      	strb	r2, [r3, #5]
							obc_ilen = OBC_UART_RX[2];
 8001db6:	4ba3      	ldr	r3, [pc, #652]	; (8002044 <DioIrqHndlr+0x8c4>)
 8001db8:	789a      	ldrb	r2, [r3, #2]
 8001dba:	4ba3      	ldr	r3, [pc, #652]	; (8002048 <DioIrqHndlr+0x8c8>)
 8001dbc:	701a      	strb	r2, [r3, #0]

							if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001dbe:	b2a2      	uxth	r2, r4
 8001dc0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001dc4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001dc8:	48a0      	ldr	r0, [pc, #640]	; (800204c <DioIrqHndlr+0x8cc>)
 8001dca:	f004 fc5a 	bl	8006682 <HAL_UART_Transmit>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00a      	beq.n	8001dea <DioIrqHndlr+0x66a>
									sizeof(main_gs_cmd), 2000) == HAL_OK
									|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8001dd4:	b2a2      	uxth	r2, r4
 8001dd6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001dda:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001dde:	489c      	ldr	r0, [pc, #624]	; (8002050 <DioIrqHndlr+0x8d0>)
 8001de0:	f004 fc4f 	bl	8006682 <HAL_UART_Transmit>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d039      	beq.n	8001e5e <DioIrqHndlr+0x6de>
											sizeof(main_gs_cmd), 2000)) {

								for (int i = 0; i < gs_cmd_len; i++) {
 8001dea:	2300      	movs	r3, #0
 8001dec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001df0:	e00e      	b.n	8001e10 <DioIrqHndlr+0x690>
									myDebug("%02x ", main_gs_cmd[i]);
 8001df2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001df6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001dfa:	4413      	add	r3, r2
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4894      	ldr	r0, [pc, #592]	; (8002054 <DioIrqHndlr+0x8d4>)
 8001e02:	f7fe fd03 	bl	800080c <myDebug>
								for (int i = 0; i < gs_cmd_len; i++) {
 8001e06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001e10:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001e14:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	dbea      	blt.n	8001df2 <DioIrqHndlr+0x672>
								}

								memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001e1c:	4623      	mov	r3, r4
 8001e1e:	461a      	mov	r2, r3
 8001e20:	2100      	movs	r1, #0
 8001e22:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001e26:	f009 fe7b 	bl	800bb20 <memset>
								memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001e2a:	2264      	movs	r2, #100	; 0x64
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	488a      	ldr	r0, [pc, #552]	; (8002058 <DioIrqHndlr+0x8d8>)
 8001e30:	f009 fe76 	bl	800bb20 <memset>
								memset(temp_check_buff, '\0',
										sizeof(temp_check_buff));
 8001e34:	6a3b      	ldr	r3, [r7, #32]
								memset(temp_check_buff, '\0',
 8001e36:	461a      	mov	r2, r3
 8001e38:	2100      	movs	r1, #0
 8001e3a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001e3e:	f009 fe6f 	bl	800bb20 <memset>
								memset(crc_buff, '\0', sizeof(crc_buff));
 8001e42:	462b      	mov	r3, r5
 8001e44:	461a      	mov	r2, r3
 8001e46:	2100      	movs	r1, #0
 8001e48:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001e4c:	f009 fe68 	bl	800bb20 <memset>
								memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001e50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e54:	2264      	movs	r2, #100	; 0x64
 8001e56:	2100      	movs	r1, #0
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f009 fe61 	bl	800bb20 <memset>
							}

							OBC_SUCCESS_DATA_RX_FLAG = 1;
 8001e5e:	4b76      	ldr	r3, [pc, #472]	; (8002038 <DioIrqHndlr+0x8b8>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	e250      	b.n	8002308 <DioIrqHndlr+0xb88>

						} else if (main_gs_cmd[18] == 0x53
 8001e66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e6a:	7c9b      	ldrb	r3, [r3, #18]
 8001e6c:	2b53      	cmp	r3, #83	; 0x53
 8001e6e:	d163      	bne.n	8001f38 <DioIrqHndlr+0x7b8>
								&& main_gs_cmd[19] == 0x02
 8001e70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e74:	7cdb      	ldrb	r3, [r3, #19]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d15e      	bne.n	8001f38 <DioIrqHndlr+0x7b8>
								&& main_gs_cmd[20] == 0x53) {
 8001e7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e7e:	7d1b      	ldrb	r3, [r3, #20]
 8001e80:	2b53      	cmp	r3, #83	; 0x53
 8001e82:	d159      	bne.n	8001f38 <DioIrqHndlr+0x7b8>
							myDebug(
 8001e84:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8001e88:	4874      	ldr	r0, [pc, #464]	; (800205c <DioIrqHndlr+0x8dc>)
 8001e8a:	f7fe fcbf 	bl	800080c <myDebug>
									"\nLength of Digipeater sent to OBC: %d\r\n",
									gs_cmd_len);
							if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001e8e:	b2a2      	uxth	r2, r4
 8001e90:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e94:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001e98:	486c      	ldr	r0, [pc, #432]	; (800204c <DioIrqHndlr+0x8cc>)
 8001e9a:	f004 fbf2 	bl	8006682 <HAL_UART_Transmit>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00b      	beq.n	8001ebc <DioIrqHndlr+0x73c>
									sizeof(main_gs_cmd), 2000) == HAL_OK
									|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8001ea4:	b2a2      	uxth	r2, r4
 8001ea6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001eaa:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001eae:	4868      	ldr	r0, [pc, #416]	; (8002050 <DioIrqHndlr+0x8d0>)
 8001eb0:	f004 fbe7 	bl	8006682 <HAL_UART_Transmit>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 8225 	beq.w	8002306 <DioIrqHndlr+0xb86>
											sizeof(main_gs_cmd), 2000)) {

								for (int i = 0; i < gs_cmd_len; i++) {
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001ec2:	e00e      	b.n	8001ee2 <DioIrqHndlr+0x762>
									myDebug("%02x ", main_gs_cmd[i]);
 8001ec4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001ec8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ecc:	4413      	add	r3, r2
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4860      	ldr	r0, [pc, #384]	; (8002054 <DioIrqHndlr+0x8d4>)
 8001ed4:	f7fe fc9a 	bl	800080c <myDebug>
								for (int i = 0; i < gs_cmd_len; i++) {
 8001ed8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001edc:	3301      	adds	r3, #1
 8001ede:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001ee2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001ee6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001eea:	429a      	cmp	r2, r3
 8001eec:	dbea      	blt.n	8001ec4 <DioIrqHndlr+0x744>
								}

								memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001eee:	4623      	mov	r3, r4
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001ef8:	f009 fe12 	bl	800bb20 <memset>
								memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001efc:	2264      	movs	r2, #100	; 0x64
 8001efe:	2100      	movs	r1, #0
 8001f00:	4855      	ldr	r0, [pc, #340]	; (8002058 <DioIrqHndlr+0x8d8>)
 8001f02:	f009 fe0d 	bl	800bb20 <memset>
								memset(temp_check_buff, '\0',
										sizeof(temp_check_buff));
 8001f06:	6a3b      	ldr	r3, [r7, #32]
								memset(temp_check_buff, '\0',
 8001f08:	461a      	mov	r2, r3
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001f10:	f009 fe06 	bl	800bb20 <memset>
								memset(crc_buff, '\0', sizeof(crc_buff));
 8001f14:	462b      	mov	r3, r5
 8001f16:	461a      	mov	r2, r3
 8001f18:	2100      	movs	r1, #0
 8001f1a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001f1e:	f009 fdff 	bl	800bb20 <memset>
								memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001f22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f26:	2264      	movs	r2, #100	; 0x64
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f009 fdf8 	bl	800bb20 <memset>

								myDebug(
 8001f30:	484b      	ldr	r0, [pc, #300]	; (8002060 <DioIrqHndlr+0x8e0>)
 8001f32:	f7fe fc6b 	bl	800080c <myDebug>
							if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001f36:	e1e6      	b.n	8002306 <DioIrqHndlr+0xb86>
										"\n\n_____DIGIPEATER_OBC__RECEIVER_____\r\n");
							}
						} else {
							myDebug("\n********GS Command failed: 0x%x\r\n");
 8001f38:	484a      	ldr	r0, [pc, #296]	; (8002064 <DioIrqHndlr+0x8e4>)
 8001f3a:	f7fe fc67 	bl	800080c <myDebug>

							OBC_UART_RX[0] = 0x53;	//header
 8001f3e:	4b41      	ldr	r3, [pc, #260]	; (8002044 <DioIrqHndlr+0x8c4>)
 8001f40:	2253      	movs	r2, #83	; 0x53
 8001f42:	701a      	strb	r2, [r3, #0]
							OBC_UART_RX[1] = 0xac;	//packet_ type
 8001f44:	4b3f      	ldr	r3, [pc, #252]	; (8002044 <DioIrqHndlr+0x8c4>)
 8001f46:	22ac      	movs	r2, #172	; 0xac
 8001f48:	705a      	strb	r2, [r3, #1]
							OBC_UART_RX[2] = 0x04;	//length of info
 8001f4a:	4b3e      	ldr	r3, [pc, #248]	; (8002044 <DioIrqHndlr+0x8c4>)
 8001f4c:	2204      	movs	r2, #4
 8001f4e:	709a      	strb	r2, [r3, #2]
							OBC_UART_RX[3] = 0x02;	//mcu_no
 8001f50:	4b3c      	ldr	r3, [pc, #240]	; (8002044 <DioIrqHndlr+0x8c4>)
 8001f52:	2202      	movs	r2, #2
 8001f54:	70da      	strb	r2, [r3, #3]
							OBC_UART_RX[4] = 0xfc;	//false command
 8001f56:	4b3b      	ldr	r3, [pc, #236]	; (8002044 <DioIrqHndlr+0x8c4>)
 8001f58:	22fc      	movs	r2, #252	; 0xfc
 8001f5a:	711a      	strb	r2, [r3, #4]
							OBC_UART_RX[5] = 0xee;	//error prefix
 8001f5c:	4b39      	ldr	r3, [pc, #228]	; (8002044 <DioIrqHndlr+0x8c4>)
 8001f5e:	22ee      	movs	r2, #238	; 0xee
 8001f60:	715a      	strb	r2, [r3, #5]
							obc_ilen = OBC_UART_RX[2];
 8001f62:	4b38      	ldr	r3, [pc, #224]	; (8002044 <DioIrqHndlr+0x8c4>)
 8001f64:	789a      	ldrb	r2, [r3, #2]
 8001f66:	4b38      	ldr	r3, [pc, #224]	; (8002048 <DioIrqHndlr+0x8c8>)
 8001f68:	701a      	strb	r2, [r3, #0]

							OBC_SUCCESS_DATA_RX_FLAG = 1;
 8001f6a:	4b33      	ldr	r3, [pc, #204]	; (8002038 <DioIrqHndlr+0x8b8>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]

							memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001f70:	4623      	mov	r3, r4
 8001f72:	461a      	mov	r2, r3
 8001f74:	2100      	movs	r1, #0
 8001f76:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001f7a:	f009 fdd1 	bl	800bb20 <memset>
 8001f7e:	e1c3      	b.n	8002308 <DioIrqHndlr+0xb88>

						}
					} else if (DIGIPEATER_STATUS == 0) {
 8001f80:	4b2b      	ldr	r3, [pc, #172]	; (8002030 <DioIrqHndlr+0x8b0>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f040 81bf 	bne.w	8002308 <DioIrqHndlr+0xb88>
						if (main_gs_cmd[18] == 0xFD && main_gs_cmd[19] == 0xBA
 8001f8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f8e:	7c9b      	ldrb	r3, [r3, #18]
 8001f90:	2bfd      	cmp	r3, #253	; 0xfd
 8001f92:	f040 80a3 	bne.w	80020dc <DioIrqHndlr+0x95c>
 8001f96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f9a:	7cdb      	ldrb	r3, [r3, #19]
 8001f9c:	2bba      	cmp	r3, #186	; 0xba
 8001f9e:	f040 809d 	bne.w	80020dc <DioIrqHndlr+0x95c>
								&& main_gs_cmd[20] == 0xD0) {
 8001fa2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fa6:	7d1b      	ldrb	r3, [r3, #20]
 8001fa8:	2bd0      	cmp	r3, #208	; 0xd0
 8001faa:	f040 8097 	bne.w	80020dc <DioIrqHndlr+0x95c>

							BEACON_COUNT = 2;
 8001fae:	4b21      	ldr	r3, [pc, #132]	; (8002034 <DioIrqHndlr+0x8b4>)
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	601a      	str	r2, [r3, #0]
							OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001fb4:	4b20      	ldr	r3, [pc, #128]	; (8002038 <DioIrqHndlr+0x8b8>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
							DIGIPEATER_STATUS = 0;
 8001fba:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <DioIrqHndlr+0x8b0>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
							DIGIPEATER_FLAG = 0;
 8001fc0:	4b1e      	ldr	r3, [pc, #120]	; (800203c <DioIrqHndlr+0x8bc>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]

							myDebug(" \n-------> Digipeater MODE OFF\n ");
 8001fc6:	481e      	ldr	r0, [pc, #120]	; (8002040 <DioIrqHndlr+0x8c0>)
 8001fc8:	f7fe fc20 	bl	800080c <myDebug>

							OBC_UART_RX[0] = 0x53;	//header
 8001fcc:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <DioIrqHndlr+0x8c4>)
 8001fce:	2253      	movs	r2, #83	; 0x53
 8001fd0:	701a      	strb	r2, [r3, #0]
							OBC_UART_RX[1] = 0xac;	//packet_ type
 8001fd2:	4b1c      	ldr	r3, [pc, #112]	; (8002044 <DioIrqHndlr+0x8c4>)
 8001fd4:	22ac      	movs	r2, #172	; 0xac
 8001fd6:	705a      	strb	r2, [r3, #1]
							OBC_UART_RX[2] = 0x04;	//length of info
 8001fd8:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <DioIrqHndlr+0x8c4>)
 8001fda:	2204      	movs	r2, #4
 8001fdc:	709a      	strb	r2, [r3, #2]
							OBC_UART_RX[3] = 0x02;	//mcu_no
 8001fde:	4b19      	ldr	r3, [pc, #100]	; (8002044 <DioIrqHndlr+0x8c4>)
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	70da      	strb	r2, [r3, #3]
							OBC_UART_RX[4] = 0x00;	//Digipeater OFF
 8001fe4:	4b17      	ldr	r3, [pc, #92]	; (8002044 <DioIrqHndlr+0x8c4>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	711a      	strb	r2, [r3, #4]
							OBC_UART_RX[5] = 0xdd;	//Digipeater prefix
 8001fea:	4b16      	ldr	r3, [pc, #88]	; (8002044 <DioIrqHndlr+0x8c4>)
 8001fec:	22dd      	movs	r2, #221	; 0xdd
 8001fee:	715a      	strb	r2, [r3, #5]
							obc_ilen = OBC_UART_RX[2];
 8001ff0:	4b14      	ldr	r3, [pc, #80]	; (8002044 <DioIrqHndlr+0x8c4>)
 8001ff2:	789a      	ldrb	r2, [r3, #2]
 8001ff4:	4b14      	ldr	r3, [pc, #80]	; (8002048 <DioIrqHndlr+0x8c8>)
 8001ff6:	701a      	strb	r2, [r3, #0]

							if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001ff8:	b2a2      	uxth	r2, r4
 8001ffa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001ffe:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8002002:	4812      	ldr	r0, [pc, #72]	; (800204c <DioIrqHndlr+0x8cc>)
 8002004:	f004 fb3d 	bl	8006682 <HAL_UART_Transmit>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00a      	beq.n	8002024 <DioIrqHndlr+0x8a4>
									sizeof(main_gs_cmd), 2000) == HAL_OK
									|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 800200e:	b2a2      	uxth	r2, r4
 8002010:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002014:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8002018:	480d      	ldr	r0, [pc, #52]	; (8002050 <DioIrqHndlr+0x8d0>)
 800201a:	f004 fb32 	bl	8006682 <HAL_UART_Transmit>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d057      	beq.n	80020d4 <DioIrqHndlr+0x954>
											sizeof(main_gs_cmd), 2000)) {

								for (int i = 0; i < gs_cmd_len; i++) {
 8002024:	2300      	movs	r3, #0
 8002026:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800202a:	e02c      	b.n	8002086 <DioIrqHndlr+0x906>
 800202c:	20000008 	.word	0x20000008
 8002030:	200004a4 	.word	0x200004a4
 8002034:	20000004 	.word	0x20000004
 8002038:	20000368 	.word	0x20000368
 800203c:	200004ac 	.word	0x200004ac
 8002040:	0800cb14 	.word	0x0800cb14
 8002044:	20000314 	.word	0x20000314
 8002048:	20000311 	.word	0x20000311
 800204c:	20000648 	.word	0x20000648
 8002050:	20000520 	.word	0x20000520
 8002054:	0800c84c 	.word	0x0800c84c
 8002058:	200002ac 	.word	0x200002ac
 800205c:	0800cb7c 	.word	0x0800cb7c
 8002060:	0800cba4 	.word	0x0800cba4
 8002064:	0800caf0 	.word	0x0800caf0
									myDebug("%02x ", main_gs_cmd[i]);
 8002068:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800206c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002070:	4413      	add	r3, r2
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	4619      	mov	r1, r3
 8002076:	48a5      	ldr	r0, [pc, #660]	; (800230c <DioIrqHndlr+0xb8c>)
 8002078:	f7fe fbc8 	bl	800080c <myDebug>
								for (int i = 0; i < gs_cmd_len; i++) {
 800207c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002080:	3301      	adds	r3, #1
 8002082:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002086:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800208a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800208e:	429a      	cmp	r2, r3
 8002090:	dbea      	blt.n	8002068 <DioIrqHndlr+0x8e8>
								}

								memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8002092:	4623      	mov	r3, r4
 8002094:	461a      	mov	r2, r3
 8002096:	2100      	movs	r1, #0
 8002098:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800209c:	f009 fd40 	bl	800bb20 <memset>
								memset(rx_buffer, '\0', sizeof(rx_buffer));
 80020a0:	2264      	movs	r2, #100	; 0x64
 80020a2:	2100      	movs	r1, #0
 80020a4:	489a      	ldr	r0, [pc, #616]	; (8002310 <DioIrqHndlr+0xb90>)
 80020a6:	f009 fd3b 	bl	800bb20 <memset>
								memset(temp_check_buff, '\0',
										sizeof(temp_check_buff));
 80020aa:	6a3b      	ldr	r3, [r7, #32]
								memset(temp_check_buff, '\0',
 80020ac:	461a      	mov	r2, r3
 80020ae:	2100      	movs	r1, #0
 80020b0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80020b4:	f009 fd34 	bl	800bb20 <memset>
								memset(crc_buff, '\0', sizeof(crc_buff));
 80020b8:	462b      	mov	r3, r5
 80020ba:	461a      	mov	r2, r3
 80020bc:	2100      	movs	r1, #0
 80020be:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80020c2:	f009 fd2d 	bl	800bb20 <memset>
								memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 80020c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020ca:	2264      	movs	r2, #100	; 0x64
 80020cc:	2100      	movs	r1, #0
 80020ce:	4618      	mov	r0, r3
 80020d0:	f009 fd26 	bl	800bb20 <memset>
							}

							OBC_SUCCESS_DATA_RX_FLAG = 1;
 80020d4:	4b8f      	ldr	r3, [pc, #572]	; (8002314 <DioIrqHndlr+0xb94>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	e115      	b.n	8002308 <DioIrqHndlr+0xb88>

						} else if (main_gs_cmd[18] == 0xDF
 80020dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020e0:	7c9b      	ldrb	r3, [r3, #18]
 80020e2:	2bdf      	cmp	r3, #223	; 0xdf
 80020e4:	f040 8083 	bne.w	80021ee <DioIrqHndlr+0xa6e>
								&& main_gs_cmd[19] == 0xAB
 80020e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020ec:	7cdb      	ldrb	r3, [r3, #19]
 80020ee:	2bab      	cmp	r3, #171	; 0xab
 80020f0:	d17d      	bne.n	80021ee <DioIrqHndlr+0xa6e>
								&& main_gs_cmd[20] == 0xD1) {
 80020f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020f6:	7d1b      	ldrb	r3, [r3, #20]
 80020f8:	2bd1      	cmp	r3, #209	; 0xd1
 80020fa:	d178      	bne.n	80021ee <DioIrqHndlr+0xa6e>

							BEACON_COUNT = 0;
 80020fc:	4b86      	ldr	r3, [pc, #536]	; (8002318 <DioIrqHndlr+0xb98>)
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
							OBC_SUCCESS_DATA_RX_FLAG = 0;
 8002102:	4b84      	ldr	r3, [pc, #528]	; (8002314 <DioIrqHndlr+0xb94>)
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
							DIGIPEATER_STATUS = 1;
 8002108:	4b84      	ldr	r3, [pc, #528]	; (800231c <DioIrqHndlr+0xb9c>)
 800210a:	2201      	movs	r2, #1
 800210c:	601a      	str	r2, [r3, #0]
							DIGIPEATER_RX_FLAG = 1;
 800210e:	4b84      	ldr	r3, [pc, #528]	; (8002320 <DioIrqHndlr+0xba0>)
 8002110:	2201      	movs	r2, #1
 8002112:	601a      	str	r2, [r3, #0]

							myDebug(" \nDigipeater MODE ON\n ");
 8002114:	4883      	ldr	r0, [pc, #524]	; (8002324 <DioIrqHndlr+0xba4>)
 8002116:	f7fe fb79 	bl	800080c <myDebug>

							OBC_UART_RX[0] = 0x53;	//header
 800211a:	4b83      	ldr	r3, [pc, #524]	; (8002328 <DioIrqHndlr+0xba8>)
 800211c:	2253      	movs	r2, #83	; 0x53
 800211e:	701a      	strb	r2, [r3, #0]
							OBC_UART_RX[1] = 0xac;	//packet_ type
 8002120:	4b81      	ldr	r3, [pc, #516]	; (8002328 <DioIrqHndlr+0xba8>)
 8002122:	22ac      	movs	r2, #172	; 0xac
 8002124:	705a      	strb	r2, [r3, #1]
							OBC_UART_RX[2] = 0x04;	//length of info
 8002126:	4b80      	ldr	r3, [pc, #512]	; (8002328 <DioIrqHndlr+0xba8>)
 8002128:	2204      	movs	r2, #4
 800212a:	709a      	strb	r2, [r3, #2]
							OBC_UART_RX[3] = 0x02;	//mcu_no
 800212c:	4b7e      	ldr	r3, [pc, #504]	; (8002328 <DioIrqHndlr+0xba8>)
 800212e:	2202      	movs	r2, #2
 8002130:	70da      	strb	r2, [r3, #3]
							OBC_UART_RX[4] = 0x01;	//Digipeater OFF
 8002132:	4b7d      	ldr	r3, [pc, #500]	; (8002328 <DioIrqHndlr+0xba8>)
 8002134:	2201      	movs	r2, #1
 8002136:	711a      	strb	r2, [r3, #4]
							OBC_UART_RX[5] = 0xdd;	//Digipeater prefix
 8002138:	4b7b      	ldr	r3, [pc, #492]	; (8002328 <DioIrqHndlr+0xba8>)
 800213a:	22dd      	movs	r2, #221	; 0xdd
 800213c:	715a      	strb	r2, [r3, #5]
							obc_ilen = OBC_UART_RX[2];
 800213e:	4b7a      	ldr	r3, [pc, #488]	; (8002328 <DioIrqHndlr+0xba8>)
 8002140:	789a      	ldrb	r2, [r3, #2]
 8002142:	4b7a      	ldr	r3, [pc, #488]	; (800232c <DioIrqHndlr+0xbac>)
 8002144:	701a      	strb	r2, [r3, #0]

							if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8002146:	b2a2      	uxth	r2, r4
 8002148:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800214c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8002150:	4877      	ldr	r0, [pc, #476]	; (8002330 <DioIrqHndlr+0xbb0>)
 8002152:	f004 fa96 	bl	8006682 <HAL_UART_Transmit>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00a      	beq.n	8002172 <DioIrqHndlr+0x9f2>
									sizeof(main_gs_cmd), 2000) == HAL_OK
									|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 800215c:	b2a2      	uxth	r2, r4
 800215e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002162:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8002166:	4873      	ldr	r0, [pc, #460]	; (8002334 <DioIrqHndlr+0xbb4>)
 8002168:	f004 fa8b 	bl	8006682 <HAL_UART_Transmit>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d039      	beq.n	80021e6 <DioIrqHndlr+0xa66>
											sizeof(main_gs_cmd), 2000)) {

								for (int i = 0; i < gs_cmd_len; i++) {
 8002172:	2300      	movs	r3, #0
 8002174:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002178:	e00e      	b.n	8002198 <DioIrqHndlr+0xa18>
									myDebug("%02x ", main_gs_cmd[i]);
 800217a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800217e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002182:	4413      	add	r3, r2
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	4619      	mov	r1, r3
 8002188:	4860      	ldr	r0, [pc, #384]	; (800230c <DioIrqHndlr+0xb8c>)
 800218a:	f7fe fb3f 	bl	800080c <myDebug>
								for (int i = 0; i < gs_cmd_len; i++) {
 800218e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002192:	3301      	adds	r3, #1
 8002194:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002198:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800219c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021a0:	429a      	cmp	r2, r3
 80021a2:	dbea      	blt.n	800217a <DioIrqHndlr+0x9fa>
								}

								memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 80021a4:	4623      	mov	r3, r4
 80021a6:	461a      	mov	r2, r3
 80021a8:	2100      	movs	r1, #0
 80021aa:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80021ae:	f009 fcb7 	bl	800bb20 <memset>
								memset(rx_buffer, '\0', sizeof(rx_buffer));
 80021b2:	2264      	movs	r2, #100	; 0x64
 80021b4:	2100      	movs	r1, #0
 80021b6:	4856      	ldr	r0, [pc, #344]	; (8002310 <DioIrqHndlr+0xb90>)
 80021b8:	f009 fcb2 	bl	800bb20 <memset>
								memset(temp_check_buff, '\0',
										sizeof(temp_check_buff));
 80021bc:	6a3b      	ldr	r3, [r7, #32]
								memset(temp_check_buff, '\0',
 80021be:	461a      	mov	r2, r3
 80021c0:	2100      	movs	r1, #0
 80021c2:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80021c6:	f009 fcab 	bl	800bb20 <memset>
								memset(crc_buff, '\0', sizeof(crc_buff));
 80021ca:	462b      	mov	r3, r5
 80021cc:	461a      	mov	r2, r3
 80021ce:	2100      	movs	r1, #0
 80021d0:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80021d4:	f009 fca4 	bl	800bb20 <memset>
								memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 80021d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021dc:	2264      	movs	r2, #100	; 0x64
 80021de:	2100      	movs	r1, #0
 80021e0:	4618      	mov	r0, r3
 80021e2:	f009 fc9d 	bl	800bb20 <memset>
							}

							OBC_SUCCESS_DATA_RX_FLAG = 1;
 80021e6:	4b4b      	ldr	r3, [pc, #300]	; (8002314 <DioIrqHndlr+0xb94>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	e08c      	b.n	8002308 <DioIrqHndlr+0xb88>

						} else if (main_gs_cmd[18] == 0x53
 80021ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021f2:	7c9b      	ldrb	r3, [r3, #18]
 80021f4:	2b53      	cmp	r3, #83	; 0x53
 80021f6:	d12d      	bne.n	8002254 <DioIrqHndlr+0xad4>
								&& main_gs_cmd[19] == 0x02
 80021f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021fc:	7cdb      	ldrb	r3, [r3, #19]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d128      	bne.n	8002254 <DioIrqHndlr+0xad4>
								&& main_gs_cmd[20] == 0x53) { // Digipeater Packet
 8002202:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002206:	7d1b      	ldrb	r3, [r3, #20]
 8002208:	2b53      	cmp	r3, #83	; 0x53
 800220a:	d123      	bne.n	8002254 <DioIrqHndlr+0xad4>

							myDebug("\n********GS Command failed: 0x%x\r\n");
 800220c:	484a      	ldr	r0, [pc, #296]	; (8002338 <DioIrqHndlr+0xbb8>)
 800220e:	f7fe fafd 	bl	800080c <myDebug>

							OBC_UART_RX[0] = 0x53;	//header
 8002212:	4b45      	ldr	r3, [pc, #276]	; (8002328 <DioIrqHndlr+0xba8>)
 8002214:	2253      	movs	r2, #83	; 0x53
 8002216:	701a      	strb	r2, [r3, #0]
							OBC_UART_RX[1] = 0xac;	//packet_ type
 8002218:	4b43      	ldr	r3, [pc, #268]	; (8002328 <DioIrqHndlr+0xba8>)
 800221a:	22ac      	movs	r2, #172	; 0xac
 800221c:	705a      	strb	r2, [r3, #1]
							OBC_UART_RX[2] = 0x04;	//length of info
 800221e:	4b42      	ldr	r3, [pc, #264]	; (8002328 <DioIrqHndlr+0xba8>)
 8002220:	2204      	movs	r2, #4
 8002222:	709a      	strb	r2, [r3, #2]
							OBC_UART_RX[3] = 0x02;	//mcu_no
 8002224:	4b40      	ldr	r3, [pc, #256]	; (8002328 <DioIrqHndlr+0xba8>)
 8002226:	2202      	movs	r2, #2
 8002228:	70da      	strb	r2, [r3, #3]
							OBC_UART_RX[4] = 0xfc;	//false command
 800222a:	4b3f      	ldr	r3, [pc, #252]	; (8002328 <DioIrqHndlr+0xba8>)
 800222c:	22fc      	movs	r2, #252	; 0xfc
 800222e:	711a      	strb	r2, [r3, #4]
							OBC_UART_RX[5] = 0xee;	//error prefix
 8002230:	4b3d      	ldr	r3, [pc, #244]	; (8002328 <DioIrqHndlr+0xba8>)
 8002232:	22ee      	movs	r2, #238	; 0xee
 8002234:	715a      	strb	r2, [r3, #5]
							obc_ilen = OBC_UART_RX[2];
 8002236:	4b3c      	ldr	r3, [pc, #240]	; (8002328 <DioIrqHndlr+0xba8>)
 8002238:	789a      	ldrb	r2, [r3, #2]
 800223a:	4b3c      	ldr	r3, [pc, #240]	; (800232c <DioIrqHndlr+0xbac>)
 800223c:	701a      	strb	r2, [r3, #0]

							OBC_SUCCESS_DATA_RX_FLAG = 1;
 800223e:	4b35      	ldr	r3, [pc, #212]	; (8002314 <DioIrqHndlr+0xb94>)
 8002240:	2201      	movs	r2, #1
 8002242:	601a      	str	r2, [r3, #0]

							memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8002244:	4623      	mov	r3, r4
 8002246:	461a      	mov	r2, r3
 8002248:	2100      	movs	r1, #0
 800224a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800224e:	f009 fc67 	bl	800bb20 <memset>
 8002252:	e059      	b.n	8002308 <DioIrqHndlr+0xb88>

						} else {
							myDebug("\nLength of Command sent to OBC: %d\r\n",
 8002254:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8002258:	4838      	ldr	r0, [pc, #224]	; (800233c <DioIrqHndlr+0xbbc>)
 800225a:	f7fe fad7 	bl	800080c <myDebug>
									gs_cmd_len);
							if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 800225e:	b2a2      	uxth	r2, r4
 8002260:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002264:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8002268:	4831      	ldr	r0, [pc, #196]	; (8002330 <DioIrqHndlr+0xbb0>)
 800226a:	f004 fa0a 	bl	8006682 <HAL_UART_Transmit>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00a      	beq.n	800228a <DioIrqHndlr+0xb0a>
									sizeof(main_gs_cmd), 2000) == HAL_OK
									|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8002274:	b2a2      	uxth	r2, r4
 8002276:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800227a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800227e:	482d      	ldr	r0, [pc, #180]	; (8002334 <DioIrqHndlr+0xbb4>)
 8002280:	f004 f9ff 	bl	8006682 <HAL_UART_Transmit>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d03e      	beq.n	8002308 <DioIrqHndlr+0xb88>
											sizeof(main_gs_cmd), 2000)) {

								for (int i = 0; i < gs_cmd_len; i++) {
 800228a:	2300      	movs	r3, #0
 800228c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002290:	e00e      	b.n	80022b0 <DioIrqHndlr+0xb30>
									myDebug("%02x ", main_gs_cmd[i]);
 8002292:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002296:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800229a:	4413      	add	r3, r2
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	4619      	mov	r1, r3
 80022a0:	481a      	ldr	r0, [pc, #104]	; (800230c <DioIrqHndlr+0xb8c>)
 80022a2:	f7fe fab3 	bl	800080c <myDebug>
								for (int i = 0; i < gs_cmd_len; i++) {
 80022a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022aa:	3301      	adds	r3, #1
 80022ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80022b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80022b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022b8:	429a      	cmp	r2, r3
 80022ba:	dbea      	blt.n	8002292 <DioIrqHndlr+0xb12>
								}

								memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 80022bc:	4623      	mov	r3, r4
 80022be:	461a      	mov	r2, r3
 80022c0:	2100      	movs	r1, #0
 80022c2:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80022c6:	f009 fc2b 	bl	800bb20 <memset>
								memset(rx_buffer, '\0', sizeof(rx_buffer));
 80022ca:	2264      	movs	r2, #100	; 0x64
 80022cc:	2100      	movs	r1, #0
 80022ce:	4810      	ldr	r0, [pc, #64]	; (8002310 <DioIrqHndlr+0xb90>)
 80022d0:	f009 fc26 	bl	800bb20 <memset>
								memset(temp_check_buff, '\0',
										sizeof(temp_check_buff));
 80022d4:	6a3b      	ldr	r3, [r7, #32]
								memset(temp_check_buff, '\0',
 80022d6:	461a      	mov	r2, r3
 80022d8:	2100      	movs	r1, #0
 80022da:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80022de:	f009 fc1f 	bl	800bb20 <memset>
								memset(crc_buff, '\0', sizeof(crc_buff));
 80022e2:	462b      	mov	r3, r5
 80022e4:	461a      	mov	r2, r3
 80022e6:	2100      	movs	r1, #0
 80022e8:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80022ec:	f009 fc18 	bl	800bb20 <memset>
								memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 80022f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022f4:	2264      	movs	r2, #100	; 0x64
 80022f6:	2100      	movs	r1, #0
 80022f8:	4618      	mov	r0, r3
 80022fa:	f009 fc11 	bl	800bb20 <memset>

								myDebug("\n\n_____OBC__RECEIVER_____\r\n");
 80022fe:	4810      	ldr	r0, [pc, #64]	; (8002340 <DioIrqHndlr+0xbc0>)
 8002300:	f7fe fa84 	bl	800080c <myDebug>
 8002304:	e000      	b.n	8002308 <DioIrqHndlr+0xb88>
							if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8002306:	bf00      	nop
 8002308:	46b5      	mov	sp, r6
			if (calc_crc[0] == msb_crc && calc_crc[1] == lsb_crc) {
 800230a:	e037      	b.n	800237c <DioIrqHndlr+0xbfc>
 800230c:	0800c84c 	.word	0x0800c84c
 8002310:	200002ac 	.word	0x200002ac
 8002314:	20000368 	.word	0x20000368
 8002318:	20000004 	.word	0x20000004
 800231c:	200004a4 	.word	0x200004a4
 8002320:	200004b0 	.word	0x200004b0
 8002324:	0800cbcc 	.word	0x0800cbcc
 8002328:	20000314 	.word	0x20000314
 800232c:	20000311 	.word	0x20000311
 8002330:	20000648 	.word	0x20000648
 8002334:	20000520 	.word	0x20000520
 8002338:	0800caf0 	.word	0x0800caf0
 800233c:	0800cb38 	.word	0x0800cb38
 8002340:	0800cb60 	.word	0x0800cb60

						}
					}
				}
			} else {
				myDebug("\n********GS Command checksum incorrect: 0x%x\r\n");
 8002344:	48ab      	ldr	r0, [pc, #684]	; (80025f4 <DioIrqHndlr+0xe74>)
 8002346:	f7fe fa61 	bl	800080c <myDebug>

				OBC_UART_RX[0] = 0x53;	//header
 800234a:	4bab      	ldr	r3, [pc, #684]	; (80025f8 <DioIrqHndlr+0xe78>)
 800234c:	2253      	movs	r2, #83	; 0x53
 800234e:	701a      	strb	r2, [r3, #0]
				OBC_UART_RX[1] = 0xac;	//packet_ type
 8002350:	4ba9      	ldr	r3, [pc, #676]	; (80025f8 <DioIrqHndlr+0xe78>)
 8002352:	22ac      	movs	r2, #172	; 0xac
 8002354:	705a      	strb	r2, [r3, #1]
				OBC_UART_RX[2] = 0x04;	//length of info
 8002356:	4ba8      	ldr	r3, [pc, #672]	; (80025f8 <DioIrqHndlr+0xe78>)
 8002358:	2204      	movs	r2, #4
 800235a:	709a      	strb	r2, [r3, #2]
				OBC_UART_RX[3] = 0x02;	//mcu_no
 800235c:	4ba6      	ldr	r3, [pc, #664]	; (80025f8 <DioIrqHndlr+0xe78>)
 800235e:	2202      	movs	r2, #2
 8002360:	70da      	strb	r2, [r3, #3]
				OBC_UART_RX[4] = 0x01;	//checksum_error
 8002362:	4ba5      	ldr	r3, [pc, #660]	; (80025f8 <DioIrqHndlr+0xe78>)
 8002364:	2201      	movs	r2, #1
 8002366:	711a      	strb	r2, [r3, #4]
				OBC_UART_RX[5] = 0xee;	//error prefix
 8002368:	4ba3      	ldr	r3, [pc, #652]	; (80025f8 <DioIrqHndlr+0xe78>)
 800236a:	22ee      	movs	r2, #238	; 0xee
 800236c:	715a      	strb	r2, [r3, #5]
				obc_ilen = OBC_UART_RX[2];
 800236e:	4ba2      	ldr	r3, [pc, #648]	; (80025f8 <DioIrqHndlr+0xe78>)
 8002370:	789a      	ldrb	r2, [r3, #2]
 8002372:	4ba2      	ldr	r3, [pc, #648]	; (80025fc <DioIrqHndlr+0xe7c>)
 8002374:	701a      	strb	r2, [r3, #0]

				OBC_SUCCESS_DATA_RX_FLAG = 1;
 8002376:	4ba2      	ldr	r3, [pc, #648]	; (8002600 <DioIrqHndlr+0xe80>)
 8002378:	2201      	movs	r2, #1
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	f8d7 d004 	ldr.w	sp, [r7, #4]
			obc_ilen = OBC_UART_RX[2];

			OBC_SUCCESS_DATA_RX_FLAG = 1;
		}

		SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 8002380:	48a0      	ldr	r0, [pc, #640]	; (8002604 <DioIrqHndlr+0xe84>)
 8002382:	f008 f987 	bl	800a694 <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 8002386:	2100      	movs	r1, #0
 8002388:	2001      	movs	r0, #1
 800238a:	f008 fdcb 	bl	800af24 <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 800238e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8002392:	f007 ffab 	bl	800a2ec <SUBGRF_SetRxBoosted>

		HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 8002396:	4b9c      	ldr	r3, [pc, #624]	; (8002608 <DioIrqHndlr+0xe88>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	b29b      	uxth	r3, r3
 800239c:	461a      	mov	r2, r3
 800239e:	4996      	ldr	r1, [pc, #600]	; (80025f8 <DioIrqHndlr+0xe78>)
 80023a0:	489a      	ldr	r0, [pc, #616]	; (800260c <DioIrqHndlr+0xe8c>)
 80023a2:	f004 fab9 	bl	8006918 <HAL_UART_Receive_DMA>

		HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 80023a6:	4b98      	ldr	r3, [pc, #608]	; (8002608 <DioIrqHndlr+0xe88>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	461a      	mov	r2, r3
 80023ae:	4992      	ldr	r1, [pc, #584]	; (80025f8 <DioIrqHndlr+0xe78>)
 80023b0:	4897      	ldr	r0, [pc, #604]	; (8002610 <DioIrqHndlr+0xe90>)
 80023b2:	f004 fab1 	bl	8006918 <HAL_UART_Receive_DMA>
	}

	if (radioIrq == IRQ_TX_DONE) {
 80023b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	f040 8116 	bne.w	80025ea <DioIrqHndlr+0xe6a>

		OBC_SUCCESS_DATA_RX_FLAG = 0;
 80023be:	4b90      	ldr	r3, [pc, #576]	; (8002600 <DioIrqHndlr+0xe80>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]

		myDebug("\nSatellite Data Transmitted Successful:\r\n");
 80023c4:	4893      	ldr	r0, [pc, #588]	; (8002614 <DioIrqHndlr+0xe94>)
 80023c6:	f7fe fa21 	bl	800080c <myDebug>
		for (int i = 0; i < tx_buffer_len; i++) {
 80023ca:	2300      	movs	r3, #0
 80023cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80023d0:	e00d      	b.n	80023ee <DioIrqHndlr+0xc6e>
			myDebug("%02x ", tx_buffer[i]);
 80023d2:	4a91      	ldr	r2, [pc, #580]	; (8002618 <DioIrqHndlr+0xe98>)
 80023d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023d8:	4413      	add	r3, r2
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	4619      	mov	r1, r3
 80023de:	488f      	ldr	r0, [pc, #572]	; (800261c <DioIrqHndlr+0xe9c>)
 80023e0:	f7fe fa14 	bl	800080c <myDebug>
		for (int i = 0; i < tx_buffer_len; i++) {
 80023e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023e8:	3301      	adds	r3, #1
 80023ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80023ee:	4b8c      	ldr	r3, [pc, #560]	; (8002620 <DioIrqHndlr+0xea0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80023f6:	429a      	cmp	r2, r3
 80023f8:	dbeb      	blt.n	80023d2 <DioIrqHndlr+0xc52>
		}
		myDebug("\r\n");
 80023fa:	488a      	ldr	r0, [pc, #552]	; (8002624 <DioIrqHndlr+0xea4>)
 80023fc:	f7fe fa06 	bl	800080c <myDebug>

		memset(tx_buffer, '\0', sizeof(tx_buffer));
 8002400:	2296      	movs	r2, #150	; 0x96
 8002402:	2100      	movs	r1, #0
 8002404:	4884      	ldr	r0, [pc, #528]	; (8002618 <DioIrqHndlr+0xe98>)
 8002406:	f009 fb8b 	bl	800bb20 <memset>

		if (PACKET_TYPE == 0xB1 || PACKET_TYPE == 0xB2) {
 800240a:	4b87      	ldr	r3, [pc, #540]	; (8002628 <DioIrqHndlr+0xea8>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2bb1      	cmp	r3, #177	; 0xb1
 8002410:	d003      	beq.n	800241a <DioIrqHndlr+0xc9a>
 8002412:	4b85      	ldr	r3, [pc, #532]	; (8002628 <DioIrqHndlr+0xea8>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2bb2      	cmp	r3, #178	; 0xb2
 8002418:	d10c      	bne.n	8002434 <DioIrqHndlr+0xcb4>
			BEACON_COUNT--;
 800241a:	4b84      	ldr	r3, [pc, #528]	; (800262c <DioIrqHndlr+0xeac>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	3b01      	subs	r3, #1
 8002420:	4a82      	ldr	r2, [pc, #520]	; (800262c <DioIrqHndlr+0xeac>)
 8002422:	6013      	str	r3, [r2, #0]
			COUNT_BEACON--;
 8002424:	4b82      	ldr	r3, [pc, #520]	; (8002630 <DioIrqHndlr+0xeb0>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	3b01      	subs	r3, #1
 800242a:	4a81      	ldr	r2, [pc, #516]	; (8002630 <DioIrqHndlr+0xeb0>)
 800242c:	6013      	str	r3, [r2, #0]
			PACKET_TYPE = 0;
 800242e:	4b7e      	ldr	r3, [pc, #504]	; (8002628 <DioIrqHndlr+0xea8>)
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]
		}

		if (DIGIPEATER_FLAG) {
 8002434:	4b7f      	ldr	r3, [pc, #508]	; (8002634 <DioIrqHndlr+0xeb4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00e      	beq.n	800245a <DioIrqHndlr+0xcda>
			BEACON_COUNT = 2;
 800243c:	4b7b      	ldr	r3, [pc, #492]	; (800262c <DioIrqHndlr+0xeac>)
 800243e:	2202      	movs	r2, #2
 8002440:	601a      	str	r2, [r3, #0]
			OBC_SUCCESS_DATA_RX_FLAG = 0;
 8002442:	4b6f      	ldr	r3, [pc, #444]	; (8002600 <DioIrqHndlr+0xe80>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
			DIGIPEATER_STATUS = 0;
 8002448:	4b7b      	ldr	r3, [pc, #492]	; (8002638 <DioIrqHndlr+0xeb8>)
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
			DIGIPEATER_FLAG = 0;
 800244e:	4b79      	ldr	r3, [pc, #484]	; (8002634 <DioIrqHndlr+0xeb4>)
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
			DIGIPEATER_RX_FLAG = 0;
 8002454:	4b79      	ldr	r3, [pc, #484]	; (800263c <DioIrqHndlr+0xebc>)
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
		}

		if (BEACON_COUNT == 0) {
 800245a:	4b74      	ldr	r3, [pc, #464]	; (800262c <DioIrqHndlr+0xeac>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d109      	bne.n	8002476 <DioIrqHndlr+0xcf6>
			OBC_SUCCESS_DATA_RX_FLAG = 0;
 8002462:	4b67      	ldr	r3, [pc, #412]	; (8002600 <DioIrqHndlr+0xe80>)
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
			DIGIPEATER_STATUS = 1;
 8002468:	4b73      	ldr	r3, [pc, #460]	; (8002638 <DioIrqHndlr+0xeb8>)
 800246a:	2201      	movs	r2, #1
 800246c:	601a      	str	r2, [r3, #0]
			myDebug("\n########## Digipeater Mode Configuration: ##########\n");
 800246e:	4874      	ldr	r0, [pc, #464]	; (8002640 <DioIrqHndlr+0xec0>)
 8002470:	f7fe f9cc 	bl	800080c <myDebug>
 8002474:	e002      	b.n	800247c <DioIrqHndlr+0xcfc>
		} else {
			DIGIPEATER_STATUS = 0;
 8002476:	4b70      	ldr	r3, [pc, #448]	; (8002638 <DioIrqHndlr+0xeb8>)
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
		}

		delay_us(500000);
 800247c:	4871      	ldr	r0, [pc, #452]	; (8002644 <DioIrqHndlr+0xec4>)
 800247e:	f7fe f9ab 	bl	80007d8 <delay_us>

		pkt_params.PacketType = PACKET_TYPE_GFSK;
 8002482:	4b71      	ldr	r3, [pc, #452]	; (8002648 <DioIrqHndlr+0xec8>)
 8002484:	2200      	movs	r2, #0
 8002486:	701a      	strb	r2, [r3, #0]
		pkt_params.Params.Gfsk.PayloadLength = RX_BUFF_LENGTH;
 8002488:	4b6f      	ldr	r3, [pc, #444]	; (8002648 <DioIrqHndlr+0xec8>)
 800248a:	2264      	movs	r2, #100	; 0x64
 800248c:	721a      	strb	r2, [r3, #8]
		pkt_params.Params.Gfsk.PreambleLength = 8; /*Convert byte into bit*/
 800248e:	4b6e      	ldr	r3, [pc, #440]	; (8002648 <DioIrqHndlr+0xec8>)
 8002490:	2208      	movs	r2, #8
 8002492:	805a      	strh	r2, [r3, #2]
		pkt_params.Params.Gfsk.PreambleMinDetect =
 8002494:	4b6c      	ldr	r3, [pc, #432]	; (8002648 <DioIrqHndlr+0xec8>)
 8002496:	2204      	movs	r2, #4
 8002498:	711a      	strb	r2, [r3, #4]
				RADIO_PREAMBLE_DETECTOR_08_BITS;
		pkt_params.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800249a:	4b6b      	ldr	r3, [pc, #428]	; (8002648 <DioIrqHndlr+0xec8>)
 800249c:	2218      	movs	r2, #24
 800249e:	715a      	strb	r2, [r3, #5]
		pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80024a0:	4b69      	ldr	r3, [pc, #420]	; (8002648 <DioIrqHndlr+0xec8>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	719a      	strb	r2, [r3, #6]
		pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80024a6:	4b68      	ldr	r3, [pc, #416]	; (8002648 <DioIrqHndlr+0xec8>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	71da      	strb	r2, [r3, #7]
		pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80024ac:	4b66      	ldr	r3, [pc, #408]	; (8002648 <DioIrqHndlr+0xec8>)
 80024ae:	22f2      	movs	r2, #242	; 0xf2
 80024b0:	725a      	strb	r2, [r3, #9]
		pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80024b2:	4b65      	ldr	r3, [pc, #404]	; (8002648 <DioIrqHndlr+0xec8>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	729a      	strb	r2, [r3, #10]

		mod_params.PacketType = PACKET_TYPE_GFSK;
 80024b8:	4b64      	ldr	r3, [pc, #400]	; (800264c <DioIrqHndlr+0xecc>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	701a      	strb	r2, [r3, #0]
		mod_params.Params.Gfsk.Bandwidth = RX_BW_29300; /*Not used in TX*/
 80024be:	4b63      	ldr	r3, [pc, #396]	; (800264c <DioIrqHndlr+0xecc>)
 80024c0:	220d      	movs	r2, #13
 80024c2:	735a      	strb	r2, [r3, #13]
		mod_params.Params.Gfsk.BitRate = DEMO_DEFAULT_BR_1200;
 80024c4:	4b61      	ldr	r3, [pc, #388]	; (800264c <DioIrqHndlr+0xecc>)
 80024c6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80024ca:	605a      	str	r2, [r3, #4]
		mod_params.Params.Gfsk.Fdev = DEMO_DEFAULT_FDEV_1200;
 80024cc:	4b5f      	ldr	r3, [pc, #380]	; (800264c <DioIrqHndlr+0xecc>)
 80024ce:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80024d2:	609a      	str	r2, [r3, #8]
		mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80024d4:	4b5d      	ldr	r3, [pc, #372]	; (800264c <DioIrqHndlr+0xecc>)
 80024d6:	220b      	movs	r2, #11
 80024d8:	731a      	strb	r2, [r3, #12]

		SUBGRF_Init(DioIrqHndlr);
 80024da:	485d      	ldr	r0, [pc, #372]	; (8002650 <DioIrqHndlr+0xed0>)
 80024dc:	f007 fd18 	bl	8009f10 <SUBGRF_Init>
		SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 80024e0:	2100      	movs	r1, #0
 80024e2:	2000      	movs	r0, #0
 80024e4:	f008 fb80 	bl	800abe8 <SUBGRF_SetBufferBaseAddress>
		SUBGRF_SetPacketParams(&pkt_params);
 80024e8:	4857      	ldr	r0, [pc, #348]	; (8002648 <DioIrqHndlr+0xec8>)
 80024ea:	f008 fadf 	bl	800aaac <SUBGRF_SetPacketParams>
		SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00,
 80024ee:	4a59      	ldr	r2, [pc, #356]	; (8002654 <DioIrqHndlr+0xed4>)
 80024f0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80024f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024f8:	e883 0003 	stmia.w	r3, {r0, r1}
 80024fc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002500:	4618      	mov	r0, r3
 8002502:	f007 fd9c 	bl	800a03e <SUBGRF_SetSyncWord>
						0x00, 0x00 });
		SUBGRF_SetWhiteningSeed(0x01FF);
 8002506:	f240 10ff 	movw	r0, #511	; 0x1ff
 800250a:	f007 fde7 	bl	800a0dc <SUBGRF_SetWhiteningSeed>
		SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 800250e:	483d      	ldr	r0, [pc, #244]	; (8002604 <DioIrqHndlr+0xe84>)
 8002510:	f008 f8c0 	bl	800a694 <SUBGRF_SetRfFrequency>
		SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 8002514:	2301      	movs	r3, #1
 8002516:	2201      	movs	r2, #1
 8002518:	2100      	movs	r1, #0
 800251a:	2004      	movs	r0, #4
 800251c:	f008 f83c 	bl	800a598 <SUBGRF_SetPaConfig>
		SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME); // Set to RFO_LP for low power
 8002520:	2202      	movs	r2, #2
 8002522:	210e      	movs	r1, #14
 8002524:	2001      	movs	r0, #1
 8002526:	f008 f921 	bl	800a76c <SUBGRF_SetTxParams>
		SUBGRF_SetModulationParams(&mod_params);
 800252a:	4848      	ldr	r0, [pc, #288]	; (800264c <DioIrqHndlr+0xecc>)
 800252c:	f008 f9ec 	bl	800a908 <SUBGRF_SetModulationParams>
		SUBGRF_SetDioIrqParams(
 8002530:	2300      	movs	r3, #0
 8002532:	2200      	movs	r2, #0
 8002534:	f240 210f 	movw	r1, #527	; 0x20f
 8002538:	f240 200f 	movw	r0, #527	; 0x20f
 800253c:	f008 f84e 	bl	800a5dc <SUBGRF_SetDioIrqParams>
						| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
				IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
						| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
				IRQ_RADIO_NONE, IRQ_RADIO_NONE);

		myDebug("\n########## RX Configuration: ##########\n");
 8002540:	4845      	ldr	r0, [pc, #276]	; (8002658 <DioIrqHndlr+0xed8>)
 8002542:	f7fe f963 	bl	800080c <myDebug>

		myDebug("FREQUENCY MODS: UPLINK FREQ: %lu Hz\r\n", FREQ_435_MHZ);
 8002546:	492f      	ldr	r1, [pc, #188]	; (8002604 <DioIrqHndlr+0xe84>)
 8002548:	4844      	ldr	r0, [pc, #272]	; (800265c <DioIrqHndlr+0xedc>)
 800254a:	f7fe f95f 	bl	800080c <myDebug>
		myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 800254e:	4b3f      	ldr	r3, [pc, #252]	; (800264c <DioIrqHndlr+0xecc>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	4619      	mov	r1, r3
 8002554:	4842      	ldr	r0, [pc, #264]	; (8002660 <DioIrqHndlr+0xee0>)
 8002556:	f7fe f959 	bl	800080c <myDebug>
		myDebug("Frequency Deviation: 	%d\n\r", mod_params.Params.Gfsk.Fdev);
 800255a:	4b3c      	ldr	r3, [pc, #240]	; (800264c <DioIrqHndlr+0xecc>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	4619      	mov	r1, r3
 8002560:	4840      	ldr	r0, [pc, #256]	; (8002664 <DioIrqHndlr+0xee4>)
 8002562:	f7fe f953 	bl	800080c <myDebug>
		myDebug("RECEVING BANDWIDTH: 	%d\n\r",
				mod_params.Params.Gfsk.Bandwidth);
 8002566:	4b39      	ldr	r3, [pc, #228]	; (800264c <DioIrqHndlr+0xecc>)
 8002568:	7b5b      	ldrb	r3, [r3, #13]
		myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 800256a:	4619      	mov	r1, r3
 800256c:	483e      	ldr	r0, [pc, #248]	; (8002668 <DioIrqHndlr+0xee8>)
 800256e:	f7fe f94d 	bl	800080c <myDebug>
		myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8002572:	4b35      	ldr	r3, [pc, #212]	; (8002648 <DioIrqHndlr+0xec8>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	4619      	mov	r1, r3
 8002578:	483c      	ldr	r0, [pc, #240]	; (800266c <DioIrqHndlr+0xeec>)
 800257a:	f7fe f947 	bl	800080c <myDebug>
		myDebug("PayloadLength 			%d\n\r",
				pkt_params.Params.Gfsk.PayloadLength);
 800257e:	4b32      	ldr	r3, [pc, #200]	; (8002648 <DioIrqHndlr+0xec8>)
 8002580:	7a1b      	ldrb	r3, [r3, #8]
		myDebug("PayloadLength 			%d\n\r",
 8002582:	4619      	mov	r1, r3
 8002584:	483a      	ldr	r0, [pc, #232]	; (8002670 <DioIrqHndlr+0xef0>)
 8002586:	f7fe f941 	bl	800080c <myDebug>
		myDebug("PreambleLength 		%d\n\r",
				pkt_params.Params.Gfsk.PreambleLength);
 800258a:	4b2f      	ldr	r3, [pc, #188]	; (8002648 <DioIrqHndlr+0xec8>)
 800258c:	885b      	ldrh	r3, [r3, #2]
		myDebug("PreambleLength 		%d\n\r",
 800258e:	4619      	mov	r1, r3
 8002590:	4838      	ldr	r0, [pc, #224]	; (8002674 <DioIrqHndlr+0xef4>)
 8002592:	f7fe f93b 	bl	800080c <myDebug>
		myDebug("PreambleMinDetect		%d\n\r",
				pkt_params.Params.Gfsk.PreambleMinDetect);
 8002596:	4b2c      	ldr	r3, [pc, #176]	; (8002648 <DioIrqHndlr+0xec8>)
 8002598:	791b      	ldrb	r3, [r3, #4]
		myDebug("PreambleMinDetect		%d\n\r",
 800259a:	4619      	mov	r1, r3
 800259c:	4836      	ldr	r0, [pc, #216]	; (8002678 <DioIrqHndlr+0xef8>)
 800259e:	f7fe f935 	bl	800080c <myDebug>
		myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 80025a2:	4b29      	ldr	r3, [pc, #164]	; (8002648 <DioIrqHndlr+0xec8>)
 80025a4:	79db      	ldrb	r3, [r3, #7]
 80025a6:	4619      	mov	r1, r3
 80025a8:	4834      	ldr	r0, [pc, #208]	; (800267c <DioIrqHndlr+0xefc>)
 80025aa:	f7fe f92f 	bl	800080c <myDebug>
		myDebug("__________*******************__________\r\n");
 80025ae:	4834      	ldr	r0, [pc, #208]	; (8002680 <DioIrqHndlr+0xf00>)
 80025b0:	f7fe f92c 	bl	800080c <myDebug>

		SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 80025b4:	4813      	ldr	r0, [pc, #76]	; (8002604 <DioIrqHndlr+0xe84>)
 80025b6:	f008 f86d 	bl	800a694 <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 80025ba:	2100      	movs	r1, #0
 80025bc:	2001      	movs	r0, #1
 80025be:	f008 fcb1 	bl	800af24 <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 80025c2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80025c6:	f007 fe91 	bl	800a2ec <SUBGRF_SetRxBoosted>

		HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 80025ca:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <DioIrqHndlr+0xe88>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	461a      	mov	r2, r3
 80025d2:	4909      	ldr	r1, [pc, #36]	; (80025f8 <DioIrqHndlr+0xe78>)
 80025d4:	480d      	ldr	r0, [pc, #52]	; (800260c <DioIrqHndlr+0xe8c>)
 80025d6:	f004 f99f 	bl	8006918 <HAL_UART_Receive_DMA>

		HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 80025da:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <DioIrqHndlr+0xe88>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	461a      	mov	r2, r3
 80025e2:	4905      	ldr	r1, [pc, #20]	; (80025f8 <DioIrqHndlr+0xe78>)
 80025e4:	480a      	ldr	r0, [pc, #40]	; (8002610 <DioIrqHndlr+0xe90>)
 80025e6:	f004 f997 	bl	8006918 <HAL_UART_Receive_DMA>

	}

}
 80025ea:	bf00      	nop
 80025ec:	37f4      	adds	r7, #244	; 0xf4
 80025ee:	46bd      	mov	sp, r7
 80025f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025f4:	0800cbe4 	.word	0x0800cbe4
 80025f8:	20000314 	.word	0x20000314
 80025fc:	20000311 	.word	0x20000311
 8002600:	20000368 	.word	0x20000368
 8002604:	19f25968 	.word	0x19f25968
 8002608:	20000001 	.word	0x20000001
 800260c:	20000648 	.word	0x20000648
 8002610:	20000520 	.word	0x20000520
 8002614:	0800cc14 	.word	0x0800cc14
 8002618:	20000404 	.word	0x20000404
 800261c:	0800c84c 	.word	0x0800c84c
 8002620:	2000049c 	.word	0x2000049c
 8002624:	0800c854 	.word	0x0800c854
 8002628:	200004a8 	.word	0x200004a8
 800262c:	20000004 	.word	0x20000004
 8002630:	20000008 	.word	0x20000008
 8002634:	200004ac 	.word	0x200004ac
 8002638:	200004a4 	.word	0x200004a4
 800263c:	200004b0 	.word	0x200004b0
 8002640:	0800cc40 	.word	0x0800cc40
 8002644:	0007a120 	.word	0x0007a120
 8002648:	2000027c 	.word	0x2000027c
 800264c:	20000290 	.word	0x20000290
 8002650:	08001781 	.word	0x08001781
 8002654:	0800c8c8 	.word	0x0800c8c8
 8002658:	0800c6e4 	.word	0x0800c6e4
 800265c:	0800c710 	.word	0x0800c710
 8002660:	0800c738 	.word	0x0800c738
 8002664:	0800c748 	.word	0x0800c748
 8002668:	0800c764 	.word	0x0800c764
 800266c:	0800c780 	.word	0x0800c780
 8002670:	0800c794 	.word	0x0800c794
 8002674:	0800c7ac 	.word	0x0800c7ac
 8002678:	0800c7c4 	.word	0x0800c7c4
 800267c:	0800c7dc 	.word	0x0800c7dc
 8002680:	0800c7f0 	.word	0x0800c7f0

08002684 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002688:	b672      	cpsid	i
}
 800268a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800268c:	e7fe      	b.n	800268c <Error_Handler+0x8>
	...

08002690 <WAIT_FOR_HANDSHAKE>:
#define ACK_LENGTH	(7)

extern uint8_t OBC_HANDSHAKE_FLAG;
uint8_t MainCMDHs[ACK_LENGTH];

void WAIT_FOR_HANDSHAKE() {
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0

	memset(MainCMDHs, '\0', ACK_LENGTH);
 8002696:	2207      	movs	r2, #7
 8002698:	2100      	movs	r1, #0
 800269a:	489f      	ldr	r0, [pc, #636]	; (8002918 <WAIT_FOR_HANDSHAKE+0x288>)
 800269c:	f009 fa40 	bl	800bb20 <memset>
	OBC_HANDSHAKE_FLAG = 0;
 80026a0:	4b9e      	ldr	r3, [pc, #632]	; (800291c <WAIT_FOR_HANDSHAKE+0x28c>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Receive(&huart2, MainCMDHs, ACK_LENGTH, 7000) == HAL_OK
 80026a6:	f641 3358 	movw	r3, #7000	; 0x1b58
 80026aa:	2207      	movs	r2, #7
 80026ac:	499a      	ldr	r1, [pc, #616]	; (8002918 <WAIT_FOR_HANDSHAKE+0x288>)
 80026ae:	489c      	ldr	r0, [pc, #624]	; (8002920 <WAIT_FOR_HANDSHAKE+0x290>)
 80026b0:	f004 f86d 	bl	800678e <HAL_UART_Receive>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00a      	beq.n	80026d0 <WAIT_FOR_HANDSHAKE+0x40>
			|| HAL_UART_Receive(&hlpuart1, MainCMDHs, ACK_LENGTH, 7000)
 80026ba:	f641 3358 	movw	r3, #7000	; 0x1b58
 80026be:	2207      	movs	r2, #7
 80026c0:	4995      	ldr	r1, [pc, #596]	; (8002918 <WAIT_FOR_HANDSHAKE+0x288>)
 80026c2:	4898      	ldr	r0, [pc, #608]	; (8002924 <WAIT_FOR_HANDSHAKE+0x294>)
 80026c4:	f004 f863 	bl	800678e <HAL_UART_Receive>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f040 8111 	bne.w	80028f2 <WAIT_FOR_HANDSHAKE+0x262>
					== HAL_OK) {
		myDebug("--> Handshake command received from OBC: 0x%x\r\n");
 80026d0:	4895      	ldr	r0, [pc, #596]	; (8002928 <WAIT_FOR_HANDSHAKE+0x298>)
 80026d2:	f7fe f89b 	bl	800080c <myDebug>
		for (int i = 0; i < (ACK_LENGTH); i++) {
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	e00a      	b.n	80026f2 <WAIT_FOR_HANDSHAKE+0x62>
			myDebug("%02x ", MainCMDHs[i]);
 80026dc:	4a8e      	ldr	r2, [pc, #568]	; (8002918 <WAIT_FOR_HANDSHAKE+0x288>)
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	4413      	add	r3, r2
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	4619      	mov	r1, r3
 80026e6:	4891      	ldr	r0, [pc, #580]	; (800292c <WAIT_FOR_HANDSHAKE+0x29c>)
 80026e8:	f7fe f890 	bl	800080c <myDebug>
		for (int i = 0; i < (ACK_LENGTH); i++) {
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	3301      	adds	r3, #1
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	2b06      	cmp	r3, #6
 80026f6:	ddf1      	ble.n	80026dc <WAIT_FOR_HANDSHAKE+0x4c>
		}
		myDebug("\n");
 80026f8:	488d      	ldr	r0, [pc, #564]	; (8002930 <WAIT_FOR_HANDSHAKE+0x2a0>)
 80026fa:	f7fe f887 	bl	800080c <myDebug>

		if (MainCMDHs[0] == 0) {
 80026fe:	4b86      	ldr	r3, [pc, #536]	; (8002918 <WAIT_FOR_HANDSHAKE+0x288>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d179      	bne.n	80027fa <WAIT_FOR_HANDSHAKE+0x16a>

			if (MainCMDHs[1] == ACK_HEAD && MainCMDHs[6] == ACK_TAIL) {
 8002706:	4b84      	ldr	r3, [pc, #528]	; (8002918 <WAIT_FOR_HANDSHAKE+0x288>)
 8002708:	785b      	ldrb	r3, [r3, #1]
 800270a:	2b53      	cmp	r3, #83	; 0x53
 800270c:	d13b      	bne.n	8002786 <WAIT_FOR_HANDSHAKE+0xf6>
 800270e:	4b82      	ldr	r3, [pc, #520]	; (8002918 <WAIT_FOR_HANDSHAKE+0x288>)
 8002710:	799b      	ldrb	r3, [r3, #6]
 8002712:	2b7e      	cmp	r3, #126	; 0x7e
 8002714:	d137      	bne.n	8002786 <WAIT_FOR_HANDSHAKE+0xf6>
				myDebug("--> Command Acknowledged successful!\n");
 8002716:	4887      	ldr	r0, [pc, #540]	; (8002934 <WAIT_FOR_HANDSHAKE+0x2a4>)
 8002718:	f7fe f878 	bl	800080c <myDebug>
				if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 800271c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002720:	2207      	movs	r2, #7
 8002722:	497d      	ldr	r1, [pc, #500]	; (8002918 <WAIT_FOR_HANDSHAKE+0x288>)
 8002724:	487e      	ldr	r0, [pc, #504]	; (8002920 <WAIT_FOR_HANDSHAKE+0x290>)
 8002726:	f003 ffac 	bl	8006682 <HAL_UART_Transmit>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00a      	beq.n	8002746 <WAIT_FOR_HANDSHAKE+0xb6>
						== HAL_OK
						|| HAL_UART_Transmit(&hlpuart1, MainCMDHs, ACK_LENGTH,
 8002730:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002734:	2207      	movs	r2, #7
 8002736:	4978      	ldr	r1, [pc, #480]	; (8002918 <WAIT_FOR_HANDSHAKE+0x288>)
 8002738:	487a      	ldr	r0, [pc, #488]	; (8002924 <WAIT_FOR_HANDSHAKE+0x294>)
 800273a:	f003 ffa2 	bl	8006682 <HAL_UART_Transmit>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	f040 80d2 	bne.w	80028ea <WAIT_FOR_HANDSHAKE+0x25a>
								2000) == HAL_OK) {
					myDebug("--> Handshake ACK, re-transmit to OBC: \n");
 8002746:	487c      	ldr	r0, [pc, #496]	; (8002938 <WAIT_FOR_HANDSHAKE+0x2a8>)
 8002748:	f7fe f860 	bl	800080c <myDebug>
					for (int i = 0; i < (ACK_LENGTH); i++) {
 800274c:	2300      	movs	r3, #0
 800274e:	613b      	str	r3, [r7, #16]
 8002750:	e00a      	b.n	8002768 <WAIT_FOR_HANDSHAKE+0xd8>
						myDebug("%02x ", MainCMDHs[i]);
 8002752:	4a71      	ldr	r2, [pc, #452]	; (8002918 <WAIT_FOR_HANDSHAKE+0x288>)
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4413      	add	r3, r2
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	4619      	mov	r1, r3
 800275c:	4873      	ldr	r0, [pc, #460]	; (800292c <WAIT_FOR_HANDSHAKE+0x29c>)
 800275e:	f7fe f855 	bl	800080c <myDebug>
					for (int i = 0; i < (ACK_LENGTH); i++) {
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	3301      	adds	r3, #1
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	2b06      	cmp	r3, #6
 800276c:	ddf1      	ble.n	8002752 <WAIT_FOR_HANDSHAKE+0xc2>
					}
					myDebug("\n");
 800276e:	4870      	ldr	r0, [pc, #448]	; (8002930 <WAIT_FOR_HANDSHAKE+0x2a0>)
 8002770:	f7fe f84c 	bl	800080c <myDebug>
					OBC_HANDSHAKE_FLAG = 1;
 8002774:	4b69      	ldr	r3, [pc, #420]	; (800291c <WAIT_FOR_HANDSHAKE+0x28c>)
 8002776:	2201      	movs	r2, #1
 8002778:	701a      	strb	r2, [r3, #0]
					memset(MainCMDHs, '\0', ACK_LENGTH);
 800277a:	2207      	movs	r2, #7
 800277c:	2100      	movs	r1, #0
 800277e:	4866      	ldr	r0, [pc, #408]	; (8002918 <WAIT_FOR_HANDSHAKE+0x288>)
 8002780:	f009 f9ce 	bl	800bb20 <memset>
				if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 8002784:	e0b1      	b.n	80028ea <WAIT_FOR_HANDSHAKE+0x25a>
				}
			} else {
				myDebug("*** Unknown Handshake command received!\n");
 8002786:	486d      	ldr	r0, [pc, #436]	; (800293c <WAIT_FOR_HANDSHAKE+0x2ac>)
 8002788:	f7fe f840 	bl	800080c <myDebug>
				if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 800278c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002790:	2207      	movs	r2, #7
 8002792:	4961      	ldr	r1, [pc, #388]	; (8002918 <WAIT_FOR_HANDSHAKE+0x288>)
 8002794:	4862      	ldr	r0, [pc, #392]	; (8002920 <WAIT_FOR_HANDSHAKE+0x290>)
 8002796:	f003 ff74 	bl	8006682 <HAL_UART_Transmit>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00a      	beq.n	80027b6 <WAIT_FOR_HANDSHAKE+0x126>
						== HAL_OK
						|| HAL_UART_Transmit(&hlpuart1, MainCMDHs, ACK_LENGTH,
 80027a0:	f641 3358 	movw	r3, #7000	; 0x1b58
 80027a4:	2207      	movs	r2, #7
 80027a6:	495c      	ldr	r1, [pc, #368]	; (8002918 <WAIT_FOR_HANDSHAKE+0x288>)
 80027a8:	485e      	ldr	r0, [pc, #376]	; (8002924 <WAIT_FOR_HANDSHAKE+0x294>)
 80027aa:	f003 ff6a 	bl	8006682 <HAL_UART_Transmit>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f040 80ac 	bne.w	800290e <WAIT_FOR_HANDSHAKE+0x27e>
								7000) == HAL_OK) {
					myDebug("--> Unknown Handshake ACK, re-transmit to OBC.\n");
 80027b6:	4862      	ldr	r0, [pc, #392]	; (8002940 <WAIT_FOR_HANDSHAKE+0x2b0>)
 80027b8:	f7fe f828 	bl	800080c <myDebug>
					for (int i = 0; i < (ACK_LENGTH); i++) {
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	e00a      	b.n	80027d8 <WAIT_FOR_HANDSHAKE+0x148>
						myDebug("%02x ", MainCMDHs[i]);
 80027c2:	4a55      	ldr	r2, [pc, #340]	; (8002918 <WAIT_FOR_HANDSHAKE+0x288>)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4413      	add	r3, r2
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	4619      	mov	r1, r3
 80027cc:	4857      	ldr	r0, [pc, #348]	; (800292c <WAIT_FOR_HANDSHAKE+0x29c>)
 80027ce:	f7fe f81d 	bl	800080c <myDebug>
					for (int i = 0; i < (ACK_LENGTH); i++) {
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3301      	adds	r3, #1
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2b06      	cmp	r3, #6
 80027dc:	ddf1      	ble.n	80027c2 <WAIT_FOR_HANDSHAKE+0x132>
					}
					myDebug("\n");
 80027de:	4854      	ldr	r0, [pc, #336]	; (8002930 <WAIT_FOR_HANDSHAKE+0x2a0>)
 80027e0:	f7fe f814 	bl	800080c <myDebug>
					memset(MainCMDHs, '\0',ACK_LENGTH);
 80027e4:	2207      	movs	r2, #7
 80027e6:	2100      	movs	r1, #0
 80027e8:	484b      	ldr	r0, [pc, #300]	; (8002918 <WAIT_FOR_HANDSHAKE+0x288>)
 80027ea:	f009 f999 	bl	800bb20 <memset>
					OBC_HANDSHAKE_FLAG = 0;
 80027ee:	4b4b      	ldr	r3, [pc, #300]	; (800291c <WAIT_FOR_HANDSHAKE+0x28c>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]
					WAIT_FOR_HANDSHAKE();
 80027f4:	f7ff ff4c 	bl	8002690 <WAIT_FOR_HANDSHAKE>
		if (MainCMDHs[0] == 0) {
 80027f8:	e089      	b.n	800290e <WAIT_FOR_HANDSHAKE+0x27e>
				}
			}
		} else {
			if (MainCMDHs[0] == ACK_HEAD && MainCMDHs[5] == ACK_TAIL) {
 80027fa:	4b47      	ldr	r3, [pc, #284]	; (8002918 <WAIT_FOR_HANDSHAKE+0x288>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b53      	cmp	r3, #83	; 0x53
 8002800:	d13a      	bne.n	8002878 <WAIT_FOR_HANDSHAKE+0x1e8>
 8002802:	4b45      	ldr	r3, [pc, #276]	; (8002918 <WAIT_FOR_HANDSHAKE+0x288>)
 8002804:	795b      	ldrb	r3, [r3, #5]
 8002806:	2b7e      	cmp	r3, #126	; 0x7e
 8002808:	d136      	bne.n	8002878 <WAIT_FOR_HANDSHAKE+0x1e8>
				myDebug("--> Command Acknowledged successful!\n");
 800280a:	484a      	ldr	r0, [pc, #296]	; (8002934 <WAIT_FOR_HANDSHAKE+0x2a4>)
 800280c:	f7fd fffe 	bl	800080c <myDebug>
				if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 8002810:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002814:	2207      	movs	r2, #7
 8002816:	4940      	ldr	r1, [pc, #256]	; (8002918 <WAIT_FOR_HANDSHAKE+0x288>)
 8002818:	4841      	ldr	r0, [pc, #260]	; (8002920 <WAIT_FOR_HANDSHAKE+0x290>)
 800281a:	f003 ff32 	bl	8006682 <HAL_UART_Transmit>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d009      	beq.n	8002838 <WAIT_FOR_HANDSHAKE+0x1a8>
						== HAL_OK
						|| HAL_UART_Transmit(&hlpuart1, MainCMDHs, ACK_LENGTH,
 8002824:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002828:	2207      	movs	r2, #7
 800282a:	493b      	ldr	r1, [pc, #236]	; (8002918 <WAIT_FOR_HANDSHAKE+0x288>)
 800282c:	483d      	ldr	r0, [pc, #244]	; (8002924 <WAIT_FOR_HANDSHAKE+0x294>)
 800282e:	f003 ff28 	bl	8006682 <HAL_UART_Transmit>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d15a      	bne.n	80028ee <WAIT_FOR_HANDSHAKE+0x25e>
								2000) == HAL_OK) {
					myDebug("--> Handshake ACK, re-transmit to OBC: \n");
 8002838:	483f      	ldr	r0, [pc, #252]	; (8002938 <WAIT_FOR_HANDSHAKE+0x2a8>)
 800283a:	f7fd ffe7 	bl	800080c <myDebug>
					for (int i = 0; i < (ACK_LENGTH); i++) {
 800283e:	2300      	movs	r3, #0
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	e00a      	b.n	800285a <WAIT_FOR_HANDSHAKE+0x1ca>
						myDebug("%02x ", MainCMDHs[i]);
 8002844:	4a34      	ldr	r2, [pc, #208]	; (8002918 <WAIT_FOR_HANDSHAKE+0x288>)
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	4413      	add	r3, r2
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	4619      	mov	r1, r3
 800284e:	4837      	ldr	r0, [pc, #220]	; (800292c <WAIT_FOR_HANDSHAKE+0x29c>)
 8002850:	f7fd ffdc 	bl	800080c <myDebug>
					for (int i = 0; i < (ACK_LENGTH); i++) {
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	3301      	adds	r3, #1
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2b06      	cmp	r3, #6
 800285e:	ddf1      	ble.n	8002844 <WAIT_FOR_HANDSHAKE+0x1b4>
					}
					myDebug("\n");
 8002860:	4833      	ldr	r0, [pc, #204]	; (8002930 <WAIT_FOR_HANDSHAKE+0x2a0>)
 8002862:	f7fd ffd3 	bl	800080c <myDebug>
					OBC_HANDSHAKE_FLAG = 1;
 8002866:	4b2d      	ldr	r3, [pc, #180]	; (800291c <WAIT_FOR_HANDSHAKE+0x28c>)
 8002868:	2201      	movs	r2, #1
 800286a:	701a      	strb	r2, [r3, #0]
					memset(MainCMDHs, '\0', ACK_LENGTH);
 800286c:	2207      	movs	r2, #7
 800286e:	2100      	movs	r1, #0
 8002870:	4829      	ldr	r0, [pc, #164]	; (8002918 <WAIT_FOR_HANDSHAKE+0x288>)
 8002872:	f009 f955 	bl	800bb20 <memset>
				if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 8002876:	e03a      	b.n	80028ee <WAIT_FOR_HANDSHAKE+0x25e>
				}
			} else {
				myDebug("*** Unknown Handshake command received!\n");
 8002878:	4830      	ldr	r0, [pc, #192]	; (800293c <WAIT_FOR_HANDSHAKE+0x2ac>)
 800287a:	f7fd ffc7 	bl	800080c <myDebug>
				if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 800287e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002882:	2207      	movs	r2, #7
 8002884:	4924      	ldr	r1, [pc, #144]	; (8002918 <WAIT_FOR_HANDSHAKE+0x288>)
 8002886:	4826      	ldr	r0, [pc, #152]	; (8002920 <WAIT_FOR_HANDSHAKE+0x290>)
 8002888:	f003 fefb 	bl	8006682 <HAL_UART_Transmit>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d009      	beq.n	80028a6 <WAIT_FOR_HANDSHAKE+0x216>
						== HAL_OK
						|| HAL_UART_Transmit(&hlpuart1, MainCMDHs, ACK_LENGTH,
 8002892:	f641 3358 	movw	r3, #7000	; 0x1b58
 8002896:	2207      	movs	r2, #7
 8002898:	491f      	ldr	r1, [pc, #124]	; (8002918 <WAIT_FOR_HANDSHAKE+0x288>)
 800289a:	4822      	ldr	r0, [pc, #136]	; (8002924 <WAIT_FOR_HANDSHAKE+0x294>)
 800289c:	f003 fef1 	bl	8006682 <HAL_UART_Transmit>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d133      	bne.n	800290e <WAIT_FOR_HANDSHAKE+0x27e>
								7000) == HAL_OK) {
					myDebug("--> Unknown Handshake ACK, re-transmit to OBC.\n");
 80028a6:	4826      	ldr	r0, [pc, #152]	; (8002940 <WAIT_FOR_HANDSHAKE+0x2b0>)
 80028a8:	f7fd ffb0 	bl	800080c <myDebug>
					for (int i = 0; i < (ACK_LENGTH); i++) {
 80028ac:	2300      	movs	r3, #0
 80028ae:	607b      	str	r3, [r7, #4]
 80028b0:	e00a      	b.n	80028c8 <WAIT_FOR_HANDSHAKE+0x238>
						myDebug("%02x ", MainCMDHs[i]);
 80028b2:	4a19      	ldr	r2, [pc, #100]	; (8002918 <WAIT_FOR_HANDSHAKE+0x288>)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4413      	add	r3, r2
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	4619      	mov	r1, r3
 80028bc:	481b      	ldr	r0, [pc, #108]	; (800292c <WAIT_FOR_HANDSHAKE+0x29c>)
 80028be:	f7fd ffa5 	bl	800080c <myDebug>
					for (int i = 0; i < (ACK_LENGTH); i++) {
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3301      	adds	r3, #1
 80028c6:	607b      	str	r3, [r7, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b06      	cmp	r3, #6
 80028cc:	ddf1      	ble.n	80028b2 <WAIT_FOR_HANDSHAKE+0x222>
					}
					myDebug("\n");
 80028ce:	4818      	ldr	r0, [pc, #96]	; (8002930 <WAIT_FOR_HANDSHAKE+0x2a0>)
 80028d0:	f7fd ff9c 	bl	800080c <myDebug>
					memset(MainCMDHs, '\0', ACK_LENGTH);
 80028d4:	2207      	movs	r2, #7
 80028d6:	2100      	movs	r1, #0
 80028d8:	480f      	ldr	r0, [pc, #60]	; (8002918 <WAIT_FOR_HANDSHAKE+0x288>)
 80028da:	f009 f921 	bl	800bb20 <memset>
					OBC_HANDSHAKE_FLAG = 0;
 80028de:	4b0f      	ldr	r3, [pc, #60]	; (800291c <WAIT_FOR_HANDSHAKE+0x28c>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	701a      	strb	r2, [r3, #0]
					WAIT_FOR_HANDSHAKE();
 80028e4:	f7ff fed4 	bl	8002690 <WAIT_FOR_HANDSHAKE>
		if (MainCMDHs[0] == 0) {
 80028e8:	e011      	b.n	800290e <WAIT_FOR_HANDSHAKE+0x27e>
				if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 80028ea:	bf00      	nop
 80028ec:	e00f      	b.n	800290e <WAIT_FOR_HANDSHAKE+0x27e>
				if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 80028ee:	bf00      	nop
		if (MainCMDHs[0] == 0) {
 80028f0:	e00d      	b.n	800290e <WAIT_FOR_HANDSHAKE+0x27e>
				}
			}
		}
	} else {
		OBC_HANDSHAKE_FLAG = 0;
 80028f2:	4b0a      	ldr	r3, [pc, #40]	; (800291c <WAIT_FOR_HANDSHAKE+0x28c>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	701a      	strb	r2, [r3, #0]
		myDebug("*** Handshake Command receive failed, try again!\n");
 80028f8:	4812      	ldr	r0, [pc, #72]	; (8002944 <WAIT_FOR_HANDSHAKE+0x2b4>)
 80028fa:	f7fd ff87 	bl	800080c <myDebug>
		memset(MainCMDHs, '\0', ACK_LENGTH);
 80028fe:	2207      	movs	r2, #7
 8002900:	2100      	movs	r1, #0
 8002902:	4805      	ldr	r0, [pc, #20]	; (8002918 <WAIT_FOR_HANDSHAKE+0x288>)
 8002904:	f009 f90c 	bl	800bb20 <memset>
		WAIT_FOR_HANDSHAKE();
 8002908:	f7ff fec2 	bl	8002690 <WAIT_FOR_HANDSHAKE>
	}
}
 800290c:	e000      	b.n	8002910 <WAIT_FOR_HANDSHAKE+0x280>
		if (MainCMDHs[0] == 0) {
 800290e:	bf00      	nop
}
 8002910:	bf00      	nop
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	200004b4 	.word	0x200004b4
 800291c:	200004a0 	.word	0x200004a0
 8002920:	20000648 	.word	0x20000648
 8002924:	20000520 	.word	0x20000520
 8002928:	0800cc78 	.word	0x0800cc78
 800292c:	0800cca8 	.word	0x0800cca8
 8002930:	0800ccb0 	.word	0x0800ccb0
 8002934:	0800ccb4 	.word	0x0800ccb4
 8002938:	0800ccdc 	.word	0x0800ccdc
 800293c:	0800cd08 	.word	0x0800cd08
 8002940:	0800cd34 	.word	0x0800cd34
 8002944:	0800cd64 	.word	0x0800cd64

08002948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800294c:	bf00      	nop
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr

08002954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002958:	e7fe      	b.n	8002958 <NMI_Handler+0x4>

0800295a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800295a:	b480      	push	{r7}
 800295c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800295e:	e7fe      	b.n	800295e <HardFault_Handler+0x4>

08002960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002964:	e7fe      	b.n	8002964 <MemManage_Handler+0x4>

08002966 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002966:	b480      	push	{r7}
 8002968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800296a:	e7fe      	b.n	800296a <BusFault_Handler+0x4>

0800296c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002970:	e7fe      	b.n	8002970 <UsageFault_Handler+0x4>

08002972 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002972:	b480      	push	{r7}
 8002974:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr

0800297e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800297e:	b480      	push	{r7}
 8002980:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002982:	bf00      	nop
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr

0800298a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800298a:	b480      	push	{r7}
 800298c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr

08002996 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800299a:	f000 fd43 	bl	8003424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80029a8:	4802      	ldr	r0, [pc, #8]	; (80029b4 <DMA1_Channel1_IRQHandler+0x10>)
 80029aa:	f001 f83d 	bl	8003a28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	200006dc 	.word	0x200006dc

080029b8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80029bc:	4802      	ldr	r0, [pc, #8]	; (80029c8 <DMA1_Channel2_IRQHandler+0x10>)
 80029be:	f001 f833 	bl	8003a28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	2000073c 	.word	0x2000073c

080029cc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 3 Interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80029d0:	4802      	ldr	r0, [pc, #8]	; (80029dc <DMA1_Channel3_IRQHandler+0x10>)
 80029d2:	f001 f829 	bl	8003a28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	2000079c 	.word	0x2000079c

080029e0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 4 Interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80029e4:	4802      	ldr	r0, [pc, #8]	; (80029f0 <DMA1_Channel4_IRQHandler+0x10>)
 80029e6:	f001 f81f 	bl	8003a28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	200007fc 	.word	0x200007fc

080029f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029f8:	4802      	ldr	r0, [pc, #8]	; (8002a04 <USART1_IRQHandler+0x10>)
 80029fa:	f003 ffd9 	bl	80069b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	200005b4 	.word	0x200005b4

08002a08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a0c:	4802      	ldr	r0, [pc, #8]	; (8002a18 <USART2_IRQHandler+0x10>)
 8002a0e:	f003 ffcf 	bl	80069b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20000648 	.word	0x20000648

08002a1c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002a20:	4802      	ldr	r0, [pc, #8]	; (8002a2c <LPUART1_IRQHandler+0x10>)
 8002a22:	f003 ffc5 	bl	80069b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000520 	.word	0x20000520

08002a30 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8002a34:	4802      	ldr	r0, [pc, #8]	; (8002a40 <SUBGHZ_Radio_IRQHandler+0x10>)
 8002a36:	f003 f957 	bl	8005ce8 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	200004bc 	.word	0x200004bc

08002a44 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a50:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a60:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4013      	ands	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a68:	68fb      	ldr	r3, [r7, #12]
}
 8002a6a:	bf00      	nop
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8002a78:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <MX_SUBGHZ_Init+0x20>)
 8002a7a:	2210      	movs	r2, #16
 8002a7c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8002a7e:	4805      	ldr	r0, [pc, #20]	; (8002a94 <MX_SUBGHZ_Init+0x20>)
 8002a80:	f002 feb0 	bl	80057e4 <HAL_SUBGHZ_Init>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8002a8a:	f7ff fdfb 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	200004bc 	.word	0x200004bc

08002a98 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8002aa0:	2001      	movs	r0, #1
 8002aa2:	f7ff ffcf 	bl	8002a44 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	2032      	movs	r0, #50	; 0x32
 8002aac:	f000 fda3 	bl	80035f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002ab0:	2032      	movs	r0, #50	; 0x32
 8002ab2:	f000 fdba 	bl	800362a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 8002ac2:	bf00      	nop
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr
	...

08002acc <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002ad6:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <HAL_GetTick+0x24>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d002      	beq.n	8002ae4 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8002ade:	f000 f908 	bl	8002cf2 <TIMER_IF_GetTimerValue>
 8002ae2:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002ae4:	687b      	ldr	r3, [r7, #4]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	200004c8 	.word	0x200004c8

08002af4 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 f925 	bl	8002d4e <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002b04:	bf00      	nop
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b14:	4a14      	ldr	r2, [pc, #80]	; (8002b68 <_sbrk+0x5c>)
 8002b16:	4b15      	ldr	r3, [pc, #84]	; (8002b6c <_sbrk+0x60>)
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b20:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <_sbrk+0x64>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d102      	bne.n	8002b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b28:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <_sbrk+0x64>)
 8002b2a:	4a12      	ldr	r2, [pc, #72]	; (8002b74 <_sbrk+0x68>)
 8002b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b2e:	4b10      	ldr	r3, [pc, #64]	; (8002b70 <_sbrk+0x64>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4413      	add	r3, r2
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d207      	bcs.n	8002b4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b3c:	f008 fff8 	bl	800bb30 <__errno>
 8002b40:	4603      	mov	r3, r0
 8002b42:	220c      	movs	r2, #12
 8002b44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b4a:	e009      	b.n	8002b60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b4c:	4b08      	ldr	r3, [pc, #32]	; (8002b70 <_sbrk+0x64>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b52:	4b07      	ldr	r3, [pc, #28]	; (8002b70 <_sbrk+0x64>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4413      	add	r3, r2
 8002b5a:	4a05      	ldr	r2, [pc, #20]	; (8002b70 <_sbrk+0x64>)
 8002b5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	20010000 	.word	0x20010000
 8002b6c:	00000400 	.word	0x00000400
 8002b70:	200004cc 	.word	0x200004cc
 8002b74:	20000b68 	.word	0x20000b68

08002b78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <LL_APB1_GRP1_EnableClock>:
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
}
 8002baa:	bf00      	nop
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr

08002bb4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bba:	f107 0310 	add.w	r3, r7, #16
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	605a      	str	r2, [r3, #4]
 8002bc4:	609a      	str	r2, [r3, #8]
 8002bc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bc8:	1d3b      	adds	r3, r7, #4
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	605a      	str	r2, [r3, #4]
 8002bd0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002bd2:	4b1d      	ldr	r3, [pc, #116]	; (8002c48 <MX_TIM2_Init+0x94>)
 8002bd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bd8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8002bda:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <MX_TIM2_Init+0x94>)
 8002bdc:	222f      	movs	r2, #47	; 0x2f
 8002bde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002be0:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <MX_TIM2_Init+0x94>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000001-1;
 8002be6:	4b18      	ldr	r3, [pc, #96]	; (8002c48 <MX_TIM2_Init+0x94>)
 8002be8:	4a18      	ldr	r2, [pc, #96]	; (8002c4c <MX_TIM2_Init+0x98>)
 8002bea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bec:	4b16      	ldr	r3, [pc, #88]	; (8002c48 <MX_TIM2_Init+0x94>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bf2:	4b15      	ldr	r3, [pc, #84]	; (8002c48 <MX_TIM2_Init+0x94>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002bf8:	4813      	ldr	r0, [pc, #76]	; (8002c48 <MX_TIM2_Init+0x94>)
 8002bfa:	f003 fa13 	bl	8006024 <HAL_TIM_Base_Init>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002c04:	f7ff fd3e 	bl	8002684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c0e:	f107 0310 	add.w	r3, r7, #16
 8002c12:	4619      	mov	r1, r3
 8002c14:	480c      	ldr	r0, [pc, #48]	; (8002c48 <MX_TIM2_Init+0x94>)
 8002c16:	f003 faa1 	bl	800615c <HAL_TIM_ConfigClockSource>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002c20:	f7ff fd30 	bl	8002684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c24:	2300      	movs	r3, #0
 8002c26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c2c:	1d3b      	adds	r3, r7, #4
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4805      	ldr	r0, [pc, #20]	; (8002c48 <MX_TIM2_Init+0x94>)
 8002c32:	f003 fc57 	bl	80064e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002c3c:	f7ff fd22 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c40:	bf00      	nop
 8002c42:	3720      	adds	r7, #32
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	200004d0 	.word	0x200004d0
 8002c4c:	000f4240 	.word	0x000f4240

08002c50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c60:	d102      	bne.n	8002c68 <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c62:	2001      	movs	r0, #1
 8002c64:	f7ff ff8e 	bl	8002b84 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002c68:	bf00      	nop
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr

08002c86 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b085      	sub	sp, #20
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr

08002c9e <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr

08002cb4 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8002cb8:	4b02      	ldr	r3, [pc, #8]	; (8002cc4 <TIMER_IF_SetTimerContext+0x10>)
 8002cba:	681b      	ldr	r3, [r3, #0]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr
 8002cc4:	2000051c 	.word	0x2000051c

08002cc8 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8002ccc:	4b02      	ldr	r3, [pc, #8]	; (8002cd8 <TIMER_IF_GetTimerContext+0x10>)
 8002cce:	681b      	ldr	r3, [r3, #0]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr
 8002cd8:	2000051c 	.word	0x2000051c

08002cdc <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8002ce6:	687b      	ldr	r3, [r7, #4]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr

08002cf2 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8002cfc:	687b      	ldr	r3, [r7, #4]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr

08002d08 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 8002d12:	687b      	ldr	r3, [r7, #4]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b085      	sub	sp, #20
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr

08002d36 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b085      	sub	sp, #20
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 8002d42:	68fb      	ldr	r3, [r7, #12]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr

08002d4e <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <LL_AHB2_GRP1_EnableClock>:
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4013      	ands	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d84:	68fb      	ldr	r3, [r7, #12]
}
 8002d86:	bf00      	nop
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <LL_APB1_GRP1_EnableClock>:
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4013      	ands	r3, r2
 8002db2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002db4:	68fb      	ldr	r3, [r7, #12]
}
 8002db6:	bf00      	nop
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <LL_APB1_GRP2_EnableClock>:
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dcc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ddc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4013      	ands	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002de4:	68fb      	ldr	r3, [r7, #12]
}
 8002de6:	bf00      	nop
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr

08002df0 <LL_APB2_GRP1_EnableClock>:
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e0c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4013      	ands	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e14:	68fb      	ldr	r3, [r7, #12]
}
 8002e16:	bf00      	nop
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr

08002e20 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002e24:	4b22      	ldr	r3, [pc, #136]	; (8002eb0 <MX_LPUART1_UART_Init+0x90>)
 8002e26:	4a23      	ldr	r2, [pc, #140]	; (8002eb4 <MX_LPUART1_UART_Init+0x94>)
 8002e28:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8002e2a:	4b21      	ldr	r3, [pc, #132]	; (8002eb0 <MX_LPUART1_UART_Init+0x90>)
 8002e2c:	4a22      	ldr	r2, [pc, #136]	; (8002eb8 <MX_LPUART1_UART_Init+0x98>)
 8002e2e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e30:	4b1f      	ldr	r3, [pc, #124]	; (8002eb0 <MX_LPUART1_UART_Init+0x90>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002e36:	4b1e      	ldr	r3, [pc, #120]	; (8002eb0 <MX_LPUART1_UART_Init+0x90>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002e3c:	4b1c      	ldr	r3, [pc, #112]	; (8002eb0 <MX_LPUART1_UART_Init+0x90>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002e42:	4b1b      	ldr	r3, [pc, #108]	; (8002eb0 <MX_LPUART1_UART_Init+0x90>)
 8002e44:	220c      	movs	r2, #12
 8002e46:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e48:	4b19      	ldr	r3, [pc, #100]	; (8002eb0 <MX_LPUART1_UART_Init+0x90>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e4e:	4b18      	ldr	r3, [pc, #96]	; (8002eb0 <MX_LPUART1_UART_Init+0x90>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e54:	4b16      	ldr	r3, [pc, #88]	; (8002eb0 <MX_LPUART1_UART_Init+0x90>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e5a:	4b15      	ldr	r3, [pc, #84]	; (8002eb0 <MX_LPUART1_UART_Init+0x90>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002e60:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <MX_LPUART1_UART_Init+0x90>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002e66:	4812      	ldr	r0, [pc, #72]	; (8002eb0 <MX_LPUART1_UART_Init+0x90>)
 8002e68:	f003 fbbb 	bl	80065e2 <HAL_UART_Init>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8002e72:	f7ff fc07 	bl	8002684 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e76:	2100      	movs	r1, #0
 8002e78:	480d      	ldr	r0, [pc, #52]	; (8002eb0 <MX_LPUART1_UART_Init+0x90>)
 8002e7a:	f004 ffe3 	bl	8007e44 <HAL_UARTEx_SetTxFifoThreshold>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8002e84:	f7ff fbfe 	bl	8002684 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e88:	2100      	movs	r1, #0
 8002e8a:	4809      	ldr	r0, [pc, #36]	; (8002eb0 <MX_LPUART1_UART_Init+0x90>)
 8002e8c:	f005 f818 	bl	8007ec0 <HAL_UARTEx_SetRxFifoThreshold>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8002e96:	f7ff fbf5 	bl	8002684 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002e9a:	4805      	ldr	r0, [pc, #20]	; (8002eb0 <MX_LPUART1_UART_Init+0x90>)
 8002e9c:	f004 ff9a 	bl	8007dd4 <HAL_UARTEx_DisableFifoMode>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8002ea6:	f7ff fbed 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000520 	.word	0x20000520
 8002eb4:	40008000 	.word	0x40008000
 8002eb8:	00033324 	.word	0x00033324

08002ebc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ec0:	4b22      	ldr	r3, [pc, #136]	; (8002f4c <MX_USART1_UART_Init+0x90>)
 8002ec2:	4a23      	ldr	r2, [pc, #140]	; (8002f50 <MX_USART1_UART_Init+0x94>)
 8002ec4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002ec6:	4b21      	ldr	r3, [pc, #132]	; (8002f4c <MX_USART1_UART_Init+0x90>)
 8002ec8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ecc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ece:	4b1f      	ldr	r3, [pc, #124]	; (8002f4c <MX_USART1_UART_Init+0x90>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ed4:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <MX_USART1_UART_Init+0x90>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002eda:	4b1c      	ldr	r3, [pc, #112]	; (8002f4c <MX_USART1_UART_Init+0x90>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ee0:	4b1a      	ldr	r3, [pc, #104]	; (8002f4c <MX_USART1_UART_Init+0x90>)
 8002ee2:	220c      	movs	r2, #12
 8002ee4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ee6:	4b19      	ldr	r3, [pc, #100]	; (8002f4c <MX_USART1_UART_Init+0x90>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eec:	4b17      	ldr	r3, [pc, #92]	; (8002f4c <MX_USART1_UART_Init+0x90>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ef2:	4b16      	ldr	r3, [pc, #88]	; (8002f4c <MX_USART1_UART_Init+0x90>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ef8:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <MX_USART1_UART_Init+0x90>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002efe:	4b13      	ldr	r3, [pc, #76]	; (8002f4c <MX_USART1_UART_Init+0x90>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f04:	4811      	ldr	r0, [pc, #68]	; (8002f4c <MX_USART1_UART_Init+0x90>)
 8002f06:	f003 fb6c 	bl	80065e2 <HAL_UART_Init>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002f10:	f7ff fbb8 	bl	8002684 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f14:	2100      	movs	r1, #0
 8002f16:	480d      	ldr	r0, [pc, #52]	; (8002f4c <MX_USART1_UART_Init+0x90>)
 8002f18:	f004 ff94 	bl	8007e44 <HAL_UARTEx_SetTxFifoThreshold>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002f22:	f7ff fbaf 	bl	8002684 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f26:	2100      	movs	r1, #0
 8002f28:	4808      	ldr	r0, [pc, #32]	; (8002f4c <MX_USART1_UART_Init+0x90>)
 8002f2a:	f004 ffc9 	bl	8007ec0 <HAL_UARTEx_SetRxFifoThreshold>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002f34:	f7ff fba6 	bl	8002684 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002f38:	4804      	ldr	r0, [pc, #16]	; (8002f4c <MX_USART1_UART_Init+0x90>)
 8002f3a:	f004 ff4b 	bl	8007dd4 <HAL_UARTEx_DisableFifoMode>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002f44:	f7ff fb9e 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f48:	bf00      	nop
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	200005b4 	.word	0x200005b4
 8002f50:	40013800 	.word	0x40013800

08002f54 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f58:	4b22      	ldr	r3, [pc, #136]	; (8002fe4 <MX_USART2_UART_Init+0x90>)
 8002f5a:	4a23      	ldr	r2, [pc, #140]	; (8002fe8 <MX_USART2_UART_Init+0x94>)
 8002f5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f5e:	4b21      	ldr	r3, [pc, #132]	; (8002fe4 <MX_USART2_UART_Init+0x90>)
 8002f60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f66:	4b1f      	ldr	r3, [pc, #124]	; (8002fe4 <MX_USART2_UART_Init+0x90>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f6c:	4b1d      	ldr	r3, [pc, #116]	; (8002fe4 <MX_USART2_UART_Init+0x90>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f72:	4b1c      	ldr	r3, [pc, #112]	; (8002fe4 <MX_USART2_UART_Init+0x90>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f78:	4b1a      	ldr	r3, [pc, #104]	; (8002fe4 <MX_USART2_UART_Init+0x90>)
 8002f7a:	220c      	movs	r2, #12
 8002f7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f7e:	4b19      	ldr	r3, [pc, #100]	; (8002fe4 <MX_USART2_UART_Init+0x90>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f84:	4b17      	ldr	r3, [pc, #92]	; (8002fe4 <MX_USART2_UART_Init+0x90>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f8a:	4b16      	ldr	r3, [pc, #88]	; (8002fe4 <MX_USART2_UART_Init+0x90>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f90:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <MX_USART2_UART_Init+0x90>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f96:	4b13      	ldr	r3, [pc, #76]	; (8002fe4 <MX_USART2_UART_Init+0x90>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f9c:	4811      	ldr	r0, [pc, #68]	; (8002fe4 <MX_USART2_UART_Init+0x90>)
 8002f9e:	f003 fb20 	bl	80065e2 <HAL_UART_Init>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002fa8:	f7ff fb6c 	bl	8002684 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fac:	2100      	movs	r1, #0
 8002fae:	480d      	ldr	r0, [pc, #52]	; (8002fe4 <MX_USART2_UART_Init+0x90>)
 8002fb0:	f004 ff48 	bl	8007e44 <HAL_UARTEx_SetTxFifoThreshold>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002fba:	f7ff fb63 	bl	8002684 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	4808      	ldr	r0, [pc, #32]	; (8002fe4 <MX_USART2_UART_Init+0x90>)
 8002fc2:	f004 ff7d 	bl	8007ec0 <HAL_UARTEx_SetRxFifoThreshold>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002fcc:	f7ff fb5a 	bl	8002684 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002fd0:	4804      	ldr	r0, [pc, #16]	; (8002fe4 <MX_USART2_UART_Init+0x90>)
 8002fd2:	f004 feff 	bl	8007dd4 <HAL_UARTEx_DisableFifoMode>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002fdc:	f7ff fb52 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fe0:	bf00      	nop
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	20000648 	.word	0x20000648
 8002fe8:	40004400 	.word	0x40004400

08002fec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b096      	sub	sp, #88	; 0x58
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	605a      	str	r2, [r3, #4]
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	60da      	str	r2, [r3, #12]
 8003002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003004:	f107 030c 	add.w	r3, r7, #12
 8003008:	2238      	movs	r2, #56	; 0x38
 800300a:	2100      	movs	r1, #0
 800300c:	4618      	mov	r0, r3
 800300e:	f008 fd87 	bl	800bb20 <memset>
  if(uartHandle->Instance==LPUART1)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a66      	ldr	r2, [pc, #408]	; (80031b0 <HAL_UART_MspInit+0x1c4>)
 8003018:	4293      	cmp	r3, r2
 800301a:	f040 8092 	bne.w	8003142 <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800301e:	2320      	movs	r3, #32
 8003020:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003022:	2300      	movs	r3, #0
 8003024:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003026:	f107 030c 	add.w	r3, r7, #12
 800302a:	4618      	mov	r0, r3
 800302c:	f002 fa26 	bl	800547c <HAL_RCCEx_PeriphCLKConfig>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003036:	f7ff fb25 	bl	8002684 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800303a:	2001      	movs	r0, #1
 800303c:	f7ff fec0 	bl	8002dc0 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003040:	2004      	movs	r0, #4
 8003042:	f7ff fe8d 	bl	8002d60 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    PC0     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8003046:	2303      	movs	r3, #3
 8003048:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304a:	2302      	movs	r3, #2
 800304c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304e:	2300      	movs	r3, #0
 8003050:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003052:	2300      	movs	r3, #0
 8003054:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003056:	2308      	movs	r3, #8
 8003058:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800305a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800305e:	4619      	mov	r1, r3
 8003060:	4854      	ldr	r0, [pc, #336]	; (80031b4 <HAL_UART_MspInit+0x1c8>)
 8003062:	f000 fe7f 	bl	8003d64 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8003066:	4b54      	ldr	r3, [pc, #336]	; (80031b8 <HAL_UART_MspInit+0x1cc>)
 8003068:	4a54      	ldr	r2, [pc, #336]	; (80031bc <HAL_UART_MspInit+0x1d0>)
 800306a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800306c:	4b52      	ldr	r3, [pc, #328]	; (80031b8 <HAL_UART_MspInit+0x1cc>)
 800306e:	2215      	movs	r2, #21
 8003070:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003072:	4b51      	ldr	r3, [pc, #324]	; (80031b8 <HAL_UART_MspInit+0x1cc>)
 8003074:	2200      	movs	r2, #0
 8003076:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003078:	4b4f      	ldr	r3, [pc, #316]	; (80031b8 <HAL_UART_MspInit+0x1cc>)
 800307a:	2200      	movs	r2, #0
 800307c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800307e:	4b4e      	ldr	r3, [pc, #312]	; (80031b8 <HAL_UART_MspInit+0x1cc>)
 8003080:	2280      	movs	r2, #128	; 0x80
 8003082:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003084:	4b4c      	ldr	r3, [pc, #304]	; (80031b8 <HAL_UART_MspInit+0x1cc>)
 8003086:	2200      	movs	r2, #0
 8003088:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800308a:	4b4b      	ldr	r3, [pc, #300]	; (80031b8 <HAL_UART_MspInit+0x1cc>)
 800308c:	2200      	movs	r2, #0
 800308e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8003090:	4b49      	ldr	r3, [pc, #292]	; (80031b8 <HAL_UART_MspInit+0x1cc>)
 8003092:	2200      	movs	r2, #0
 8003094:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003096:	4b48      	ldr	r3, [pc, #288]	; (80031b8 <HAL_UART_MspInit+0x1cc>)
 8003098:	2200      	movs	r2, #0
 800309a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800309c:	4846      	ldr	r0, [pc, #280]	; (80031b8 <HAL_UART_MspInit+0x1cc>)
 800309e:	f000 fadf 	bl	8003660 <HAL_DMA_Init>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80030a8:	f7ff faec 	bl	8002684 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80030ac:	2110      	movs	r1, #16
 80030ae:	4842      	ldr	r0, [pc, #264]	; (80031b8 <HAL_UART_MspInit+0x1cc>)
 80030b0:	f000 fd80 	bl	8003bb4 <HAL_DMA_ConfigChannelAttributes>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 80030ba:	f7ff fae3 	bl	8002684 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a3d      	ldr	r2, [pc, #244]	; (80031b8 <HAL_UART_MspInit+0x1cc>)
 80030c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80030c6:	4a3c      	ldr	r2, [pc, #240]	; (80031b8 <HAL_UART_MspInit+0x1cc>)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 80030cc:	4b3c      	ldr	r3, [pc, #240]	; (80031c0 <HAL_UART_MspInit+0x1d4>)
 80030ce:	4a3d      	ldr	r2, [pc, #244]	; (80031c4 <HAL_UART_MspInit+0x1d8>)
 80030d0:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80030d2:	4b3b      	ldr	r3, [pc, #236]	; (80031c0 <HAL_UART_MspInit+0x1d4>)
 80030d4:	2216      	movs	r2, #22
 80030d6:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030d8:	4b39      	ldr	r3, [pc, #228]	; (80031c0 <HAL_UART_MspInit+0x1d4>)
 80030da:	2210      	movs	r2, #16
 80030dc:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030de:	4b38      	ldr	r3, [pc, #224]	; (80031c0 <HAL_UART_MspInit+0x1d4>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030e4:	4b36      	ldr	r3, [pc, #216]	; (80031c0 <HAL_UART_MspInit+0x1d4>)
 80030e6:	2280      	movs	r2, #128	; 0x80
 80030e8:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030ea:	4b35      	ldr	r3, [pc, #212]	; (80031c0 <HAL_UART_MspInit+0x1d4>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030f0:	4b33      	ldr	r3, [pc, #204]	; (80031c0 <HAL_UART_MspInit+0x1d4>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80030f6:	4b32      	ldr	r3, [pc, #200]	; (80031c0 <HAL_UART_MspInit+0x1d4>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030fc:	4b30      	ldr	r3, [pc, #192]	; (80031c0 <HAL_UART_MspInit+0x1d4>)
 80030fe:	2200      	movs	r2, #0
 8003100:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8003102:	482f      	ldr	r0, [pc, #188]	; (80031c0 <HAL_UART_MspInit+0x1d4>)
 8003104:	f000 faac 	bl	8003660 <HAL_DMA_Init>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_UART_MspInit+0x126>
    {
      Error_Handler();
 800310e:	f7ff fab9 	bl	8002684 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8003112:	2110      	movs	r1, #16
 8003114:	482a      	ldr	r0, [pc, #168]	; (80031c0 <HAL_UART_MspInit+0x1d4>)
 8003116:	f000 fd4d 	bl	8003bb4 <HAL_DMA_ConfigChannelAttributes>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8003120:	f7ff fab0 	bl	8002684 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a26      	ldr	r2, [pc, #152]	; (80031c0 <HAL_UART_MspInit+0x1d4>)
 8003128:	67da      	str	r2, [r3, #124]	; 0x7c
 800312a:	4a25      	ldr	r2, [pc, #148]	; (80031c0 <HAL_UART_MspInit+0x1d4>)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003130:	2200      	movs	r2, #0
 8003132:	2100      	movs	r1, #0
 8003134:	2026      	movs	r0, #38	; 0x26
 8003136:	f000 fa5e 	bl	80035f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800313a:	2026      	movs	r0, #38	; 0x26
 800313c:	f000 fa75 	bl	800362a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003140:	e0de      	b.n	8003300 <HAL_UART_MspInit+0x314>
  else if(uartHandle->Instance==USART1)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a20      	ldr	r2, [pc, #128]	; (80031c8 <HAL_UART_MspInit+0x1dc>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d13f      	bne.n	80031cc <HAL_UART_MspInit+0x1e0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800314c:	2301      	movs	r3, #1
 800314e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003150:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003154:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003156:	f107 030c 	add.w	r3, r7, #12
 800315a:	4618      	mov	r0, r3
 800315c:	f002 f98e 	bl	800547c <HAL_RCCEx_PeriphCLKConfig>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_UART_MspInit+0x17e>
      Error_Handler();
 8003166:	f7ff fa8d 	bl	8002684 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800316a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800316e:	f7ff fe3f 	bl	8002df0 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003172:	2001      	movs	r0, #1
 8003174:	f7ff fdf4 	bl	8002d60 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8003178:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800317c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317e:	2302      	movs	r3, #2
 8003180:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003182:	2300      	movs	r3, #0
 8003184:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003186:	2300      	movs	r3, #0
 8003188:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800318a:	2307      	movs	r3, #7
 800318c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800318e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003192:	4619      	mov	r1, r3
 8003194:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003198:	f000 fde4 	bl	8003d64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800319c:	2200      	movs	r2, #0
 800319e:	2100      	movs	r1, #0
 80031a0:	2024      	movs	r0, #36	; 0x24
 80031a2:	f000 fa28 	bl	80035f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80031a6:	2024      	movs	r0, #36	; 0x24
 80031a8:	f000 fa3f 	bl	800362a <HAL_NVIC_EnableIRQ>
}
 80031ac:	e0a8      	b.n	8003300 <HAL_UART_MspInit+0x314>
 80031ae:	bf00      	nop
 80031b0:	40008000 	.word	0x40008000
 80031b4:	48000800 	.word	0x48000800
 80031b8:	200006dc 	.word	0x200006dc
 80031bc:	40020008 	.word	0x40020008
 80031c0:	2000073c 	.word	0x2000073c
 80031c4:	4002001c 	.word	0x4002001c
 80031c8:	40013800 	.word	0x40013800
  else if(uartHandle->Instance==USART2)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a4d      	ldr	r2, [pc, #308]	; (8003308 <HAL_UART_MspInit+0x31c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	f040 8094 	bne.w	8003300 <HAL_UART_MspInit+0x314>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80031d8:	2302      	movs	r3, #2
 80031da:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80031dc:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80031e0:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031e2:	f107 030c 	add.w	r3, r7, #12
 80031e6:	4618      	mov	r0, r3
 80031e8:	f002 f948 	bl	800547c <HAL_RCCEx_PeriphCLKConfig>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_UART_MspInit+0x20a>
      Error_Handler();
 80031f2:	f7ff fa47 	bl	8002684 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80031f6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80031fa:	f7ff fdc9 	bl	8002d90 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031fe:	2001      	movs	r0, #1
 8003200:	f7ff fdae 	bl	8002d60 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8003204:	230c      	movs	r3, #12
 8003206:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003208:	2302      	movs	r3, #2
 800320a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320c:	2300      	movs	r3, #0
 800320e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003210:	2300      	movs	r3, #0
 8003212:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003214:	2307      	movs	r3, #7
 8003216:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003218:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800321c:	4619      	mov	r1, r3
 800321e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003222:	f000 fd9f 	bl	8003d64 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8003226:	4b39      	ldr	r3, [pc, #228]	; (800330c <HAL_UART_MspInit+0x320>)
 8003228:	4a39      	ldr	r2, [pc, #228]	; (8003310 <HAL_UART_MspInit+0x324>)
 800322a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800322c:	4b37      	ldr	r3, [pc, #220]	; (800330c <HAL_UART_MspInit+0x320>)
 800322e:	2213      	movs	r2, #19
 8003230:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003232:	4b36      	ldr	r3, [pc, #216]	; (800330c <HAL_UART_MspInit+0x320>)
 8003234:	2200      	movs	r2, #0
 8003236:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003238:	4b34      	ldr	r3, [pc, #208]	; (800330c <HAL_UART_MspInit+0x320>)
 800323a:	2200      	movs	r2, #0
 800323c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800323e:	4b33      	ldr	r3, [pc, #204]	; (800330c <HAL_UART_MspInit+0x320>)
 8003240:	2280      	movs	r2, #128	; 0x80
 8003242:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003244:	4b31      	ldr	r3, [pc, #196]	; (800330c <HAL_UART_MspInit+0x320>)
 8003246:	2200      	movs	r2, #0
 8003248:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800324a:	4b30      	ldr	r3, [pc, #192]	; (800330c <HAL_UART_MspInit+0x320>)
 800324c:	2200      	movs	r2, #0
 800324e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003250:	4b2e      	ldr	r3, [pc, #184]	; (800330c <HAL_UART_MspInit+0x320>)
 8003252:	2200      	movs	r2, #0
 8003254:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003256:	4b2d      	ldr	r3, [pc, #180]	; (800330c <HAL_UART_MspInit+0x320>)
 8003258:	2200      	movs	r2, #0
 800325a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800325c:	482b      	ldr	r0, [pc, #172]	; (800330c <HAL_UART_MspInit+0x320>)
 800325e:	f000 f9ff 	bl	8003660 <HAL_DMA_Init>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <HAL_UART_MspInit+0x280>
      Error_Handler();
 8003268:	f7ff fa0c 	bl	8002684 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800326c:	2110      	movs	r1, #16
 800326e:	4827      	ldr	r0, [pc, #156]	; (800330c <HAL_UART_MspInit+0x320>)
 8003270:	f000 fca0 	bl	8003bb4 <HAL_DMA_ConfigChannelAttributes>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_UART_MspInit+0x292>
      Error_Handler();
 800327a:	f7ff fa03 	bl	8002684 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a22      	ldr	r2, [pc, #136]	; (800330c <HAL_UART_MspInit+0x320>)
 8003282:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003286:	4a21      	ldr	r2, [pc, #132]	; (800330c <HAL_UART_MspInit+0x320>)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel4;
 800328c:	4b21      	ldr	r3, [pc, #132]	; (8003314 <HAL_UART_MspInit+0x328>)
 800328e:	4a22      	ldr	r2, [pc, #136]	; (8003318 <HAL_UART_MspInit+0x32c>)
 8003290:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003292:	4b20      	ldr	r3, [pc, #128]	; (8003314 <HAL_UART_MspInit+0x328>)
 8003294:	2214      	movs	r2, #20
 8003296:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003298:	4b1e      	ldr	r3, [pc, #120]	; (8003314 <HAL_UART_MspInit+0x328>)
 800329a:	2210      	movs	r2, #16
 800329c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800329e:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <HAL_UART_MspInit+0x328>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032a4:	4b1b      	ldr	r3, [pc, #108]	; (8003314 <HAL_UART_MspInit+0x328>)
 80032a6:	2280      	movs	r2, #128	; 0x80
 80032a8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032aa:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <HAL_UART_MspInit+0x328>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032b0:	4b18      	ldr	r3, [pc, #96]	; (8003314 <HAL_UART_MspInit+0x328>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80032b6:	4b17      	ldr	r3, [pc, #92]	; (8003314 <HAL_UART_MspInit+0x328>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032bc:	4b15      	ldr	r3, [pc, #84]	; (8003314 <HAL_UART_MspInit+0x328>)
 80032be:	2200      	movs	r2, #0
 80032c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80032c2:	4814      	ldr	r0, [pc, #80]	; (8003314 <HAL_UART_MspInit+0x328>)
 80032c4:	f000 f9cc 	bl	8003660 <HAL_DMA_Init>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <HAL_UART_MspInit+0x2e6>
      Error_Handler();
 80032ce:	f7ff f9d9 	bl	8002684 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80032d2:	2110      	movs	r1, #16
 80032d4:	480f      	ldr	r0, [pc, #60]	; (8003314 <HAL_UART_MspInit+0x328>)
 80032d6:	f000 fc6d 	bl	8003bb4 <HAL_DMA_ConfigChannelAttributes>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <HAL_UART_MspInit+0x2f8>
      Error_Handler();
 80032e0:	f7ff f9d0 	bl	8002684 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a0b      	ldr	r2, [pc, #44]	; (8003314 <HAL_UART_MspInit+0x328>)
 80032e8:	67da      	str	r2, [r3, #124]	; 0x7c
 80032ea:	4a0a      	ldr	r2, [pc, #40]	; (8003314 <HAL_UART_MspInit+0x328>)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80032f0:	2200      	movs	r2, #0
 80032f2:	2100      	movs	r1, #0
 80032f4:	2025      	movs	r0, #37	; 0x25
 80032f6:	f000 f97e 	bl	80035f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80032fa:	2025      	movs	r0, #37	; 0x25
 80032fc:	f000 f995 	bl	800362a <HAL_NVIC_EnableIRQ>
}
 8003300:	bf00      	nop
 8003302:	3758      	adds	r7, #88	; 0x58
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40004400 	.word	0x40004400
 800330c:	2000079c 	.word	0x2000079c
 8003310:	40020030 	.word	0x40020030
 8003314:	200007fc 	.word	0x200007fc
 8003318:	40020044 	.word	0x40020044

0800331c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800331c:	480d      	ldr	r0, [pc, #52]	; (8003354 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800331e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003320:	f7ff fc2a 	bl	8002b78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003324:	480c      	ldr	r0, [pc, #48]	; (8003358 <LoopForever+0x6>)
  ldr r1, =_edata
 8003326:	490d      	ldr	r1, [pc, #52]	; (800335c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003328:	4a0d      	ldr	r2, [pc, #52]	; (8003360 <LoopForever+0xe>)
  movs r3, #0
 800332a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800332c:	e002      	b.n	8003334 <LoopCopyDataInit>

0800332e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800332e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003332:	3304      	adds	r3, #4

08003334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003338:	d3f9      	bcc.n	800332e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800333a:	4a0a      	ldr	r2, [pc, #40]	; (8003364 <LoopForever+0x12>)
  ldr r4, =_ebss
 800333c:	4c0a      	ldr	r4, [pc, #40]	; (8003368 <LoopForever+0x16>)
  movs r3, #0
 800333e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003340:	e001      	b.n	8003346 <LoopFillZerobss>

08003342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003344:	3204      	adds	r2, #4

08003346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003348:	d3fb      	bcc.n	8003342 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800334a:	f008 fbf7 	bl	800bb3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800334e:	f7fd fce3 	bl	8000d18 <main>

08003352 <LoopForever>:

LoopForever:
    b LoopForever
 8003352:	e7fe      	b.n	8003352 <LoopForever>
  ldr   r0, =_estack
 8003354:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800335c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8003360:	0800d050 	.word	0x0800d050
  ldr r2, =_sbss
 8003364:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8003368:	20000b68 	.word	0x20000b68

0800336c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800336c:	e7fe      	b.n	800336c <ADC_IRQHandler>
	...

08003370 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800337a:	2003      	movs	r0, #3
 800337c:	f000 f930 	bl	80035e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003380:	f001 fe9e 	bl	80050c0 <HAL_RCC_GetHCLKFreq>
 8003384:	4603      	mov	r3, r0
 8003386:	4a09      	ldr	r2, [pc, #36]	; (80033ac <HAL_Init+0x3c>)
 8003388:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800338a:	2000      	movs	r0, #0
 800338c:	f000 f810 	bl	80033b0 <HAL_InitTick>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	71fb      	strb	r3, [r7, #7]
 800339a:	e001      	b.n	80033a0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800339c:	f7ff fad4 	bl	8002948 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033a0:	79fb      	ldrb	r3, [r7, #7]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	2000000c 	.word	0x2000000c

080033b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80033bc:	4b17      	ldr	r3, [pc, #92]	; (800341c <HAL_InitTick+0x6c>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d024      	beq.n	800340e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80033c4:	f001 fe7c 	bl	80050c0 <HAL_RCC_GetHCLKFreq>
 80033c8:	4602      	mov	r2, r0
 80033ca:	4b14      	ldr	r3, [pc, #80]	; (800341c <HAL_InitTick+0x6c>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	4619      	mov	r1, r3
 80033d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80033d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 f932 	bl	8003646 <HAL_SYSTICK_Config>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10f      	bne.n	8003408 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b0f      	cmp	r3, #15
 80033ec:	d809      	bhi.n	8003402 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033ee:	2200      	movs	r2, #0
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033f6:	f000 f8fe 	bl	80035f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033fa:	4a09      	ldr	r2, [pc, #36]	; (8003420 <HAL_InitTick+0x70>)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6013      	str	r3, [r2, #0]
 8003400:	e007      	b.n	8003412 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	73fb      	strb	r3, [r7, #15]
 8003406:	e004      	b.n	8003412 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	73fb      	strb	r3, [r7, #15]
 800340c:	e001      	b.n	8003412 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003412:	7bfb      	ldrb	r3, [r7, #15]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	20000014 	.word	0x20000014
 8003420:	20000010 	.word	0x20000010

08003424 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003428:	4b05      	ldr	r3, [pc, #20]	; (8003440 <HAL_IncTick+0x1c>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	461a      	mov	r2, r3
 800342e:	4b05      	ldr	r3, [pc, #20]	; (8003444 <HAL_IncTick+0x20>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4413      	add	r3, r2
 8003434:	4a03      	ldr	r2, [pc, #12]	; (8003444 <HAL_IncTick+0x20>)
 8003436:	6013      	str	r3, [r2, #0]
}
 8003438:	bf00      	nop
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr
 8003440:	20000014 	.word	0x20000014
 8003444:	2000085c 	.word	0x2000085c

08003448 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003458:	4b0c      	ldr	r3, [pc, #48]	; (800348c <__NVIC_SetPriorityGrouping+0x44>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003464:	4013      	ands	r3, r2
 8003466:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003470:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800347a:	4a04      	ldr	r2, [pc, #16]	; (800348c <__NVIC_SetPriorityGrouping+0x44>)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	60d3      	str	r3, [r2, #12]
}
 8003480:	bf00      	nop
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	bc80      	pop	{r7}
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	e000ed00 	.word	0xe000ed00

08003490 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003494:	4b04      	ldr	r3, [pc, #16]	; (80034a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	0a1b      	lsrs	r3, r3, #8
 800349a:	f003 0307 	and.w	r3, r3, #7
}
 800349e:	4618      	mov	r0, r3
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bc80      	pop	{r7}
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	e000ed00 	.word	0xe000ed00

080034ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	4603      	mov	r3, r0
 80034b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	db0b      	blt.n	80034d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034be:	79fb      	ldrb	r3, [r7, #7]
 80034c0:	f003 021f 	and.w	r2, r3, #31
 80034c4:	4906      	ldr	r1, [pc, #24]	; (80034e0 <__NVIC_EnableIRQ+0x34>)
 80034c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ca:	095b      	lsrs	r3, r3, #5
 80034cc:	2001      	movs	r0, #1
 80034ce:	fa00 f202 	lsl.w	r2, r0, r2
 80034d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr
 80034e0:	e000e100 	.word	0xe000e100

080034e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	4603      	mov	r3, r0
 80034ec:	6039      	str	r1, [r7, #0]
 80034ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	db0a      	blt.n	800350e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	490c      	ldr	r1, [pc, #48]	; (8003530 <__NVIC_SetPriority+0x4c>)
 80034fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003502:	0112      	lsls	r2, r2, #4
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	440b      	add	r3, r1
 8003508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800350c:	e00a      	b.n	8003524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	b2da      	uxtb	r2, r3
 8003512:	4908      	ldr	r1, [pc, #32]	; (8003534 <__NVIC_SetPriority+0x50>)
 8003514:	79fb      	ldrb	r3, [r7, #7]
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	3b04      	subs	r3, #4
 800351c:	0112      	lsls	r2, r2, #4
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	440b      	add	r3, r1
 8003522:	761a      	strb	r2, [r3, #24]
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	e000e100 	.word	0xe000e100
 8003534:	e000ed00 	.word	0xe000ed00

08003538 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003538:	b480      	push	{r7}
 800353a:	b089      	sub	sp, #36	; 0x24
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f1c3 0307 	rsb	r3, r3, #7
 8003552:	2b04      	cmp	r3, #4
 8003554:	bf28      	it	cs
 8003556:	2304      	movcs	r3, #4
 8003558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	3304      	adds	r3, #4
 800355e:	2b06      	cmp	r3, #6
 8003560:	d902      	bls.n	8003568 <NVIC_EncodePriority+0x30>
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	3b03      	subs	r3, #3
 8003566:	e000      	b.n	800356a <NVIC_EncodePriority+0x32>
 8003568:	2300      	movs	r3, #0
 800356a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800356c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	43da      	mvns	r2, r3
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	401a      	ands	r2, r3
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003580:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	fa01 f303 	lsl.w	r3, r1, r3
 800358a:	43d9      	mvns	r1, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003590:	4313      	orrs	r3, r2
         );
}
 8003592:	4618      	mov	r0, r3
 8003594:	3724      	adds	r7, #36	; 0x24
 8003596:	46bd      	mov	sp, r7
 8003598:	bc80      	pop	{r7}
 800359a:	4770      	bx	lr

0800359c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035ac:	d301      	bcc.n	80035b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035ae:	2301      	movs	r3, #1
 80035b0:	e00f      	b.n	80035d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035b2:	4a0a      	ldr	r2, [pc, #40]	; (80035dc <SysTick_Config+0x40>)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ba:	210f      	movs	r1, #15
 80035bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035c0:	f7ff ff90 	bl	80034e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035c4:	4b05      	ldr	r3, [pc, #20]	; (80035dc <SysTick_Config+0x40>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035ca:	4b04      	ldr	r3, [pc, #16]	; (80035dc <SysTick_Config+0x40>)
 80035cc:	2207      	movs	r2, #7
 80035ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	e000e010 	.word	0xe000e010

080035e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7ff ff2d 	bl	8003448 <__NVIC_SetPriorityGrouping>
}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b086      	sub	sp, #24
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	4603      	mov	r3, r0
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	607a      	str	r2, [r7, #4]
 8003602:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003604:	f7ff ff44 	bl	8003490 <__NVIC_GetPriorityGrouping>
 8003608:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	68b9      	ldr	r1, [r7, #8]
 800360e:	6978      	ldr	r0, [r7, #20]
 8003610:	f7ff ff92 	bl	8003538 <NVIC_EncodePriority>
 8003614:	4602      	mov	r2, r0
 8003616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800361a:	4611      	mov	r1, r2
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff ff61 	bl	80034e4 <__NVIC_SetPriority>
}
 8003622:	bf00      	nop
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	4603      	mov	r3, r0
 8003632:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff ff37 	bl	80034ac <__NVIC_EnableIRQ>
}
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7ff ffa4 	bl	800359c <SysTick_Config>
 8003654:	4603      	mov	r3, r0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e08e      	b.n	8003790 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	461a      	mov	r2, r3
 8003678:	4b47      	ldr	r3, [pc, #284]	; (8003798 <HAL_DMA_Init+0x138>)
 800367a:	429a      	cmp	r2, r3
 800367c:	d80f      	bhi.n	800369e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	461a      	mov	r2, r3
 8003684:	4b45      	ldr	r3, [pc, #276]	; (800379c <HAL_DMA_Init+0x13c>)
 8003686:	4413      	add	r3, r2
 8003688:	4a45      	ldr	r2, [pc, #276]	; (80037a0 <HAL_DMA_Init+0x140>)
 800368a:	fba2 2303 	umull	r2, r3, r2, r3
 800368e:	091b      	lsrs	r3, r3, #4
 8003690:	009a      	lsls	r2, r3, #2
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a42      	ldr	r2, [pc, #264]	; (80037a4 <HAL_DMA_Init+0x144>)
 800369a:	641a      	str	r2, [r3, #64]	; 0x40
 800369c:	e00e      	b.n	80036bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	461a      	mov	r2, r3
 80036a4:	4b40      	ldr	r3, [pc, #256]	; (80037a8 <HAL_DMA_Init+0x148>)
 80036a6:	4413      	add	r3, r2
 80036a8:	4a3d      	ldr	r2, [pc, #244]	; (80037a0 <HAL_DMA_Init+0x140>)
 80036aa:	fba2 2303 	umull	r2, r3, r2, r3
 80036ae:	091b      	lsrs	r3, r3, #4
 80036b0:	009a      	lsls	r2, r3, #2
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a3c      	ldr	r2, [pc, #240]	; (80037ac <HAL_DMA_Init+0x14c>)
 80036ba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6812      	ldr	r2, [r2, #0]
 80036ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80036d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d6:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6819      	ldr	r1, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	431a      	orrs	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	431a      	orrs	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	431a      	orrs	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 fabc 	bl	8003c8c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800371c:	d102      	bne.n	8003724 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800372c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003730:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800373a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d010      	beq.n	8003766 <HAL_DMA_Init+0x106>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b04      	cmp	r3, #4
 800374a:	d80c      	bhi.n	8003766 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 fae5 	bl	8003d1c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003756:	2200      	movs	r2, #0
 8003758:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003762:	605a      	str	r2, [r3, #4]
 8003764:	e008      	b.n	8003778 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40020407 	.word	0x40020407
 800379c:	bffdfff8 	.word	0xbffdfff8
 80037a0:	cccccccd 	.word	0xcccccccd
 80037a4:	40020000 	.word	0x40020000
 80037a8:	bffdfbf8 	.word	0xbffdfbf8
 80037ac:	40020400 	.word	0x40020400

080037b0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
 80037bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_DMA_Start_IT+0x20>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e069      	b.n	80038a4 <HAL_DMA_Start_IT+0xf4>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d155      	bne.n	8003890 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2202      	movs	r2, #2
 80037e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0201 	bic.w	r2, r2, #1
 8003800:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	68b9      	ldr	r1, [r7, #8]
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 fa02 	bl	8003c12 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	2b00      	cmp	r3, #0
 8003814:	d008      	beq.n	8003828 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f042 020e 	orr.w	r2, r2, #14
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	e00f      	b.n	8003848 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0204 	bic.w	r2, r2, #4
 8003836:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 020a 	orr.w	r2, r2, #10
 8003846:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d007      	beq.n	8003866 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003860:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003864:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386a:	2b00      	cmp	r3, #0
 800386c:	d007      	beq.n	800387e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003878:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800387c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f042 0201 	orr.w	r2, r2, #1
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	e008      	b.n	80038a2 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2280      	movs	r2, #128	; 0x80
 8003894:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80038a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e04f      	b.n	800395e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d008      	beq.n	80038dc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2204      	movs	r2, #4
 80038ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e040      	b.n	800395e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 020e 	bic.w	r2, r2, #14
 80038ea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0201 	bic.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003910:	f003 021c 	and.w	r2, r3, #28
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	2101      	movs	r1, #1
 800391a:	fa01 f202 	lsl.w	r2, r1, r2
 800391e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003928:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00c      	beq.n	800394c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003940:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800394a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr

08003968 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003970:	2300      	movs	r3, #0
 8003972:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d005      	beq.n	800398c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2204      	movs	r2, #4
 8003984:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	73fb      	strb	r3, [r7, #15]
 800398a:	e047      	b.n	8003a1c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 020e 	bic.w	r2, r2, #14
 800399a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0201 	bic.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c0:	f003 021c 	and.w	r2, r3, #28
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	2101      	movs	r1, #1
 80039ca:	fa01 f202 	lsl.w	r2, r1, r2
 80039ce:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039d8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00c      	beq.n	80039fc <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039f0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80039fa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	4798      	blx	r3
    }
  }
  return status;
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
	...

08003a28 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a44:	f003 031c 	and.w	r3, r3, #28
 8003a48:	2204      	movs	r2, #4
 8003a4a:	409a      	lsls	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d027      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x7c>
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	f003 0304 	and.w	r3, r3, #4
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d022      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0320 	and.w	r3, r3, #32
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d107      	bne.n	8003a7c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0204 	bic.w	r2, r2, #4
 8003a7a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a80:	f003 021c 	and.w	r2, r3, #28
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	2104      	movs	r1, #4
 8003a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a8e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 8081 	beq.w	8003b9c <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003aa2:	e07b      	b.n	8003b9c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa8:	f003 031c 	and.w	r3, r3, #28
 8003aac:	2202      	movs	r2, #2
 8003aae:	409a      	lsls	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d03d      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x10c>
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d038      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0320 	and.w	r3, r3, #32
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10b      	bne.n	8003ae8 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 020a 	bic.w	r2, r2, #10
 8003ade:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	461a      	mov	r2, r3
 8003aee:	4b2e      	ldr	r3, [pc, #184]	; (8003ba8 <HAL_DMA_IRQHandler+0x180>)
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d909      	bls.n	8003b08 <HAL_DMA_IRQHandler+0xe0>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af8:	f003 031c 	and.w	r3, r3, #28
 8003afc:	4a2b      	ldr	r2, [pc, #172]	; (8003bac <HAL_DMA_IRQHandler+0x184>)
 8003afe:	2102      	movs	r1, #2
 8003b00:	fa01 f303 	lsl.w	r3, r1, r3
 8003b04:	6053      	str	r3, [r2, #4]
 8003b06:	e008      	b.n	8003b1a <HAL_DMA_IRQHandler+0xf2>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0c:	f003 031c 	and.w	r3, r3, #28
 8003b10:	4a27      	ldr	r2, [pc, #156]	; (8003bb0 <HAL_DMA_IRQHandler+0x188>)
 8003b12:	2102      	movs	r1, #2
 8003b14:	fa01 f303 	lsl.w	r3, r1, r3
 8003b18:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d038      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003b32:	e033      	b.n	8003b9c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b38:	f003 031c 	and.w	r3, r3, #28
 8003b3c:	2208      	movs	r2, #8
 8003b3e:	409a      	lsls	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4013      	ands	r3, r2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d02a      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x176>
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d025      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 020e 	bic.w	r2, r2, #14
 8003b60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b66:	f003 021c 	and.w	r2, r3, #28
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	2101      	movs	r1, #1
 8003b70:	fa01 f202 	lsl.w	r2, r1, r2
 8003b74:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d004      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b9c:	bf00      	nop
 8003b9e:	bf00      	nop
}
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	40020080 	.word	0x40020080
 8003bac:	40020400 	.word	0x40020400
 8003bb0:	40020000 	.word	0x40020000

08003bb4 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d103      	bne.n	8003bd0 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	72fb      	strb	r3, [r7, #11]
    return status;
 8003bcc:	7afb      	ldrb	r3, [r7, #11]
 8003bce:	e01b      	b.n	8003c08 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	f003 0310 	and.w	r3, r3, #16
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00d      	beq.n	8003bfe <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d004      	beq.n	8003bf6 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	e003      	b.n	8003bfe <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003bfc:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	601a      	str	r2, [r3, #0]

  return status;
 8003c06:	7afb      	ldrb	r3, [r7, #11]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr

08003c12 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b085      	sub	sp, #20
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	60f8      	str	r0, [r7, #12]
 8003c1a:	60b9      	str	r1, [r7, #8]
 8003c1c:	607a      	str	r2, [r7, #4]
 8003c1e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c28:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d004      	beq.n	8003c3c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c3a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c40:	f003 021c 	and.w	r2, r3, #28
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	2101      	movs	r1, #1
 8003c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c4e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	2b10      	cmp	r3, #16
 8003c5e:	d108      	bne.n	8003c72 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c70:	e007      	b.n	8003c82 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	60da      	str	r2, [r3, #12]
}
 8003c82:	bf00      	nop
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr

08003c8c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	4b1c      	ldr	r3, [pc, #112]	; (8003d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d813      	bhi.n	8003cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca4:	089b      	lsrs	r3, r3, #2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003cac:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	3b08      	subs	r3, #8
 8003cbc:	4a14      	ldr	r2, [pc, #80]	; (8003d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc2:	091b      	lsrs	r3, r3, #4
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	e011      	b.n	8003cec <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ccc:	089b      	lsrs	r3, r3, #2
 8003cce:	009a      	lsls	r2, r3, #2
 8003cd0:	4b10      	ldr	r3, [pc, #64]	; (8003d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8003cd2:	4413      	add	r3, r2
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	3b08      	subs	r3, #8
 8003ce0:	4a0b      	ldr	r2, [pc, #44]	; (8003d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce6:	091b      	lsrs	r3, r3, #4
 8003ce8:	3307      	adds	r3, #7
 8003cea:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a0a      	ldr	r2, [pc, #40]	; (8003d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8003cf0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f003 031f 	and.w	r3, r3, #31
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	409a      	lsls	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003d00:	bf00      	nop
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40020407 	.word	0x40020407
 8003d10:	cccccccd 	.word	0xcccccccd
 8003d14:	4002081c 	.word	0x4002081c
 8003d18:	40020880 	.word	0x40020880

08003d1c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d2c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003d32:	4413      	add	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	461a      	mov	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a08      	ldr	r2, [pc, #32]	; (8003d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003d40:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	3b01      	subs	r3, #1
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	409a      	lsls	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003d52:	bf00      	nop
 8003d54:	3714      	adds	r7, #20
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bc80      	pop	{r7}
 8003d5a:	4770      	bx	lr
 8003d5c:	1000823f 	.word	0x1000823f
 8003d60:	40020940 	.word	0x40020940

08003d64 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d72:	e140      	b.n	8003ff6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	2101      	movs	r1, #1
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d80:	4013      	ands	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 8132 	beq.w	8003ff0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f003 0303 	and.w	r3, r3, #3
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d005      	beq.n	8003da4 <HAL_GPIO_Init+0x40>
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f003 0303 	and.w	r3, r3, #3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d130      	bne.n	8003e06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	2203      	movs	r2, #3
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	43db      	mvns	r3, r3
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	4013      	ands	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dda:	2201      	movs	r2, #1
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	43db      	mvns	r3, r3
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4013      	ands	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	091b      	lsrs	r3, r3, #4
 8003df0:	f003 0201 	and.w	r2, r3, #1
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d017      	beq.n	8003e42 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	2203      	movs	r2, #3
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	43db      	mvns	r3, r3
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4013      	ands	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	689a      	ldr	r2, [r3, #8]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d123      	bne.n	8003e96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	08da      	lsrs	r2, r3, #3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3208      	adds	r2, #8
 8003e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	220f      	movs	r2, #15
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	691a      	ldr	r2, [r3, #16]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	08da      	lsrs	r2, r3, #3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3208      	adds	r2, #8
 8003e90:	6939      	ldr	r1, [r7, #16]
 8003e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f003 0203 	and.w	r2, r3, #3
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 808c 	beq.w	8003ff0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003ed8:	4a4e      	ldr	r2, [pc, #312]	; (8004014 <HAL_GPIO_Init+0x2b0>)
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	089b      	lsrs	r3, r3, #2
 8003ede:	3302      	adds	r3, #2
 8003ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f003 0303 	and.w	r3, r3, #3
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	2207      	movs	r2, #7
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f02:	d00d      	beq.n	8003f20 <HAL_GPIO_Init+0x1bc>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a44      	ldr	r2, [pc, #272]	; (8004018 <HAL_GPIO_Init+0x2b4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d007      	beq.n	8003f1c <HAL_GPIO_Init+0x1b8>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a43      	ldr	r2, [pc, #268]	; (800401c <HAL_GPIO_Init+0x2b8>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d101      	bne.n	8003f18 <HAL_GPIO_Init+0x1b4>
 8003f14:	2302      	movs	r3, #2
 8003f16:	e004      	b.n	8003f22 <HAL_GPIO_Init+0x1be>
 8003f18:	2307      	movs	r3, #7
 8003f1a:	e002      	b.n	8003f22 <HAL_GPIO_Init+0x1be>
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e000      	b.n	8003f22 <HAL_GPIO_Init+0x1be>
 8003f20:	2300      	movs	r3, #0
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	f002 0203 	and.w	r2, r2, #3
 8003f28:	0092      	lsls	r2, r2, #2
 8003f2a:	4093      	lsls	r3, r2
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f32:	4938      	ldr	r1, [pc, #224]	; (8004014 <HAL_GPIO_Init+0x2b0>)
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	089b      	lsrs	r3, r3, #2
 8003f38:	3302      	adds	r3, #2
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f40:	4b37      	ldr	r3, [pc, #220]	; (8004020 <HAL_GPIO_Init+0x2bc>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f64:	4a2e      	ldr	r2, [pc, #184]	; (8004020 <HAL_GPIO_Init+0x2bc>)
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003f6a:	4b2d      	ldr	r3, [pc, #180]	; (8004020 <HAL_GPIO_Init+0x2bc>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	43db      	mvns	r3, r3
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	4013      	ands	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f8e:	4a24      	ldr	r2, [pc, #144]	; (8004020 <HAL_GPIO_Init+0x2bc>)
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003f94:	4b22      	ldr	r3, [pc, #136]	; (8004020 <HAL_GPIO_Init+0x2bc>)
 8003f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f9a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	43db      	mvns	r3, r3
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003fba:	4a19      	ldr	r2, [pc, #100]	; (8004020 <HAL_GPIO_Init+0x2bc>)
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003fc2:	4b17      	ldr	r3, [pc, #92]	; (8004020 <HAL_GPIO_Init+0x2bc>)
 8003fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fc8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003fe8:	4a0d      	ldr	r2, [pc, #52]	; (8004020 <HAL_GPIO_Init+0x2bc>)
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	f47f aeb7 	bne.w	8003d74 <HAL_GPIO_Init+0x10>
  }
}
 8004006:	bf00      	nop
 8004008:	bf00      	nop
 800400a:	371c      	adds	r7, #28
 800400c:	46bd      	mov	sp, r7
 800400e:	bc80      	pop	{r7}
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	40010000 	.word	0x40010000
 8004018:	48000400 	.word	0x48000400
 800401c:	48000800 	.word	0x48000800
 8004020:	58000800 	.word	0x58000800

08004024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	460b      	mov	r3, r1
 800402e:	807b      	strh	r3, [r7, #2]
 8004030:	4613      	mov	r3, r2
 8004032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004034:	787b      	ldrb	r3, [r7, #1]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800403a:	887a      	ldrh	r2, [r7, #2]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004040:	e002      	b.n	8004048 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004042:	887a      	ldrh	r2, [r7, #2]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	bc80      	pop	{r7}
 8004050:	4770      	bx	lr
	...

08004054 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004058:	4b04      	ldr	r3, [pc, #16]	; (800406c <HAL_PWR_EnableBkUpAccess+0x18>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a03      	ldr	r2, [pc, #12]	; (800406c <HAL_PWR_EnableBkUpAccess+0x18>)
 800405e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004062:	6013      	str	r3, [r2, #0]
}
 8004064:	bf00      	nop
 8004066:	46bd      	mov	sp, r7
 8004068:	bc80      	pop	{r7}
 800406a:	4770      	bx	lr
 800406c:	58000400 	.word	0x58000400

08004070 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004074:	4b03      	ldr	r3, [pc, #12]	; (8004084 <HAL_PWREx_GetVoltageRange+0x14>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800407c:	4618      	mov	r0, r3
 800407e:	46bd      	mov	sp, r7
 8004080:	bc80      	pop	{r7}
 8004082:	4770      	bx	lr
 8004084:	58000400 	.word	0x58000400

08004088 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800408c:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004098:	d101      	bne.n	800409e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bc80      	pop	{r7}
 80040a6:	4770      	bx	lr
 80040a8:	58000400 	.word	0x58000400

080040ac <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80040b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040be:	6013      	str	r3, [r2, #0]
}
 80040c0:	bf00      	nop
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr

080040c8 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80040cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040da:	6013      	str	r3, [r2, #0]
}
 80040dc:	bf00      	nop
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr

080040e4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80040e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040f6:	d101      	bne.n	80040fc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80040f8:	2301      	movs	r3, #1
 80040fa:	e000      	b.n	80040fe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	46bd      	mov	sp, r7
 8004102:	bc80      	pop	{r7}
 8004104:	4770      	bx	lr

08004106 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8004106:	b480      	push	{r7}
 8004108:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800410a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004118:	6013      	str	r3, [r2, #0]
}
 800411a:	bf00      	nop
 800411c:	46bd      	mov	sp, r7
 800411e:	bc80      	pop	{r7}
 8004120:	4770      	bx	lr

08004122 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8004122:	b480      	push	{r7}
 8004124:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004134:	6013      	str	r3, [r2, #0]
}
 8004136:	bf00      	nop
 8004138:	46bd      	mov	sp, r7
 800413a:	bc80      	pop	{r7}
 800413c:	4770      	bx	lr

0800413e <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800413e:	b480      	push	{r7}
 8004140:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004150:	d101      	bne.n	8004156 <LL_RCC_HSE_IsReady+0x18>
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <LL_RCC_HSE_IsReady+0x1a>
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr

08004160 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800416e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004172:	6013      	str	r3, [r2, #0]
}
 8004174:	bf00      	nop
 8004176:	46bd      	mov	sp, r7
 8004178:	bc80      	pop	{r7}
 800417a:	4770      	bx	lr

0800417c <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800418a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800418e:	6013      	str	r3, [r2, #0]
}
 8004190:	bf00      	nop
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr

08004198 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800419c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041aa:	d101      	bne.n	80041b0 <LL_RCC_HSI_IsReady+0x18>
 80041ac:	2301      	movs	r3, #1
 80041ae:	e000      	b.n	80041b2 <LL_RCC_HSI_IsReady+0x1a>
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bc80      	pop	{r7}
 80041b8:	4770      	bx	lr

080041ba <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80041c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	061b      	lsls	r3, r3, #24
 80041d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041d4:	4313      	orrs	r3, r2
 80041d6:	604b      	str	r3, [r1, #4]
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	bc80      	pop	{r7}
 80041e0:	4770      	bx	lr

080041e2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80041e2:	b480      	push	{r7}
 80041e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80041e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d101      	bne.n	80041fa <LL_RCC_LSE_IsReady+0x18>
 80041f6:	2301      	movs	r3, #1
 80041f8:	e000      	b.n	80041fc <LL_RCC_LSE_IsReady+0x1a>
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	bc80      	pop	{r7}
 8004202:	4770      	bx	lr

08004204 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8004208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800420c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004210:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004214:	f043 0301 	orr.w	r3, r3, #1
 8004218:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800421c:	bf00      	nop
 800421e:	46bd      	mov	sp, r7
 8004220:	bc80      	pop	{r7}
 8004222:	4770      	bx	lr

08004224 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800422c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004230:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004234:	f023 0301 	bic.w	r3, r3, #1
 8004238:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800423c:	bf00      	nop
 800423e:	46bd      	mov	sp, r7
 8004240:	bc80      	pop	{r7}
 8004242:	4770      	bx	lr

08004244 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800424c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b02      	cmp	r3, #2
 8004256:	d101      	bne.n	800425c <LL_RCC_LSI_IsReady+0x18>
 8004258:	2301      	movs	r3, #1
 800425a:	e000      	b.n	800425e <LL_RCC_LSI_IsReady+0x1a>
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr

08004266 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8004266:	b480      	push	{r7}
 8004268:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800426a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004274:	f043 0301 	orr.w	r3, r3, #1
 8004278:	6013      	str	r3, [r2, #0]
}
 800427a:	bf00      	nop
 800427c:	46bd      	mov	sp, r7
 800427e:	bc80      	pop	{r7}
 8004280:	4770      	bx	lr

08004282 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8004282:	b480      	push	{r7}
 8004284:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004290:	f023 0301 	bic.w	r3, r3, #1
 8004294:	6013      	str	r3, [r2, #0]
}
 8004296:	bf00      	nop
 8004298:	46bd      	mov	sp, r7
 800429a:	bc80      	pop	{r7}
 800429c:	4770      	bx	lr

0800429e <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800429e:	b480      	push	{r7}
 80042a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80042a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d101      	bne.n	80042b4 <LL_RCC_MSI_IsReady+0x16>
 80042b0:	2301      	movs	r3, #1
 80042b2:	e000      	b.n	80042b6 <LL_RCC_MSI_IsReady+0x18>
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bc80      	pop	{r7}
 80042bc:	4770      	bx	lr

080042be <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80042be:	b480      	push	{r7}
 80042c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80042c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0308 	and.w	r3, r3, #8
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d101      	bne.n	80042d4 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80042d0:	2301      	movs	r3, #1
 80042d2:	e000      	b.n	80042d6 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr

080042de <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80042de:	b480      	push	{r7}
 80042e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80042e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bc80      	pop	{r7}
 80042f2:	4770      	bx	lr

080042f4 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80042f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004300:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8004304:	4618      	mov	r0, r3
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr

0800430c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	021b      	lsls	r3, r3, #8
 8004322:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004326:	4313      	orrs	r3, r2
 8004328:	604b      	str	r3, [r1, #4]
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr

08004334 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800433c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f023 0203 	bic.w	r2, r3, #3
 8004346:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4313      	orrs	r3, r2
 800434e:	608b      	str	r3, [r1, #8]
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	bc80      	pop	{r7}
 8004358:	4770      	bx	lr

0800435a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800435a:	b480      	push	{r7}
 800435c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800435e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 030c 	and.w	r3, r3, #12
}
 8004368:	4618      	mov	r0, r3
 800436a:	46bd      	mov	sp, r7
 800436c:	bc80      	pop	{r7}
 800436e:	4770      	bx	lr

08004370 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004382:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4313      	orrs	r3, r2
 800438a:	608b      	str	r3, [r1, #8]
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	bc80      	pop	{r7}
 8004394:	4770      	bx	lr

08004396 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800439e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80043a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr

080043c0 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80043c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80043d0:	f023 020f 	bic.w	r2, r3, #15
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	091b      	lsrs	r3, r3, #4
 80043d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80043e2:	bf00      	nop
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr

080043ec <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80043f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4313      	orrs	r3, r2
 8004406:	608b      	str	r3, [r1, #8]
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	bc80      	pop	{r7}
 8004410:	4770      	bx	lr

08004412 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800441a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004424:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4313      	orrs	r3, r2
 800442c:	608b      	str	r3, [r1, #8]
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr

08004438 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800443c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004446:	4618      	mov	r0, r3
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr

0800444e <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800444e:	b480      	push	{r7}
 8004450:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004456:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004460:	4618      	mov	r0, r3
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr

08004468 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800446c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004476:	4618      	mov	r0, r3
 8004478:	46bd      	mov	sp, r7
 800447a:	bc80      	pop	{r7}
 800447c:	4770      	bx	lr

0800447e <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800447e:	b480      	push	{r7}
 8004480:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800448c:	4618      	mov	r0, r3
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr

08004494 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044a6:	6013      	str	r3, [r2, #0]
}
 80044a8:	bf00      	nop
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr

080044b0 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80044b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044c2:	6013      	str	r3, [r2, #0]
}
 80044c4:	bf00      	nop
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr

080044cc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80044d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044de:	d101      	bne.n	80044e4 <LL_RCC_PLL_IsReady+0x18>
 80044e0:	2301      	movs	r3, #1
 80044e2:	e000      	b.n	80044e6 <LL_RCC_PLL_IsReady+0x1a>
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bc80      	pop	{r7}
 80044ec:	4770      	bx	lr

080044ee <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80044ee:	b480      	push	{r7}
 80044f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80044f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	0a1b      	lsrs	r3, r3, #8
 80044fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80044fe:	4618      	mov	r0, r3
 8004500:	46bd      	mov	sp, r7
 8004502:	bc80      	pop	{r7}
 8004504:	4770      	bx	lr

08004506 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004506:	b480      	push	{r7}
 8004508:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800450a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004514:	4618      	mov	r0, r3
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr

0800451c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800452a:	4618      	mov	r0, r3
 800452c:	46bd      	mov	sp, r7
 800452e:	bc80      	pop	{r7}
 8004530:	4770      	bx	lr

08004532 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004532:	b480      	push	{r7}
 8004534:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f003 0303 	and.w	r3, r3, #3
}
 8004540:	4618      	mov	r0, r3
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr

08004548 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800454c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800455a:	d101      	bne.n	8004560 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800455c:	2301      	movs	r3, #1
 800455e:	e000      	b.n	8004562 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	46bd      	mov	sp, r7
 8004566:	bc80      	pop	{r7}
 8004568:	4770      	bx	lr

0800456a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800456a:	b480      	push	{r7}
 800456c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800456e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004572:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800457e:	d101      	bne.n	8004584 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004580:	2301      	movs	r3, #1
 8004582:	e000      	b.n	8004586 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	46bd      	mov	sp, r7
 800458a:	bc80      	pop	{r7}
 800458c:	4770      	bx	lr

0800458e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800458e:	b480      	push	{r7}
 8004590:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004596:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800459a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800459e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a2:	d101      	bne.n	80045a8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80045a4:	2301      	movs	r3, #1
 80045a6:	e000      	b.n	80045aa <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bc80      	pop	{r7}
 80045b0:	4770      	bx	lr

080045b2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80045b2:	b480      	push	{r7}
 80045b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80045b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045c4:	d101      	bne.n	80045ca <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bc80      	pop	{r7}
 80045d2:	4770      	bx	lr

080045d4 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80045d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045e6:	d101      	bne.n	80045ec <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80045e8:	2301      	movs	r3, #1
 80045ea:	e000      	b.n	80045ee <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bc80      	pop	{r7}
 80045f4:	4770      	bx	lr
	...

080045f8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b088      	sub	sp, #32
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e36f      	b.n	8004cea <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800460a:	f7ff fea6 	bl	800435a <LL_RCC_GetSysClkSource>
 800460e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004610:	f7ff ff8f 	bl	8004532 <LL_RCC_PLL_GetMainSource>
 8004614:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0320 	and.w	r3, r3, #32
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 80c4 	beq.w	80047ac <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d005      	beq.n	8004636 <HAL_RCC_OscConfig+0x3e>
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	2b0c      	cmp	r3, #12
 800462e:	d176      	bne.n	800471e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d173      	bne.n	800471e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e353      	b.n	8004cea <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0308 	and.w	r3, r3, #8
 8004650:	2b00      	cmp	r3, #0
 8004652:	d005      	beq.n	8004660 <HAL_RCC_OscConfig+0x68>
 8004654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800465e:	e006      	b.n	800466e <HAL_RCC_OscConfig+0x76>
 8004660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004664:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004668:	091b      	lsrs	r3, r3, #4
 800466a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800466e:	4293      	cmp	r3, r2
 8004670:	d222      	bcs.n	80046b8 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fd5a 	bl	8005130 <RCC_SetFlashLatencyFromMSIRange>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e331      	b.n	8004cea <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004690:	f043 0308 	orr.w	r3, r3, #8
 8004694:	6013      	str	r3, [r2, #0]
 8004696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046a8:	4313      	orrs	r3, r2
 80046aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7ff fe2b 	bl	800430c <LL_RCC_MSI_SetCalibTrimming>
 80046b6:	e021      	b.n	80046fc <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046c2:	f043 0308 	orr.w	r3, r3, #8
 80046c6:	6013      	str	r3, [r2, #0]
 80046c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046da:	4313      	orrs	r3, r2
 80046dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff fe12 	bl	800430c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 fd1f 	bl	8005130 <RCC_SetFlashLatencyFromMSIRange>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e2f6      	b.n	8004cea <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80046fc:	f000 fce0 	bl	80050c0 <HAL_RCC_GetHCLKFreq>
 8004700:	4603      	mov	r3, r0
 8004702:	4aa7      	ldr	r2, [pc, #668]	; (80049a0 <HAL_RCC_OscConfig+0x3a8>)
 8004704:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8004706:	4ba7      	ldr	r3, [pc, #668]	; (80049a4 <HAL_RCC_OscConfig+0x3ac>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f7fe fe50 	bl	80033b0 <HAL_InitTick>
 8004710:	4603      	mov	r3, r0
 8004712:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8004714:	7cfb      	ldrb	r3, [r7, #19]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d047      	beq.n	80047aa <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800471a:	7cfb      	ldrb	r3, [r7, #19]
 800471c:	e2e5      	b.n	8004cea <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d02c      	beq.n	8004780 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004726:	f7ff fd9e 	bl	8004266 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800472a:	f7fe f9cf 	bl	8002acc <HAL_GetTick>
 800472e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004730:	e008      	b.n	8004744 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004732:	f7fe f9cb 	bl	8002acc <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e2d2      	b.n	8004cea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004744:	f7ff fdab 	bl	800429e <LL_RCC_MSI_IsReady>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0f1      	beq.n	8004732 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800474e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004758:	f043 0308 	orr.w	r3, r3, #8
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004770:	4313      	orrs	r3, r2
 8004772:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff fdc7 	bl	800430c <LL_RCC_MSI_SetCalibTrimming>
 800477e:	e015      	b.n	80047ac <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004780:	f7ff fd7f 	bl	8004282 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004784:	f7fe f9a2 	bl	8002acc <HAL_GetTick>
 8004788:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800478c:	f7fe f99e 	bl	8002acc <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e2a5      	b.n	8004cea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800479e:	f7ff fd7e 	bl	800429e <LL_RCC_MSI_IsReady>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1f1      	bne.n	800478c <HAL_RCC_OscConfig+0x194>
 80047a8:	e000      	b.n	80047ac <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80047aa:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d058      	beq.n	800486a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	2b08      	cmp	r3, #8
 80047bc:	d005      	beq.n	80047ca <HAL_RCC_OscConfig+0x1d2>
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	2b0c      	cmp	r3, #12
 80047c2:	d108      	bne.n	80047d6 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	2b03      	cmp	r3, #3
 80047c8:	d105      	bne.n	80047d6 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d14b      	bne.n	800486a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e289      	b.n	8004cea <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80047d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047e8:	4313      	orrs	r3, r2
 80047ea:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f4:	d102      	bne.n	80047fc <HAL_RCC_OscConfig+0x204>
 80047f6:	f7ff fc86 	bl	8004106 <LL_RCC_HSE_Enable>
 80047fa:	e00d      	b.n	8004818 <HAL_RCC_OscConfig+0x220>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004804:	d104      	bne.n	8004810 <HAL_RCC_OscConfig+0x218>
 8004806:	f7ff fc51 	bl	80040ac <LL_RCC_HSE_EnableTcxo>
 800480a:	f7ff fc7c 	bl	8004106 <LL_RCC_HSE_Enable>
 800480e:	e003      	b.n	8004818 <HAL_RCC_OscConfig+0x220>
 8004810:	f7ff fc87 	bl	8004122 <LL_RCC_HSE_Disable>
 8004814:	f7ff fc58 	bl	80040c8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d012      	beq.n	8004846 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004820:	f7fe f954 	bl	8002acc <HAL_GetTick>
 8004824:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004828:	f7fe f950 	bl	8002acc <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b64      	cmp	r3, #100	; 0x64
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e257      	b.n	8004cea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800483a:	f7ff fc80 	bl	800413e <LL_RCC_HSE_IsReady>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0f1      	beq.n	8004828 <HAL_RCC_OscConfig+0x230>
 8004844:	e011      	b.n	800486a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004846:	f7fe f941 	bl	8002acc <HAL_GetTick>
 800484a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800484c:	e008      	b.n	8004860 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800484e:	f7fe f93d 	bl	8002acc <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b64      	cmp	r3, #100	; 0x64
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e244      	b.n	8004cea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004860:	f7ff fc6d 	bl	800413e <LL_RCC_HSE_IsReady>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1f1      	bne.n	800484e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d046      	beq.n	8004904 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	2b04      	cmp	r3, #4
 800487a:	d005      	beq.n	8004888 <HAL_RCC_OscConfig+0x290>
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	2b0c      	cmp	r3, #12
 8004880:	d10e      	bne.n	80048a0 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	2b02      	cmp	r3, #2
 8004886:	d10b      	bne.n	80048a0 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e22a      	b.n	8004cea <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	4618      	mov	r0, r3
 800489a:	f7ff fc8e 	bl	80041ba <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800489e:	e031      	b.n	8004904 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d019      	beq.n	80048dc <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048a8:	f7ff fc5a 	bl	8004160 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ac:	f7fe f90e 	bl	8002acc <HAL_GetTick>
 80048b0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048b4:	f7fe f90a 	bl	8002acc <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e211      	b.n	8004cea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80048c6:	f7ff fc67 	bl	8004198 <LL_RCC_HSI_IsReady>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0f1      	beq.n	80048b4 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff fc70 	bl	80041ba <LL_RCC_HSI_SetCalibTrimming>
 80048da:	e013      	b.n	8004904 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048dc:	f7ff fc4e 	bl	800417c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e0:	f7fe f8f4 	bl	8002acc <HAL_GetTick>
 80048e4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048e8:	f7fe f8f0 	bl	8002acc <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e1f7      	b.n	8004cea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80048fa:	f7ff fc4d 	bl	8004198 <LL_RCC_HSI_IsReady>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1f1      	bne.n	80048e8 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0308 	and.w	r3, r3, #8
 800490c:	2b00      	cmp	r3, #0
 800490e:	d06e      	beq.n	80049ee <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d056      	beq.n	80049c6 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8004918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800491c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004920:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69da      	ldr	r2, [r3, #28]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f003 0310 	and.w	r3, r3, #16
 800492c:	429a      	cmp	r2, r3
 800492e:	d031      	beq.n	8004994 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d006      	beq.n	8004948 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e1d0      	b.n	8004cea <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d013      	beq.n	800497a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8004952:	f7ff fc67 	bl	8004224 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004956:	f7fe f8b9 	bl	8002acc <HAL_GetTick>
 800495a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800495c:	e008      	b.n	8004970 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800495e:	f7fe f8b5 	bl	8002acc <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b11      	cmp	r3, #17
 800496a:	d901      	bls.n	8004970 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e1bc      	b.n	8004cea <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8004970:	f7ff fc68 	bl	8004244 <LL_RCC_LSI_IsReady>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1f1      	bne.n	800495e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800497a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800497e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004982:	f023 0210 	bic.w	r2, r3, #16
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004994:	f7ff fc36 	bl	8004204 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004998:	f7fe f898 	bl	8002acc <HAL_GetTick>
 800499c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800499e:	e00c      	b.n	80049ba <HAL_RCC_OscConfig+0x3c2>
 80049a0:	2000000c 	.word	0x2000000c
 80049a4:	20000010 	.word	0x20000010
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049a8:	f7fe f890 	bl	8002acc <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b11      	cmp	r3, #17
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e197      	b.n	8004cea <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80049ba:	f7ff fc43 	bl	8004244 <LL_RCC_LSI_IsReady>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0f1      	beq.n	80049a8 <HAL_RCC_OscConfig+0x3b0>
 80049c4:	e013      	b.n	80049ee <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049c6:	f7ff fc2d 	bl	8004224 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ca:	f7fe f87f 	bl	8002acc <HAL_GetTick>
 80049ce:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80049d0:	e008      	b.n	80049e4 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049d2:	f7fe f87b 	bl	8002acc <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	2b11      	cmp	r3, #17
 80049de:	d901      	bls.n	80049e4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e182      	b.n	8004cea <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80049e4:	f7ff fc2e 	bl	8004244 <LL_RCC_LSI_IsReady>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1f1      	bne.n	80049d2 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0304 	and.w	r3, r3, #4
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 80d8 	beq.w	8004bac <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80049fc:	f7ff fb44 	bl	8004088 <LL_PWR_IsEnabledBkUpAccess>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d113      	bne.n	8004a2e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004a06:	f7ff fb25 	bl	8004054 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a0a:	f7fe f85f 	bl	8002acc <HAL_GetTick>
 8004a0e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004a10:	e008      	b.n	8004a24 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a12:	f7fe f85b 	bl	8002acc <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e162      	b.n	8004cea <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004a24:	f7ff fb30 	bl	8004088 <LL_PWR_IsEnabledBkUpAccess>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d0f1      	beq.n	8004a12 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d07b      	beq.n	8004b2e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	2b85      	cmp	r3, #133	; 0x85
 8004a3c:	d003      	beq.n	8004a46 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	2b05      	cmp	r3, #5
 8004a44:	d109      	bne.n	8004a5a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a52:	f043 0304 	orr.w	r3, r3, #4
 8004a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a5a:	f7fe f837 	bl	8002acc <HAL_GetTick>
 8004a5e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a6c:	f043 0301 	orr.w	r3, r3, #1
 8004a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004a74:	e00a      	b.n	8004a8c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a76:	f7fe f829 	bl	8002acc <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e12e      	b.n	8004cea <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004a8c:	f7ff fba9 	bl	80041e2 <LL_RCC_LSE_IsReady>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0ef      	beq.n	8004a76 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	2b81      	cmp	r3, #129	; 0x81
 8004a9c:	d003      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	2b85      	cmp	r3, #133	; 0x85
 8004aa4:	d121      	bne.n	8004aea <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa6:	f7fe f811 	bl	8002acc <HAL_GetTick>
 8004aaa:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004ac0:	e00a      	b.n	8004ad8 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ac2:	f7fe f803 	bl	8002acc <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e108      	b.n	8004cea <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0ec      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004ae8:	e060      	b.n	8004bac <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aea:	f7fd ffef 	bl	8002acc <HAL_GetTick>
 8004aee:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004afc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004b04:	e00a      	b.n	8004b1c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b06:	f7fd ffe1 	bl	8002acc <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e0e6      	b.n	8004cea <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1ec      	bne.n	8004b06 <HAL_RCC_OscConfig+0x50e>
 8004b2c:	e03e      	b.n	8004bac <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b2e:	f7fd ffcd 	bl	8002acc <HAL_GetTick>
 8004b32:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004b48:	e00a      	b.n	8004b60 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b4a:	f7fd ffbf 	bl	8002acc <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e0c4      	b.n	8004cea <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1ec      	bne.n	8004b4a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b70:	f7fd ffac 	bl	8002acc <HAL_GetTick>
 8004b74:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b82:	f023 0301 	bic.w	r3, r3, #1
 8004b86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004b8a:	e00a      	b.n	8004ba2 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b8c:	f7fd ff9e 	bl	8002acc <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e0a3      	b.n	8004cea <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004ba2:	f7ff fb1e 	bl	80041e2 <LL_RCC_LSE_IsReady>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1ef      	bne.n	8004b8c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 8099 	beq.w	8004ce8 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	2b0c      	cmp	r3, #12
 8004bba:	d06c      	beq.n	8004c96 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d14b      	bne.n	8004c5c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bc4:	f7ff fc74 	bl	80044b0 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc8:	f7fd ff80 	bl	8002acc <HAL_GetTick>
 8004bcc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd0:	f7fd ff7c 	bl	8002acc <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b0a      	cmp	r3, #10
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e083      	b.n	8004cea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004be2:	f7ff fc73 	bl	80044cc <LL_RCC_PLL_IsReady>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1f1      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	4b40      	ldr	r3, [pc, #256]	; (8004cf4 <HAL_RCC_OscConfig+0x6fc>)
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004bfe:	4311      	orrs	r1, r2
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c04:	0212      	lsls	r2, r2, #8
 8004c06:	4311      	orrs	r1, r2
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c0c:	4311      	orrs	r1, r2
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c12:	4311      	orrs	r1, r2
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c22:	f7ff fc37 	bl	8004494 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c34:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c36:	f7fd ff49 	bl	8002acc <HAL_GetTick>
 8004c3a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8004c3c:	e008      	b.n	8004c50 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c3e:	f7fd ff45 	bl	8002acc <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b0a      	cmp	r3, #10
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e04c      	b.n	8004cea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8004c50:	f7ff fc3c 	bl	80044cc <LL_RCC_PLL_IsReady>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0f1      	beq.n	8004c3e <HAL_RCC_OscConfig+0x646>
 8004c5a:	e045      	b.n	8004ce8 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c5c:	f7ff fc28 	bl	80044b0 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c60:	f7fd ff34 	bl	8002acc <HAL_GetTick>
 8004c64:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c68:	f7fd ff30 	bl	8002acc <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b0a      	cmp	r3, #10
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e037      	b.n	8004cea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004c7a:	f7ff fc27 	bl	80044cc <LL_RCC_PLL_IsReady>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1f1      	bne.n	8004c68 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c8e:	4b1a      	ldr	r3, [pc, #104]	; (8004cf8 <HAL_RCC_OscConfig+0x700>)
 8004c90:	4013      	ands	r3, r2
 8004c92:	60cb      	str	r3, [r1, #12]
 8004c94:	e028      	b.n	8004ce8 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d101      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e023      	b.n	8004cea <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	f003 0203 	and.w	r2, r3, #3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d115      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d10e      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd0:	021b      	lsls	r3, r3, #8
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d106      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d001      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e000      	b.n	8004cea <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3720      	adds	r7, #32
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	11c1808c 	.word	0x11c1808c
 8004cf8:	eefefffc 	.word	0xeefefffc

08004cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e12c      	b.n	8004f6a <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d10:	4b98      	ldr	r3, [pc, #608]	; (8004f74 <HAL_RCC_ClockConfig+0x278>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d91b      	bls.n	8004d56 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d1e:	4b95      	ldr	r3, [pc, #596]	; (8004f74 <HAL_RCC_ClockConfig+0x278>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f023 0207 	bic.w	r2, r3, #7
 8004d26:	4993      	ldr	r1, [pc, #588]	; (8004f74 <HAL_RCC_ClockConfig+0x278>)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d2e:	f7fd fecd 	bl	8002acc <HAL_GetTick>
 8004d32:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d34:	e008      	b.n	8004d48 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004d36:	f7fd fec9 	bl	8002acc <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e110      	b.n	8004f6a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d48:	4b8a      	ldr	r3, [pc, #552]	; (8004f74 <HAL_RCC_ClockConfig+0x278>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0307 	and.w	r3, r3, #7
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d1ef      	bne.n	8004d36 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d016      	beq.n	8004d90 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7ff fb02 	bl	8004370 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d6c:	f7fd feae 	bl	8002acc <HAL_GetTick>
 8004d70:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d74:	f7fd feaa 	bl	8002acc <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e0f1      	b.n	8004f6a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004d86:	f7ff fbdf 	bl	8004548 <LL_RCC_IsActiveFlag_HPRE>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0f1      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0320 	and.w	r3, r3, #32
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d016      	beq.n	8004dca <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7ff faf8 	bl	8004396 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004da6:	f7fd fe91 	bl	8002acc <HAL_GetTick>
 8004daa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004dac:	e008      	b.n	8004dc0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004dae:	f7fd fe8d 	bl	8002acc <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d901      	bls.n	8004dc0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e0d4      	b.n	8004f6a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004dc0:	f7ff fbd3 	bl	800456a <LL_RCC_IsActiveFlag_C2HPRE>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0f1      	beq.n	8004dae <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d016      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7ff faf0 	bl	80043c0 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004de0:	f7fd fe74 	bl	8002acc <HAL_GetTick>
 8004de4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004de8:	f7fd fe70 	bl	8002acc <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e0b7      	b.n	8004f6a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004dfa:	f7ff fbc8 	bl	800458e <LL_RCC_IsActiveFlag_SHDHPRE>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d0f1      	beq.n	8004de8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d016      	beq.n	8004e3e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff fae9 	bl	80043ec <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004e1a:	f7fd fe57 	bl	8002acc <HAL_GetTick>
 8004e1e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004e20:	e008      	b.n	8004e34 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004e22:	f7fd fe53 	bl	8002acc <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e09a      	b.n	8004f6a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004e34:	f7ff fbbd 	bl	80045b2 <LL_RCC_IsActiveFlag_PPRE1>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0f1      	beq.n	8004e22 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d017      	beq.n	8004e7a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7ff fade 	bl	8004412 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004e56:	f7fd fe39 	bl	8002acc <HAL_GetTick>
 8004e5a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004e5c:	e008      	b.n	8004e70 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004e5e:	f7fd fe35 	bl	8002acc <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e07c      	b.n	8004f6a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004e70:	f7ff fbb0 	bl	80045d4 <LL_RCC_IsActiveFlag_PPRE2>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0f1      	beq.n	8004e5e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d043      	beq.n	8004f0e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d106      	bne.n	8004e9c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004e8e:	f7ff f956 	bl	800413e <LL_RCC_HSE_IsReady>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d11e      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e066      	b.n	8004f6a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2b03      	cmp	r3, #3
 8004ea2:	d106      	bne.n	8004eb2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004ea4:	f7ff fb12 	bl	80044cc <LL_RCC_PLL_IsReady>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d113      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e05b      	b.n	8004f6a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d106      	bne.n	8004ec8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004eba:	f7ff f9f0 	bl	800429e <LL_RCC_MSI_IsReady>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d108      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e050      	b.n	8004f6a <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004ec8:	f7ff f966 	bl	8004198 <LL_RCC_HSI_IsReady>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e049      	b.n	8004f6a <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7ff fa2a 	bl	8004334 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ee0:	f7fd fdf4 	bl	8002acc <HAL_GetTick>
 8004ee4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ee6:	e00a      	b.n	8004efe <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ee8:	f7fd fdf0 	bl	8002acc <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e035      	b.n	8004f6a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004efe:	f7ff fa2c 	bl	800435a <LL_RCC_GetSysClkSource>
 8004f02:	4602      	mov	r2, r0
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d1ec      	bne.n	8004ee8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f0e:	4b19      	ldr	r3, [pc, #100]	; (8004f74 <HAL_RCC_ClockConfig+0x278>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0307 	and.w	r3, r3, #7
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d21b      	bcs.n	8004f54 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f1c:	4b15      	ldr	r3, [pc, #84]	; (8004f74 <HAL_RCC_ClockConfig+0x278>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f023 0207 	bic.w	r2, r3, #7
 8004f24:	4913      	ldr	r1, [pc, #76]	; (8004f74 <HAL_RCC_ClockConfig+0x278>)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f2c:	f7fd fdce 	bl	8002acc <HAL_GetTick>
 8004f30:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004f34:	f7fd fdca 	bl	8002acc <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e011      	b.n	8004f6a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f46:	4b0b      	ldr	r3, [pc, #44]	; (8004f74 <HAL_RCC_ClockConfig+0x278>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d1ef      	bne.n	8004f34 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004f54:	f000 f8b4 	bl	80050c0 <HAL_RCC_GetHCLKFreq>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	4a07      	ldr	r2, [pc, #28]	; (8004f78 <HAL_RCC_ClockConfig+0x27c>)
 8004f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8004f5e:	4b07      	ldr	r3, [pc, #28]	; (8004f7c <HAL_RCC_ClockConfig+0x280>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fe fa24 	bl	80033b0 <HAL_InitTick>
 8004f68:	4603      	mov	r3, r0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	58004000 	.word	0x58004000
 8004f78:	2000000c 	.word	0x2000000c
 8004f7c:	20000010 	.word	0x20000010

08004f80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f80:	b590      	push	{r4, r7, lr}
 8004f82:	b087      	sub	sp, #28
 8004f84:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f8e:	f7ff f9e4 	bl	800435a <LL_RCC_GetSysClkSource>
 8004f92:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f94:	f7ff facd 	bl	8004532 <LL_RCC_PLL_GetMainSource>
 8004f98:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d005      	beq.n	8004fac <HAL_RCC_GetSysClockFreq+0x2c>
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	2b0c      	cmp	r3, #12
 8004fa4:	d139      	bne.n	800501a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d136      	bne.n	800501a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004fac:	f7ff f987 	bl	80042be <LL_RCC_MSI_IsEnabledRangeSelect>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d115      	bne.n	8004fe2 <HAL_RCC_GetSysClockFreq+0x62>
 8004fb6:	f7ff f982 	bl	80042be <LL_RCC_MSI_IsEnabledRangeSelect>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d106      	bne.n	8004fce <HAL_RCC_GetSysClockFreq+0x4e>
 8004fc0:	f7ff f98d 	bl	80042de <LL_RCC_MSI_GetRange>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	0a1b      	lsrs	r3, r3, #8
 8004fc8:	f003 030f 	and.w	r3, r3, #15
 8004fcc:	e005      	b.n	8004fda <HAL_RCC_GetSysClockFreq+0x5a>
 8004fce:	f7ff f991 	bl	80042f4 <LL_RCC_MSI_GetRangeAfterStandby>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	0a1b      	lsrs	r3, r3, #8
 8004fd6:	f003 030f 	and.w	r3, r3, #15
 8004fda:	4a36      	ldr	r2, [pc, #216]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x134>)
 8004fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fe0:	e014      	b.n	800500c <HAL_RCC_GetSysClockFreq+0x8c>
 8004fe2:	f7ff f96c 	bl	80042be <LL_RCC_MSI_IsEnabledRangeSelect>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d106      	bne.n	8004ffa <HAL_RCC_GetSysClockFreq+0x7a>
 8004fec:	f7ff f977 	bl	80042de <LL_RCC_MSI_GetRange>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	091b      	lsrs	r3, r3, #4
 8004ff4:	f003 030f 	and.w	r3, r3, #15
 8004ff8:	e005      	b.n	8005006 <HAL_RCC_GetSysClockFreq+0x86>
 8004ffa:	f7ff f97b 	bl	80042f4 <LL_RCC_MSI_GetRangeAfterStandby>
 8004ffe:	4603      	mov	r3, r0
 8005000:	091b      	lsrs	r3, r3, #4
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	4a2b      	ldr	r2, [pc, #172]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x134>)
 8005008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800500c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d115      	bne.n	8005040 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005018:	e012      	b.n	8005040 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	2b04      	cmp	r3, #4
 800501e:	d102      	bne.n	8005026 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005020:	4b25      	ldr	r3, [pc, #148]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	e00c      	b.n	8005040 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	2b08      	cmp	r3, #8
 800502a:	d109      	bne.n	8005040 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800502c:	f7ff f85a 	bl	80040e4 <LL_RCC_HSE_IsEnabledDiv2>
 8005030:	4603      	mov	r3, r0
 8005032:	2b01      	cmp	r3, #1
 8005034:	d102      	bne.n	800503c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005036:	4b20      	ldr	r3, [pc, #128]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005038:	617b      	str	r3, [r7, #20]
 800503a:	e001      	b.n	8005040 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800503c:	4b1f      	ldr	r3, [pc, #124]	; (80050bc <HAL_RCC_GetSysClockFreq+0x13c>)
 800503e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005040:	f7ff f98b 	bl	800435a <LL_RCC_GetSysClkSource>
 8005044:	4603      	mov	r3, r0
 8005046:	2b0c      	cmp	r3, #12
 8005048:	d12f      	bne.n	80050aa <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800504a:	f7ff fa72 	bl	8004532 <LL_RCC_PLL_GetMainSource>
 800504e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b02      	cmp	r3, #2
 8005054:	d003      	beq.n	800505e <HAL_RCC_GetSysClockFreq+0xde>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b03      	cmp	r3, #3
 800505a:	d003      	beq.n	8005064 <HAL_RCC_GetSysClockFreq+0xe4>
 800505c:	e00d      	b.n	800507a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800505e:	4b16      	ldr	r3, [pc, #88]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005060:	60fb      	str	r3, [r7, #12]
        break;
 8005062:	e00d      	b.n	8005080 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005064:	f7ff f83e 	bl	80040e4 <LL_RCC_HSE_IsEnabledDiv2>
 8005068:	4603      	mov	r3, r0
 800506a:	2b01      	cmp	r3, #1
 800506c:	d102      	bne.n	8005074 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800506e:	4b12      	ldr	r3, [pc, #72]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005070:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005072:	e005      	b.n	8005080 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005074:	4b11      	ldr	r3, [pc, #68]	; (80050bc <HAL_RCC_GetSysClockFreq+0x13c>)
 8005076:	60fb      	str	r3, [r7, #12]
        break;
 8005078:	e002      	b.n	8005080 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	60fb      	str	r3, [r7, #12]
        break;
 800507e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005080:	f7ff fa35 	bl	80044ee <LL_RCC_PLL_GetN>
 8005084:	4602      	mov	r2, r0
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	fb03 f402 	mul.w	r4, r3, r2
 800508c:	f7ff fa46 	bl	800451c <LL_RCC_PLL_GetDivider>
 8005090:	4603      	mov	r3, r0
 8005092:	091b      	lsrs	r3, r3, #4
 8005094:	3301      	adds	r3, #1
 8005096:	fbb4 f4f3 	udiv	r4, r4, r3
 800509a:	f7ff fa34 	bl	8004506 <LL_RCC_PLL_GetR>
 800509e:	4603      	mov	r3, r0
 80050a0:	0f5b      	lsrs	r3, r3, #29
 80050a2:	3301      	adds	r3, #1
 80050a4:	fbb4 f3f3 	udiv	r3, r4, r3
 80050a8:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80050aa:	697b      	ldr	r3, [r7, #20]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	371c      	adds	r7, #28
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd90      	pop	{r4, r7, pc}
 80050b4:	0800ce38 	.word	0x0800ce38
 80050b8:	00f42400 	.word	0x00f42400
 80050bc:	01e84800 	.word	0x01e84800

080050c0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050c0:	b598      	push	{r3, r4, r7, lr}
 80050c2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80050c4:	f7ff ff5c 	bl	8004f80 <HAL_RCC_GetSysClockFreq>
 80050c8:	4604      	mov	r4, r0
 80050ca:	f7ff f9b5 	bl	8004438 <LL_RCC_GetAHBPrescaler>
 80050ce:	4603      	mov	r3, r0
 80050d0:	091b      	lsrs	r3, r3, #4
 80050d2:	f003 030f 	and.w	r3, r3, #15
 80050d6:	4a03      	ldr	r2, [pc, #12]	; (80050e4 <HAL_RCC_GetHCLKFreq+0x24>)
 80050d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050dc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	bd98      	pop	{r3, r4, r7, pc}
 80050e4:	0800cdd8 	.word	0x0800cdd8

080050e8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050e8:	b598      	push	{r3, r4, r7, lr}
 80050ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80050ec:	f7ff ffe8 	bl	80050c0 <HAL_RCC_GetHCLKFreq>
 80050f0:	4604      	mov	r4, r0
 80050f2:	f7ff f9b9 	bl	8004468 <LL_RCC_GetAPB1Prescaler>
 80050f6:	4603      	mov	r3, r0
 80050f8:	0a1b      	lsrs	r3, r3, #8
 80050fa:	4a03      	ldr	r2, [pc, #12]	; (8005108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005100:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005104:	4618      	mov	r0, r3
 8005106:	bd98      	pop	{r3, r4, r7, pc}
 8005108:	0800ce18 	.word	0x0800ce18

0800510c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800510c:	b598      	push	{r3, r4, r7, lr}
 800510e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005110:	f7ff ffd6 	bl	80050c0 <HAL_RCC_GetHCLKFreq>
 8005114:	4604      	mov	r4, r0
 8005116:	f7ff f9b2 	bl	800447e <LL_RCC_GetAPB2Prescaler>
 800511a:	4603      	mov	r3, r0
 800511c:	0adb      	lsrs	r3, r3, #11
 800511e:	4a03      	ldr	r2, [pc, #12]	; (800512c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005124:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005128:	4618      	mov	r0, r3
 800512a:	bd98      	pop	{r3, r4, r7, pc}
 800512c:	0800ce18 	.word	0x0800ce18

08005130 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005130:	b590      	push	{r4, r7, lr}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	091b      	lsrs	r3, r3, #4
 800513c:	f003 030f 	and.w	r3, r3, #15
 8005140:	4a10      	ldr	r2, [pc, #64]	; (8005184 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8005142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005146:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005148:	f7ff f981 	bl	800444e <LL_RCC_GetAHB3Prescaler>
 800514c:	4603      	mov	r3, r0
 800514e:	091b      	lsrs	r3, r3, #4
 8005150:	f003 030f 	and.w	r3, r3, #15
 8005154:	4a0c      	ldr	r2, [pc, #48]	; (8005188 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8005156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005160:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	4a09      	ldr	r2, [pc, #36]	; (800518c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8005166:	fba2 2303 	umull	r2, r3, r2, r3
 800516a:	0c9c      	lsrs	r4, r3, #18
 800516c:	f7fe ff80 	bl	8004070 <HAL_PWREx_GetVoltageRange>
 8005170:	4603      	mov	r3, r0
 8005172:	4619      	mov	r1, r3
 8005174:	4620      	mov	r0, r4
 8005176:	f000 f80b 	bl	8005190 <RCC_SetFlashLatency>
 800517a:	4603      	mov	r3, r0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	bd90      	pop	{r4, r7, pc}
 8005184:	0800ce38 	.word	0x0800ce38
 8005188:	0800cdd8 	.word	0x0800cdd8
 800518c:	431bde83 	.word	0x431bde83

08005190 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b08e      	sub	sp, #56	; 0x38
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800519a:	4a3a      	ldr	r2, [pc, #232]	; (8005284 <RCC_SetFlashLatency+0xf4>)
 800519c:	f107 0320 	add.w	r3, r7, #32
 80051a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80051a4:	6018      	str	r0, [r3, #0]
 80051a6:	3304      	adds	r3, #4
 80051a8:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80051aa:	4a37      	ldr	r2, [pc, #220]	; (8005288 <RCC_SetFlashLatency+0xf8>)
 80051ac:	f107 0318 	add.w	r3, r7, #24
 80051b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80051b4:	6018      	str	r0, [r3, #0]
 80051b6:	3304      	adds	r3, #4
 80051b8:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80051ba:	4a34      	ldr	r2, [pc, #208]	; (800528c <RCC_SetFlashLatency+0xfc>)
 80051bc:	f107 030c 	add.w	r3, r7, #12
 80051c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80051c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80051c6:	2300      	movs	r3, #0
 80051c8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051d0:	d11b      	bne.n	800520a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80051d2:	2300      	movs	r3, #0
 80051d4:	633b      	str	r3, [r7, #48]	; 0x30
 80051d6:	e014      	b.n	8005202 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80051d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051da:	005b      	lsls	r3, r3, #1
 80051dc:	3338      	adds	r3, #56	; 0x38
 80051de:	443b      	add	r3, r7
 80051e0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80051e4:	461a      	mov	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d807      	bhi.n	80051fc <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80051ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	3338      	adds	r3, #56	; 0x38
 80051f2:	443b      	add	r3, r7
 80051f4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80051f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051fa:	e021      	b.n	8005240 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80051fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fe:	3301      	adds	r3, #1
 8005200:	633b      	str	r3, [r7, #48]	; 0x30
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	2b02      	cmp	r3, #2
 8005206:	d9e7      	bls.n	80051d8 <RCC_SetFlashLatency+0x48>
 8005208:	e01a      	b.n	8005240 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800520a:	2300      	movs	r3, #0
 800520c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800520e:	e014      	b.n	800523a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	3338      	adds	r3, #56	; 0x38
 8005216:	443b      	add	r3, r7
 8005218:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800521c:	461a      	mov	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4293      	cmp	r3, r2
 8005222:	d807      	bhi.n	8005234 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	3338      	adds	r3, #56	; 0x38
 800522a:	443b      	add	r3, r7
 800522c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005230:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005232:	e005      	b.n	8005240 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005236:	3301      	adds	r3, #1
 8005238:	62fb      	str	r3, [r7, #44]	; 0x2c
 800523a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800523c:	2b02      	cmp	r3, #2
 800523e:	d9e7      	bls.n	8005210 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005240:	4b13      	ldr	r3, [pc, #76]	; (8005290 <RCC_SetFlashLatency+0x100>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f023 0207 	bic.w	r2, r3, #7
 8005248:	4911      	ldr	r1, [pc, #68]	; (8005290 <RCC_SetFlashLatency+0x100>)
 800524a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800524c:	4313      	orrs	r3, r2
 800524e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005250:	f7fd fc3c 	bl	8002acc <HAL_GetTick>
 8005254:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005256:	e008      	b.n	800526a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005258:	f7fd fc38 	bl	8002acc <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d901      	bls.n	800526a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e007      	b.n	800527a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800526a:	4b09      	ldr	r3, [pc, #36]	; (8005290 <RCC_SetFlashLatency+0x100>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005274:	429a      	cmp	r2, r3
 8005276:	d1ef      	bne.n	8005258 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3738      	adds	r7, #56	; 0x38
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	0800cd98 	.word	0x0800cd98
 8005288:	0800cda0 	.word	0x0800cda0
 800528c:	0800cda8 	.word	0x0800cda8
 8005290:	58004000 	.word	0x58004000

08005294 <LL_RCC_LSE_IsReady>:
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800529c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d101      	bne.n	80052ac <LL_RCC_LSE_IsReady+0x18>
 80052a8:	2301      	movs	r3, #1
 80052aa:	e000      	b.n	80052ae <LL_RCC_LSE_IsReady+0x1a>
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bc80      	pop	{r7}
 80052b4:	4770      	bx	lr

080052b6 <LL_RCC_SetUSARTClockSource>:
{
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80052be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	0c1b      	lsrs	r3, r3, #16
 80052ca:	43db      	mvns	r3, r3
 80052cc:	401a      	ands	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052d6:	4313      	orrs	r3, r2
 80052d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bc80      	pop	{r7}
 80052e4:	4770      	bx	lr

080052e6 <LL_RCC_SetI2SClockSource>:
{
 80052e6:	b480      	push	{r7}
 80052e8:	b083      	sub	sp, #12
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80052ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4313      	orrs	r3, r2
 8005302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	bc80      	pop	{r7}
 800530e:	4770      	bx	lr

08005310 <LL_RCC_SetLPUARTClockSource>:
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800531c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005320:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005324:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4313      	orrs	r3, r2
 800532c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	bc80      	pop	{r7}
 8005338:	4770      	bx	lr

0800533a <LL_RCC_SetI2CClockSource>:
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005346:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	091b      	lsrs	r3, r3, #4
 800534e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005352:	43db      	mvns	r3, r3
 8005354:	401a      	ands	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800535e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005362:	4313      	orrs	r3, r2
 8005364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	bc80      	pop	{r7}
 8005370:	4770      	bx	lr

08005372 <LL_RCC_SetLPTIMClockSource>:
{
 8005372:	b480      	push	{r7}
 8005374:	b083      	sub	sp, #12
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800537a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800537e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	0c1b      	lsrs	r3, r3, #16
 8005386:	041b      	lsls	r3, r3, #16
 8005388:	43db      	mvns	r3, r3
 800538a:	401a      	ands	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	041b      	lsls	r3, r3, #16
 8005390:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005394:	4313      	orrs	r3, r2
 8005396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800539a:	bf00      	nop
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	bc80      	pop	{r7}
 80053a2:	4770      	bx	lr

080053a4 <LL_RCC_SetRNGClockSource>:
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80053ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80053b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4313      	orrs	r3, r2
 80053c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bc80      	pop	{r7}
 80053cc:	4770      	bx	lr

080053ce <LL_RCC_SetADCClockSource>:
{
 80053ce:	b480      	push	{r7}
 80053d0:	b083      	sub	sp, #12
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80053d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80053ee:	bf00      	nop
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bc80      	pop	{r7}
 80053f6:	4770      	bx	lr

080053f8 <LL_RCC_SetRTCClockSource>:
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005408:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800540c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4313      	orrs	r3, r2
 8005414:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	bc80      	pop	{r7}
 8005420:	4770      	bx	lr

08005422 <LL_RCC_GetRTCClockSource>:
{
 8005422:	b480      	push	{r7}
 8005424:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800542a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005432:	4618      	mov	r0, r3
 8005434:	46bd      	mov	sp, r7
 8005436:	bc80      	pop	{r7}
 8005438:	4770      	bx	lr

0800543a <LL_RCC_ForceBackupDomainReset>:
{
 800543a:	b480      	push	{r7}
 800543c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800543e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005446:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800544a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800544e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005452:	bf00      	nop
 8005454:	46bd      	mov	sp, r7
 8005456:	bc80      	pop	{r7}
 8005458:	4770      	bx	lr

0800545a <LL_RCC_ReleaseBackupDomainReset>:
{
 800545a:	b480      	push	{r7}
 800545c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800545e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005466:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800546a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800546e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005472:	bf00      	nop
 8005474:	46bd      	mov	sp, r7
 8005476:	bc80      	pop	{r7}
 8005478:	4770      	bx	lr
	...

0800547c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8005484:	2300      	movs	r3, #0
 8005486:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8005488:	2300      	movs	r3, #0
 800548a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800548c:	2300      	movs	r3, #0
 800548e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d058      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 800549c:	f7fe fdda 	bl	8004054 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054a0:	f7fd fb14 	bl	8002acc <HAL_GetTick>
 80054a4:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80054a6:	e009      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054a8:	f7fd fb10 	bl	8002acc <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d902      	bls.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	74fb      	strb	r3, [r7, #19]
        break;
 80054ba:	e006      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80054bc:	4b7b      	ldr	r3, [pc, #492]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054c8:	d1ee      	bne.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80054ca:	7cfb      	ldrb	r3, [r7, #19]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d13c      	bne.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80054d0:	f7ff ffa7 	bl	8005422 <LL_RCC_GetRTCClockSource>
 80054d4:	4602      	mov	r2, r0
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054da:	429a      	cmp	r2, r3
 80054dc:	d00f      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ea:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054ec:	f7ff ffa5 	bl	800543a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054f0:	f7ff ffb3 	bl	800545a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d014      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005508:	f7fd fae0 	bl	8002acc <HAL_GetTick>
 800550c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800550e:	e00b      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005510:	f7fd fadc 	bl	8002acc <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	f241 3288 	movw	r2, #5000	; 0x1388
 800551e:	4293      	cmp	r3, r2
 8005520:	d902      	bls.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	74fb      	strb	r3, [r7, #19]
            break;
 8005526:	e004      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8005528:	f7ff feb4 	bl	8005294 <LL_RCC_LSE_IsReady>
 800552c:	4603      	mov	r3, r0
 800552e:	2b01      	cmp	r3, #1
 8005530:	d1ee      	bne.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8005532:	7cfb      	ldrb	r3, [r7, #19]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d105      	bne.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800553c:	4618      	mov	r0, r3
 800553e:	f7ff ff5b 	bl	80053f8 <LL_RCC_SetRTCClockSource>
 8005542:	e004      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005544:	7cfb      	ldrb	r3, [r7, #19]
 8005546:	74bb      	strb	r3, [r7, #18]
 8005548:	e001      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800554a:	7cfb      	ldrb	r3, [r7, #19]
 800554c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d004      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	4618      	mov	r0, r3
 8005560:	f7ff fea9 	bl	80052b6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0302 	and.w	r3, r3, #2
 800556c:	2b00      	cmp	r3, #0
 800556e:	d004      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff fe9e 	bl	80052b6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0320 	and.w	r3, r3, #32
 8005582:	2b00      	cmp	r3, #0
 8005584:	d004      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	4618      	mov	r0, r3
 800558c:	f7ff fec0 	bl	8005310 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005598:	2b00      	cmp	r3, #0
 800559a:	d004      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7ff fee6 	bl	8005372 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d004      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7ff fedb 	bl	8005372 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d004      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7ff fed0 	bl	8005372 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d004      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7ff fea9 	bl	800533a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d004      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7ff fe9e 	bl	800533a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005606:	2b00      	cmp	r3, #0
 8005608:	d004      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	69db      	ldr	r3, [r3, #28]
 800560e:	4618      	mov	r0, r3
 8005610:	f7ff fe93 	bl	800533a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0310 	and.w	r3, r3, #16
 800561c:	2b00      	cmp	r3, #0
 800561e:	d011      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	4618      	mov	r0, r3
 8005626:	f7ff fe5e 	bl	80052e6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005632:	d107      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8005634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800563e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005642:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d010      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005654:	4618      	mov	r0, r3
 8005656:	f7ff fea5 	bl	80053a4 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565e:	2b00      	cmp	r3, #0
 8005660:	d107      	bne.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800566c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005670:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d011      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005682:	4618      	mov	r0, r3
 8005684:	f7ff fea3 	bl	80053ce <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005690:	d107      	bne.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800569c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056a0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80056a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3718      	adds	r7, #24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	58000400 	.word	0x58000400

080056b0 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80056b8:	4b06      	ldr	r3, [pc, #24]	; (80056d4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80056c0:	4904      	ldr	r1, [pc, #16]	; (80056d4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	608b      	str	r3, [r1, #8]
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bc80      	pop	{r7}
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	58000400 	.word	0x58000400

080056d8 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 80056d8:	b480      	push	{r7}
 80056da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80056dc:	4b05      	ldr	r3, [pc, #20]	; (80056f4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80056de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e2:	4a04      	ldr	r2, [pc, #16]	; (80056f4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80056e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80056ec:	bf00      	nop
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bc80      	pop	{r7}
 80056f2:	4770      	bx	lr
 80056f4:	58000400 	.word	0x58000400

080056f8 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80056f8:	b480      	push	{r7}
 80056fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80056fc:	4b05      	ldr	r3, [pc, #20]	; (8005714 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80056fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005702:	4a04      	ldr	r2, [pc, #16]	; (8005714 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8005704:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800570c:	bf00      	nop
 800570e:	46bd      	mov	sp, r7
 8005710:	bc80      	pop	{r7}
 8005712:	4770      	bx	lr
 8005714:	58000400 	.word	0x58000400

08005718 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8005718:	b480      	push	{r7}
 800571a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800571c:	4b03      	ldr	r3, [pc, #12]	; (800572c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800571e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005722:	619a      	str	r2, [r3, #24]
}
 8005724:	bf00      	nop
 8005726:	46bd      	mov	sp, r7
 8005728:	bc80      	pop	{r7}
 800572a:	4770      	bx	lr
 800572c:	58000400 	.word	0x58000400

08005730 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8005730:	b480      	push	{r7}
 8005732:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8005734:	4b06      	ldr	r3, [pc, #24]	; (8005750 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b02      	cmp	r3, #2
 800573e:	d101      	bne.n	8005744 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8005740:	2301      	movs	r3, #1
 8005742:	e000      	b.n	8005746 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	46bd      	mov	sp, r7
 800574a:	bc80      	pop	{r7}
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	58000400 	.word	0x58000400

08005754 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8005754:	b480      	push	{r7}
 8005756:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8005758:	4b06      	ldr	r3, [pc, #24]	; (8005774 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	f003 0304 	and.w	r3, r3, #4
 8005760:	2b04      	cmp	r3, #4
 8005762:	d101      	bne.n	8005768 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8005764:	2301      	movs	r3, #1
 8005766:	e000      	b.n	800576a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	46bd      	mov	sp, r7
 800576e:	bc80      	pop	{r7}
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	58000400 	.word	0x58000400

08005778 <LL_RCC_RF_DisableReset>:
{
 8005778:	b480      	push	{r7}
 800577a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800577c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005784:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005788:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800578c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005790:	bf00      	nop
 8005792:	46bd      	mov	sp, r7
 8005794:	bc80      	pop	{r7}
 8005796:	4770      	bx	lr

08005798 <LL_RCC_IsRFUnderReset>:
{
 8005798:	b480      	push	{r7}
 800579a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800579c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057ac:	d101      	bne.n	80057b2 <LL_RCC_IsRFUnderReset+0x1a>
 80057ae:	2301      	movs	r3, #1
 80057b0:	e000      	b.n	80057b4 <LL_RCC_IsRFUnderReset+0x1c>
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bc80      	pop	{r7}
 80057ba:	4770      	bx	lr

080057bc <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80057c4:	4b06      	ldr	r3, [pc, #24]	; (80057e0 <LL_EXTI_EnableIT_32_63+0x24>)
 80057c6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80057ca:	4905      	ldr	r1, [pc, #20]	; (80057e0 <LL_EXTI_EnableIT_32_63+0x24>)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	bc80      	pop	{r7}
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	58000800 	.word	0x58000800

080057e4 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d103      	bne.n	80057fa <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	73fb      	strb	r3, [r7, #15]
    return status;
 80057f6:	7bfb      	ldrb	r3, [r7, #15]
 80057f8:	e052      	b.n	80058a0 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80057fa:	2300      	movs	r3, #0
 80057fc:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	799b      	ldrb	r3, [r3, #6]
 8005802:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8005804:	7bbb      	ldrb	r3, [r7, #14]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d002      	beq.n	8005810 <HAL_SUBGHZ_Init+0x2c>
 800580a:	7bbb      	ldrb	r3, [r7, #14]
 800580c:	2b03      	cmp	r3, #3
 800580e:	d109      	bne.n	8005824 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7fd f93e 	bl	8002a98 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800581c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005820:	f7ff ffcc 	bl	80057bc <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8005824:	7bbb      	ldrb	r3, [r7, #14]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d126      	bne.n	8005878 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2202      	movs	r2, #2
 800582e:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8005830:	f7ff ffa2 	bl	8005778 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005834:	4b1c      	ldr	r3, [pc, #112]	; (80058a8 <HAL_SUBGHZ_Init+0xc4>)
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	4613      	mov	r3, r2
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	1a9b      	subs	r3, r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	0cdb      	lsrs	r3, r3, #19
 8005842:	2264      	movs	r2, #100	; 0x64
 8005844:	fb02 f303 	mul.w	r3, r2, r3
 8005848:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d105      	bne.n	800585c <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	609a      	str	r2, [r3, #8]
        break;
 800585a:	e007      	b.n	800586c <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	3b01      	subs	r3, #1
 8005860:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8005862:	f7ff ff99 	bl	8005798 <LL_RCC_IsRFUnderReset>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1ee      	bne.n	800584a <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800586c:	f7ff ff34 	bl	80056d8 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8005870:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005874:	f7ff ff1c 	bl	80056b0 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8005878:	f7ff ff4e 	bl	8005718 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800587c:	7bfb      	ldrb	r3, [r7, #15]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d10a      	bne.n	8005898 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4618      	mov	r0, r3
 8005888:	f000 faac 	bl	8005de4 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	719a      	strb	r2, [r3, #6]

  return status;
 800589e:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	2000000c 	.word	0x2000000c

080058ac <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	607a      	str	r2, [r7, #4]
 80058b6:	461a      	mov	r2, r3
 80058b8:	460b      	mov	r3, r1
 80058ba:	817b      	strh	r3, [r7, #10]
 80058bc:	4613      	mov	r3, r2
 80058be:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	799b      	ldrb	r3, [r3, #6]
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d14a      	bne.n	8005960 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	795b      	ldrb	r3, [r3, #5]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d101      	bne.n	80058d6 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80058d2:	2302      	movs	r3, #2
 80058d4:	e045      	b.n	8005962 <HAL_SUBGHZ_WriteRegisters+0xb6>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2201      	movs	r2, #1
 80058da:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2202      	movs	r2, #2
 80058e0:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f000 fb4c 	bl	8005f80 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80058e8:	f7ff ff06 	bl	80056f8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80058ec:	210d      	movs	r1, #13
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 fa98 	bl	8005e24 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80058f4:	897b      	ldrh	r3, [r7, #10]
 80058f6:	0a1b      	lsrs	r3, r3, #8
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	4619      	mov	r1, r3
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 fa90 	bl	8005e24 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005904:	897b      	ldrh	r3, [r7, #10]
 8005906:	b2db      	uxtb	r3, r3
 8005908:	4619      	mov	r1, r3
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 fa8a 	bl	8005e24 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005910:	2300      	movs	r3, #0
 8005912:	82bb      	strh	r3, [r7, #20]
 8005914:	e00a      	b.n	800592c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005916:	8abb      	ldrh	r3, [r7, #20]
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	4413      	add	r3, r2
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	4619      	mov	r1, r3
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f000 fa7f 	bl	8005e24 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005926:	8abb      	ldrh	r3, [r7, #20]
 8005928:	3301      	adds	r3, #1
 800592a:	82bb      	strh	r3, [r7, #20]
 800592c:	8aba      	ldrh	r2, [r7, #20]
 800592e:	893b      	ldrh	r3, [r7, #8]
 8005930:	429a      	cmp	r2, r3
 8005932:	d3f0      	bcc.n	8005916 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005934:	f7ff fed0 	bl	80056d8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f000 fb45 	bl	8005fc8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d002      	beq.n	800594c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	75fb      	strb	r3, [r7, #23]
 800594a:	e001      	b.n	8005950 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800594c:	2300      	movs	r3, #0
 800594e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2201      	movs	r2, #1
 8005954:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	715a      	strb	r2, [r3, #5]

    return status;
 800595c:	7dfb      	ldrb	r3, [r7, #23]
 800595e:	e000      	b.n	8005962 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8005960:	2302      	movs	r3, #2
  }
}
 8005962:	4618      	mov	r0, r3
 8005964:	3718      	adds	r7, #24
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b088      	sub	sp, #32
 800596e:	af00      	add	r7, sp, #0
 8005970:	60f8      	str	r0, [r7, #12]
 8005972:	607a      	str	r2, [r7, #4]
 8005974:	461a      	mov	r2, r3
 8005976:	460b      	mov	r3, r1
 8005978:	817b      	strh	r3, [r7, #10]
 800597a:	4613      	mov	r3, r2
 800597c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	799b      	ldrb	r3, [r3, #6]
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b01      	cmp	r3, #1
 800598a:	d14a      	bne.n	8005a22 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	795b      	ldrb	r3, [r3, #5]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d101      	bne.n	8005998 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8005994:	2302      	movs	r3, #2
 8005996:	e045      	b.n	8005a24 <HAL_SUBGHZ_ReadRegisters+0xba>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2201      	movs	r2, #1
 800599c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f000 faee 	bl	8005f80 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80059a4:	f7ff fea8 	bl	80056f8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80059a8:	211d      	movs	r1, #29
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f000 fa3a 	bl	8005e24 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80059b0:	897b      	ldrh	r3, [r7, #10]
 80059b2:	0a1b      	lsrs	r3, r3, #8
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	4619      	mov	r1, r3
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f000 fa32 	bl	8005e24 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80059c0:	897b      	ldrh	r3, [r7, #10]
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	4619      	mov	r1, r3
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 fa2c 	bl	8005e24 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80059cc:	2100      	movs	r1, #0
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f000 fa28 	bl	8005e24 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80059d4:	2300      	movs	r3, #0
 80059d6:	82fb      	strh	r3, [r7, #22]
 80059d8:	e009      	b.n	80059ee <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80059da:	69b9      	ldr	r1, [r7, #24]
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f000 fa77 	bl	8005ed0 <SUBGHZSPI_Receive>
      pData++;
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	3301      	adds	r3, #1
 80059e6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80059e8:	8afb      	ldrh	r3, [r7, #22]
 80059ea:	3301      	adds	r3, #1
 80059ec:	82fb      	strh	r3, [r7, #22]
 80059ee:	8afa      	ldrh	r2, [r7, #22]
 80059f0:	893b      	ldrh	r3, [r7, #8]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d3f1      	bcc.n	80059da <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80059f6:	f7ff fe6f 	bl	80056d8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f000 fae4 	bl	8005fc8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d002      	beq.n	8005a0e <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	77fb      	strb	r3, [r7, #31]
 8005a0c:	e001      	b.n	8005a12 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2201      	movs	r2, #1
 8005a16:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	715a      	strb	r2, [r3, #5]

    return status;
 8005a1e:	7ffb      	ldrb	r3, [r7, #31]
 8005a20:	e000      	b.n	8005a24 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8005a22:	2302      	movs	r3, #2
  }
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3720      	adds	r7, #32
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	607a      	str	r2, [r7, #4]
 8005a36:	461a      	mov	r2, r3
 8005a38:	460b      	mov	r3, r1
 8005a3a:	72fb      	strb	r3, [r7, #11]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	799b      	ldrb	r3, [r3, #6]
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d14a      	bne.n	8005ae0 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	795b      	ldrb	r3, [r3, #5]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d101      	bne.n	8005a56 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8005a52:	2302      	movs	r3, #2
 8005a54:	e045      	b.n	8005ae2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 fa8f 	bl	8005f80 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8005a62:	7afb      	ldrb	r3, [r7, #11]
 8005a64:	2b84      	cmp	r3, #132	; 0x84
 8005a66:	d002      	beq.n	8005a6e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8005a68:	7afb      	ldrb	r3, [r7, #11]
 8005a6a:	2b94      	cmp	r3, #148	; 0x94
 8005a6c:	d103      	bne.n	8005a76 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2201      	movs	r2, #1
 8005a72:	711a      	strb	r2, [r3, #4]
 8005a74:	e002      	b.n	8005a7c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005a7c:	f7ff fe3c 	bl	80056f8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005a80:	7afb      	ldrb	r3, [r7, #11]
 8005a82:	4619      	mov	r1, r3
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 f9cd 	bl	8005e24 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	82bb      	strh	r3, [r7, #20]
 8005a8e:	e00a      	b.n	8005aa6 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005a90:	8abb      	ldrh	r3, [r7, #20]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	4413      	add	r3, r2
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	4619      	mov	r1, r3
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f000 f9c2 	bl	8005e24 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005aa0:	8abb      	ldrh	r3, [r7, #20]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	82bb      	strh	r3, [r7, #20]
 8005aa6:	8aba      	ldrh	r2, [r7, #20]
 8005aa8:	893b      	ldrh	r3, [r7, #8]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d3f0      	bcc.n	8005a90 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005aae:	f7ff fe13 	bl	80056d8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8005ab2:	7afb      	ldrb	r3, [r7, #11]
 8005ab4:	2b84      	cmp	r3, #132	; 0x84
 8005ab6:	d002      	beq.n	8005abe <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f000 fa85 	bl	8005fc8 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d002      	beq.n	8005acc <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	75fb      	strb	r3, [r7, #23]
 8005aca:	e001      	b.n	8005ad0 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8005acc:	2300      	movs	r3, #0
 8005ace:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	715a      	strb	r2, [r3, #5]

    return status;
 8005adc:	7dfb      	ldrb	r3, [r7, #23]
 8005ade:	e000      	b.n	8005ae2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8005ae0:	2302      	movs	r3, #2
  }
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b088      	sub	sp, #32
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	60f8      	str	r0, [r7, #12]
 8005af2:	607a      	str	r2, [r7, #4]
 8005af4:	461a      	mov	r2, r3
 8005af6:	460b      	mov	r3, r1
 8005af8:	72fb      	strb	r3, [r7, #11]
 8005afa:	4613      	mov	r3, r2
 8005afc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	799b      	ldrb	r3, [r3, #6]
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d13d      	bne.n	8005b88 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	795b      	ldrb	r3, [r3, #5]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d101      	bne.n	8005b18 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8005b14:	2302      	movs	r3, #2
 8005b16:	e038      	b.n	8005b8a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 fa2e 	bl	8005f80 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005b24:	f7ff fde8 	bl	80056f8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005b28:	7afb      	ldrb	r3, [r7, #11]
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 f979 	bl	8005e24 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005b32:	2100      	movs	r1, #0
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 f975 	bl	8005e24 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	82fb      	strh	r3, [r7, #22]
 8005b3e:	e009      	b.n	8005b54 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005b40:	69b9      	ldr	r1, [r7, #24]
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f000 f9c4 	bl	8005ed0 <SUBGHZSPI_Receive>
      pData++;
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005b4e:	8afb      	ldrh	r3, [r7, #22]
 8005b50:	3301      	adds	r3, #1
 8005b52:	82fb      	strh	r3, [r7, #22]
 8005b54:	8afa      	ldrh	r2, [r7, #22]
 8005b56:	893b      	ldrh	r3, [r7, #8]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d3f1      	bcc.n	8005b40 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005b5c:	f7ff fdbc 	bl	80056d8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 fa31 	bl	8005fc8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	77fb      	strb	r3, [r7, #31]
 8005b72:	e001      	b.n	8005b78 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8005b74:	2300      	movs	r3, #0
 8005b76:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	715a      	strb	r2, [r3, #5]

    return status;
 8005b84:	7ffb      	ldrb	r3, [r7, #31]
 8005b86:	e000      	b.n	8005b8a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005b88:	2302      	movs	r3, #2
  }
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3720      	adds	r7, #32
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b086      	sub	sp, #24
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	607a      	str	r2, [r7, #4]
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	72fb      	strb	r3, [r7, #11]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	799b      	ldrb	r3, [r3, #6]
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d13e      	bne.n	8005c2e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	795b      	ldrb	r3, [r3, #5]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d101      	bne.n	8005bbc <HAL_SUBGHZ_WriteBuffer+0x2a>
 8005bb8:	2302      	movs	r3, #2
 8005bba:	e039      	b.n	8005c30 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 f9dc 	bl	8005f80 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005bc8:	f7ff fd96 	bl	80056f8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8005bcc:	210e      	movs	r1, #14
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 f928 	bl	8005e24 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005bd4:	7afb      	ldrb	r3, [r7, #11]
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 f923 	bl	8005e24 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005bde:	2300      	movs	r3, #0
 8005be0:	82bb      	strh	r3, [r7, #20]
 8005be2:	e00a      	b.n	8005bfa <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005be4:	8abb      	ldrh	r3, [r7, #20]
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	4413      	add	r3, r2
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	4619      	mov	r1, r3
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 f918 	bl	8005e24 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005bf4:	8abb      	ldrh	r3, [r7, #20]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	82bb      	strh	r3, [r7, #20]
 8005bfa:	8aba      	ldrh	r2, [r7, #20]
 8005bfc:	893b      	ldrh	r3, [r7, #8]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d3f0      	bcc.n	8005be4 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005c02:	f7ff fd69 	bl	80056d8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f000 f9de 	bl	8005fc8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	75fb      	strb	r3, [r7, #23]
 8005c18:	e001      	b.n	8005c1e <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2201      	movs	r2, #1
 8005c22:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	715a      	strb	r2, [r3, #5]

    return status;
 8005c2a:	7dfb      	ldrb	r3, [r7, #23]
 8005c2c:	e000      	b.n	8005c30 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005c2e:	2302      	movs	r3, #2
  }
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b088      	sub	sp, #32
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	607a      	str	r2, [r7, #4]
 8005c42:	461a      	mov	r2, r3
 8005c44:	460b      	mov	r3, r1
 8005c46:	72fb      	strb	r3, [r7, #11]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	799b      	ldrb	r3, [r3, #6]
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d141      	bne.n	8005cde <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	795b      	ldrb	r3, [r3, #5]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d101      	bne.n	8005c66 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8005c62:	2302      	movs	r3, #2
 8005c64:	e03c      	b.n	8005ce0 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 f987 	bl	8005f80 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005c72:	f7ff fd41 	bl	80056f8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8005c76:	211e      	movs	r1, #30
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f000 f8d3 	bl	8005e24 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005c7e:	7afb      	ldrb	r3, [r7, #11]
 8005c80:	4619      	mov	r1, r3
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f000 f8ce 	bl	8005e24 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005c88:	2100      	movs	r1, #0
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 f8ca 	bl	8005e24 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005c90:	2300      	movs	r3, #0
 8005c92:	82fb      	strh	r3, [r7, #22]
 8005c94:	e009      	b.n	8005caa <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005c96:	69b9      	ldr	r1, [r7, #24]
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 f919 	bl	8005ed0 <SUBGHZSPI_Receive>
      pData++;
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005ca4:	8afb      	ldrh	r3, [r7, #22]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	82fb      	strh	r3, [r7, #22]
 8005caa:	8afa      	ldrh	r2, [r7, #22]
 8005cac:	893b      	ldrh	r3, [r7, #8]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d3f1      	bcc.n	8005c96 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005cb2:	f7ff fd11 	bl	80056d8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f000 f986 	bl	8005fc8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	77fb      	strb	r3, [r7, #31]
 8005cc8:	e001      	b.n	8005cce <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	715a      	strb	r2, [r3, #5]

    return status;
 8005cda:	7ffb      	ldrb	r3, [r7, #31]
 8005cdc:	e000      	b.n	8005ce0 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005cde:	2302      	movs	r3, #2
  }
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3720      	adds	r7, #32
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8005cf4:	f107 020c 	add.w	r2, r7, #12
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	2112      	movs	r1, #18
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7ff fef4 	bl	8005aea <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8005d02:	7b3b      	ldrb	r3, [r7, #12]
 8005d04:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8005d06:	89fb      	ldrh	r3, [r7, #14]
 8005d08:	021b      	lsls	r3, r3, #8
 8005d0a:	b21a      	sxth	r2, r3
 8005d0c:	7b7b      	ldrb	r3, [r7, #13]
 8005d0e:	b21b      	sxth	r3, r3
 8005d10:	4313      	orrs	r3, r2
 8005d12:	b21b      	sxth	r3, r3
 8005d14:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8005d16:	f107 020c 	add.w	r2, r7, #12
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	2102      	movs	r1, #2
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7ff fe84 	bl	8005a2c <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8005d24:	89fb      	ldrh	r3, [r7, #14]
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d002      	beq.n	8005d34 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f005 f95c 	bl	800afec <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8005d34:	89fb      	ldrh	r3, [r7, #14]
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d002      	beq.n	8005d44 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f005 f962 	bl	800b008 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8005d44:	89fb      	ldrh	r3, [r7, #14]
 8005d46:	f003 0304 	and.w	r3, r3, #4
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d002      	beq.n	8005d54 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f005 f9b2 	bl	800b0b8 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8005d54:	89fb      	ldrh	r3, [r7, #14]
 8005d56:	f003 0308 	and.w	r3, r3, #8
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f005 f9b8 	bl	800b0d4 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8005d64:	89fb      	ldrh	r3, [r7, #14]
 8005d66:	f003 0310 	and.w	r3, r3, #16
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d002      	beq.n	8005d74 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f005 f9be 	bl	800b0f0 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8005d74:	89fb      	ldrh	r3, [r7, #14]
 8005d76:	f003 0320 	and.w	r3, r3, #32
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d002      	beq.n	8005d84 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f005 f98c 	bl	800b09c <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8005d84:	89fb      	ldrh	r3, [r7, #14]
 8005d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d002      	beq.n	8005d94 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f005 f948 	bl	800b024 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8005d94:	89fb      	ldrh	r3, [r7, #14]
 8005d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00d      	beq.n	8005dba <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8005d9e:	89fb      	ldrh	r3, [r7, #14]
 8005da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d004      	beq.n	8005db2 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8005da8:	2101      	movs	r1, #1
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f005 f948 	bl	800b040 <HAL_SUBGHZ_CADStatusCallback>
 8005db0:	e003      	b.n	8005dba <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8005db2:	2100      	movs	r1, #0
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f005 f943 	bl	800b040 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8005dba:	89fb      	ldrh	r3, [r7, #14]
 8005dbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d002      	beq.n	8005dca <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f005 f959 	bl	800b07c <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8005dca:	89fb      	ldrh	r3, [r7, #14]
 8005dcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d002      	beq.n	8005dda <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f005 f999 	bl	800b10c <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8005dda:	bf00      	nop
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
	...

08005de4 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005dec:	4b0c      	ldr	r3, [pc, #48]	; (8005e20 <SUBGHZSPI_Init+0x3c>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a0b      	ldr	r2, [pc, #44]	; (8005e20 <SUBGHZSPI_Init+0x3c>)
 8005df2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005df6:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8005df8:	4a09      	ldr	r2, [pc, #36]	; (8005e20 <SUBGHZSPI_Init+0x3c>)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8005e00:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8005e02:	4b07      	ldr	r3, [pc, #28]	; (8005e20 <SUBGHZSPI_Init+0x3c>)
 8005e04:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8005e08:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005e0a:	4b05      	ldr	r3, [pc, #20]	; (8005e20 <SUBGHZSPI_Init+0x3c>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a04      	ldr	r2, [pc, #16]	; (8005e20 <SUBGHZSPI_Init+0x3c>)
 8005e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e14:	6013      	str	r3, [r2, #0]
}
 8005e16:	bf00      	nop
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bc80      	pop	{r7}
 8005e1e:	4770      	bx	lr
 8005e20:	58010000 	.word	0x58010000

08005e24 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005e30:	2300      	movs	r3, #0
 8005e32:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005e34:	4b23      	ldr	r3, [pc, #140]	; (8005ec4 <SUBGHZSPI_Transmit+0xa0>)
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	1a9b      	subs	r3, r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	0cdb      	lsrs	r3, r3, #19
 8005e42:	2264      	movs	r2, #100	; 0x64
 8005e44:	fb02 f303 	mul.w	r3, r2, r3
 8005e48:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d105      	bne.n	8005e5c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	609a      	str	r2, [r3, #8]
      break;
 8005e5a:	e008      	b.n	8005e6e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005e62:	4b19      	ldr	r3, [pc, #100]	; (8005ec8 <SUBGHZSPI_Transmit+0xa4>)
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d1ed      	bne.n	8005e4a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8005e6e:	4b17      	ldr	r3, [pc, #92]	; (8005ecc <SUBGHZSPI_Transmit+0xa8>)
 8005e70:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	78fa      	ldrb	r2, [r7, #3]
 8005e76:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005e78:	4b12      	ldr	r3, [pc, #72]	; (8005ec4 <SUBGHZSPI_Transmit+0xa0>)
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	00db      	lsls	r3, r3, #3
 8005e80:	1a9b      	subs	r3, r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	0cdb      	lsrs	r3, r3, #19
 8005e86:	2264      	movs	r2, #100	; 0x64
 8005e88:	fb02 f303 	mul.w	r3, r2, r3
 8005e8c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d105      	bne.n	8005ea0 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	609a      	str	r2, [r3, #8]
      break;
 8005e9e:	e008      	b.n	8005eb2 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005ea6:	4b08      	ldr	r3, [pc, #32]	; (8005ec8 <SUBGHZSPI_Transmit+0xa4>)
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d1ed      	bne.n	8005e8e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8005eb2:	4b05      	ldr	r3, [pc, #20]	; (8005ec8 <SUBGHZSPI_Transmit+0xa4>)
 8005eb4:	68db      	ldr	r3, [r3, #12]

  return status;
 8005eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	371c      	adds	r7, #28
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bc80      	pop	{r7}
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	2000000c 	.word	0x2000000c
 8005ec8:	58010000 	.word	0x58010000
 8005ecc:	5801000c 	.word	0x5801000c

08005ed0 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b087      	sub	sp, #28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eda:	2300      	movs	r3, #0
 8005edc:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005ede:	4b25      	ldr	r3, [pc, #148]	; (8005f74 <SUBGHZSPI_Receive+0xa4>)
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	1a9b      	subs	r3, r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	0cdb      	lsrs	r3, r3, #19
 8005eec:	2264      	movs	r2, #100	; 0x64
 8005eee:	fb02 f303 	mul.w	r3, r2, r3
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d105      	bne.n	8005f06 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	609a      	str	r2, [r3, #8]
      break;
 8005f04:	e008      	b.n	8005f18 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005f0c:	4b1a      	ldr	r3, [pc, #104]	; (8005f78 <SUBGHZSPI_Receive+0xa8>)
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d1ed      	bne.n	8005ef4 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8005f18:	4b18      	ldr	r3, [pc, #96]	; (8005f7c <SUBGHZSPI_Receive+0xac>)
 8005f1a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	22ff      	movs	r2, #255	; 0xff
 8005f20:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005f22:	4b14      	ldr	r3, [pc, #80]	; (8005f74 <SUBGHZSPI_Receive+0xa4>)
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	4613      	mov	r3, r2
 8005f28:	00db      	lsls	r3, r3, #3
 8005f2a:	1a9b      	subs	r3, r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	0cdb      	lsrs	r3, r3, #19
 8005f30:	2264      	movs	r2, #100	; 0x64
 8005f32:	fb02 f303 	mul.w	r3, r2, r3
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d105      	bne.n	8005f4a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	609a      	str	r2, [r3, #8]
      break;
 8005f48:	e008      	b.n	8005f5c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005f50:	4b09      	ldr	r3, [pc, #36]	; (8005f78 <SUBGHZSPI_Receive+0xa8>)
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f003 0301 	and.w	r3, r3, #1
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d1ed      	bne.n	8005f38 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8005f5c:	4b06      	ldr	r3, [pc, #24]	; (8005f78 <SUBGHZSPI_Receive+0xa8>)
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	701a      	strb	r2, [r3, #0]

  return status;
 8005f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	371c      	adds	r7, #28
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bc80      	pop	{r7}
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	2000000c 	.word	0x2000000c
 8005f78:	58010000 	.word	0x58010000
 8005f7c:	5801000c 	.word	0x5801000c

08005f80 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	791b      	ldrb	r3, [r3, #4]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d111      	bne.n	8005fb4 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8005f90:	4b0c      	ldr	r3, [pc, #48]	; (8005fc4 <SUBGHZ_CheckDeviceReady+0x44>)
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	4613      	mov	r3, r2
 8005f96:	005b      	lsls	r3, r3, #1
 8005f98:	4413      	add	r3, r2
 8005f9a:	00db      	lsls	r3, r3, #3
 8005f9c:	0c1b      	lsrs	r3, r3, #16
 8005f9e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005fa0:	f7ff fbaa 	bl	80056f8 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1f9      	bne.n	8005fa4 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005fb0:	f7ff fb92 	bl	80056d8 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f807 	bl	8005fc8 <SUBGHZ_WaitOnBusy>
 8005fba:	4603      	mov	r3, r0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	2000000c 	.word	0x2000000c

08005fc8 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8005fd4:	4b12      	ldr	r3, [pc, #72]	; (8006020 <SUBGHZ_WaitOnBusy+0x58>)
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	005b      	lsls	r3, r3, #1
 8005fdc:	4413      	add	r3, r2
 8005fde:	00db      	lsls	r3, r3, #3
 8005fe0:	0d1b      	lsrs	r3, r3, #20
 8005fe2:	2264      	movs	r2, #100	; 0x64
 8005fe4:	fb02 f303 	mul.w	r3, r2, r3
 8005fe8:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8005fea:	f7ff fbb3 	bl	8005754 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8005fee:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d105      	bne.n	8006002 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2202      	movs	r2, #2
 8005ffe:	609a      	str	r2, [r3, #8]
      break;
 8006000:	e009      	b.n	8006016 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	3b01      	subs	r3, #1
 8006006:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8006008:	f7ff fb92 	bl	8005730 <LL_PWR_IsActiveFlag_RFBUSYS>
 800600c:	4602      	mov	r2, r0
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	4013      	ands	r3, r2
 8006012:	2b01      	cmp	r3, #1
 8006014:	d0e9      	beq.n	8005fea <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8006016:	7dfb      	ldrb	r3, [r7, #23]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3718      	adds	r7, #24
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	2000000c 	.word	0x2000000c

08006024 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e049      	b.n	80060ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d106      	bne.n	8006050 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7fc fe00 	bl	8002c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	3304      	adds	r3, #4
 8006060:	4619      	mov	r1, r3
 8006062:	4610      	mov	r0, r2
 8006064:	f000 f944 	bl	80062f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
	...

080060d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d001      	beq.n	80060ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e02e      	b.n	800614a <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a16      	ldr	r2, [pc, #88]	; (8006154 <HAL_TIM_Base_Start+0x80>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d004      	beq.n	8006108 <HAL_TIM_Base_Start+0x34>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006106:	d115      	bne.n	8006134 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	689a      	ldr	r2, [r3, #8]
 800610e:	4b12      	ldr	r3, [pc, #72]	; (8006158 <HAL_TIM_Base_Start+0x84>)
 8006110:	4013      	ands	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2b06      	cmp	r3, #6
 8006118:	d015      	beq.n	8006146 <HAL_TIM_Base_Start+0x72>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006120:	d011      	beq.n	8006146 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f042 0201 	orr.w	r2, r2, #1
 8006130:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006132:	e008      	b.n	8006146 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f042 0201 	orr.w	r2, r2, #1
 8006142:	601a      	str	r2, [r3, #0]
 8006144:	e000      	b.n	8006148 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006146:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	bc80      	pop	{r7}
 8006152:	4770      	bx	lr
 8006154:	40012c00 	.word	0x40012c00
 8006158:	00010007 	.word	0x00010007

0800615c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006166:	2300      	movs	r3, #0
 8006168:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006170:	2b01      	cmp	r3, #1
 8006172:	d101      	bne.n	8006178 <HAL_TIM_ConfigClockSource+0x1c>
 8006174:	2302      	movs	r3, #2
 8006176:	e0b6      	b.n	80062e6 <HAL_TIM_ConfigClockSource+0x18a>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2202      	movs	r2, #2
 8006184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006196:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800619a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061b4:	d03e      	beq.n	8006234 <HAL_TIM_ConfigClockSource+0xd8>
 80061b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061ba:	f200 8087 	bhi.w	80062cc <HAL_TIM_ConfigClockSource+0x170>
 80061be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c2:	f000 8086 	beq.w	80062d2 <HAL_TIM_ConfigClockSource+0x176>
 80061c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ca:	d87f      	bhi.n	80062cc <HAL_TIM_ConfigClockSource+0x170>
 80061cc:	2b70      	cmp	r3, #112	; 0x70
 80061ce:	d01a      	beq.n	8006206 <HAL_TIM_ConfigClockSource+0xaa>
 80061d0:	2b70      	cmp	r3, #112	; 0x70
 80061d2:	d87b      	bhi.n	80062cc <HAL_TIM_ConfigClockSource+0x170>
 80061d4:	2b60      	cmp	r3, #96	; 0x60
 80061d6:	d050      	beq.n	800627a <HAL_TIM_ConfigClockSource+0x11e>
 80061d8:	2b60      	cmp	r3, #96	; 0x60
 80061da:	d877      	bhi.n	80062cc <HAL_TIM_ConfigClockSource+0x170>
 80061dc:	2b50      	cmp	r3, #80	; 0x50
 80061de:	d03c      	beq.n	800625a <HAL_TIM_ConfigClockSource+0xfe>
 80061e0:	2b50      	cmp	r3, #80	; 0x50
 80061e2:	d873      	bhi.n	80062cc <HAL_TIM_ConfigClockSource+0x170>
 80061e4:	2b40      	cmp	r3, #64	; 0x40
 80061e6:	d058      	beq.n	800629a <HAL_TIM_ConfigClockSource+0x13e>
 80061e8:	2b40      	cmp	r3, #64	; 0x40
 80061ea:	d86f      	bhi.n	80062cc <HAL_TIM_ConfigClockSource+0x170>
 80061ec:	2b30      	cmp	r3, #48	; 0x30
 80061ee:	d064      	beq.n	80062ba <HAL_TIM_ConfigClockSource+0x15e>
 80061f0:	2b30      	cmp	r3, #48	; 0x30
 80061f2:	d86b      	bhi.n	80062cc <HAL_TIM_ConfigClockSource+0x170>
 80061f4:	2b20      	cmp	r3, #32
 80061f6:	d060      	beq.n	80062ba <HAL_TIM_ConfigClockSource+0x15e>
 80061f8:	2b20      	cmp	r3, #32
 80061fa:	d867      	bhi.n	80062cc <HAL_TIM_ConfigClockSource+0x170>
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d05c      	beq.n	80062ba <HAL_TIM_ConfigClockSource+0x15e>
 8006200:	2b10      	cmp	r3, #16
 8006202:	d05a      	beq.n	80062ba <HAL_TIM_ConfigClockSource+0x15e>
 8006204:	e062      	b.n	80062cc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006216:	f000 f946 	bl	80064a6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006228:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	609a      	str	r2, [r3, #8]
      break;
 8006232:	e04f      	b.n	80062d4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006244:	f000 f92f 	bl	80064a6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	689a      	ldr	r2, [r3, #8]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006256:	609a      	str	r2, [r3, #8]
      break;
 8006258:	e03c      	b.n	80062d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006266:	461a      	mov	r2, r3
 8006268:	f000 f8a4 	bl	80063b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2150      	movs	r1, #80	; 0x50
 8006272:	4618      	mov	r0, r3
 8006274:	f000 f8fb 	bl	800646e <TIM_ITRx_SetConfig>
      break;
 8006278:	e02c      	b.n	80062d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006286:	461a      	mov	r2, r3
 8006288:	f000 f8c2 	bl	8006410 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2160      	movs	r1, #96	; 0x60
 8006292:	4618      	mov	r0, r3
 8006294:	f000 f8eb 	bl	800646e <TIM_ITRx_SetConfig>
      break;
 8006298:	e01c      	b.n	80062d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062a6:	461a      	mov	r2, r3
 80062a8:	f000 f884 	bl	80063b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2140      	movs	r1, #64	; 0x40
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 f8db 	bl	800646e <TIM_ITRx_SetConfig>
      break;
 80062b8:	e00c      	b.n	80062d4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4619      	mov	r1, r3
 80062c4:	4610      	mov	r0, r2
 80062c6:	f000 f8d2 	bl	800646e <TIM_ITRx_SetConfig>
      break;
 80062ca:	e003      	b.n	80062d4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	73fb      	strb	r3, [r7, #15]
      break;
 80062d0:	e000      	b.n	80062d4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80062d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
	...

080062f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a29      	ldr	r2, [pc, #164]	; (80063a8 <TIM_Base_SetConfig+0xb8>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d003      	beq.n	8006310 <TIM_Base_SetConfig+0x20>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800630e:	d108      	bne.n	8006322 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006316:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	4313      	orrs	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a20      	ldr	r2, [pc, #128]	; (80063a8 <TIM_Base_SetConfig+0xb8>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d00b      	beq.n	8006342 <TIM_Base_SetConfig+0x52>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006330:	d007      	beq.n	8006342 <TIM_Base_SetConfig+0x52>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a1d      	ldr	r2, [pc, #116]	; (80063ac <TIM_Base_SetConfig+0xbc>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d003      	beq.n	8006342 <TIM_Base_SetConfig+0x52>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a1c      	ldr	r2, [pc, #112]	; (80063b0 <TIM_Base_SetConfig+0xc0>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d108      	bne.n	8006354 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	4313      	orrs	r3, r2
 8006352:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	4313      	orrs	r3, r2
 8006360:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a0b      	ldr	r2, [pc, #44]	; (80063a8 <TIM_Base_SetConfig+0xb8>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d007      	beq.n	8006390 <TIM_Base_SetConfig+0xa0>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a0a      	ldr	r2, [pc, #40]	; (80063ac <TIM_Base_SetConfig+0xbc>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d003      	beq.n	8006390 <TIM_Base_SetConfig+0xa0>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a09      	ldr	r2, [pc, #36]	; (80063b0 <TIM_Base_SetConfig+0xc0>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d103      	bne.n	8006398 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	691a      	ldr	r2, [r3, #16]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	615a      	str	r2, [r3, #20]
}
 800639e:	bf00      	nop
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bc80      	pop	{r7}
 80063a6:	4770      	bx	lr
 80063a8:	40012c00 	.word	0x40012c00
 80063ac:	40014400 	.word	0x40014400
 80063b0:	40014800 	.word	0x40014800

080063b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b087      	sub	sp, #28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6a1b      	ldr	r3, [r3, #32]
 80063c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	f023 0201 	bic.w	r2, r3, #1
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	011b      	lsls	r3, r3, #4
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f023 030a 	bic.w	r3, r3, #10
 80063f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	621a      	str	r2, [r3, #32]
}
 8006406:	bf00      	nop
 8006408:	371c      	adds	r7, #28
 800640a:	46bd      	mov	sp, r7
 800640c:	bc80      	pop	{r7}
 800640e:	4770      	bx	lr

08006410 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006410:	b480      	push	{r7}
 8006412:	b087      	sub	sp, #28
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6a1b      	ldr	r3, [r3, #32]
 8006420:	f023 0210 	bic.w	r2, r3, #16
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800643a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	031b      	lsls	r3, r3, #12
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	4313      	orrs	r3, r2
 8006444:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800644c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	011b      	lsls	r3, r3, #4
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	4313      	orrs	r3, r2
 8006456:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	621a      	str	r2, [r3, #32]
}
 8006464:	bf00      	nop
 8006466:	371c      	adds	r7, #28
 8006468:	46bd      	mov	sp, r7
 800646a:	bc80      	pop	{r7}
 800646c:	4770      	bx	lr

0800646e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800646e:	b480      	push	{r7}
 8006470:	b085      	sub	sp, #20
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
 8006476:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006488:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800648a:	683a      	ldr	r2, [r7, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4313      	orrs	r3, r2
 8006490:	f043 0307 	orr.w	r3, r3, #7
 8006494:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	609a      	str	r2, [r3, #8]
}
 800649c:	bf00      	nop
 800649e:	3714      	adds	r7, #20
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bc80      	pop	{r7}
 80064a4:	4770      	bx	lr

080064a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b087      	sub	sp, #28
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	60f8      	str	r0, [r7, #12]
 80064ae:	60b9      	str	r1, [r7, #8]
 80064b0:	607a      	str	r2, [r7, #4]
 80064b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	021a      	lsls	r2, r3, #8
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	431a      	orrs	r2, r3
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	609a      	str	r2, [r3, #8]
}
 80064da:	bf00      	nop
 80064dc:	371c      	adds	r7, #28
 80064de:	46bd      	mov	sp, r7
 80064e0:	bc80      	pop	{r7}
 80064e2:	4770      	bx	lr

080064e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d101      	bne.n	80064fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064f8:	2302      	movs	r3, #2
 80064fa:	e04a      	b.n	8006592 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2202      	movs	r2, #2
 8006508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a1e      	ldr	r2, [pc, #120]	; (800659c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d108      	bne.n	8006538 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800652c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	4313      	orrs	r3, r2
 8006536:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	4313      	orrs	r3, r2
 8006548:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a11      	ldr	r2, [pc, #68]	; (800659c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d004      	beq.n	8006566 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006564:	d10c      	bne.n	8006580 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800656c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	4313      	orrs	r3, r2
 8006576:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3714      	adds	r7, #20
 8006596:	46bd      	mov	sp, r7
 8006598:	bc80      	pop	{r7}
 800659a:	4770      	bx	lr
 800659c:	40012c00 	.word	0x40012c00

080065a0 <LL_RCC_GetUSARTClockSource>:
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80065a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	401a      	ands	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	041b      	lsls	r3, r3, #16
 80065b8:	4313      	orrs	r3, r2
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	370c      	adds	r7, #12
 80065be:	46bd      	mov	sp, r7
 80065c0:	bc80      	pop	{r7}
 80065c2:	4770      	bx	lr

080065c4 <LL_RCC_GetLPUARTClockSource>:
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80065cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4013      	ands	r3, r2
}
 80065d8:	4618      	mov	r0, r3
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	bc80      	pop	{r7}
 80065e0:	4770      	bx	lr

080065e2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b082      	sub	sp, #8
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d101      	bne.n	80065f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e042      	b.n	800667a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d106      	bne.n	800660c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7fc fcf0 	bl	8002fec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2224      	movs	r2, #36	; 0x24
 8006610:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f022 0201 	bic.w	r2, r2, #1
 8006622:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fd0d 	bl	8007044 <UART_SetConfig>
 800662a:	4603      	mov	r3, r0
 800662c:	2b01      	cmp	r3, #1
 800662e:	d101      	bne.n	8006634 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e022      	b.n	800667a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006638:	2b00      	cmp	r3, #0
 800663a:	d002      	beq.n	8006642 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 ff75 	bl	800752c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	685a      	ldr	r2, [r3, #4]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006650:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689a      	ldr	r2, [r3, #8]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006660:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f042 0201 	orr.w	r2, r2, #1
 8006670:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fffb 	bl	800766e <UART_CheckIdleState>
 8006678:	4603      	mov	r3, r0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b08a      	sub	sp, #40	; 0x28
 8006686:	af02      	add	r7, sp, #8
 8006688:	60f8      	str	r0, [r7, #12]
 800668a:	60b9      	str	r1, [r7, #8]
 800668c:	603b      	str	r3, [r7, #0]
 800668e:	4613      	mov	r3, r2
 8006690:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006698:	2b20      	cmp	r3, #32
 800669a:	d173      	bne.n	8006784 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d002      	beq.n	80066a8 <HAL_UART_Transmit+0x26>
 80066a2:	88fb      	ldrh	r3, [r7, #6]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d101      	bne.n	80066ac <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e06c      	b.n	8006786 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2221      	movs	r2, #33	; 0x21
 80066b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066bc:	f7fc fa06 	bl	8002acc <HAL_GetTick>
 80066c0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	88fa      	ldrh	r2, [r7, #6]
 80066c6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	88fa      	ldrh	r2, [r7, #6]
 80066ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066da:	d108      	bne.n	80066ee <HAL_UART_Transmit+0x6c>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d104      	bne.n	80066ee <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80066e4:	2300      	movs	r3, #0
 80066e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	61bb      	str	r3, [r7, #24]
 80066ec:	e003      	b.n	80066f6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066f2:	2300      	movs	r3, #0
 80066f4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80066f6:	e02c      	b.n	8006752 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	2200      	movs	r2, #0
 8006700:	2180      	movs	r1, #128	; 0x80
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f001 f801 	bl	800770a <UART_WaitOnFlagUntilTimeout>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d001      	beq.n	8006712 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e039      	b.n	8006786 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10b      	bne.n	8006730 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	881b      	ldrh	r3, [r3, #0]
 800671c:	461a      	mov	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006726:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	3302      	adds	r3, #2
 800672c:	61bb      	str	r3, [r7, #24]
 800672e:	e007      	b.n	8006740 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	781a      	ldrb	r2, [r3, #0]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	3301      	adds	r3, #1
 800673e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006746:	b29b      	uxth	r3, r3
 8006748:	3b01      	subs	r3, #1
 800674a:	b29a      	uxth	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006758:	b29b      	uxth	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1cc      	bne.n	80066f8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	2200      	movs	r2, #0
 8006766:	2140      	movs	r1, #64	; 0x40
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f000 ffce 	bl	800770a <UART_WaitOnFlagUntilTimeout>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d001      	beq.n	8006778 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e006      	b.n	8006786 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2220      	movs	r2, #32
 800677c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006780:	2300      	movs	r3, #0
 8006782:	e000      	b.n	8006786 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8006784:	2302      	movs	r3, #2
  }
}
 8006786:	4618      	mov	r0, r3
 8006788:	3720      	adds	r7, #32
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b08a      	sub	sp, #40	; 0x28
 8006792:	af02      	add	r7, sp, #8
 8006794:	60f8      	str	r0, [r7, #12]
 8006796:	60b9      	str	r1, [r7, #8]
 8006798:	603b      	str	r3, [r7, #0]
 800679a:	4613      	mov	r3, r2
 800679c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067a4:	2b20      	cmp	r3, #32
 80067a6:	f040 80b1 	bne.w	800690c <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d002      	beq.n	80067b6 <HAL_UART_Receive+0x28>
 80067b0:	88fb      	ldrh	r3, [r7, #6]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e0a9      	b.n	800690e <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2222      	movs	r2, #34	; 0x22
 80067c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067d0:	f7fc f97c 	bl	8002acc <HAL_GetTick>
 80067d4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	88fa      	ldrh	r2, [r7, #6]
 80067da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	88fa      	ldrh	r2, [r7, #6]
 80067e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ee:	d10e      	bne.n	800680e <HAL_UART_Receive+0x80>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d105      	bne.n	8006804 <HAL_UART_Receive+0x76>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80067fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006802:	e02d      	b.n	8006860 <HAL_UART_Receive+0xd2>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	22ff      	movs	r2, #255	; 0xff
 8006808:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800680c:	e028      	b.n	8006860 <HAL_UART_Receive+0xd2>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10d      	bne.n	8006832 <HAL_UART_Receive+0xa4>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d104      	bne.n	8006828 <HAL_UART_Receive+0x9a>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	22ff      	movs	r2, #255	; 0xff
 8006822:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006826:	e01b      	b.n	8006860 <HAL_UART_Receive+0xd2>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	227f      	movs	r2, #127	; 0x7f
 800682c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006830:	e016      	b.n	8006860 <HAL_UART_Receive+0xd2>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800683a:	d10d      	bne.n	8006858 <HAL_UART_Receive+0xca>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d104      	bne.n	800684e <HAL_UART_Receive+0xc0>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	227f      	movs	r2, #127	; 0x7f
 8006848:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800684c:	e008      	b.n	8006860 <HAL_UART_Receive+0xd2>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	223f      	movs	r2, #63	; 0x3f
 8006852:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006856:	e003      	b.n	8006860 <HAL_UART_Receive+0xd2>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006866:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006870:	d108      	bne.n	8006884 <HAL_UART_Receive+0xf6>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d104      	bne.n	8006884 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800687a:	2300      	movs	r3, #0
 800687c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	61bb      	str	r3, [r7, #24]
 8006882:	e003      	b.n	800688c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006888:	2300      	movs	r3, #0
 800688a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800688c:	e032      	b.n	80068f4 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	2200      	movs	r2, #0
 8006896:	2120      	movs	r1, #32
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 ff36 	bl	800770a <UART_WaitOnFlagUntilTimeout>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d001      	beq.n	80068a8 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e032      	b.n	800690e <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10c      	bne.n	80068c8 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	8a7b      	ldrh	r3, [r7, #18]
 80068b8:	4013      	ands	r3, r2
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	3302      	adds	r3, #2
 80068c4:	61bb      	str	r3, [r7, #24]
 80068c6:	e00c      	b.n	80068e2 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	8a7b      	ldrh	r3, [r7, #18]
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	4013      	ands	r3, r2
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	3301      	adds	r3, #1
 80068e0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	3b01      	subs	r3, #1
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1c6      	bne.n	800688e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2220      	movs	r2, #32
 8006904:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8006908:	2300      	movs	r3, #0
 800690a:	e000      	b.n	800690e <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800690c:	2302      	movs	r3, #2
  }
}
 800690e:	4618      	mov	r0, r3
 8006910:	3720      	adds	r7, #32
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
	...

08006918 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b08a      	sub	sp, #40	; 0x28
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	4613      	mov	r3, r2
 8006924:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800692c:	2b20      	cmp	r3, #32
 800692e:	d137      	bne.n	80069a0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d002      	beq.n	800693c <HAL_UART_Receive_DMA+0x24>
 8006936:	88fb      	ldrh	r3, [r7, #6]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d101      	bne.n	8006940 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e030      	b.n	80069a2 <HAL_UART_Receive_DMA+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a18      	ldr	r2, [pc, #96]	; (80069ac <HAL_UART_Receive_DMA+0x94>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d01f      	beq.n	8006990 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d018      	beq.n	8006990 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	e853 3f00 	ldrex	r3, [r3]
 800696a:	613b      	str	r3, [r7, #16]
   return(result);
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006972:	627b      	str	r3, [r7, #36]	; 0x24
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	461a      	mov	r2, r3
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	623b      	str	r3, [r7, #32]
 800697e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006980:	69f9      	ldr	r1, [r7, #28]
 8006982:	6a3a      	ldr	r2, [r7, #32]
 8006984:	e841 2300 	strex	r3, r2, [r1]
 8006988:	61bb      	str	r3, [r7, #24]
   return(result);
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1e6      	bne.n	800695e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006990:	88fb      	ldrh	r3, [r7, #6]
 8006992:	461a      	mov	r2, r3
 8006994:	68b9      	ldr	r1, [r7, #8]
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f000 ff80 	bl	800789c <UART_Start_Receive_DMA>
 800699c:	4603      	mov	r3, r0
 800699e:	e000      	b.n	80069a2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80069a0:	2302      	movs	r3, #2
  }
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3728      	adds	r7, #40	; 0x28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	40008000 	.word	0x40008000

080069b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b0ba      	sub	sp, #232	; 0xe8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80069d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80069da:	f640 030f 	movw	r3, #2063	; 0x80f
 80069de:	4013      	ands	r3, r2
 80069e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80069e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d11b      	bne.n	8006a24 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80069ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069f0:	f003 0320 	and.w	r3, r3, #32
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d015      	beq.n	8006a24 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80069f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069fc:	f003 0320 	and.w	r3, r3, #32
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d105      	bne.n	8006a10 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d009      	beq.n	8006a24 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 82e3 	beq.w	8006fe0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	4798      	blx	r3
      }
      return;
 8006a22:	e2dd      	b.n	8006fe0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006a24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 8123 	beq.w	8006c74 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006a2e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006a32:	4b8d      	ldr	r3, [pc, #564]	; (8006c68 <HAL_UART_IRQHandler+0x2b8>)
 8006a34:	4013      	ands	r3, r2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d106      	bne.n	8006a48 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006a3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006a3e:	4b8b      	ldr	r3, [pc, #556]	; (8006c6c <HAL_UART_IRQHandler+0x2bc>)
 8006a40:	4013      	ands	r3, r2
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 8116 	beq.w	8006c74 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a4c:	f003 0301 	and.w	r3, r3, #1
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d011      	beq.n	8006a78 <HAL_UART_IRQHandler+0xc8>
 8006a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00b      	beq.n	8006a78 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2201      	movs	r2, #1
 8006a66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a6e:	f043 0201 	orr.w	r2, r3, #1
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a7c:	f003 0302 	and.w	r3, r3, #2
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d011      	beq.n	8006aa8 <HAL_UART_IRQHandler+0xf8>
 8006a84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a88:	f003 0301 	and.w	r3, r3, #1
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00b      	beq.n	8006aa8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2202      	movs	r2, #2
 8006a96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a9e:	f043 0204 	orr.w	r2, r3, #4
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aac:	f003 0304 	and.w	r3, r3, #4
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d011      	beq.n	8006ad8 <HAL_UART_IRQHandler+0x128>
 8006ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ab8:	f003 0301 	and.w	r3, r3, #1
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00b      	beq.n	8006ad8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2204      	movs	r2, #4
 8006ac6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ace:	f043 0202 	orr.w	r2, r3, #2
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006adc:	f003 0308 	and.w	r3, r3, #8
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d017      	beq.n	8006b14 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ae8:	f003 0320 	and.w	r3, r3, #32
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d105      	bne.n	8006afc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006af0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006af4:	4b5c      	ldr	r3, [pc, #368]	; (8006c68 <HAL_UART_IRQHandler+0x2b8>)
 8006af6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00b      	beq.n	8006b14 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2208      	movs	r2, #8
 8006b02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b0a:	f043 0208 	orr.w	r2, r3, #8
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d012      	beq.n	8006b46 <HAL_UART_IRQHandler+0x196>
 8006b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00c      	beq.n	8006b46 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b3c:	f043 0220 	orr.w	r2, r3, #32
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f000 8249 	beq.w	8006fe4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b56:	f003 0320 	and.w	r3, r3, #32
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d013      	beq.n	8006b86 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b62:	f003 0320 	and.w	r3, r3, #32
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d105      	bne.n	8006b76 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d007      	beq.n	8006b86 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9a:	2b40      	cmp	r3, #64	; 0x40
 8006b9c:	d005      	beq.n	8006baa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006b9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ba2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d054      	beq.n	8006c54 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 ff5c 	bl	8007a68 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bba:	2b40      	cmp	r3, #64	; 0x40
 8006bbc:	d146      	bne.n	8006c4c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	3308      	adds	r3, #8
 8006bc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006bcc:	e853 3f00 	ldrex	r3, [r3]
 8006bd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006bd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	3308      	adds	r3, #8
 8006be6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006bea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006bee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006bf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006bfa:	e841 2300 	strex	r3, r2, [r1]
 8006bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006c02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1d9      	bne.n	8006bbe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d017      	beq.n	8006c44 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c1a:	4a15      	ldr	r2, [pc, #84]	; (8006c70 <HAL_UART_IRQHandler+0x2c0>)
 8006c1c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7fc fe9f 	bl	8003968 <HAL_DMA_Abort_IT>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d019      	beq.n	8006c64 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006c3e:	4610      	mov	r0, r2
 8006c40:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c42:	e00f      	b.n	8006c64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 f9e9 	bl	800701c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c4a:	e00b      	b.n	8006c64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f9e5 	bl	800701c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c52:	e007      	b.n	8006c64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f9e1 	bl	800701c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006c62:	e1bf      	b.n	8006fe4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c64:	bf00      	nop
    return;
 8006c66:	e1bd      	b.n	8006fe4 <HAL_UART_IRQHandler+0x634>
 8006c68:	10000001 	.word	0x10000001
 8006c6c:	04000120 	.word	0x04000120
 8006c70:	08007d1d 	.word	0x08007d1d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	f040 8153 	bne.w	8006f24 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c82:	f003 0310 	and.w	r3, r3, #16
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f000 814c 	beq.w	8006f24 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c90:	f003 0310 	and.w	r3, r3, #16
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 8145 	beq.w	8006f24 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2210      	movs	r2, #16
 8006ca0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cac:	2b40      	cmp	r3, #64	; 0x40
 8006cae:	f040 80bb 	bne.w	8006e28 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006cc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f000 818f 	beq.w	8006fe8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006cd0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	f080 8187 	bcs.w	8006fe8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ce0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0320 	and.w	r3, r3, #32
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f040 8087 	bne.w	8006e06 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d04:	e853 3f00 	ldrex	r3, [r3]
 8006d08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d26:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d32:	e841 2300 	strex	r3, r2, [r1]
 8006d36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1da      	bne.n	8006cf8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	3308      	adds	r3, #8
 8006d48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d4c:	e853 3f00 	ldrex	r3, [r3]
 8006d50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d54:	f023 0301 	bic.w	r3, r3, #1
 8006d58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	3308      	adds	r3, #8
 8006d62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006d6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d72:	e841 2300 	strex	r3, r2, [r1]
 8006d76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1e1      	bne.n	8006d42 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	3308      	adds	r3, #8
 8006d84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d88:	e853 3f00 	ldrex	r3, [r3]
 8006d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	3308      	adds	r3, #8
 8006d9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006da2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006da4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006da8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006daa:	e841 2300 	strex	r3, r2, [r1]
 8006dae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006db0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1e3      	bne.n	8006d7e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2220      	movs	r2, #32
 8006dba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dcc:	e853 3f00 	ldrex	r3, [r3]
 8006dd0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dd4:	f023 0310 	bic.w	r3, r3, #16
 8006dd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	461a      	mov	r2, r3
 8006de2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006de6:	65bb      	str	r3, [r7, #88]	; 0x58
 8006de8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006dec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006dee:	e841 2300 	strex	r3, r2, [r1]
 8006df2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1e4      	bne.n	8006dc4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7fc fd53 	bl	80038ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2202      	movs	r2, #2
 8006e0a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f904 	bl	800702e <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e26:	e0df      	b.n	8006fe8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f000 80d1 	beq.w	8006fec <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006e4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f000 80cc 	beq.w	8006fec <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5c:	e853 3f00 	ldrex	r3, [r3]
 8006e60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	461a      	mov	r2, r3
 8006e72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e76:	647b      	str	r3, [r7, #68]	; 0x44
 8006e78:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e7e:	e841 2300 	strex	r3, r2, [r1]
 8006e82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1e4      	bne.n	8006e54 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	3308      	adds	r3, #8
 8006e90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e94:	e853 3f00 	ldrex	r3, [r3]
 8006e98:	623b      	str	r3, [r7, #32]
   return(result);
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ea0:	f023 0301 	bic.w	r3, r3, #1
 8006ea4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	3308      	adds	r3, #8
 8006eae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006eb2:	633a      	str	r2, [r7, #48]	; 0x30
 8006eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eba:	e841 2300 	strex	r3, r2, [r1]
 8006ebe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1e1      	bne.n	8006e8a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2220      	movs	r2, #32
 8006eca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	e853 3f00 	ldrex	r3, [r3]
 8006ee6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f023 0310 	bic.w	r3, r3, #16
 8006eee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006efc:	61fb      	str	r3, [r7, #28]
 8006efe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f00:	69b9      	ldr	r1, [r7, #24]
 8006f02:	69fa      	ldr	r2, [r7, #28]
 8006f04:	e841 2300 	strex	r3, r2, [r1]
 8006f08:	617b      	str	r3, [r7, #20]
   return(result);
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1e4      	bne.n	8006eda <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2202      	movs	r2, #2
 8006f14:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f886 	bl	800702e <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f22:	e063      	b.n	8006fec <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00e      	beq.n	8006f4e <HAL_UART_IRQHandler+0x59e>
 8006f30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d008      	beq.n	8006f4e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006f44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 ff29 	bl	8007d9e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f4c:	e051      	b.n	8006ff2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d014      	beq.n	8006f84 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d105      	bne.n	8006f72 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006f66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d008      	beq.n	8006f84 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d03a      	beq.n	8006ff0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	4798      	blx	r3
    }
    return;
 8006f82:	e035      	b.n	8006ff0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d009      	beq.n	8006fa4 <HAL_UART_IRQHandler+0x5f4>
 8006f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fed3 	bl	8007d48 <UART_EndTransmit_IT>
    return;
 8006fa2:	e026      	b.n	8006ff2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fa8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d009      	beq.n	8006fc4 <HAL_UART_IRQHandler+0x614>
 8006fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fb4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 ff00 	bl	8007dc2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006fc2:	e016      	b.n	8006ff2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d010      	beq.n	8006ff2 <HAL_UART_IRQHandler+0x642>
 8006fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	da0c      	bge.n	8006ff2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fee9 	bl	8007db0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006fde:	e008      	b.n	8006ff2 <HAL_UART_IRQHandler+0x642>
      return;
 8006fe0:	bf00      	nop
 8006fe2:	e006      	b.n	8006ff2 <HAL_UART_IRQHandler+0x642>
    return;
 8006fe4:	bf00      	nop
 8006fe6:	e004      	b.n	8006ff2 <HAL_UART_IRQHandler+0x642>
      return;
 8006fe8:	bf00      	nop
 8006fea:	e002      	b.n	8006ff2 <HAL_UART_IRQHandler+0x642>
      return;
 8006fec:	bf00      	nop
 8006fee:	e000      	b.n	8006ff2 <HAL_UART_IRQHandler+0x642>
    return;
 8006ff0:	bf00      	nop
  }
}
 8006ff2:	37e8      	adds	r7, #232	; 0xe8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007000:	bf00      	nop
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	bc80      	pop	{r7}
 8007008:	4770      	bx	lr

0800700a <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800700a:	b480      	push	{r7}
 800700c:	b083      	sub	sp, #12
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007012:	bf00      	nop
 8007014:	370c      	adds	r7, #12
 8007016:	46bd      	mov	sp, r7
 8007018:	bc80      	pop	{r7}
 800701a:	4770      	bx	lr

0800701c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	bc80      	pop	{r7}
 800702c:	4770      	bx	lr

0800702e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800702e:	b480      	push	{r7}
 8007030:	b083      	sub	sp, #12
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
 8007036:	460b      	mov	r3, r1
 8007038:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800703a:	bf00      	nop
 800703c:	370c      	adds	r7, #12
 800703e:	46bd      	mov	sp, r7
 8007040:	bc80      	pop	{r7}
 8007042:	4770      	bx	lr

08007044 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007048:	b08c      	sub	sp, #48	; 0x30
 800704a:	af00      	add	r7, sp, #0
 800704c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800704e:	2300      	movs	r3, #0
 8007050:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	689a      	ldr	r2, [r3, #8]
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	431a      	orrs	r2, r3
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	431a      	orrs	r2, r3
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	69db      	ldr	r3, [r3, #28]
 8007068:	4313      	orrs	r3, r2
 800706a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	4b94      	ldr	r3, [pc, #592]	; (80072c4 <UART_SetConfig+0x280>)
 8007074:	4013      	ands	r3, r2
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	6812      	ldr	r2, [r2, #0]
 800707a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800707c:	430b      	orrs	r3, r1
 800707e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	68da      	ldr	r2, [r3, #12]
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	430a      	orrs	r2, r1
 8007094:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a89      	ldr	r2, [pc, #548]	; (80072c8 <UART_SetConfig+0x284>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d004      	beq.n	80070b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070ac:	4313      	orrs	r3, r2
 80070ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80070ba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80070be:	697a      	ldr	r2, [r7, #20]
 80070c0:	6812      	ldr	r2, [r2, #0]
 80070c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070c4:	430b      	orrs	r3, r1
 80070c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ce:	f023 010f 	bic.w	r1, r3, #15
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	430a      	orrs	r2, r1
 80070dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a7a      	ldr	r2, [pc, #488]	; (80072cc <UART_SetConfig+0x288>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d127      	bne.n	8007138 <UART_SetConfig+0xf4>
 80070e8:	2003      	movs	r0, #3
 80070ea:	f7ff fa59 	bl	80065a0 <LL_RCC_GetUSARTClockSource>
 80070ee:	4603      	mov	r3, r0
 80070f0:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80070f4:	2b03      	cmp	r3, #3
 80070f6:	d81b      	bhi.n	8007130 <UART_SetConfig+0xec>
 80070f8:	a201      	add	r2, pc, #4	; (adr r2, 8007100 <UART_SetConfig+0xbc>)
 80070fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fe:	bf00      	nop
 8007100:	08007111 	.word	0x08007111
 8007104:	08007121 	.word	0x08007121
 8007108:	08007119 	.word	0x08007119
 800710c:	08007129 	.word	0x08007129
 8007110:	2301      	movs	r3, #1
 8007112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007116:	e080      	b.n	800721a <UART_SetConfig+0x1d6>
 8007118:	2302      	movs	r3, #2
 800711a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800711e:	e07c      	b.n	800721a <UART_SetConfig+0x1d6>
 8007120:	2304      	movs	r3, #4
 8007122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007126:	e078      	b.n	800721a <UART_SetConfig+0x1d6>
 8007128:	2308      	movs	r3, #8
 800712a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800712e:	e074      	b.n	800721a <UART_SetConfig+0x1d6>
 8007130:	2310      	movs	r3, #16
 8007132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007136:	e070      	b.n	800721a <UART_SetConfig+0x1d6>
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a64      	ldr	r2, [pc, #400]	; (80072d0 <UART_SetConfig+0x28c>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d138      	bne.n	80071b4 <UART_SetConfig+0x170>
 8007142:	200c      	movs	r0, #12
 8007144:	f7ff fa2c 	bl	80065a0 <LL_RCC_GetUSARTClockSource>
 8007148:	4603      	mov	r3, r0
 800714a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800714e:	2b0c      	cmp	r3, #12
 8007150:	d82c      	bhi.n	80071ac <UART_SetConfig+0x168>
 8007152:	a201      	add	r2, pc, #4	; (adr r2, 8007158 <UART_SetConfig+0x114>)
 8007154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007158:	0800718d 	.word	0x0800718d
 800715c:	080071ad 	.word	0x080071ad
 8007160:	080071ad 	.word	0x080071ad
 8007164:	080071ad 	.word	0x080071ad
 8007168:	0800719d 	.word	0x0800719d
 800716c:	080071ad 	.word	0x080071ad
 8007170:	080071ad 	.word	0x080071ad
 8007174:	080071ad 	.word	0x080071ad
 8007178:	08007195 	.word	0x08007195
 800717c:	080071ad 	.word	0x080071ad
 8007180:	080071ad 	.word	0x080071ad
 8007184:	080071ad 	.word	0x080071ad
 8007188:	080071a5 	.word	0x080071a5
 800718c:	2300      	movs	r3, #0
 800718e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007192:	e042      	b.n	800721a <UART_SetConfig+0x1d6>
 8007194:	2302      	movs	r3, #2
 8007196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800719a:	e03e      	b.n	800721a <UART_SetConfig+0x1d6>
 800719c:	2304      	movs	r3, #4
 800719e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071a2:	e03a      	b.n	800721a <UART_SetConfig+0x1d6>
 80071a4:	2308      	movs	r3, #8
 80071a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071aa:	e036      	b.n	800721a <UART_SetConfig+0x1d6>
 80071ac:	2310      	movs	r3, #16
 80071ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071b2:	e032      	b.n	800721a <UART_SetConfig+0x1d6>
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a43      	ldr	r2, [pc, #268]	; (80072c8 <UART_SetConfig+0x284>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d12a      	bne.n	8007214 <UART_SetConfig+0x1d0>
 80071be:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80071c2:	f7ff f9ff 	bl	80065c4 <LL_RCC_GetLPUARTClockSource>
 80071c6:	4603      	mov	r3, r0
 80071c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071cc:	d01a      	beq.n	8007204 <UART_SetConfig+0x1c0>
 80071ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071d2:	d81b      	bhi.n	800720c <UART_SetConfig+0x1c8>
 80071d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071d8:	d00c      	beq.n	80071f4 <UART_SetConfig+0x1b0>
 80071da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071de:	d815      	bhi.n	800720c <UART_SetConfig+0x1c8>
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d003      	beq.n	80071ec <UART_SetConfig+0x1a8>
 80071e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071e8:	d008      	beq.n	80071fc <UART_SetConfig+0x1b8>
 80071ea:	e00f      	b.n	800720c <UART_SetConfig+0x1c8>
 80071ec:	2300      	movs	r3, #0
 80071ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071f2:	e012      	b.n	800721a <UART_SetConfig+0x1d6>
 80071f4:	2302      	movs	r3, #2
 80071f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071fa:	e00e      	b.n	800721a <UART_SetConfig+0x1d6>
 80071fc:	2304      	movs	r3, #4
 80071fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007202:	e00a      	b.n	800721a <UART_SetConfig+0x1d6>
 8007204:	2308      	movs	r3, #8
 8007206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800720a:	e006      	b.n	800721a <UART_SetConfig+0x1d6>
 800720c:	2310      	movs	r3, #16
 800720e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007212:	e002      	b.n	800721a <UART_SetConfig+0x1d6>
 8007214:	2310      	movs	r3, #16
 8007216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a2a      	ldr	r2, [pc, #168]	; (80072c8 <UART_SetConfig+0x284>)
 8007220:	4293      	cmp	r3, r2
 8007222:	f040 80a4 	bne.w	800736e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007226:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800722a:	2b08      	cmp	r3, #8
 800722c:	d823      	bhi.n	8007276 <UART_SetConfig+0x232>
 800722e:	a201      	add	r2, pc, #4	; (adr r2, 8007234 <UART_SetConfig+0x1f0>)
 8007230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007234:	08007259 	.word	0x08007259
 8007238:	08007277 	.word	0x08007277
 800723c:	08007261 	.word	0x08007261
 8007240:	08007277 	.word	0x08007277
 8007244:	08007267 	.word	0x08007267
 8007248:	08007277 	.word	0x08007277
 800724c:	08007277 	.word	0x08007277
 8007250:	08007277 	.word	0x08007277
 8007254:	0800726f 	.word	0x0800726f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007258:	f7fd ff46 	bl	80050e8 <HAL_RCC_GetPCLK1Freq>
 800725c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800725e:	e010      	b.n	8007282 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007260:	4b1c      	ldr	r3, [pc, #112]	; (80072d4 <UART_SetConfig+0x290>)
 8007262:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007264:	e00d      	b.n	8007282 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007266:	f7fd fe8b 	bl	8004f80 <HAL_RCC_GetSysClockFreq>
 800726a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800726c:	e009      	b.n	8007282 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800726e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007272:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007274:	e005      	b.n	8007282 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8007276:	2300      	movs	r3, #0
 8007278:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007280:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007284:	2b00      	cmp	r3, #0
 8007286:	f000 8137 	beq.w	80074f8 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	4a12      	ldr	r2, [pc, #72]	; (80072d8 <UART_SetConfig+0x294>)
 8007290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007294:	461a      	mov	r2, r3
 8007296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007298:	fbb3 f3f2 	udiv	r3, r3, r2
 800729c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	685a      	ldr	r2, [r3, #4]
 80072a2:	4613      	mov	r3, r2
 80072a4:	005b      	lsls	r3, r3, #1
 80072a6:	4413      	add	r3, r2
 80072a8:	69ba      	ldr	r2, [r7, #24]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d305      	bcc.n	80072ba <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072b4:	69ba      	ldr	r2, [r7, #24]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d910      	bls.n	80072dc <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80072c0:	e11a      	b.n	80074f8 <UART_SetConfig+0x4b4>
 80072c2:	bf00      	nop
 80072c4:	cfff69f3 	.word	0xcfff69f3
 80072c8:	40008000 	.word	0x40008000
 80072cc:	40013800 	.word	0x40013800
 80072d0:	40004400 	.word	0x40004400
 80072d4:	00f42400 	.word	0x00f42400
 80072d8:	0800cea4 	.word	0x0800cea4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	2200      	movs	r2, #0
 80072e0:	60bb      	str	r3, [r7, #8]
 80072e2:	60fa      	str	r2, [r7, #12]
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e8:	4a8e      	ldr	r2, [pc, #568]	; (8007524 <UART_SetConfig+0x4e0>)
 80072ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	2200      	movs	r2, #0
 80072f2:	603b      	str	r3, [r7, #0]
 80072f4:	607a      	str	r2, [r7, #4]
 80072f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80072fe:	f7f8 ff8f 	bl	8000220 <__aeabi_uldivmod>
 8007302:	4602      	mov	r2, r0
 8007304:	460b      	mov	r3, r1
 8007306:	4610      	mov	r0, r2
 8007308:	4619      	mov	r1, r3
 800730a:	f04f 0200 	mov.w	r2, #0
 800730e:	f04f 0300 	mov.w	r3, #0
 8007312:	020b      	lsls	r3, r1, #8
 8007314:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007318:	0202      	lsls	r2, r0, #8
 800731a:	6979      	ldr	r1, [r7, #20]
 800731c:	6849      	ldr	r1, [r1, #4]
 800731e:	0849      	lsrs	r1, r1, #1
 8007320:	2000      	movs	r0, #0
 8007322:	460c      	mov	r4, r1
 8007324:	4605      	mov	r5, r0
 8007326:	eb12 0804 	adds.w	r8, r2, r4
 800732a:	eb43 0905 	adc.w	r9, r3, r5
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	469a      	mov	sl, r3
 8007336:	4693      	mov	fp, r2
 8007338:	4652      	mov	r2, sl
 800733a:	465b      	mov	r3, fp
 800733c:	4640      	mov	r0, r8
 800733e:	4649      	mov	r1, r9
 8007340:	f7f8 ff6e 	bl	8000220 <__aeabi_uldivmod>
 8007344:	4602      	mov	r2, r0
 8007346:	460b      	mov	r3, r1
 8007348:	4613      	mov	r3, r2
 800734a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800734c:	6a3b      	ldr	r3, [r7, #32]
 800734e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007352:	d308      	bcc.n	8007366 <UART_SetConfig+0x322>
 8007354:	6a3b      	ldr	r3, [r7, #32]
 8007356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800735a:	d204      	bcs.n	8007366 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6a3a      	ldr	r2, [r7, #32]
 8007362:	60da      	str	r2, [r3, #12]
 8007364:	e0c8      	b.n	80074f8 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800736c:	e0c4      	b.n	80074f8 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	69db      	ldr	r3, [r3, #28]
 8007372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007376:	d167      	bne.n	8007448 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8007378:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800737c:	2b08      	cmp	r3, #8
 800737e:	d828      	bhi.n	80073d2 <UART_SetConfig+0x38e>
 8007380:	a201      	add	r2, pc, #4	; (adr r2, 8007388 <UART_SetConfig+0x344>)
 8007382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007386:	bf00      	nop
 8007388:	080073ad 	.word	0x080073ad
 800738c:	080073b5 	.word	0x080073b5
 8007390:	080073bd 	.word	0x080073bd
 8007394:	080073d3 	.word	0x080073d3
 8007398:	080073c3 	.word	0x080073c3
 800739c:	080073d3 	.word	0x080073d3
 80073a0:	080073d3 	.word	0x080073d3
 80073a4:	080073d3 	.word	0x080073d3
 80073a8:	080073cb 	.word	0x080073cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073ac:	f7fd fe9c 	bl	80050e8 <HAL_RCC_GetPCLK1Freq>
 80073b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073b2:	e014      	b.n	80073de <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073b4:	f7fd feaa 	bl	800510c <HAL_RCC_GetPCLK2Freq>
 80073b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073ba:	e010      	b.n	80073de <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073bc:	4b5a      	ldr	r3, [pc, #360]	; (8007528 <UART_SetConfig+0x4e4>)
 80073be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80073c0:	e00d      	b.n	80073de <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073c2:	f7fd fddd 	bl	8004f80 <HAL_RCC_GetSysClockFreq>
 80073c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073c8:	e009      	b.n	80073de <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80073d0:	e005      	b.n	80073de <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80073d2:	2300      	movs	r3, #0
 80073d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80073dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f000 8089 	beq.w	80074f8 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ea:	4a4e      	ldr	r2, [pc, #312]	; (8007524 <UART_SetConfig+0x4e0>)
 80073ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073f0:	461a      	mov	r2, r3
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80073f8:	005a      	lsls	r2, r3, #1
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	085b      	lsrs	r3, r3, #1
 8007400:	441a      	add	r2, r3
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	fbb2 f3f3 	udiv	r3, r2, r3
 800740a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800740c:	6a3b      	ldr	r3, [r7, #32]
 800740e:	2b0f      	cmp	r3, #15
 8007410:	d916      	bls.n	8007440 <UART_SetConfig+0x3fc>
 8007412:	6a3b      	ldr	r3, [r7, #32]
 8007414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007418:	d212      	bcs.n	8007440 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	b29b      	uxth	r3, r3
 800741e:	f023 030f 	bic.w	r3, r3, #15
 8007422:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	085b      	lsrs	r3, r3, #1
 8007428:	b29b      	uxth	r3, r3
 800742a:	f003 0307 	and.w	r3, r3, #7
 800742e:	b29a      	uxth	r2, r3
 8007430:	8bfb      	ldrh	r3, [r7, #30]
 8007432:	4313      	orrs	r3, r2
 8007434:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	8bfa      	ldrh	r2, [r7, #30]
 800743c:	60da      	str	r2, [r3, #12]
 800743e:	e05b      	b.n	80074f8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007446:	e057      	b.n	80074f8 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007448:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800744c:	2b08      	cmp	r3, #8
 800744e:	d828      	bhi.n	80074a2 <UART_SetConfig+0x45e>
 8007450:	a201      	add	r2, pc, #4	; (adr r2, 8007458 <UART_SetConfig+0x414>)
 8007452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007456:	bf00      	nop
 8007458:	0800747d 	.word	0x0800747d
 800745c:	08007485 	.word	0x08007485
 8007460:	0800748d 	.word	0x0800748d
 8007464:	080074a3 	.word	0x080074a3
 8007468:	08007493 	.word	0x08007493
 800746c:	080074a3 	.word	0x080074a3
 8007470:	080074a3 	.word	0x080074a3
 8007474:	080074a3 	.word	0x080074a3
 8007478:	0800749b 	.word	0x0800749b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800747c:	f7fd fe34 	bl	80050e8 <HAL_RCC_GetPCLK1Freq>
 8007480:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007482:	e014      	b.n	80074ae <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007484:	f7fd fe42 	bl	800510c <HAL_RCC_GetPCLK2Freq>
 8007488:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800748a:	e010      	b.n	80074ae <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800748c:	4b26      	ldr	r3, [pc, #152]	; (8007528 <UART_SetConfig+0x4e4>)
 800748e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007490:	e00d      	b.n	80074ae <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007492:	f7fd fd75 	bl	8004f80 <HAL_RCC_GetSysClockFreq>
 8007496:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007498:	e009      	b.n	80074ae <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800749a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800749e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80074a0:	e005      	b.n	80074ae <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80074ac:	bf00      	nop
    }

    if (pclk != 0U)
 80074ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d021      	beq.n	80074f8 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b8:	4a1a      	ldr	r2, [pc, #104]	; (8007524 <UART_SetConfig+0x4e0>)
 80074ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074be:	461a      	mov	r2, r3
 80074c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	085b      	lsrs	r3, r3, #1
 80074cc:	441a      	add	r2, r3
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074d8:	6a3b      	ldr	r3, [r7, #32]
 80074da:	2b0f      	cmp	r3, #15
 80074dc:	d909      	bls.n	80074f2 <UART_SetConfig+0x4ae>
 80074de:	6a3b      	ldr	r3, [r7, #32]
 80074e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074e4:	d205      	bcs.n	80074f2 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074e6:	6a3b      	ldr	r3, [r7, #32]
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	60da      	str	r2, [r3, #12]
 80074f0:	e002      	b.n	80074f8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	2201      	movs	r2, #1
 8007504:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	2200      	movs	r2, #0
 800750c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	2200      	movs	r2, #0
 8007512:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007514:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007518:	4618      	mov	r0, r3
 800751a:	3730      	adds	r7, #48	; 0x30
 800751c:	46bd      	mov	sp, r7
 800751e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007522:	bf00      	nop
 8007524:	0800cea4 	.word	0x0800cea4
 8007528:	00f42400 	.word	0x00f42400

0800752c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00a      	beq.n	8007556 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	430a      	orrs	r2, r1
 8007554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800755a:	f003 0302 	and.w	r3, r3, #2
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00a      	beq.n	8007578 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	430a      	orrs	r2, r1
 8007576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757c:	f003 0304 	and.w	r3, r3, #4
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00a      	beq.n	800759a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	430a      	orrs	r2, r1
 8007598:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759e:	f003 0308 	and.w	r3, r3, #8
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00a      	beq.n	80075bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	430a      	orrs	r2, r1
 80075ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c0:	f003 0310 	and.w	r3, r3, #16
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00a      	beq.n	80075de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	430a      	orrs	r2, r1
 80075dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e2:	f003 0320 	and.w	r3, r3, #32
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00a      	beq.n	8007600 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	430a      	orrs	r2, r1
 80075fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007608:	2b00      	cmp	r3, #0
 800760a:	d01a      	beq.n	8007642 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	430a      	orrs	r2, r1
 8007620:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800762a:	d10a      	bne.n	8007642 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	430a      	orrs	r2, r1
 8007640:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00a      	beq.n	8007664 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	430a      	orrs	r2, r1
 8007662:	605a      	str	r2, [r3, #4]
  }
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	bc80      	pop	{r7}
 800766c:	4770      	bx	lr

0800766e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b086      	sub	sp, #24
 8007672:	af02      	add	r7, sp, #8
 8007674:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800767e:	f7fb fa25 	bl	8002acc <HAL_GetTick>
 8007682:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 0308 	and.w	r3, r3, #8
 800768e:	2b08      	cmp	r3, #8
 8007690:	d10e      	bne.n	80076b0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007692:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 f832 	bl	800770a <UART_WaitOnFlagUntilTimeout>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d001      	beq.n	80076b0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076ac:	2303      	movs	r3, #3
 80076ae:	e028      	b.n	8007702 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 0304 	and.w	r3, r3, #4
 80076ba:	2b04      	cmp	r3, #4
 80076bc:	d10e      	bne.n	80076dc <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076c2:	9300      	str	r3, [sp, #0]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 f81c 	bl	800770a <UART_WaitOnFlagUntilTimeout>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d001      	beq.n	80076dc <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076d8:	2303      	movs	r3, #3
 80076da:	e012      	b.n	8007702 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2220      	movs	r2, #32
 80076e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2220      	movs	r2, #32
 80076e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b09c      	sub	sp, #112	; 0x70
 800770e:	af00      	add	r7, sp, #0
 8007710:	60f8      	str	r0, [r7, #12]
 8007712:	60b9      	str	r1, [r7, #8]
 8007714:	603b      	str	r3, [r7, #0]
 8007716:	4613      	mov	r3, r2
 8007718:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800771a:	e0a9      	b.n	8007870 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800771c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800771e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007722:	f000 80a5 	beq.w	8007870 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007726:	f7fb f9d1 	bl	8002acc <HAL_GetTick>
 800772a:	4602      	mov	r2, r0
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007732:	429a      	cmp	r2, r3
 8007734:	d302      	bcc.n	800773c <UART_WaitOnFlagUntilTimeout+0x32>
 8007736:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007738:	2b00      	cmp	r3, #0
 800773a:	d140      	bne.n	80077be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007744:	e853 3f00 	ldrex	r3, [r3]
 8007748:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800774a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800774c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007750:	667b      	str	r3, [r7, #100]	; 0x64
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	461a      	mov	r2, r3
 8007758:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800775a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800775c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007760:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007762:	e841 2300 	strex	r3, r2, [r1]
 8007766:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1e6      	bne.n	800773c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	3308      	adds	r3, #8
 8007774:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007778:	e853 3f00 	ldrex	r3, [r3]
 800777c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800777e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007780:	f023 0301 	bic.w	r3, r3, #1
 8007784:	663b      	str	r3, [r7, #96]	; 0x60
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	3308      	adds	r3, #8
 800778c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800778e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007790:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007792:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007794:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007796:	e841 2300 	strex	r3, r2, [r1]
 800779a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800779c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1e5      	bne.n	800776e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2220      	movs	r2, #32
 80077a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2220      	movs	r2, #32
 80077ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e069      	b.n	8007892 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 0304 	and.w	r3, r3, #4
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d051      	beq.n	8007870 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	69db      	ldr	r3, [r3, #28]
 80077d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077da:	d149      	bne.n	8007870 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ee:	e853 3f00 	ldrex	r3, [r3]
 80077f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	461a      	mov	r2, r3
 8007802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007804:	637b      	str	r3, [r7, #52]	; 0x34
 8007806:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007808:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800780a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800780c:	e841 2300 	strex	r3, r2, [r1]
 8007810:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1e6      	bne.n	80077e6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	3308      	adds	r3, #8
 800781e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	e853 3f00 	ldrex	r3, [r3]
 8007826:	613b      	str	r3, [r7, #16]
   return(result);
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	f023 0301 	bic.w	r3, r3, #1
 800782e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	3308      	adds	r3, #8
 8007836:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007838:	623a      	str	r2, [r7, #32]
 800783a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783c:	69f9      	ldr	r1, [r7, #28]
 800783e:	6a3a      	ldr	r2, [r7, #32]
 8007840:	e841 2300 	strex	r3, r2, [r1]
 8007844:	61bb      	str	r3, [r7, #24]
   return(result);
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1e5      	bne.n	8007818 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2220      	movs	r2, #32
 8007850:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2220      	movs	r2, #32
 8007858:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2220      	movs	r2, #32
 8007860:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	e010      	b.n	8007892 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	69da      	ldr	r2, [r3, #28]
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	4013      	ands	r3, r2
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	429a      	cmp	r2, r3
 800787e:	bf0c      	ite	eq
 8007880:	2301      	moveq	r3, #1
 8007882:	2300      	movne	r3, #0
 8007884:	b2db      	uxtb	r3, r3
 8007886:	461a      	mov	r2, r3
 8007888:	79fb      	ldrb	r3, [r7, #7]
 800788a:	429a      	cmp	r2, r3
 800788c:	f43f af46 	beq.w	800771c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3770      	adds	r7, #112	; 0x70
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
	...

0800789c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b096      	sub	sp, #88	; 0x58
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	4613      	mov	r3, r2
 80078a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	88fa      	ldrh	r2, [r7, #6]
 80078b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2222      	movs	r2, #34	; 0x22
 80078c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d02d      	beq.n	800792e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078d8:	4a40      	ldr	r2, [pc, #256]	; (80079dc <UART_Start_Receive_DMA+0x140>)
 80078da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078e2:	4a3f      	ldr	r2, [pc, #252]	; (80079e0 <UART_Start_Receive_DMA+0x144>)
 80078e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078ec:	4a3d      	ldr	r2, [pc, #244]	; (80079e4 <UART_Start_Receive_DMA+0x148>)
 80078ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078f6:	2200      	movs	r2, #0
 80078f8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	3324      	adds	r3, #36	; 0x24
 8007906:	4619      	mov	r1, r3
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800790c:	461a      	mov	r2, r3
 800790e:	88fb      	ldrh	r3, [r7, #6]
 8007910:	f7fb ff4e 	bl	80037b0 <HAL_DMA_Start_IT>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d009      	beq.n	800792e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2210      	movs	r2, #16
 800791e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2220      	movs	r2, #32
 8007926:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e051      	b.n	80079d2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d018      	beq.n	8007968 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800793e:	e853 3f00 	ldrex	r3, [r3]
 8007942:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800794a:	657b      	str	r3, [r7, #84]	; 0x54
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	461a      	mov	r2, r3
 8007952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007954:	64bb      	str	r3, [r7, #72]	; 0x48
 8007956:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007958:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800795a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800795c:	e841 2300 	strex	r3, r2, [r1]
 8007960:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007964:	2b00      	cmp	r3, #0
 8007966:	d1e6      	bne.n	8007936 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	3308      	adds	r3, #8
 800796e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007972:	e853 3f00 	ldrex	r3, [r3]
 8007976:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	f043 0301 	orr.w	r3, r3, #1
 800797e:	653b      	str	r3, [r7, #80]	; 0x50
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	3308      	adds	r3, #8
 8007986:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007988:	637a      	str	r2, [r7, #52]	; 0x34
 800798a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800798e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007990:	e841 2300 	strex	r3, r2, [r1]
 8007994:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1e5      	bne.n	8007968 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	3308      	adds	r3, #8
 80079a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	e853 3f00 	ldrex	r3, [r3]
 80079aa:	613b      	str	r3, [r7, #16]
   return(result);
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	3308      	adds	r3, #8
 80079ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079bc:	623a      	str	r2, [r7, #32]
 80079be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c0:	69f9      	ldr	r1, [r7, #28]
 80079c2:	6a3a      	ldr	r2, [r7, #32]
 80079c4:	e841 2300 	strex	r3, r2, [r1]
 80079c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1e5      	bne.n	800799c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3758      	adds	r7, #88	; 0x58
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	08007b33 	.word	0x08007b33
 80079e0:	08007c5f 	.word	0x08007c5f
 80079e4:	08007c9d 	.word	0x08007c9d

080079e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b08f      	sub	sp, #60	; 0x3c
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f6:	6a3b      	ldr	r3, [r7, #32]
 80079f8:	e853 3f00 	ldrex	r3, [r3]
 80079fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007a04:	637b      	str	r3, [r7, #52]	; 0x34
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a10:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a16:	e841 2300 	strex	r3, r2, [r1]
 8007a1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1e6      	bne.n	80079f0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	3308      	adds	r3, #8
 8007a28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	e853 3f00 	ldrex	r3, [r3]
 8007a30:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007a38:	633b      	str	r3, [r7, #48]	; 0x30
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	3308      	adds	r3, #8
 8007a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a42:	61ba      	str	r2, [r7, #24]
 8007a44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a46:	6979      	ldr	r1, [r7, #20]
 8007a48:	69ba      	ldr	r2, [r7, #24]
 8007a4a:	e841 2300 	strex	r3, r2, [r1]
 8007a4e:	613b      	str	r3, [r7, #16]
   return(result);
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1e5      	bne.n	8007a22 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2220      	movs	r2, #32
 8007a5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8007a5e:	bf00      	nop
 8007a60:	373c      	adds	r7, #60	; 0x3c
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bc80      	pop	{r7}
 8007a66:	4770      	bx	lr

08007a68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b095      	sub	sp, #84	; 0x54
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a78:	e853 3f00 	ldrex	r3, [r3]
 8007a7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a8e:	643b      	str	r3, [r7, #64]	; 0x40
 8007a90:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a96:	e841 2300 	strex	r3, r2, [r1]
 8007a9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d1e6      	bne.n	8007a70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	3308      	adds	r3, #8
 8007aa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aaa:	6a3b      	ldr	r3, [r7, #32]
 8007aac:	e853 3f00 	ldrex	r3, [r3]
 8007ab0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ab8:	f023 0301 	bic.w	r3, r3, #1
 8007abc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	3308      	adds	r3, #8
 8007ac4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ac6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ac8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ace:	e841 2300 	strex	r3, r2, [r1]
 8007ad2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1e3      	bne.n	8007aa2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d118      	bne.n	8007b14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	e853 3f00 	ldrex	r3, [r3]
 8007aee:	60bb      	str	r3, [r7, #8]
   return(result);
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	f023 0310 	bic.w	r3, r3, #16
 8007af6:	647b      	str	r3, [r7, #68]	; 0x44
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	461a      	mov	r2, r3
 8007afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b00:	61bb      	str	r3, [r7, #24]
 8007b02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b04:	6979      	ldr	r1, [r7, #20]
 8007b06:	69ba      	ldr	r2, [r7, #24]
 8007b08:	e841 2300 	strex	r3, r2, [r1]
 8007b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1e6      	bne.n	8007ae2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2220      	movs	r2, #32
 8007b18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007b28:	bf00      	nop
 8007b2a:	3754      	adds	r7, #84	; 0x54
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bc80      	pop	{r7}
 8007b30:	4770      	bx	lr

08007b32 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b09c      	sub	sp, #112	; 0x70
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b3e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0320 	and.w	r3, r3, #32
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d171      	bne.n	8007c32 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b50:	2200      	movs	r2, #0
 8007b52:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b5e:	e853 3f00 	ldrex	r3, [r3]
 8007b62:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	461a      	mov	r2, r3
 8007b72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b74:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b76:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b7c:	e841 2300 	strex	r3, r2, [r1]
 8007b80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1e6      	bne.n	8007b56 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3308      	adds	r3, #8
 8007b8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b92:	e853 3f00 	ldrex	r3, [r3]
 8007b96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b9a:	f023 0301 	bic.w	r3, r3, #1
 8007b9e:	667b      	str	r3, [r7, #100]	; 0x64
 8007ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3308      	adds	r3, #8
 8007ba6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007ba8:	647a      	str	r2, [r7, #68]	; 0x44
 8007baa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bb0:	e841 2300 	strex	r3, r2, [r1]
 8007bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1e5      	bne.n	8007b88 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	3308      	adds	r3, #8
 8007bc2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc6:	e853 3f00 	ldrex	r3, [r3]
 8007bca:	623b      	str	r3, [r7, #32]
   return(result);
 8007bcc:	6a3b      	ldr	r3, [r7, #32]
 8007bce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bd2:	663b      	str	r3, [r7, #96]	; 0x60
 8007bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	3308      	adds	r3, #8
 8007bda:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007bdc:	633a      	str	r2, [r7, #48]	; 0x30
 8007bde:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007be2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007be4:	e841 2300 	strex	r3, r2, [r1]
 8007be8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1e5      	bne.n	8007bbc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bf2:	2220      	movs	r2, #32
 8007bf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d118      	bne.n	8007c32 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	e853 3f00 	ldrex	r3, [r3]
 8007c0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f023 0310 	bic.w	r3, r3, #16
 8007c14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c1e:	61fb      	str	r3, [r7, #28]
 8007c20:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c22:	69b9      	ldr	r1, [r7, #24]
 8007c24:	69fa      	ldr	r2, [r7, #28]
 8007c26:	e841 2300 	strex	r3, r2, [r1]
 8007c2a:	617b      	str	r3, [r7, #20]
   return(result);
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1e6      	bne.n	8007c00 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c34:	2200      	movs	r2, #0
 8007c36:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d107      	bne.n	8007c50 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c46:	4619      	mov	r1, r3
 8007c48:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007c4a:	f7ff f9f0 	bl	800702e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c4e:	e002      	b.n	8007c56 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007c50:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007c52:	f7f9 fb33 	bl	80012bc <HAL_UART_RxCpltCallback>
}
 8007c56:	bf00      	nop
 8007c58:	3770      	adds	r7, #112	; 0x70
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b084      	sub	sp, #16
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c6a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d109      	bne.n	8007c8e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c80:	085b      	lsrs	r3, r3, #1
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	4619      	mov	r1, r3
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f7ff f9d1 	bl	800702e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c8c:	e002      	b.n	8007c94 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f7ff f9bb 	bl	800700a <HAL_UART_RxHalfCpltCallback>
}
 8007c94:	bf00      	nop
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b086      	sub	sp, #24
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cb0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cb8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cc4:	2b80      	cmp	r3, #128	; 0x80
 8007cc6:	d109      	bne.n	8007cdc <UART_DMAError+0x40>
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	2b21      	cmp	r3, #33	; 0x21
 8007ccc:	d106      	bne.n	8007cdc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007cd6:	6978      	ldr	r0, [r7, #20]
 8007cd8:	f7ff fe86 	bl	80079e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce6:	2b40      	cmp	r3, #64	; 0x40
 8007ce8:	d109      	bne.n	8007cfe <UART_DMAError+0x62>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2b22      	cmp	r3, #34	; 0x22
 8007cee:	d106      	bne.n	8007cfe <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007cf8:	6978      	ldr	r0, [r7, #20]
 8007cfa:	f7ff feb5 	bl	8007a68 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d04:	f043 0210 	orr.w	r2, r3, #16
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d0e:	6978      	ldr	r0, [r7, #20]
 8007d10:	f7ff f984 	bl	800701c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d14:	bf00      	nop
 8007d16:	3718      	adds	r7, #24
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	f7ff f96e 	bl	800701c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d40:	bf00      	nop
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b088      	sub	sp, #32
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	e853 3f00 	ldrex	r3, [r3]
 8007d5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d64:	61fb      	str	r3, [r7, #28]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	61bb      	str	r3, [r7, #24]
 8007d70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d72:	6979      	ldr	r1, [r7, #20]
 8007d74:	69ba      	ldr	r2, [r7, #24]
 8007d76:	e841 2300 	strex	r3, r2, [r1]
 8007d7a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1e6      	bne.n	8007d50 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2220      	movs	r2, #32
 8007d86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f7ff f931 	bl	8006ff8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d96:	bf00      	nop
 8007d98:	3720      	adds	r7, #32
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007d9e:	b480      	push	{r7}
 8007da0:	b083      	sub	sp, #12
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007da6:	bf00      	nop
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bc80      	pop	{r7}
 8007dae:	4770      	bx	lr

08007db0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bc80      	pop	{r7}
 8007dc0:	4770      	bx	lr

08007dc2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b083      	sub	sp, #12
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007dca:	bf00      	nop
 8007dcc:	370c      	adds	r7, #12
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bc80      	pop	{r7}
 8007dd2:	4770      	bx	lr

08007dd4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d101      	bne.n	8007dea <HAL_UARTEx_DisableFifoMode+0x16>
 8007de6:	2302      	movs	r3, #2
 8007de8:	e027      	b.n	8007e3a <HAL_UARTEx_DisableFifoMode+0x66>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2224      	movs	r2, #36	; 0x24
 8007df6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f022 0201 	bic.w	r2, r2, #1
 8007e10:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007e18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2220      	movs	r2, #32
 8007e2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bc80      	pop	{r7}
 8007e42:	4770      	bx	lr

08007e44 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d101      	bne.n	8007e5c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007e58:	2302      	movs	r3, #2
 8007e5a:	e02d      	b.n	8007eb8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2224      	movs	r2, #36	; 0x24
 8007e68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f022 0201 	bic.w	r2, r2, #1
 8007e82:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	683a      	ldr	r2, [r7, #0]
 8007e94:	430a      	orrs	r2, r1
 8007e96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f84f 	bl	8007f3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2220      	movs	r2, #32
 8007eaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d101      	bne.n	8007ed8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ed4:	2302      	movs	r3, #2
 8007ed6:	e02d      	b.n	8007f34 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2224      	movs	r2, #36	; 0x24
 8007ee4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f022 0201 	bic.w	r2, r2, #1
 8007efe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	683a      	ldr	r2, [r7, #0]
 8007f10:	430a      	orrs	r2, r1
 8007f12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 f811 	bl	8007f3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	68fa      	ldr	r2, [r7, #12]
 8007f20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2220      	movs	r2, #32
 8007f26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3710      	adds	r7, #16
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d108      	bne.n	8007f5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007f5c:	e031      	b.n	8007fc2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007f5e:	2308      	movs	r3, #8
 8007f60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007f62:	2308      	movs	r3, #8
 8007f64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	0e5b      	lsrs	r3, r3, #25
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	f003 0307 	and.w	r3, r3, #7
 8007f74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	0f5b      	lsrs	r3, r3, #29
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	f003 0307 	and.w	r3, r3, #7
 8007f84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f86:	7bbb      	ldrb	r3, [r7, #14]
 8007f88:	7b3a      	ldrb	r2, [r7, #12]
 8007f8a:	4910      	ldr	r1, [pc, #64]	; (8007fcc <UARTEx_SetNbDataToProcess+0x90>)
 8007f8c:	5c8a      	ldrb	r2, [r1, r2]
 8007f8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007f92:	7b3a      	ldrb	r2, [r7, #12]
 8007f94:	490e      	ldr	r1, [pc, #56]	; (8007fd0 <UARTEx_SetNbDataToProcess+0x94>)
 8007f96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f98:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007fa4:	7bfb      	ldrb	r3, [r7, #15]
 8007fa6:	7b7a      	ldrb	r2, [r7, #13]
 8007fa8:	4908      	ldr	r1, [pc, #32]	; (8007fcc <UARTEx_SetNbDataToProcess+0x90>)
 8007faa:	5c8a      	ldrb	r2, [r1, r2]
 8007fac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007fb0:	7b7a      	ldrb	r2, [r7, #13]
 8007fb2:	4907      	ldr	r1, [pc, #28]	; (8007fd0 <UARTEx_SetNbDataToProcess+0x94>)
 8007fb4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007fb6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007fc2:	bf00      	nop
 8007fc4:	3714      	adds	r7, #20
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bc80      	pop	{r7}
 8007fca:	4770      	bx	lr
 8007fcc:	0800cebc 	.word	0x0800cebc
 8007fd0:	0800cec4 	.word	0x0800cec4

08007fd4 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af02      	add	r7, sp, #8
 8007fda:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8007fdc:	4a24      	ldr	r2, [pc, #144]	; (8008070 <RadioInit+0x9c>)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8007fe2:	4b24      	ldr	r3, [pc, #144]	; (8008074 <RadioInit+0xa0>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8007fe8:	4b22      	ldr	r3, [pc, #136]	; (8008074 <RadioInit+0xa0>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8007fee:	4b21      	ldr	r3, [pc, #132]	; (8008074 <RadioInit+0xa0>)
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007ff4:	4b1f      	ldr	r3, [pc, #124]	; (8008074 <RadioInit+0xa0>)
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8007ffa:	481f      	ldr	r0, [pc, #124]	; (8008078 <RadioInit+0xa4>)
 8007ffc:	f001 ff88 	bl	8009f10 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8008000:	4b1c      	ldr	r3, [pc, #112]	; (8008074 <RadioInit+0xa0>)
 8008002:	2200      	movs	r2, #0
 8008004:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8008006:	4b1b      	ldr	r3, [pc, #108]	; (8008074 <RadioInit+0xa0>)
 8008008:	2200      	movs	r2, #0
 800800a:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 800800c:	f002 fa1c 	bl	800a448 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8008010:	2100      	movs	r1, #0
 8008012:	2000      	movs	r0, #0
 8008014:	f002 fde8 	bl	800abe8 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8008018:	2204      	movs	r2, #4
 800801a:	2100      	movs	r1, #0
 800801c:	2001      	movs	r0, #1
 800801e:	f002 fba5 	bl	800a76c <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008022:	2300      	movs	r3, #0
 8008024:	2200      	movs	r2, #0
 8008026:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800802a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800802e:	f002 fad5 	bl	800a5dc <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8008032:	f000 fe91 	bl	8008d58 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8008036:	2300      	movs	r3, #0
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	4b10      	ldr	r3, [pc, #64]	; (800807c <RadioInit+0xa8>)
 800803c:	2200      	movs	r2, #0
 800803e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008042:	480f      	ldr	r0, [pc, #60]	; (8008080 <RadioInit+0xac>)
 8008044:	f003 fb32 	bl	800b6ac <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8008048:	2300      	movs	r3, #0
 800804a:	9300      	str	r3, [sp, #0]
 800804c:	4b0d      	ldr	r3, [pc, #52]	; (8008084 <RadioInit+0xb0>)
 800804e:	2200      	movs	r2, #0
 8008050:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008054:	480c      	ldr	r0, [pc, #48]	; (8008088 <RadioInit+0xb4>)
 8008056:	f003 fb29 	bl	800b6ac <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800805a:	4809      	ldr	r0, [pc, #36]	; (8008080 <RadioInit+0xac>)
 800805c:	f003 fbca 	bl	800b7f4 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8008060:	4809      	ldr	r0, [pc, #36]	; (8008088 <RadioInit+0xb4>)
 8008062:	f003 fbc7 	bl	800b7f4 <UTIL_TIMER_Stop>
}
 8008066:	bf00      	nop
 8008068:	3708      	adds	r7, #8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	20000960 	.word	0x20000960
 8008074:	20000964 	.word	0x20000964
 8008078:	08009151 	.word	0x08009151
 800807c:	080090d9 	.word	0x080090d9
 8008080:	200009c0 	.word	0x200009c0
 8008084:	080090ed 	.word	0x080090ed
 8008088:	200009d8 	.word	0x200009d8

0800808c <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 800808c:	b580      	push	{r7, lr}
 800808e:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8008090:	f001 ff86 	bl	8009fa0 <SUBGRF_GetOperatingMode>
 8008094:	4603      	mov	r3, r0
 8008096:	2b07      	cmp	r3, #7
 8008098:	d00a      	beq.n	80080b0 <RadioGetStatus+0x24>
 800809a:	2b07      	cmp	r3, #7
 800809c:	dc0a      	bgt.n	80080b4 <RadioGetStatus+0x28>
 800809e:	2b04      	cmp	r3, #4
 80080a0:	d002      	beq.n	80080a8 <RadioGetStatus+0x1c>
 80080a2:	2b05      	cmp	r3, #5
 80080a4:	d002      	beq.n	80080ac <RadioGetStatus+0x20>
 80080a6:	e005      	b.n	80080b4 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80080a8:	2302      	movs	r3, #2
 80080aa:	e004      	b.n	80080b6 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 80080ac:	2301      	movs	r3, #1
 80080ae:	e002      	b.n	80080b6 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e000      	b.n	80080b6 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 80080b4:	2300      	movs	r3, #0
    }
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	bd80      	pop	{r7, pc}
	...

080080bc <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	4603      	mov	r3, r0
 80080c4:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80080c6:	4a2a      	ldr	r2, [pc, #168]	; (8008170 <RadioSetModem+0xb4>)
 80080c8:	79fb      	ldrb	r3, [r7, #7]
 80080ca:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 80080cc:	79fb      	ldrb	r3, [r7, #7]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f003 f95d 	bl	800b38e <RFW_SetRadioModem>
    switch( modem )
 80080d4:	79fb      	ldrb	r3, [r7, #7]
 80080d6:	2b05      	cmp	r3, #5
 80080d8:	d80e      	bhi.n	80080f8 <RadioSetModem+0x3c>
 80080da:	a201      	add	r2, pc, #4	; (adr r2, 80080e0 <RadioSetModem+0x24>)
 80080dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e0:	08008107 	.word	0x08008107
 80080e4:	08008115 	.word	0x08008115
 80080e8:	080080f9 	.word	0x080080f9
 80080ec:	0800813b 	.word	0x0800813b
 80080f0:	08008149 	.word	0x08008149
 80080f4:	08008157 	.word	0x08008157
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 80080f8:	2003      	movs	r0, #3
 80080fa:	f002 fb11 	bl	800a720 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80080fe:	4b1c      	ldr	r3, [pc, #112]	; (8008170 <RadioSetModem+0xb4>)
 8008100:	2200      	movs	r2, #0
 8008102:	735a      	strb	r2, [r3, #13]
        break;
 8008104:	e02f      	b.n	8008166 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8008106:	2000      	movs	r0, #0
 8008108:	f002 fb0a 	bl	800a720 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800810c:	4b18      	ldr	r3, [pc, #96]	; (8008170 <RadioSetModem+0xb4>)
 800810e:	2200      	movs	r2, #0
 8008110:	735a      	strb	r2, [r3, #13]
        break;
 8008112:	e028      	b.n	8008166 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8008114:	2001      	movs	r0, #1
 8008116:	f002 fb03 	bl	800a720 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800811a:	4b15      	ldr	r3, [pc, #84]	; (8008170 <RadioSetModem+0xb4>)
 800811c:	7b5a      	ldrb	r2, [r3, #13]
 800811e:	4b14      	ldr	r3, [pc, #80]	; (8008170 <RadioSetModem+0xb4>)
 8008120:	7b1b      	ldrb	r3, [r3, #12]
 8008122:	429a      	cmp	r2, r3
 8008124:	d01e      	beq.n	8008164 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8008126:	4b12      	ldr	r3, [pc, #72]	; (8008170 <RadioSetModem+0xb4>)
 8008128:	7b1a      	ldrb	r2, [r3, #12]
 800812a:	4b11      	ldr	r3, [pc, #68]	; (8008170 <RadioSetModem+0xb4>)
 800812c:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800812e:	4b10      	ldr	r3, [pc, #64]	; (8008170 <RadioSetModem+0xb4>)
 8008130:	7b5b      	ldrb	r3, [r3, #13]
 8008132:	4618      	mov	r0, r3
 8008134:	f000 ff9a 	bl	800906c <RadioSetPublicNetwork>
        }
        break;
 8008138:	e014      	b.n	8008164 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800813a:	2002      	movs	r0, #2
 800813c:	f002 faf0 	bl	800a720 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008140:	4b0b      	ldr	r3, [pc, #44]	; (8008170 <RadioSetModem+0xb4>)
 8008142:	2200      	movs	r2, #0
 8008144:	735a      	strb	r2, [r3, #13]
        break;
 8008146:	e00e      	b.n	8008166 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8008148:	2002      	movs	r0, #2
 800814a:	f002 fae9 	bl	800a720 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800814e:	4b08      	ldr	r3, [pc, #32]	; (8008170 <RadioSetModem+0xb4>)
 8008150:	2200      	movs	r2, #0
 8008152:	735a      	strb	r2, [r3, #13]
        break;
 8008154:	e007      	b.n	8008166 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8008156:	2000      	movs	r0, #0
 8008158:	f002 fae2 	bl	800a720 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800815c:	4b04      	ldr	r3, [pc, #16]	; (8008170 <RadioSetModem+0xb4>)
 800815e:	2200      	movs	r2, #0
 8008160:	735a      	strb	r2, [r3, #13]
        break;
 8008162:	e000      	b.n	8008166 <RadioSetModem+0xaa>
        break;
 8008164:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8008166:	bf00      	nop
 8008168:	3708      	adds	r7, #8
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	20000964 	.word	0x20000964

08008174 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f002 fa89 	bl	800a694 <SUBGRF_SetRfFrequency>
}
 8008182:	bf00      	nop
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b090      	sub	sp, #64	; 0x40
 800818e:	af0a      	add	r7, sp, #40	; 0x28
 8008190:	60f8      	str	r0, [r7, #12]
 8008192:	60b9      	str	r1, [r7, #8]
 8008194:	603b      	str	r3, [r7, #0]
 8008196:	4613      	mov	r3, r2
 8008198:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 800819a:	2301      	movs	r3, #1
 800819c:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 800819e:	2300      	movs	r3, #0
 80081a0:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80081a2:	2300      	movs	r3, #0
 80081a4:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 80081a6:	f000 fdea 	bl	8008d7e <RadioStandby>

    RadioSetModem( MODEM_FSK );
 80081aa:	2000      	movs	r0, #0
 80081ac:	f7ff ff86 	bl	80080bc <RadioSetModem>

    RadioSetChannel( freq );
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f7ff ffdf 	bl	8008174 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80081b6:	2301      	movs	r3, #1
 80081b8:	9309      	str	r3, [sp, #36]	; 0x24
 80081ba:	2300      	movs	r3, #0
 80081bc:	9308      	str	r3, [sp, #32]
 80081be:	2300      	movs	r3, #0
 80081c0:	9307      	str	r3, [sp, #28]
 80081c2:	2300      	movs	r3, #0
 80081c4:	9306      	str	r3, [sp, #24]
 80081c6:	2300      	movs	r3, #0
 80081c8:	9305      	str	r3, [sp, #20]
 80081ca:	2300      	movs	r3, #0
 80081cc:	9304      	str	r3, [sp, #16]
 80081ce:	2300      	movs	r3, #0
 80081d0:	9303      	str	r3, [sp, #12]
 80081d2:	2300      	movs	r3, #0
 80081d4:	9302      	str	r3, [sp, #8]
 80081d6:	2303      	movs	r3, #3
 80081d8:	9301      	str	r3, [sp, #4]
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	2300      	movs	r3, #0
 80081e0:	f44f 7216 	mov.w	r2, #600	; 0x258
 80081e4:	68b9      	ldr	r1, [r7, #8]
 80081e6:	2000      	movs	r0, #0
 80081e8:	f000 f83c 	bl	8008264 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80081ec:	2000      	movs	r0, #0
 80081ee:	f000 fdcd 	bl	8008d8c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80081f2:	f000 ff69 	bl	80090c8 <RadioGetWakeupTime>
 80081f6:	4603      	mov	r3, r0
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7fa fc7b 	bl	8002af4 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80081fe:	f003 fb93 	bl	800b928 <UTIL_TIMER_GetCurrentTime>
 8008202:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8008204:	e00d      	b.n	8008222 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8008206:	2000      	movs	r0, #0
 8008208:	f000 feae 	bl	8008f68 <RadioRssi>
 800820c:	4603      	mov	r3, r0
 800820e:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8008210:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8008214:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008218:	429a      	cmp	r2, r3
 800821a:	dd02      	ble.n	8008222 <RadioIsChannelFree+0x98>
        {
            status = false;
 800821c:	2300      	movs	r3, #0
 800821e:	75fb      	strb	r3, [r7, #23]
            break;
 8008220:	e006      	b.n	8008230 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8008222:	6938      	ldr	r0, [r7, #16]
 8008224:	f003 fb92 	bl	800b94c <UTIL_TIMER_GetElapsedTime>
 8008228:	4602      	mov	r2, r0
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	4293      	cmp	r3, r2
 800822e:	d8ea      	bhi.n	8008206 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8008230:	f000 fda5 	bl	8008d7e <RadioStandby>

    return status;
 8008234:	7dfb      	ldrb	r3, [r7, #23]
}
 8008236:	4618      	mov	r0, r3
 8008238:	3718      	adds	r7, #24
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <RadioRandom>:

static uint32_t RadioRandom( void )
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b082      	sub	sp, #8
 8008242:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8008244:	2300      	movs	r3, #0
 8008246:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008248:	2300      	movs	r3, #0
 800824a:	2200      	movs	r2, #0
 800824c:	2100      	movs	r1, #0
 800824e:	2000      	movs	r0, #0
 8008250:	f002 f9c4 	bl	800a5dc <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8008254:	f001 ff75 	bl	800a142 <SUBGRF_GetRandom>
 8008258:	6078      	str	r0, [r7, #4]

    return rnd;
 800825a:	687b      	ldr	r3, [r7, #4]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b08a      	sub	sp, #40	; 0x28
 8008268:	af00      	add	r7, sp, #0
 800826a:	60b9      	str	r1, [r7, #8]
 800826c:	607a      	str	r2, [r7, #4]
 800826e:	461a      	mov	r2, r3
 8008270:	4603      	mov	r3, r0
 8008272:	73fb      	strb	r3, [r7, #15]
 8008274:	4613      	mov	r3, r2
 8008276:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8008278:	4ab9      	ldr	r2, [pc, #740]	; (8008560 <RadioSetRxConfig+0x2fc>)
 800827a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800827e:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8008280:	f003 f843 	bl	800b30a <RFW_DeInit>
    if( rxContinuous == true )
 8008284:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8008288:	2b00      	cmp	r3, #0
 800828a:	d001      	beq.n	8008290 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 800828c:	2300      	movs	r3, #0
 800828e:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8008290:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008294:	2b00      	cmp	r3, #0
 8008296:	d004      	beq.n	80082a2 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8008298:	4ab2      	ldr	r2, [pc, #712]	; (8008564 <RadioSetRxConfig+0x300>)
 800829a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800829e:	7013      	strb	r3, [r2, #0]
 80082a0:	e002      	b.n	80082a8 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 80082a2:	4bb0      	ldr	r3, [pc, #704]	; (8008564 <RadioSetRxConfig+0x300>)
 80082a4:	22ff      	movs	r2, #255	; 0xff
 80082a6:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 80082a8:	7bfb      	ldrb	r3, [r7, #15]
 80082aa:	2b05      	cmp	r3, #5
 80082ac:	d009      	beq.n	80082c2 <RadioSetRxConfig+0x5e>
 80082ae:	2b05      	cmp	r3, #5
 80082b0:	f300 81d7 	bgt.w	8008662 <RadioSetRxConfig+0x3fe>
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f000 80bf 	beq.w	8008438 <RadioSetRxConfig+0x1d4>
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	f000 8124 	beq.w	8008508 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 80082c0:	e1cf      	b.n	8008662 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80082c2:	2001      	movs	r0, #1
 80082c4:	f002 f882 	bl	800a3cc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80082c8:	4ba5      	ldr	r3, [pc, #660]	; (8008560 <RadioSetRxConfig+0x2fc>)
 80082ca:	2200      	movs	r2, #0
 80082cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80082d0:	4aa3      	ldr	r2, [pc, #652]	; (8008560 <RadioSetRxConfig+0x2fc>)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80082d6:	4ba2      	ldr	r3, [pc, #648]	; (8008560 <RadioSetRxConfig+0x2fc>)
 80082d8:	2209      	movs	r2, #9
 80082da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80082de:	4ba0      	ldr	r3, [pc, #640]	; (8008560 <RadioSetRxConfig+0x2fc>)
 80082e0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80082e4:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80082e6:	68b8      	ldr	r0, [r7, #8]
 80082e8:	f002 ff42 	bl	800b170 <SUBGRF_GetFskBandwidthRegValue>
 80082ec:	4603      	mov	r3, r0
 80082ee:	461a      	mov	r2, r3
 80082f0:	4b9b      	ldr	r3, [pc, #620]	; (8008560 <RadioSetRxConfig+0x2fc>)
 80082f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80082f6:	4b9a      	ldr	r3, [pc, #616]	; (8008560 <RadioSetRxConfig+0x2fc>)
 80082f8:	2200      	movs	r2, #0
 80082fa:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80082fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80082fe:	00db      	lsls	r3, r3, #3
 8008300:	b29a      	uxth	r2, r3
 8008302:	4b97      	ldr	r3, [pc, #604]	; (8008560 <RadioSetRxConfig+0x2fc>)
 8008304:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8008306:	4b96      	ldr	r3, [pc, #600]	; (8008560 <RadioSetRxConfig+0x2fc>)
 8008308:	2200      	movs	r2, #0
 800830a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 800830c:	4b94      	ldr	r3, [pc, #592]	; (8008560 <RadioSetRxConfig+0x2fc>)
 800830e:	2210      	movs	r2, #16
 8008310:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8008312:	4b93      	ldr	r3, [pc, #588]	; (8008560 <RadioSetRxConfig+0x2fc>)
 8008314:	2200      	movs	r2, #0
 8008316:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8008318:	4b91      	ldr	r3, [pc, #580]	; (8008560 <RadioSetRxConfig+0x2fc>)
 800831a:	2200      	movs	r2, #0
 800831c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800831e:	4b91      	ldr	r3, [pc, #580]	; (8008564 <RadioSetRxConfig+0x300>)
 8008320:	781a      	ldrb	r2, [r3, #0]
 8008322:	4b8f      	ldr	r3, [pc, #572]	; (8008560 <RadioSetRxConfig+0x2fc>)
 8008324:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8008326:	4b8e      	ldr	r3, [pc, #568]	; (8008560 <RadioSetRxConfig+0x2fc>)
 8008328:	2201      	movs	r2, #1
 800832a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 800832c:	4b8c      	ldr	r3, [pc, #560]	; (8008560 <RadioSetRxConfig+0x2fc>)
 800832e:	2200      	movs	r2, #0
 8008330:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8008332:	2005      	movs	r0, #5
 8008334:	f7ff fec2 	bl	80080bc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008338:	488b      	ldr	r0, [pc, #556]	; (8008568 <RadioSetRxConfig+0x304>)
 800833a:	f002 fae5 	bl	800a908 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800833e:	488b      	ldr	r0, [pc, #556]	; (800856c <RadioSetRxConfig+0x308>)
 8008340:	f002 fbb4 	bl	800aaac <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8008344:	4a8a      	ldr	r2, [pc, #552]	; (8008570 <RadioSetRxConfig+0x30c>)
 8008346:	f107 031c 	add.w	r3, r7, #28
 800834a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800834e:	e883 0003 	stmia.w	r3, {r0, r1}
 8008352:	f107 031c 	add.w	r3, r7, #28
 8008356:	4618      	mov	r0, r3
 8008358:	f001 fe71 	bl	800a03e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800835c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008360:	f001 febc 	bl	800a0dc <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8008364:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8008368:	f000 fe1d 	bl	8008fa6 <RadioRead>
 800836c:	4603      	mov	r3, r0
 800836e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8008372:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008376:	f023 0310 	bic.w	r3, r3, #16
 800837a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 800837e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008382:	4619      	mov	r1, r3
 8008384:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8008388:	f000 fdfb 	bl	8008f82 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 800838c:	2104      	movs	r1, #4
 800838e:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8008392:	f000 fdf6 	bl	8008f82 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8008396:	f640 009b 	movw	r0, #2203	; 0x89b
 800839a:	f000 fe04 	bl	8008fa6 <RadioRead>
 800839e:	4603      	mov	r3, r0
 80083a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80083a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083a8:	f023 031c 	bic.w	r3, r3, #28
 80083ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 80083b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083b4:	f043 0308 	orr.w	r3, r3, #8
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	4619      	mov	r1, r3
 80083bc:	f640 009b 	movw	r0, #2203	; 0x89b
 80083c0:	f000 fddf 	bl	8008f82 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 80083c4:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80083c8:	f000 fded 	bl	8008fa6 <RadioRead>
 80083cc:	4603      	mov	r3, r0
 80083ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80083d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083d6:	f023 0318 	bic.w	r3, r3, #24
 80083da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 80083de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083e2:	f043 0318 	orr.w	r3, r3, #24
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	4619      	mov	r1, r3
 80083ea:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80083ee:	f000 fdc8 	bl	8008f82 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 80083f2:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80083f6:	f000 fdd6 	bl	8008fa6 <RadioRead>
 80083fa:	4603      	mov	r3, r0
 80083fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8008400:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 800840c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008410:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8008414:	b2db      	uxtb	r3, r3
 8008416:	4619      	mov	r1, r3
 8008418:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800841c:	f000 fdb1 	bl	8008f82 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8008420:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008422:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008426:	fb02 f303 	mul.w	r3, r2, r3
 800842a:	461a      	mov	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008432:	4a4b      	ldr	r2, [pc, #300]	; (8008560 <RadioSetRxConfig+0x2fc>)
 8008434:	6093      	str	r3, [r2, #8]
            break;
 8008436:	e115      	b.n	8008664 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8008438:	2000      	movs	r0, #0
 800843a:	f001 ffc7 	bl	800a3cc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800843e:	4b48      	ldr	r3, [pc, #288]	; (8008560 <RadioSetRxConfig+0x2fc>)
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8008446:	4a46      	ldr	r2, [pc, #280]	; (8008560 <RadioSetRxConfig+0x2fc>)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800844c:	4b44      	ldr	r3, [pc, #272]	; (8008560 <RadioSetRxConfig+0x2fc>)
 800844e:	220b      	movs	r2, #11
 8008450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8008454:	68b8      	ldr	r0, [r7, #8]
 8008456:	f002 fe8b 	bl	800b170 <SUBGRF_GetFskBandwidthRegValue>
 800845a:	4603      	mov	r3, r0
 800845c:	461a      	mov	r2, r3
 800845e:	4b40      	ldr	r3, [pc, #256]	; (8008560 <RadioSetRxConfig+0x2fc>)
 8008460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008464:	4b3e      	ldr	r3, [pc, #248]	; (8008560 <RadioSetRxConfig+0x2fc>)
 8008466:	2200      	movs	r2, #0
 8008468:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800846a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800846c:	00db      	lsls	r3, r3, #3
 800846e:	b29a      	uxth	r2, r3
 8008470:	4b3b      	ldr	r3, [pc, #236]	; (8008560 <RadioSetRxConfig+0x2fc>)
 8008472:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8008474:	4b3a      	ldr	r3, [pc, #232]	; (8008560 <RadioSetRxConfig+0x2fc>)
 8008476:	2204      	movs	r2, #4
 8008478:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800847a:	4b39      	ldr	r3, [pc, #228]	; (8008560 <RadioSetRxConfig+0x2fc>)
 800847c:	2218      	movs	r2, #24
 800847e:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8008480:	4b37      	ldr	r3, [pc, #220]	; (8008560 <RadioSetRxConfig+0x2fc>)
 8008482:	2200      	movs	r2, #0
 8008484:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8008486:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800848a:	f083 0301 	eor.w	r3, r3, #1
 800848e:	b2db      	uxtb	r3, r3
 8008490:	461a      	mov	r2, r3
 8008492:	4b33      	ldr	r3, [pc, #204]	; (8008560 <RadioSetRxConfig+0x2fc>)
 8008494:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8008496:	4b33      	ldr	r3, [pc, #204]	; (8008564 <RadioSetRxConfig+0x300>)
 8008498:	781a      	ldrb	r2, [r3, #0]
 800849a:	4b31      	ldr	r3, [pc, #196]	; (8008560 <RadioSetRxConfig+0x2fc>)
 800849c:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 800849e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d003      	beq.n	80084ae <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80084a6:	4b2e      	ldr	r3, [pc, #184]	; (8008560 <RadioSetRxConfig+0x2fc>)
 80084a8:	22f2      	movs	r2, #242	; 0xf2
 80084aa:	75da      	strb	r2, [r3, #23]
 80084ac:	e002      	b.n	80084b4 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80084ae:	4b2c      	ldr	r3, [pc, #176]	; (8008560 <RadioSetRxConfig+0x2fc>)
 80084b0:	2201      	movs	r2, #1
 80084b2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80084b4:	4b2a      	ldr	r3, [pc, #168]	; (8008560 <RadioSetRxConfig+0x2fc>)
 80084b6:	2201      	movs	r2, #1
 80084b8:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80084ba:	f000 fc60 	bl	8008d7e <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80084be:	2000      	movs	r0, #0
 80084c0:	f7ff fdfc 	bl	80080bc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80084c4:	4828      	ldr	r0, [pc, #160]	; (8008568 <RadioSetRxConfig+0x304>)
 80084c6:	f002 fa1f 	bl	800a908 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80084ca:	4828      	ldr	r0, [pc, #160]	; (800856c <RadioSetRxConfig+0x308>)
 80084cc:	f002 faee 	bl	800aaac <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80084d0:	4a28      	ldr	r2, [pc, #160]	; (8008574 <RadioSetRxConfig+0x310>)
 80084d2:	f107 0314 	add.w	r3, r7, #20
 80084d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80084da:	e883 0003 	stmia.w	r3, {r0, r1}
 80084de:	f107 0314 	add.w	r3, r7, #20
 80084e2:	4618      	mov	r0, r3
 80084e4:	f001 fdab 	bl	800a03e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80084e8:	f240 10ff 	movw	r0, #511	; 0x1ff
 80084ec:	f001 fdf6 	bl	800a0dc <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80084f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80084f2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80084f6:	fb02 f303 	mul.w	r3, r2, r3
 80084fa:	461a      	mov	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008502:	4a17      	ldr	r2, [pc, #92]	; (8008560 <RadioSetRxConfig+0x2fc>)
 8008504:	6093      	str	r3, [r2, #8]
            break;
 8008506:	e0ad      	b.n	8008664 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8008508:	2000      	movs	r0, #0
 800850a:	f001 ff5f 	bl	800a3cc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800850e:	4b14      	ldr	r3, [pc, #80]	; (8008560 <RadioSetRxConfig+0x2fc>)
 8008510:	2201      	movs	r2, #1
 8008512:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	b2da      	uxtb	r2, r3
 800851a:	4b11      	ldr	r3, [pc, #68]	; (8008560 <RadioSetRxConfig+0x2fc>)
 800851c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8008520:	4a15      	ldr	r2, [pc, #84]	; (8008578 <RadioSetRxConfig+0x314>)
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	4413      	add	r3, r2
 8008526:	781a      	ldrb	r2, [r3, #0]
 8008528:	4b0d      	ldr	r3, [pc, #52]	; (8008560 <RadioSetRxConfig+0x2fc>)
 800852a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800852e:	4a0c      	ldr	r2, [pc, #48]	; (8008560 <RadioSetRxConfig+0x2fc>)
 8008530:	7bbb      	ldrb	r3, [r7, #14]
 8008532:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d105      	bne.n	8008548 <RadioSetRxConfig+0x2e4>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2b0b      	cmp	r3, #11
 8008540:	d008      	beq.n	8008554 <RadioSetRxConfig+0x2f0>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2b0c      	cmp	r3, #12
 8008546:	d005      	beq.n	8008554 <RadioSetRxConfig+0x2f0>
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	2b01      	cmp	r3, #1
 800854c:	d116      	bne.n	800857c <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2b0c      	cmp	r3, #12
 8008552:	d113      	bne.n	800857c <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8008554:	4b02      	ldr	r3, [pc, #8]	; (8008560 <RadioSetRxConfig+0x2fc>)
 8008556:	2201      	movs	r2, #1
 8008558:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800855c:	e012      	b.n	8008584 <RadioSetRxConfig+0x320>
 800855e:	bf00      	nop
 8008560:	20000964 	.word	0x20000964
 8008564:	20000015 	.word	0x20000015
 8008568:	2000099c 	.word	0x2000099c
 800856c:	20000972 	.word	0x20000972
 8008570:	0800cdb4 	.word	0x0800cdb4
 8008574:	0800cdbc 	.word	0x0800cdbc
 8008578:	0800cf58 	.word	0x0800cf58
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800857c:	4b3b      	ldr	r3, [pc, #236]	; (800866c <RadioSetRxConfig+0x408>)
 800857e:	2200      	movs	r2, #0
 8008580:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008584:	4b39      	ldr	r3, [pc, #228]	; (800866c <RadioSetRxConfig+0x408>)
 8008586:	2201      	movs	r2, #1
 8008588:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800858a:	4b38      	ldr	r3, [pc, #224]	; (800866c <RadioSetRxConfig+0x408>)
 800858c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008590:	2b05      	cmp	r3, #5
 8008592:	d004      	beq.n	800859e <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8008594:	4b35      	ldr	r3, [pc, #212]	; (800866c <RadioSetRxConfig+0x408>)
 8008596:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800859a:	2b06      	cmp	r3, #6
 800859c:	d10a      	bne.n	80085b4 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 800859e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80085a0:	2b0b      	cmp	r3, #11
 80085a2:	d803      	bhi.n	80085ac <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80085a4:	4b31      	ldr	r3, [pc, #196]	; (800866c <RadioSetRxConfig+0x408>)
 80085a6:	220c      	movs	r2, #12
 80085a8:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80085aa:	e006      	b.n	80085ba <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80085ac:	4a2f      	ldr	r2, [pc, #188]	; (800866c <RadioSetRxConfig+0x408>)
 80085ae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80085b0:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80085b2:	e002      	b.n	80085ba <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80085b4:	4a2d      	ldr	r2, [pc, #180]	; (800866c <RadioSetRxConfig+0x408>)
 80085b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80085b8:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80085ba:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80085be:	4b2b      	ldr	r3, [pc, #172]	; (800866c <RadioSetRxConfig+0x408>)
 80085c0:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80085c2:	4b2b      	ldr	r3, [pc, #172]	; (8008670 <RadioSetRxConfig+0x40c>)
 80085c4:	781a      	ldrb	r2, [r3, #0]
 80085c6:	4b29      	ldr	r3, [pc, #164]	; (800866c <RadioSetRxConfig+0x408>)
 80085c8:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80085ca:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80085ce:	4b27      	ldr	r3, [pc, #156]	; (800866c <RadioSetRxConfig+0x408>)
 80085d0:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80085d4:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80085d8:	4b24      	ldr	r3, [pc, #144]	; (800866c <RadioSetRxConfig+0x408>)
 80085da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80085de:	f000 fbce 	bl	8008d7e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80085e2:	2001      	movs	r0, #1
 80085e4:	f7ff fd6a 	bl	80080bc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80085e8:	4822      	ldr	r0, [pc, #136]	; (8008674 <RadioSetRxConfig+0x410>)
 80085ea:	f002 f98d 	bl	800a908 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80085ee:	4822      	ldr	r0, [pc, #136]	; (8008678 <RadioSetRxConfig+0x414>)
 80085f0:	f002 fa5c 	bl	800aaac <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80085f4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	4618      	mov	r0, r3
 80085fa:	f001 fef6 	bl	800a3ea <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 80085fe:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8008602:	f002 fbaf 	bl	800ad64 <SUBGRF_ReadRegister>
 8008606:	4603      	mov	r3, r0
 8008608:	f003 0301 	and.w	r3, r3, #1
 800860c:	b2db      	uxtb	r3, r3
 800860e:	4619      	mov	r1, r3
 8008610:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8008614:	f002 fb92 	bl	800ad3c <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8008618:	4b14      	ldr	r3, [pc, #80]	; (800866c <RadioSetRxConfig+0x408>)
 800861a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800861e:	2b01      	cmp	r3, #1
 8008620:	d10d      	bne.n	800863e <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8008622:	f240 7036 	movw	r0, #1846	; 0x736
 8008626:	f002 fb9d 	bl	800ad64 <SUBGRF_ReadRegister>
 800862a:	4603      	mov	r3, r0
 800862c:	f023 0304 	bic.w	r3, r3, #4
 8008630:	b2db      	uxtb	r3, r3
 8008632:	4619      	mov	r1, r3
 8008634:	f240 7036 	movw	r0, #1846	; 0x736
 8008638:	f002 fb80 	bl	800ad3c <SUBGRF_WriteRegister>
 800863c:	e00c      	b.n	8008658 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800863e:	f240 7036 	movw	r0, #1846	; 0x736
 8008642:	f002 fb8f 	bl	800ad64 <SUBGRF_ReadRegister>
 8008646:	4603      	mov	r3, r0
 8008648:	f043 0304 	orr.w	r3, r3, #4
 800864c:	b2db      	uxtb	r3, r3
 800864e:	4619      	mov	r1, r3
 8008650:	f240 7036 	movw	r0, #1846	; 0x736
 8008654:	f002 fb72 	bl	800ad3c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8008658:	4b04      	ldr	r3, [pc, #16]	; (800866c <RadioSetRxConfig+0x408>)
 800865a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800865e:	609a      	str	r2, [r3, #8]
            break;
 8008660:	e000      	b.n	8008664 <RadioSetRxConfig+0x400>
            break;
 8008662:	bf00      	nop
    }
}
 8008664:	bf00      	nop
 8008666:	3728      	adds	r7, #40	; 0x28
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	20000964 	.word	0x20000964
 8008670:	20000015 	.word	0x20000015
 8008674:	2000099c 	.word	0x2000099c
 8008678:	20000972 	.word	0x20000972

0800867c <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b086      	sub	sp, #24
 8008680:	af00      	add	r7, sp, #0
 8008682:	60ba      	str	r2, [r7, #8]
 8008684:	607b      	str	r3, [r7, #4]
 8008686:	4603      	mov	r3, r0
 8008688:	73fb      	strb	r3, [r7, #15]
 800868a:	460b      	mov	r3, r1
 800868c:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 800868e:	f002 fe3c 	bl	800b30a <RFW_DeInit>
    switch( modem )
 8008692:	7bfb      	ldrb	r3, [r7, #15]
 8008694:	2b04      	cmp	r3, #4
 8008696:	f000 80c7 	beq.w	8008828 <RadioSetTxConfig+0x1ac>
 800869a:	2b04      	cmp	r3, #4
 800869c:	f300 80d6 	bgt.w	800884c <RadioSetTxConfig+0x1d0>
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d002      	beq.n	80086aa <RadioSetTxConfig+0x2e>
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d059      	beq.n	800875c <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80086a8:	e0d0      	b.n	800884c <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80086aa:	4b77      	ldr	r3, [pc, #476]	; (8008888 <RadioSetTxConfig+0x20c>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80086b2:	4a75      	ldr	r2, [pc, #468]	; (8008888 <RadioSetTxConfig+0x20c>)
 80086b4:	6a3b      	ldr	r3, [r7, #32]
 80086b6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80086b8:	4b73      	ldr	r3, [pc, #460]	; (8008888 <RadioSetTxConfig+0x20c>)
 80086ba:	220b      	movs	r2, #11
 80086bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f002 fd55 	bl	800b170 <SUBGRF_GetFskBandwidthRegValue>
 80086c6:	4603      	mov	r3, r0
 80086c8:	461a      	mov	r2, r3
 80086ca:	4b6f      	ldr	r3, [pc, #444]	; (8008888 <RadioSetTxConfig+0x20c>)
 80086cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80086d0:	4a6d      	ldr	r2, [pc, #436]	; (8008888 <RadioSetTxConfig+0x20c>)
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80086d6:	4b6c      	ldr	r3, [pc, #432]	; (8008888 <RadioSetTxConfig+0x20c>)
 80086d8:	2200      	movs	r2, #0
 80086da:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80086dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086de:	00db      	lsls	r3, r3, #3
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	4b69      	ldr	r3, [pc, #420]	; (8008888 <RadioSetTxConfig+0x20c>)
 80086e4:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80086e6:	4b68      	ldr	r3, [pc, #416]	; (8008888 <RadioSetTxConfig+0x20c>)
 80086e8:	2204      	movs	r2, #4
 80086ea:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80086ec:	4b66      	ldr	r3, [pc, #408]	; (8008888 <RadioSetTxConfig+0x20c>)
 80086ee:	2218      	movs	r2, #24
 80086f0:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80086f2:	4b65      	ldr	r3, [pc, #404]	; (8008888 <RadioSetTxConfig+0x20c>)
 80086f4:	2200      	movs	r2, #0
 80086f6:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80086f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80086fc:	f083 0301 	eor.w	r3, r3, #1
 8008700:	b2db      	uxtb	r3, r3
 8008702:	461a      	mov	r2, r3
 8008704:	4b60      	ldr	r3, [pc, #384]	; (8008888 <RadioSetTxConfig+0x20c>)
 8008706:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8008708:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800870c:	2b00      	cmp	r3, #0
 800870e:	d003      	beq.n	8008718 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8008710:	4b5d      	ldr	r3, [pc, #372]	; (8008888 <RadioSetTxConfig+0x20c>)
 8008712:	22f2      	movs	r2, #242	; 0xf2
 8008714:	75da      	strb	r2, [r3, #23]
 8008716:	e002      	b.n	800871e <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8008718:	4b5b      	ldr	r3, [pc, #364]	; (8008888 <RadioSetTxConfig+0x20c>)
 800871a:	2201      	movs	r2, #1
 800871c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800871e:	4b5a      	ldr	r3, [pc, #360]	; (8008888 <RadioSetTxConfig+0x20c>)
 8008720:	2201      	movs	r2, #1
 8008722:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8008724:	f000 fb2b 	bl	8008d7e <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8008728:	2000      	movs	r0, #0
 800872a:	f7ff fcc7 	bl	80080bc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800872e:	4857      	ldr	r0, [pc, #348]	; (800888c <RadioSetTxConfig+0x210>)
 8008730:	f002 f8ea 	bl	800a908 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008734:	4856      	ldr	r0, [pc, #344]	; (8008890 <RadioSetTxConfig+0x214>)
 8008736:	f002 f9b9 	bl	800aaac <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800873a:	4a56      	ldr	r2, [pc, #344]	; (8008894 <RadioSetTxConfig+0x218>)
 800873c:	f107 0310 	add.w	r3, r7, #16
 8008740:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008744:	e883 0003 	stmia.w	r3, {r0, r1}
 8008748:	f107 0310 	add.w	r3, r7, #16
 800874c:	4618      	mov	r0, r3
 800874e:	f001 fc76 	bl	800a03e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8008752:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008756:	f001 fcc1 	bl	800a0dc <SUBGRF_SetWhiteningSeed>
            break;
 800875a:	e078      	b.n	800884e <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800875c:	4b4a      	ldr	r3, [pc, #296]	; (8008888 <RadioSetTxConfig+0x20c>)
 800875e:	2201      	movs	r2, #1
 8008760:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8008764:	6a3b      	ldr	r3, [r7, #32]
 8008766:	b2da      	uxtb	r2, r3
 8008768:	4b47      	ldr	r3, [pc, #284]	; (8008888 <RadioSetTxConfig+0x20c>)
 800876a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800876e:	4a4a      	ldr	r2, [pc, #296]	; (8008898 <RadioSetTxConfig+0x21c>)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4413      	add	r3, r2
 8008774:	781a      	ldrb	r2, [r3, #0]
 8008776:	4b44      	ldr	r3, [pc, #272]	; (8008888 <RadioSetTxConfig+0x20c>)
 8008778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800877c:	4a42      	ldr	r2, [pc, #264]	; (8008888 <RadioSetTxConfig+0x20c>)
 800877e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008782:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d105      	bne.n	8008798 <RadioSetTxConfig+0x11c>
 800878c:	6a3b      	ldr	r3, [r7, #32]
 800878e:	2b0b      	cmp	r3, #11
 8008790:	d008      	beq.n	80087a4 <RadioSetTxConfig+0x128>
 8008792:	6a3b      	ldr	r3, [r7, #32]
 8008794:	2b0c      	cmp	r3, #12
 8008796:	d005      	beq.n	80087a4 <RadioSetTxConfig+0x128>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d107      	bne.n	80087ae <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800879e:	6a3b      	ldr	r3, [r7, #32]
 80087a0:	2b0c      	cmp	r3, #12
 80087a2:	d104      	bne.n	80087ae <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80087a4:	4b38      	ldr	r3, [pc, #224]	; (8008888 <RadioSetTxConfig+0x20c>)
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80087ac:	e003      	b.n	80087b6 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80087ae:	4b36      	ldr	r3, [pc, #216]	; (8008888 <RadioSetTxConfig+0x20c>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80087b6:	4b34      	ldr	r3, [pc, #208]	; (8008888 <RadioSetTxConfig+0x20c>)
 80087b8:	2201      	movs	r2, #1
 80087ba:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80087bc:	4b32      	ldr	r3, [pc, #200]	; (8008888 <RadioSetTxConfig+0x20c>)
 80087be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80087c2:	2b05      	cmp	r3, #5
 80087c4:	d004      	beq.n	80087d0 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80087c6:	4b30      	ldr	r3, [pc, #192]	; (8008888 <RadioSetTxConfig+0x20c>)
 80087c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80087cc:	2b06      	cmp	r3, #6
 80087ce:	d10a      	bne.n	80087e6 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 80087d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087d2:	2b0b      	cmp	r3, #11
 80087d4:	d803      	bhi.n	80087de <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80087d6:	4b2c      	ldr	r3, [pc, #176]	; (8008888 <RadioSetTxConfig+0x20c>)
 80087d8:	220c      	movs	r2, #12
 80087da:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80087dc:	e006      	b.n	80087ec <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80087de:	4a2a      	ldr	r2, [pc, #168]	; (8008888 <RadioSetTxConfig+0x20c>)
 80087e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087e2:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80087e4:	e002      	b.n	80087ec <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80087e6:	4a28      	ldr	r2, [pc, #160]	; (8008888 <RadioSetTxConfig+0x20c>)
 80087e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087ea:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80087ec:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80087f0:	4b25      	ldr	r3, [pc, #148]	; (8008888 <RadioSetTxConfig+0x20c>)
 80087f2:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80087f4:	4b29      	ldr	r3, [pc, #164]	; (800889c <RadioSetTxConfig+0x220>)
 80087f6:	781a      	ldrb	r2, [r3, #0]
 80087f8:	4b23      	ldr	r3, [pc, #140]	; (8008888 <RadioSetTxConfig+0x20c>)
 80087fa:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80087fc:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8008800:	4b21      	ldr	r3, [pc, #132]	; (8008888 <RadioSetTxConfig+0x20c>)
 8008802:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8008806:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800880a:	4b1f      	ldr	r3, [pc, #124]	; (8008888 <RadioSetTxConfig+0x20c>)
 800880c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8008810:	f000 fab5 	bl	8008d7e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8008814:	2001      	movs	r0, #1
 8008816:	f7ff fc51 	bl	80080bc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800881a:	481c      	ldr	r0, [pc, #112]	; (800888c <RadioSetTxConfig+0x210>)
 800881c:	f002 f874 	bl	800a908 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008820:	481b      	ldr	r0, [pc, #108]	; (8008890 <RadioSetTxConfig+0x214>)
 8008822:	f002 f943 	bl	800aaac <SUBGRF_SetPacketParams>
            break;
 8008826:	e012      	b.n	800884e <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8008828:	2004      	movs	r0, #4
 800882a:	f7ff fc47 	bl	80080bc <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800882e:	4b16      	ldr	r3, [pc, #88]	; (8008888 <RadioSetTxConfig+0x20c>)
 8008830:	2202      	movs	r2, #2
 8008832:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8008836:	4a14      	ldr	r2, [pc, #80]	; (8008888 <RadioSetTxConfig+0x20c>)
 8008838:	6a3b      	ldr	r3, [r7, #32]
 800883a:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800883c:	4b12      	ldr	r3, [pc, #72]	; (8008888 <RadioSetTxConfig+0x20c>)
 800883e:	2216      	movs	r2, #22
 8008840:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008844:	4811      	ldr	r0, [pc, #68]	; (800888c <RadioSetTxConfig+0x210>)
 8008846:	f002 f85f 	bl	800a908 <SUBGRF_SetModulationParams>
            break;
 800884a:	e000      	b.n	800884e <RadioSetTxConfig+0x1d2>
            break;
 800884c:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800884e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008852:	4618      	mov	r0, r3
 8008854:	f002 fb8e 	bl	800af74 <SUBGRF_SetRfTxPower>
 8008858:	4603      	mov	r3, r0
 800885a:	461a      	mov	r2, r3
 800885c:	4b0a      	ldr	r3, [pc, #40]	; (8008888 <RadioSetTxConfig+0x20c>)
 800885e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008862:	210e      	movs	r1, #14
 8008864:	f640 101f 	movw	r0, #2335	; 0x91f
 8008868:	f002 fa68 	bl	800ad3c <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800886c:	4b06      	ldr	r3, [pc, #24]	; (8008888 <RadioSetTxConfig+0x20c>)
 800886e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008872:	4618      	mov	r0, r3
 8008874:	f002 fd5d 	bl	800b332 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8008878:	4a03      	ldr	r2, [pc, #12]	; (8008888 <RadioSetTxConfig+0x20c>)
 800887a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800887c:	6053      	str	r3, [r2, #4]
}
 800887e:	bf00      	nop
 8008880:	3718      	adds	r7, #24
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	20000964 	.word	0x20000964
 800888c:	2000099c 	.word	0x2000099c
 8008890:	20000972 	.word	0x20000972
 8008894:	0800cdbc 	.word	0x0800cdbc
 8008898:	0800cf58 	.word	0x0800cf58
 800889c:	20000015 	.word	0x20000015

080088a0 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
    return true;
 80088a8:	2301      	movs	r3, #1
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	370c      	adds	r7, #12
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bc80      	pop	{r7}
 80088b2:	4770      	bx	lr

080088b4 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	4603      	mov	r3, r0
 80088bc:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 80088be:	2300      	movs	r3, #0
 80088c0:	60fb      	str	r3, [r7, #12]

    switch( bw )
 80088c2:	79fb      	ldrb	r3, [r7, #7]
 80088c4:	2b0a      	cmp	r3, #10
 80088c6:	d83e      	bhi.n	8008946 <RadioGetLoRaBandwidthInHz+0x92>
 80088c8:	a201      	add	r2, pc, #4	; (adr r2, 80088d0 <RadioGetLoRaBandwidthInHz+0x1c>)
 80088ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ce:	bf00      	nop
 80088d0:	080088fd 	.word	0x080088fd
 80088d4:	0800890d 	.word	0x0800890d
 80088d8:	0800891d 	.word	0x0800891d
 80088dc:	0800892d 	.word	0x0800892d
 80088e0:	08008935 	.word	0x08008935
 80088e4:	0800893b 	.word	0x0800893b
 80088e8:	08008941 	.word	0x08008941
 80088ec:	08008947 	.word	0x08008947
 80088f0:	08008905 	.word	0x08008905
 80088f4:	08008915 	.word	0x08008915
 80088f8:	08008925 	.word	0x08008925
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80088fc:	f641 6384 	movw	r3, #7812	; 0x1e84
 8008900:	60fb      	str	r3, [r7, #12]
        break;
 8008902:	e020      	b.n	8008946 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8008904:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8008908:	60fb      	str	r3, [r7, #12]
        break;
 800890a:	e01c      	b.n	8008946 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 800890c:	f643 5309 	movw	r3, #15625	; 0x3d09
 8008910:	60fb      	str	r3, [r7, #12]
        break;
 8008912:	e018      	b.n	8008946 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8008914:	f245 1361 	movw	r3, #20833	; 0x5161
 8008918:	60fb      	str	r3, [r7, #12]
        break;
 800891a:	e014      	b.n	8008946 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800891c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008920:	60fb      	str	r3, [r7, #12]
        break;
 8008922:	e010      	b.n	8008946 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8008924:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8008928:	60fb      	str	r3, [r7, #12]
        break;
 800892a:	e00c      	b.n	8008946 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 800892c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008930:	60fb      	str	r3, [r7, #12]
        break;
 8008932:	e008      	b.n	8008946 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8008934:	4b07      	ldr	r3, [pc, #28]	; (8008954 <RadioGetLoRaBandwidthInHz+0xa0>)
 8008936:	60fb      	str	r3, [r7, #12]
        break;
 8008938:	e005      	b.n	8008946 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800893a:	4b07      	ldr	r3, [pc, #28]	; (8008958 <RadioGetLoRaBandwidthInHz+0xa4>)
 800893c:	60fb      	str	r3, [r7, #12]
        break;
 800893e:	e002      	b.n	8008946 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8008940:	4b06      	ldr	r3, [pc, #24]	; (800895c <RadioGetLoRaBandwidthInHz+0xa8>)
 8008942:	60fb      	str	r3, [r7, #12]
        break;
 8008944:	bf00      	nop
    }

    return bandwidthInHz;
 8008946:	68fb      	ldr	r3, [r7, #12]
}
 8008948:	4618      	mov	r0, r3
 800894a:	3714      	adds	r7, #20
 800894c:	46bd      	mov	sp, r7
 800894e:	bc80      	pop	{r7}
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop
 8008954:	0001e848 	.word	0x0001e848
 8008958:	0003d090 	.word	0x0003d090
 800895c:	0007a120 	.word	0x0007a120

08008960 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	4608      	mov	r0, r1
 800896a:	4611      	mov	r1, r2
 800896c:	461a      	mov	r2, r3
 800896e:	4603      	mov	r3, r0
 8008970:	70fb      	strb	r3, [r7, #3]
 8008972:	460b      	mov	r3, r1
 8008974:	803b      	strh	r3, [r7, #0]
 8008976:	4613      	mov	r3, r2
 8008978:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 800897a:	883b      	ldrh	r3, [r7, #0]
 800897c:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800897e:	78ba      	ldrb	r2, [r7, #2]
 8008980:	f082 0201 	eor.w	r2, r2, #1
 8008984:	b2d2      	uxtb	r2, r2
 8008986:	2a00      	cmp	r2, #0
 8008988:	d001      	beq.n	800898e <RadioGetGfskTimeOnAirNumerator+0x2e>
 800898a:	2208      	movs	r2, #8
 800898c:	e000      	b.n	8008990 <RadioGetGfskTimeOnAirNumerator+0x30>
 800898e:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8008990:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008992:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8008996:	7c3b      	ldrb	r3, [r7, #16]
 8008998:	7d39      	ldrb	r1, [r7, #20]
 800899a:	2900      	cmp	r1, #0
 800899c:	d001      	beq.n	80089a2 <RadioGetGfskTimeOnAirNumerator+0x42>
 800899e:	2102      	movs	r1, #2
 80089a0:	e000      	b.n	80089a4 <RadioGetGfskTimeOnAirNumerator+0x44>
 80089a2:	2100      	movs	r1, #0
 80089a4:	440b      	add	r3, r1
 80089a6:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80089a8:	4413      	add	r3, r2
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	370c      	adds	r7, #12
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bc80      	pop	{r7}
 80089b2:	4770      	bx	lr

080089b4 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80089b4:	b480      	push	{r7}
 80089b6:	b08b      	sub	sp, #44	; 0x2c
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	4611      	mov	r1, r2
 80089c0:	461a      	mov	r2, r3
 80089c2:	460b      	mov	r3, r1
 80089c4:	71fb      	strb	r3, [r7, #7]
 80089c6:	4613      	mov	r3, r2
 80089c8:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 80089ca:	79fb      	ldrb	r3, [r7, #7]
 80089cc:	3304      	adds	r3, #4
 80089ce:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80089d0:	2300      	movs	r3, #0
 80089d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	2b05      	cmp	r3, #5
 80089da:	d002      	beq.n	80089e2 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	2b06      	cmp	r3, #6
 80089e0:	d104      	bne.n	80089ec <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80089e2:	88bb      	ldrh	r3, [r7, #4]
 80089e4:	2b0b      	cmp	r3, #11
 80089e6:	d801      	bhi.n	80089ec <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80089e8:	230c      	movs	r3, #12
 80089ea:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d105      	bne.n	80089fe <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	2b0b      	cmp	r3, #11
 80089f6:	d008      	beq.n	8008a0a <RadioGetLoRaTimeOnAirNumerator+0x56>
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	2b0c      	cmp	r3, #12
 80089fc:	d005      	beq.n	8008a0a <RadioGetLoRaTimeOnAirNumerator+0x56>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d105      	bne.n	8008a10 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	2b0c      	cmp	r3, #12
 8008a08:	d102      	bne.n	8008a10 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008a10:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008a14:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8008a16:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008a1a:	2a00      	cmp	r2, #0
 8008a1c:	d001      	beq.n	8008a22 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8008a1e:	2210      	movs	r2, #16
 8008a20:	e000      	b.n	8008a24 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8008a22:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008a24:	4413      	add	r3, r2
 8008a26:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8008a2c:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8008a2e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8008a32:	2a00      	cmp	r2, #0
 8008a34:	d001      	beq.n	8008a3a <RadioGetLoRaTimeOnAirNumerator+0x86>
 8008a36:	2200      	movs	r2, #0
 8008a38:	e000      	b.n	8008a3c <RadioGetLoRaTimeOnAirNumerator+0x88>
 8008a3a:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8008a3c:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008a3e:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	2b06      	cmp	r3, #6
 8008a44:	d803      	bhi.n	8008a4e <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	623b      	str	r3, [r7, #32]
 8008a4c:	e00e      	b.n	8008a6c <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	3308      	adds	r3, #8
 8008a52:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8008a54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d004      	beq.n	8008a66 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	3b02      	subs	r3, #2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	623b      	str	r3, [r7, #32]
 8008a64:	e002      	b.n	8008a6c <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	da01      	bge.n	8008a76 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8008a72:	2300      	movs	r3, #0
 8008a74:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8008a76:	69fa      	ldr	r2, [r7, #28]
 8008a78:	6a3b      	ldr	r3, [r7, #32]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	1e5a      	subs	r2, r3, #1
 8008a7e:	6a3b      	ldr	r3, [r7, #32]
 8008a80:	fb92 f3f3 	sdiv	r3, r2, r3
 8008a84:	697a      	ldr	r2, [r7, #20]
 8008a86:	fb03 f202 	mul.w	r2, r3, r2
 8008a8a:	88bb      	ldrh	r3, [r7, #4]
 8008a8c:	4413      	add	r3, r2
    int32_t intermediate =
 8008a8e:	330c      	adds	r3, #12
 8008a90:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	2b06      	cmp	r3, #6
 8008a96:	d802      	bhi.n	8008a9e <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	3302      	adds	r3, #2
 8008a9c:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	1c5a      	adds	r2, r3, #1
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	3b02      	subs	r3, #2
 8008aa8:	fa02 f303 	lsl.w	r3, r2, r3
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	372c      	adds	r7, #44	; 0x2c
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bc80      	pop	{r7}
 8008ab4:	4770      	bx	lr
	...

08008ab8 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b08a      	sub	sp, #40	; 0x28
 8008abc:	af04      	add	r7, sp, #16
 8008abe:	60b9      	str	r1, [r7, #8]
 8008ac0:	607a      	str	r2, [r7, #4]
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	73fb      	strb	r3, [r7, #15]
 8008ac8:	4613      	mov	r3, r2
 8008aca:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8008acc:	2300      	movs	r3, #0
 8008ace:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	613b      	str	r3, [r7, #16]

    switch( modem )
 8008ad4:	7bfb      	ldrb	r3, [r7, #15]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d002      	beq.n	8008ae0 <RadioTimeOnAir+0x28>
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d017      	beq.n	8008b0e <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8008ade:	e035      	b.n	8008b4c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8008ae0:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8008ae4:	8c3a      	ldrh	r2, [r7, #32]
 8008ae6:	7bb9      	ldrb	r1, [r7, #14]
 8008ae8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008aec:	9301      	str	r3, [sp, #4]
 8008aee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008af2:	9300      	str	r3, [sp, #0]
 8008af4:	4603      	mov	r3, r0
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f7ff ff32 	bl	8008960 <RadioGetGfskTimeOnAirNumerator>
 8008afc:	4603      	mov	r3, r0
 8008afe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008b02:	fb02 f303 	mul.w	r3, r2, r3
 8008b06:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	613b      	str	r3, [r7, #16]
        break;
 8008b0c:	e01e      	b.n	8008b4c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8008b0e:	8c39      	ldrh	r1, [r7, #32]
 8008b10:	7bba      	ldrb	r2, [r7, #14]
 8008b12:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008b16:	9302      	str	r3, [sp, #8]
 8008b18:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008b1c:	9301      	str	r3, [sp, #4]
 8008b1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008b22:	9300      	str	r3, [sp, #0]
 8008b24:	460b      	mov	r3, r1
 8008b26:	6879      	ldr	r1, [r7, #4]
 8008b28:	68b8      	ldr	r0, [r7, #8]
 8008b2a:	f7ff ff43 	bl	80089b4 <RadioGetLoRaTimeOnAirNumerator>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008b34:	fb02 f303 	mul.w	r3, r2, r3
 8008b38:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8008b3a:	4a0a      	ldr	r2, [pc, #40]	; (8008b64 <RadioTimeOnAir+0xac>)
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	4413      	add	r3, r2
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7ff feb6 	bl	80088b4 <RadioGetLoRaBandwidthInHz>
 8008b48:	6138      	str	r0, [r7, #16]
        break;
 8008b4a:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8008b4c:	697a      	ldr	r2, [r7, #20]
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	4413      	add	r3, r2
 8008b52:	1e5a      	subs	r2, r3, #1
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3718      	adds	r7, #24
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	0800cf58 	.word	0x0800cf58

08008b68 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	460b      	mov	r3, r1
 8008b72:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8008b74:	2300      	movs	r3, #0
 8008b76:	2200      	movs	r2, #0
 8008b78:	f240 2101 	movw	r1, #513	; 0x201
 8008b7c:	f240 2001 	movw	r0, #513	; 0x201
 8008b80:	f001 fd2c 	bl	800a5dc <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8008b84:	4b70      	ldr	r3, [pc, #448]	; (8008d48 <RadioSend+0x1e0>)
 8008b86:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008b8a:	2101      	movs	r1, #1
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f002 f9c9 	bl	800af24 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8008b92:	4b6d      	ldr	r3, [pc, #436]	; (8008d48 <RadioSend+0x1e0>)
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d112      	bne.n	8008bc0 <RadioSend+0x58>
 8008b9a:	4b6b      	ldr	r3, [pc, #428]	; (8008d48 <RadioSend+0x1e0>)
 8008b9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ba0:	2b06      	cmp	r3, #6
 8008ba2:	d10d      	bne.n	8008bc0 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8008ba4:	f640 0089 	movw	r0, #2185	; 0x889
 8008ba8:	f002 f8dc 	bl	800ad64 <SUBGRF_ReadRegister>
 8008bac:	4603      	mov	r3, r0
 8008bae:	f023 0304 	bic.w	r3, r3, #4
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	f640 0089 	movw	r0, #2185	; 0x889
 8008bba:	f002 f8bf 	bl	800ad3c <SUBGRF_WriteRegister>
 8008bbe:	e00c      	b.n	8008bda <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8008bc0:	f640 0089 	movw	r0, #2185	; 0x889
 8008bc4:	f002 f8ce 	bl	800ad64 <SUBGRF_ReadRegister>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	f043 0304 	orr.w	r3, r3, #4
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	f640 0089 	movw	r0, #2185	; 0x889
 8008bd6:	f002 f8b1 	bl	800ad3c <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8008bda:	4b5b      	ldr	r3, [pc, #364]	; (8008d48 <RadioSend+0x1e0>)
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	2b04      	cmp	r3, #4
 8008be0:	f200 80a2 	bhi.w	8008d28 <RadioSend+0x1c0>
 8008be4:	a201      	add	r2, pc, #4	; (adr r2, 8008bec <RadioSend+0x84>)
 8008be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bea:	bf00      	nop
 8008bec:	08008c1b 	.word	0x08008c1b
 8008bf0:	08008c01 	.word	0x08008c01
 8008bf4:	08008c1b 	.word	0x08008c1b
 8008bf8:	08008c71 	.word	0x08008c71
 8008bfc:	08008c91 	.word	0x08008c91
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8008c00:	4a51      	ldr	r2, [pc, #324]	; (8008d48 <RadioSend+0x1e0>)
 8008c02:	78fb      	ldrb	r3, [r7, #3]
 8008c04:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008c06:	4851      	ldr	r0, [pc, #324]	; (8008d4c <RadioSend+0x1e4>)
 8008c08:	f001 ff50 	bl	800aaac <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8008c0c:	78fb      	ldrb	r3, [r7, #3]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	4619      	mov	r1, r3
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f001 fa00 	bl	800a018 <SUBGRF_SendPayload>
            break;
 8008c18:	e087      	b.n	8008d2a <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8008c1a:	f002 fb7c 	bl	800b316 <RFW_Is_Init>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d118      	bne.n	8008c56 <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8008c24:	f107 020d 	add.w	r2, r7, #13
 8008c28:	78fb      	ldrb	r3, [r7, #3]
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f002 fb8a 	bl	800b346 <RFW_TransmitInit>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10c      	bne.n	8008c52 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8008c38:	7b7a      	ldrb	r2, [r7, #13]
 8008c3a:	4b43      	ldr	r3, [pc, #268]	; (8008d48 <RadioSend+0x1e0>)
 8008c3c:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008c3e:	4843      	ldr	r0, [pc, #268]	; (8008d4c <RadioSend+0x1e4>)
 8008c40:	f001 ff34 	bl	800aaac <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8008c44:	7b7b      	ldrb	r3, [r7, #13]
 8008c46:	2200      	movs	r2, #0
 8008c48:	4619      	mov	r1, r3
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f001 f9e4 	bl	800a018 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8008c50:	e06b      	b.n	8008d2a <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 8008c52:	2303      	movs	r3, #3
 8008c54:	e073      	b.n	8008d3e <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8008c56:	4a3c      	ldr	r2, [pc, #240]	; (8008d48 <RadioSend+0x1e0>)
 8008c58:	78fb      	ldrb	r3, [r7, #3]
 8008c5a:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008c5c:	483b      	ldr	r0, [pc, #236]	; (8008d4c <RadioSend+0x1e4>)
 8008c5e:	f001 ff25 	bl	800aaac <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8008c62:	78fb      	ldrb	r3, [r7, #3]
 8008c64:	2200      	movs	r2, #0
 8008c66:	4619      	mov	r1, r3
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f001 f9d5 	bl	800a018 <SUBGRF_SendPayload>
            break;
 8008c6e:	e05c      	b.n	8008d2a <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8008c70:	4b35      	ldr	r3, [pc, #212]	; (8008d48 <RadioSend+0x1e0>)
 8008c72:	2202      	movs	r2, #2
 8008c74:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8008c76:	4a34      	ldr	r2, [pc, #208]	; (8008d48 <RadioSend+0x1e0>)
 8008c78:	78fb      	ldrb	r3, [r7, #3]
 8008c7a:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008c7c:	4833      	ldr	r0, [pc, #204]	; (8008d4c <RadioSend+0x1e4>)
 8008c7e:	f001 ff15 	bl	800aaac <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8008c82:	78fb      	ldrb	r3, [r7, #3]
 8008c84:	2200      	movs	r2, #0
 8008c86:	4619      	mov	r1, r3
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f001 f9c5 	bl	800a018 <SUBGRF_SendPayload>
            break;
 8008c8e:	e04c      	b.n	8008d2a <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8008c90:	78fb      	ldrb	r3, [r7, #3]
 8008c92:	461a      	mov	r2, r3
 8008c94:	6879      	ldr	r1, [r7, #4]
 8008c96:	482e      	ldr	r0, [pc, #184]	; (8008d50 <RadioSend+0x1e8>)
 8008c98:	f000 fc98 	bl	80095cc <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8008c9c:	4b2a      	ldr	r3, [pc, #168]	; (8008d48 <RadioSend+0x1e0>)
 8008c9e:	2202      	movs	r2, #2
 8008ca0:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8008ca2:	78fb      	ldrb	r3, [r7, #3]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	b2da      	uxtb	r2, r3
 8008ca8:	4b27      	ldr	r3, [pc, #156]	; (8008d48 <RadioSend+0x1e0>)
 8008caa:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008cac:	4827      	ldr	r0, [pc, #156]	; (8008d4c <RadioSend+0x1e4>)
 8008cae:	f001 fefd 	bl	800aaac <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	20f1      	movs	r0, #241	; 0xf1
 8008cb6:	f000 f964 	bl	8008f82 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8008cba:	2100      	movs	r1, #0
 8008cbc:	20f0      	movs	r0, #240	; 0xf0
 8008cbe:	f000 f960 	bl	8008f82 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8008cc2:	4b21      	ldr	r3, [pc, #132]	; (8008d48 <RadioSend+0x1e0>)
 8008cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cc6:	2b64      	cmp	r3, #100	; 0x64
 8008cc8:	d108      	bne.n	8008cdc <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8008cca:	2170      	movs	r1, #112	; 0x70
 8008ccc:	20f3      	movs	r0, #243	; 0xf3
 8008cce:	f000 f958 	bl	8008f82 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8008cd2:	211d      	movs	r1, #29
 8008cd4:	20f2      	movs	r0, #242	; 0xf2
 8008cd6:	f000 f954 	bl	8008f82 <RadioWrite>
 8008cda:	e007      	b.n	8008cec <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8008cdc:	21e1      	movs	r1, #225	; 0xe1
 8008cde:	20f3      	movs	r0, #243	; 0xf3
 8008ce0:	f000 f94f 	bl	8008f82 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8008ce4:	2104      	movs	r1, #4
 8008ce6:	20f2      	movs	r0, #242	; 0xf2
 8008ce8:	f000 f94b 	bl	8008f82 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8008cec:	78fb      	ldrb	r3, [r7, #3]
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	00db      	lsls	r3, r3, #3
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	3302      	adds	r3, #2
 8008cf6:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8008cf8:	89fb      	ldrh	r3, [r7, #14]
 8008cfa:	0a1b      	lsrs	r3, r3, #8
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	4619      	mov	r1, r3
 8008d02:	20f4      	movs	r0, #244	; 0xf4
 8008d04:	f000 f93d 	bl	8008f82 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8008d08:	89fb      	ldrh	r3, [r7, #14]
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	20f5      	movs	r0, #245	; 0xf5
 8008d10:	f000 f937 	bl	8008f82 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8008d14:	78fb      	ldrb	r3, [r7, #3]
 8008d16:	3301      	adds	r3, #1
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8008d1e:	4619      	mov	r1, r3
 8008d20:	480b      	ldr	r0, [pc, #44]	; (8008d50 <RadioSend+0x1e8>)
 8008d22:	f001 f979 	bl	800a018 <SUBGRF_SendPayload>
            break;
 8008d26:	e000      	b.n	8008d2a <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8008d28:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8008d2a:	4b07      	ldr	r3, [pc, #28]	; (8008d48 <RadioSend+0x1e0>)
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	4619      	mov	r1, r3
 8008d30:	4808      	ldr	r0, [pc, #32]	; (8008d54 <RadioSend+0x1ec>)
 8008d32:	f002 fdcf 	bl	800b8d4 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8008d36:	4807      	ldr	r0, [pc, #28]	; (8008d54 <RadioSend+0x1ec>)
 8008d38:	f002 fcee 	bl	800b718 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	20000964 	.word	0x20000964
 8008d4c:	20000972 	.word	0x20000972
 8008d50:	20000860 	.word	0x20000860
 8008d54:	200009c0 	.word	0x200009c0

08008d58 <RadioSleep>:

static void RadioSleep( void )
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8008d5e:	2300      	movs	r3, #0
 8008d60:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8008d62:	793b      	ldrb	r3, [r7, #4]
 8008d64:	f043 0304 	orr.w	r3, r3, #4
 8008d68:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8008d6a:	7938      	ldrb	r0, [r7, #4]
 8008d6c:	f001 fa30 	bl	800a1d0 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8008d70:	2002      	movs	r0, #2
 8008d72:	f7f9 febf 	bl	8002af4 <HAL_Delay>
}
 8008d76:	bf00      	nop
 8008d78:	3708      	adds	r7, #8
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <RadioStandby>:

static void RadioStandby( void )
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8008d82:	2000      	movs	r0, #0
 8008d84:	f001 fa56 	bl	800a234 <SUBGRF_SetStandby>
}
 8008d88:	bf00      	nop
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8008d94:	f002 fabf 	bl	800b316 <RFW_Is_Init>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d102      	bne.n	8008da4 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8008d9e:	f002 fae2 	bl	800b366 <RFW_ReceiveInit>
 8008da2:	e007      	b.n	8008db4 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008da4:	2300      	movs	r3, #0
 8008da6:	2200      	movs	r2, #0
 8008da8:	f240 2162 	movw	r1, #610	; 0x262
 8008dac:	f240 2062 	movw	r0, #610	; 0x262
 8008db0:	f001 fc14 	bl	800a5dc <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d006      	beq.n	8008dc8 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008dba:	6879      	ldr	r1, [r7, #4]
 8008dbc:	4811      	ldr	r0, [pc, #68]	; (8008e04 <RadioRx+0x78>)
 8008dbe:	f002 fd89 	bl	800b8d4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008dc2:	4810      	ldr	r0, [pc, #64]	; (8008e04 <RadioRx+0x78>)
 8008dc4:	f002 fca8 	bl	800b718 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008dc8:	4b0f      	ldr	r3, [pc, #60]	; (8008e08 <RadioRx+0x7c>)
 8008dca:	2200      	movs	r2, #0
 8008dcc:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008dce:	4b0e      	ldr	r3, [pc, #56]	; (8008e08 <RadioRx+0x7c>)
 8008dd0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f002 f8a4 	bl	800af24 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8008ddc:	4b0a      	ldr	r3, [pc, #40]	; (8008e08 <RadioRx+0x7c>)
 8008dde:	785b      	ldrb	r3, [r3, #1]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d004      	beq.n	8008dee <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8008de4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008de8:	f001 fa60 	bl	800a2ac <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8008dec:	e005      	b.n	8008dfa <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8008dee:	4b06      	ldr	r3, [pc, #24]	; (8008e08 <RadioRx+0x7c>)
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	019b      	lsls	r3, r3, #6
 8008df4:	4618      	mov	r0, r3
 8008df6:	f001 fa59 	bl	800a2ac <SUBGRF_SetRx>
}
 8008dfa:	bf00      	nop
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	200009d8 	.word	0x200009d8
 8008e08:	20000964 	.word	0x20000964

08008e0c <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8008e14:	f002 fa7f 	bl	800b316 <RFW_Is_Init>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d102      	bne.n	8008e24 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8008e1e:	f002 faa2 	bl	800b366 <RFW_ReceiveInit>
 8008e22:	e007      	b.n	8008e34 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008e24:	2300      	movs	r3, #0
 8008e26:	2200      	movs	r2, #0
 8008e28:	f240 2162 	movw	r1, #610	; 0x262
 8008e2c:	f240 2062 	movw	r0, #610	; 0x262
 8008e30:	f001 fbd4 	bl	800a5dc <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d006      	beq.n	8008e48 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008e3a:	6879      	ldr	r1, [r7, #4]
 8008e3c:	4811      	ldr	r0, [pc, #68]	; (8008e84 <RadioRxBoosted+0x78>)
 8008e3e:	f002 fd49 	bl	800b8d4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008e42:	4810      	ldr	r0, [pc, #64]	; (8008e84 <RadioRxBoosted+0x78>)
 8008e44:	f002 fc68 	bl	800b718 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008e48:	4b0f      	ldr	r3, [pc, #60]	; (8008e88 <RadioRxBoosted+0x7c>)
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008e4e:	4b0e      	ldr	r3, [pc, #56]	; (8008e88 <RadioRxBoosted+0x7c>)
 8008e50:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008e54:	2100      	movs	r1, #0
 8008e56:	4618      	mov	r0, r3
 8008e58:	f002 f864 	bl	800af24 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8008e5c:	4b0a      	ldr	r3, [pc, #40]	; (8008e88 <RadioRxBoosted+0x7c>)
 8008e5e:	785b      	ldrb	r3, [r3, #1]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d004      	beq.n	8008e6e <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8008e64:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008e68:	f001 fa40 	bl	800a2ec <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8008e6c:	e005      	b.n	8008e7a <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8008e6e:	4b06      	ldr	r3, [pc, #24]	; (8008e88 <RadioRxBoosted+0x7c>)
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	019b      	lsls	r3, r3, #6
 8008e74:	4618      	mov	r0, r3
 8008e76:	f001 fa39 	bl	800a2ec <SUBGRF_SetRxBoosted>
}
 8008e7a:	bf00      	nop
 8008e7c:	3708      	adds	r7, #8
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	200009d8 	.word	0x200009d8
 8008e88:	20000964 	.word	0x20000964

08008e8c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	005a      	lsls	r2, r3, #1
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	4a0c      	ldr	r2, [pc, #48]	; (8008ed0 <RadioSetRxDutyCycle+0x44>)
 8008ea0:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008eaa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008eae:	f001 fb95 	bl	800a5dc <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008eb2:	4b07      	ldr	r3, [pc, #28]	; (8008ed0 <RadioSetRxDutyCycle+0x44>)
 8008eb4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008eb8:	2100      	movs	r1, #0
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f002 f832 	bl	800af24 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8008ec0:	6839      	ldr	r1, [r7, #0]
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f001 fa36 	bl	800a334 <SUBGRF_SetRxDutyCycle>
}
 8008ec8:	bf00      	nop
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	20000964 	.word	0x20000964

08008ed4 <RadioStartCad>:

static void RadioStartCad( void )
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008ed8:	4b09      	ldr	r3, [pc, #36]	; (8008f00 <RadioStartCad+0x2c>)
 8008eda:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008ede:	2100      	movs	r1, #0
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f002 f81f 	bl	800af24 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8008eee:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8008ef2:	f001 fb73 	bl	800a5dc <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8008ef6:	f001 fa49 	bl	800a38c <SUBGRF_SetCad>
}
 8008efa:	bf00      	nop
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	20000964 	.word	0x20000964

08008f04 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	70fb      	strb	r3, [r7, #3]
 8008f10:	4613      	mov	r3, r2
 8008f12:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8008f14:	883b      	ldrh	r3, [r7, #0]
 8008f16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008f1a:	fb02 f303 	mul.w	r3, r2, r3
 8008f1e:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f001 fbb7 	bl	800a694 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8008f26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f002 f822 	bl	800af74 <SUBGRF_SetRfTxPower>
 8008f30:	4603      	mov	r3, r0
 8008f32:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008f34:	210e      	movs	r1, #14
 8008f36:	f640 101f 	movw	r0, #2335	; 0x91f
 8008f3a:	f001 feff 	bl	800ad3c <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8008f3e:	7afb      	ldrb	r3, [r7, #11]
 8008f40:	2101      	movs	r1, #1
 8008f42:	4618      	mov	r0, r3
 8008f44:	f001 ffee 	bl	800af24 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8008f48:	f001 fa2e 	bl	800a3a8 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8008f4c:	68f9      	ldr	r1, [r7, #12]
 8008f4e:	4805      	ldr	r0, [pc, #20]	; (8008f64 <RadioSetTxContinuousWave+0x60>)
 8008f50:	f002 fcc0 	bl	800b8d4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8008f54:	4803      	ldr	r0, [pc, #12]	; (8008f64 <RadioSetTxContinuousWave+0x60>)
 8008f56:	f002 fbdf 	bl	800b718 <UTIL_TIMER_Start>
}
 8008f5a:	bf00      	nop
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	200009c0 	.word	0x200009c0

08008f68 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	4603      	mov	r3, r0
 8008f70:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8008f72:	f001 fe50 	bl	800ac16 <SUBGRF_GetRssiInst>
 8008f76:	4603      	mov	r3, r0
 8008f78:	b21b      	sxth	r3, r3
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3708      	adds	r7, #8
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b082      	sub	sp, #8
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	4603      	mov	r3, r0
 8008f8a:	460a      	mov	r2, r1
 8008f8c:	80fb      	strh	r3, [r7, #6]
 8008f8e:	4613      	mov	r3, r2
 8008f90:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8008f92:	797a      	ldrb	r2, [r7, #5]
 8008f94:	88fb      	ldrh	r3, [r7, #6]
 8008f96:	4611      	mov	r1, r2
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f001 fecf 	bl	800ad3c <SUBGRF_WriteRegister>
}
 8008f9e:	bf00      	nop
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b082      	sub	sp, #8
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	4603      	mov	r3, r0
 8008fae:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8008fb0:	88fb      	ldrh	r3, [r7, #6]
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f001 fed6 	bl	800ad64 <SUBGRF_ReadRegister>
 8008fb8:	4603      	mov	r3, r0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3708      	adds	r7, #8
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b082      	sub	sp, #8
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	4603      	mov	r3, r0
 8008fca:	6039      	str	r1, [r7, #0]
 8008fcc:	80fb      	strh	r3, [r7, #6]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8008fd2:	797b      	ldrb	r3, [r7, #5]
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	88fb      	ldrh	r3, [r7, #6]
 8008fd8:	6839      	ldr	r1, [r7, #0]
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f001 fed6 	bl	800ad8c <SUBGRF_WriteRegisters>
}
 8008fe0:	bf00      	nop
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	4603      	mov	r3, r0
 8008ff0:	6039      	str	r1, [r7, #0]
 8008ff2:	80fb      	strh	r3, [r7, #6]
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8008ff8:	797b      	ldrb	r3, [r7, #5]
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	88fb      	ldrh	r3, [r7, #6]
 8008ffe:	6839      	ldr	r1, [r7, #0]
 8009000:	4618      	mov	r0, r3
 8009002:	f001 fee5 	bl	800add0 <SUBGRF_ReadRegisters>
}
 8009006:	bf00      	nop
 8009008:	3708      	adds	r7, #8
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
	...

08009010 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	4603      	mov	r3, r0
 8009018:	460a      	mov	r2, r1
 800901a:	71fb      	strb	r3, [r7, #7]
 800901c:	4613      	mov	r3, r2
 800901e:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8009020:	79fb      	ldrb	r3, [r7, #7]
 8009022:	2b01      	cmp	r3, #1
 8009024:	d10a      	bne.n	800903c <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8009026:	4a0e      	ldr	r2, [pc, #56]	; (8009060 <RadioSetMaxPayloadLength+0x50>)
 8009028:	79bb      	ldrb	r3, [r7, #6]
 800902a:	7013      	strb	r3, [r2, #0]
 800902c:	4b0c      	ldr	r3, [pc, #48]	; (8009060 <RadioSetMaxPayloadLength+0x50>)
 800902e:	781a      	ldrb	r2, [r3, #0]
 8009030:	4b0c      	ldr	r3, [pc, #48]	; (8009064 <RadioSetMaxPayloadLength+0x54>)
 8009032:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009034:	480c      	ldr	r0, [pc, #48]	; (8009068 <RadioSetMaxPayloadLength+0x58>)
 8009036:	f001 fd39 	bl	800aaac <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800903a:	e00d      	b.n	8009058 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800903c:	4b09      	ldr	r3, [pc, #36]	; (8009064 <RadioSetMaxPayloadLength+0x54>)
 800903e:	7d5b      	ldrb	r3, [r3, #21]
 8009040:	2b01      	cmp	r3, #1
 8009042:	d109      	bne.n	8009058 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8009044:	4a06      	ldr	r2, [pc, #24]	; (8009060 <RadioSetMaxPayloadLength+0x50>)
 8009046:	79bb      	ldrb	r3, [r7, #6]
 8009048:	7013      	strb	r3, [r2, #0]
 800904a:	4b05      	ldr	r3, [pc, #20]	; (8009060 <RadioSetMaxPayloadLength+0x50>)
 800904c:	781a      	ldrb	r2, [r3, #0]
 800904e:	4b05      	ldr	r3, [pc, #20]	; (8009064 <RadioSetMaxPayloadLength+0x54>)
 8009050:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009052:	4805      	ldr	r0, [pc, #20]	; (8009068 <RadioSetMaxPayloadLength+0x58>)
 8009054:	f001 fd2a 	bl	800aaac <SUBGRF_SetPacketParams>
}
 8009058:	bf00      	nop
 800905a:	3708      	adds	r7, #8
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}
 8009060:	20000015 	.word	0x20000015
 8009064:	20000964 	.word	0x20000964
 8009068:	20000972 	.word	0x20000972

0800906c <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	4603      	mov	r3, r0
 8009074:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8009076:	4a13      	ldr	r2, [pc, #76]	; (80090c4 <RadioSetPublicNetwork+0x58>)
 8009078:	79fb      	ldrb	r3, [r7, #7]
 800907a:	7313      	strb	r3, [r2, #12]
 800907c:	4b11      	ldr	r3, [pc, #68]	; (80090c4 <RadioSetPublicNetwork+0x58>)
 800907e:	7b1a      	ldrb	r2, [r3, #12]
 8009080:	4b10      	ldr	r3, [pc, #64]	; (80090c4 <RadioSetPublicNetwork+0x58>)
 8009082:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8009084:	2001      	movs	r0, #1
 8009086:	f7ff f819 	bl	80080bc <RadioSetModem>
    if( enable == true )
 800908a:	79fb      	ldrb	r3, [r7, #7]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00a      	beq.n	80090a6 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8009090:	2134      	movs	r1, #52	; 0x34
 8009092:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8009096:	f001 fe51 	bl	800ad3c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800909a:	2144      	movs	r1, #68	; 0x44
 800909c:	f240 7041 	movw	r0, #1857	; 0x741
 80090a0:	f001 fe4c 	bl	800ad3c <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80090a4:	e009      	b.n	80090ba <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80090a6:	2114      	movs	r1, #20
 80090a8:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80090ac:	f001 fe46 	bl	800ad3c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80090b0:	2124      	movs	r1, #36	; 0x24
 80090b2:	f240 7041 	movw	r0, #1857	; 0x741
 80090b6:	f001 fe41 	bl	800ad3c <SUBGRF_WriteRegister>
}
 80090ba:	bf00      	nop
 80090bc:	3708      	adds	r7, #8
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	20000964 	.word	0x20000964

080090c8 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80090cc:	f001 ff86 	bl	800afdc <SUBGRF_GetRadioWakeUpTime>
 80090d0:	4603      	mov	r3, r0
 80090d2:	3303      	adds	r3, #3
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 80090e0:	f000 f80e 	bl	8009100 <RadioOnTxTimeoutProcess>
}
 80090e4:	bf00      	nop
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 80090f4:	f000 f818 	bl	8009128 <RadioOnRxTimeoutProcess>
}
 80090f8:	bf00      	nop
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8009100:	b580      	push	{r7, lr}
 8009102:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8009104:	4b07      	ldr	r3, [pc, #28]	; (8009124 <RadioOnTxTimeoutProcess+0x24>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d008      	beq.n	800911e <RadioOnTxTimeoutProcess+0x1e>
 800910c:	4b05      	ldr	r3, [pc, #20]	; (8009124 <RadioOnTxTimeoutProcess+0x24>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d003      	beq.n	800911e <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8009116:	4b03      	ldr	r3, [pc, #12]	; (8009124 <RadioOnTxTimeoutProcess+0x24>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	4798      	blx	r3
    }
}
 800911e:	bf00      	nop
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	20000960 	.word	0x20000960

08009128 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800912c:	4b07      	ldr	r3, [pc, #28]	; (800914c <RadioOnRxTimeoutProcess+0x24>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d008      	beq.n	8009146 <RadioOnRxTimeoutProcess+0x1e>
 8009134:	4b05      	ldr	r3, [pc, #20]	; (800914c <RadioOnRxTimeoutProcess+0x24>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d003      	beq.n	8009146 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 800913e:	4b03      	ldr	r3, [pc, #12]	; (800914c <RadioOnRxTimeoutProcess+0x24>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	4798      	blx	r3
    }
}
 8009146:	bf00      	nop
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	20000960 	.word	0x20000960

08009150 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	4603      	mov	r3, r0
 8009158:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 800915a:	4a05      	ldr	r2, [pc, #20]	; (8009170 <RadioOnDioIrq+0x20>)
 800915c:	88fb      	ldrh	r3, [r7, #6]
 800915e:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8009162:	f000 f807 	bl	8009174 <RadioIrqProcess>
}
 8009166:	bf00      	nop
 8009168:	3708      	adds	r7, #8
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	20000964 	.word	0x20000964

08009174 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8009174:	b5b0      	push	{r4, r5, r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800917a:	2300      	movs	r3, #0
 800917c:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 800917e:	2300      	movs	r3, #0
 8009180:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8009182:	4ba5      	ldr	r3, [pc, #660]	; (8009418 <RadioIrqProcess+0x2a4>)
 8009184:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8009188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800918c:	f000 810d 	beq.w	80093aa <RadioIrqProcess+0x236>
 8009190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009194:	f300 81c0 	bgt.w	8009518 <RadioIrqProcess+0x3a4>
 8009198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800919c:	f000 80f1 	beq.w	8009382 <RadioIrqProcess+0x20e>
 80091a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091a4:	f300 81b8 	bgt.w	8009518 <RadioIrqProcess+0x3a4>
 80091a8:	2b80      	cmp	r3, #128	; 0x80
 80091aa:	f000 80d6 	beq.w	800935a <RadioIrqProcess+0x1e6>
 80091ae:	2b80      	cmp	r3, #128	; 0x80
 80091b0:	f300 81b2 	bgt.w	8009518 <RadioIrqProcess+0x3a4>
 80091b4:	2b20      	cmp	r3, #32
 80091b6:	dc49      	bgt.n	800924c <RadioIrqProcess+0xd8>
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f340 81ad 	ble.w	8009518 <RadioIrqProcess+0x3a4>
 80091be:	3b01      	subs	r3, #1
 80091c0:	2b1f      	cmp	r3, #31
 80091c2:	f200 81a9 	bhi.w	8009518 <RadioIrqProcess+0x3a4>
 80091c6:	a201      	add	r2, pc, #4	; (adr r2, 80091cc <RadioIrqProcess+0x58>)
 80091c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091cc:	08009255 	.word	0x08009255
 80091d0:	0800928f 	.word	0x0800928f
 80091d4:	08009519 	.word	0x08009519
 80091d8:	08009435 	.word	0x08009435
 80091dc:	08009519 	.word	0x08009519
 80091e0:	08009519 	.word	0x08009519
 80091e4:	08009519 	.word	0x08009519
 80091e8:	080094a3 	.word	0x080094a3
 80091ec:	08009519 	.word	0x08009519
 80091f0:	08009519 	.word	0x08009519
 80091f4:	08009519 	.word	0x08009519
 80091f8:	08009519 	.word	0x08009519
 80091fc:	08009519 	.word	0x08009519
 8009200:	08009519 	.word	0x08009519
 8009204:	08009519 	.word	0x08009519
 8009208:	08009519 	.word	0x08009519
 800920c:	08009519 	.word	0x08009519
 8009210:	08009519 	.word	0x08009519
 8009214:	08009519 	.word	0x08009519
 8009218:	08009519 	.word	0x08009519
 800921c:	08009519 	.word	0x08009519
 8009220:	08009519 	.word	0x08009519
 8009224:	08009519 	.word	0x08009519
 8009228:	08009519 	.word	0x08009519
 800922c:	08009519 	.word	0x08009519
 8009230:	08009519 	.word	0x08009519
 8009234:	08009519 	.word	0x08009519
 8009238:	08009519 	.word	0x08009519
 800923c:	08009519 	.word	0x08009519
 8009240:	08009519 	.word	0x08009519
 8009244:	08009519 	.word	0x08009519
 8009248:	080094b3 	.word	0x080094b3
 800924c:	2b40      	cmp	r3, #64	; 0x40
 800924e:	f000 814b 	beq.w	80094e8 <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8009252:	e161      	b.n	8009518 <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 8009254:	4871      	ldr	r0, [pc, #452]	; (800941c <RadioIrqProcess+0x2a8>)
 8009256:	f002 facd 	bl	800b7f4 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800925a:	2000      	movs	r0, #0
 800925c:	f000 ffea 	bl	800a234 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8009260:	f002 f860 	bl	800b324 <RFW_Is_LongPacketModeEnabled>
 8009264:	4603      	mov	r3, r0
 8009266:	2b01      	cmp	r3, #1
 8009268:	d101      	bne.n	800926e <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 800926a:	f002 f884 	bl	800b376 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800926e:	4b6c      	ldr	r3, [pc, #432]	; (8009420 <RadioIrqProcess+0x2ac>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	f000 8152 	beq.w	800951c <RadioIrqProcess+0x3a8>
 8009278:	4b69      	ldr	r3, [pc, #420]	; (8009420 <RadioIrqProcess+0x2ac>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	f000 814c 	beq.w	800951c <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 8009284:	4b66      	ldr	r3, [pc, #408]	; (8009420 <RadioIrqProcess+0x2ac>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4798      	blx	r3
        break;
 800928c:	e146      	b.n	800951c <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 800928e:	4865      	ldr	r0, [pc, #404]	; (8009424 <RadioIrqProcess+0x2b0>)
 8009290:	f002 fab0 	bl	800b7f4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8009294:	4b60      	ldr	r3, [pc, #384]	; (8009418 <RadioIrqProcess+0x2a4>)
 8009296:	785b      	ldrb	r3, [r3, #1]
 8009298:	f083 0301 	eor.w	r3, r3, #1
 800929c:	b2db      	uxtb	r3, r3
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d014      	beq.n	80092cc <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 80092a2:	2000      	movs	r0, #0
 80092a4:	f000 ffc6 	bl	800a234 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 80092a8:	2100      	movs	r1, #0
 80092aa:	f640 1002 	movw	r0, #2306	; 0x902
 80092ae:	f001 fd45 	bl	800ad3c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 80092b2:	f640 1044 	movw	r0, #2372	; 0x944
 80092b6:	f001 fd55 	bl	800ad64 <SUBGRF_ReadRegister>
 80092ba:	4603      	mov	r3, r0
 80092bc:	f043 0302 	orr.w	r3, r3, #2
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	4619      	mov	r1, r3
 80092c4:	f640 1044 	movw	r0, #2372	; 0x944
 80092c8:	f001 fd38 	bl	800ad3c <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80092cc:	1dfb      	adds	r3, r7, #7
 80092ce:	22ff      	movs	r2, #255	; 0xff
 80092d0:	4619      	mov	r1, r3
 80092d2:	4855      	ldr	r0, [pc, #340]	; (8009428 <RadioIrqProcess+0x2b4>)
 80092d4:	f000 fe7e 	bl	8009fd4 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 80092d8:	4854      	ldr	r0, [pc, #336]	; (800942c <RadioIrqProcess+0x2b8>)
 80092da:	f001 fcdd 	bl	800ac98 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80092de:	4b50      	ldr	r3, [pc, #320]	; (8009420 <RadioIrqProcess+0x2ac>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f000 811c 	beq.w	8009520 <RadioIrqProcess+0x3ac>
 80092e8:	4b4d      	ldr	r3, [pc, #308]	; (8009420 <RadioIrqProcess+0x2ac>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	f000 8116 	beq.w	8009520 <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 80092f4:	4b48      	ldr	r3, [pc, #288]	; (8009418 <RadioIrqProcess+0x2a4>)
 80092f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d10e      	bne.n	800931c <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 80092fe:	4b48      	ldr	r3, [pc, #288]	; (8009420 <RadioIrqProcess+0x2ac>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	689c      	ldr	r4, [r3, #8]
 8009304:	79fb      	ldrb	r3, [r7, #7]
 8009306:	b299      	uxth	r1, r3
 8009308:	4b43      	ldr	r3, [pc, #268]	; (8009418 <RadioIrqProcess+0x2a4>)
 800930a:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800930e:	b21a      	sxth	r2, r3
 8009310:	4b41      	ldr	r3, [pc, #260]	; (8009418 <RadioIrqProcess+0x2a4>)
 8009312:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8009316:	4844      	ldr	r0, [pc, #272]	; (8009428 <RadioIrqProcess+0x2b4>)
 8009318:	47a0      	blx	r4
                break;
 800931a:	e01d      	b.n	8009358 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800931c:	4b3e      	ldr	r3, [pc, #248]	; (8009418 <RadioIrqProcess+0x2a4>)
 800931e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009320:	463a      	mov	r2, r7
 8009322:	4611      	mov	r1, r2
 8009324:	4618      	mov	r0, r3
 8009326:	f001 ff4b 	bl	800b1c0 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 800932a:	4b3d      	ldr	r3, [pc, #244]	; (8009420 <RadioIrqProcess+0x2ac>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	689c      	ldr	r4, [r3, #8]
 8009330:	79fb      	ldrb	r3, [r7, #7]
 8009332:	b299      	uxth	r1, r3
 8009334:	4b38      	ldr	r3, [pc, #224]	; (8009418 <RadioIrqProcess+0x2a4>)
 8009336:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800933a:	b218      	sxth	r0, r3
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009342:	4a3b      	ldr	r2, [pc, #236]	; (8009430 <RadioIrqProcess+0x2bc>)
 8009344:	fb82 5203 	smull	r5, r2, r2, r3
 8009348:	1192      	asrs	r2, r2, #6
 800934a:	17db      	asrs	r3, r3, #31
 800934c:	1ad3      	subs	r3, r2, r3
 800934e:	b25b      	sxtb	r3, r3
 8009350:	4602      	mov	r2, r0
 8009352:	4835      	ldr	r0, [pc, #212]	; (8009428 <RadioIrqProcess+0x2b4>)
 8009354:	47a0      	blx	r4
                break;
 8009356:	bf00      	nop
        break;
 8009358:	e0e2      	b.n	8009520 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 800935a:	2000      	movs	r0, #0
 800935c:	f000 ff6a 	bl	800a234 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8009360:	4b2f      	ldr	r3, [pc, #188]	; (8009420 <RadioIrqProcess+0x2ac>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	f000 80dd 	beq.w	8009524 <RadioIrqProcess+0x3b0>
 800936a:	4b2d      	ldr	r3, [pc, #180]	; (8009420 <RadioIrqProcess+0x2ac>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	699b      	ldr	r3, [r3, #24]
 8009370:	2b00      	cmp	r3, #0
 8009372:	f000 80d7 	beq.w	8009524 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 8009376:	4b2a      	ldr	r3, [pc, #168]	; (8009420 <RadioIrqProcess+0x2ac>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	699b      	ldr	r3, [r3, #24]
 800937c:	2000      	movs	r0, #0
 800937e:	4798      	blx	r3
        break;
 8009380:	e0d0      	b.n	8009524 <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 8009382:	2000      	movs	r0, #0
 8009384:	f000 ff56 	bl	800a234 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8009388:	4b25      	ldr	r3, [pc, #148]	; (8009420 <RadioIrqProcess+0x2ac>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	f000 80cb 	beq.w	8009528 <RadioIrqProcess+0x3b4>
 8009392:	4b23      	ldr	r3, [pc, #140]	; (8009420 <RadioIrqProcess+0x2ac>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	699b      	ldr	r3, [r3, #24]
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 80c5 	beq.w	8009528 <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 800939e:	4b20      	ldr	r3, [pc, #128]	; (8009420 <RadioIrqProcess+0x2ac>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	699b      	ldr	r3, [r3, #24]
 80093a4:	2001      	movs	r0, #1
 80093a6:	4798      	blx	r3
        break;
 80093a8:	e0be      	b.n	8009528 <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80093aa:	f000 fdf9 	bl	8009fa0 <SUBGRF_GetOperatingMode>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b04      	cmp	r3, #4
 80093b2:	d115      	bne.n	80093e0 <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 80093b4:	4819      	ldr	r0, [pc, #100]	; (800941c <RadioIrqProcess+0x2a8>)
 80093b6:	f002 fa1d 	bl	800b7f4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80093ba:	2000      	movs	r0, #0
 80093bc:	f000 ff3a 	bl	800a234 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80093c0:	4b17      	ldr	r3, [pc, #92]	; (8009420 <RadioIrqProcess+0x2ac>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	f000 80b1 	beq.w	800952c <RadioIrqProcess+0x3b8>
 80093ca:	4b15      	ldr	r3, [pc, #84]	; (8009420 <RadioIrqProcess+0x2ac>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f000 80ab 	beq.w	800952c <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 80093d6:	4b12      	ldr	r3, [pc, #72]	; (8009420 <RadioIrqProcess+0x2ac>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	4798      	blx	r3
        break;
 80093de:	e0a5      	b.n	800952c <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80093e0:	f000 fdde 	bl	8009fa0 <SUBGRF_GetOperatingMode>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b05      	cmp	r3, #5
 80093e8:	f040 80a0 	bne.w	800952c <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 80093ec:	480d      	ldr	r0, [pc, #52]	; (8009424 <RadioIrqProcess+0x2b0>)
 80093ee:	f002 fa01 	bl	800b7f4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80093f2:	2000      	movs	r0, #0
 80093f4:	f000 ff1e 	bl	800a234 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80093f8:	4b09      	ldr	r3, [pc, #36]	; (8009420 <RadioIrqProcess+0x2ac>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	f000 8095 	beq.w	800952c <RadioIrqProcess+0x3b8>
 8009402:	4b07      	ldr	r3, [pc, #28]	; (8009420 <RadioIrqProcess+0x2ac>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68db      	ldr	r3, [r3, #12]
 8009408:	2b00      	cmp	r3, #0
 800940a:	f000 808f 	beq.w	800952c <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 800940e:	4b04      	ldr	r3, [pc, #16]	; (8009420 <RadioIrqProcess+0x2ac>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	68db      	ldr	r3, [r3, #12]
 8009414:	4798      	blx	r3
        break;
 8009416:	e089      	b.n	800952c <RadioIrqProcess+0x3b8>
 8009418:	20000964 	.word	0x20000964
 800941c:	200009c0 	.word	0x200009c0
 8009420:	20000960 	.word	0x20000960
 8009424:	200009d8 	.word	0x200009d8
 8009428:	20000860 	.word	0x20000860
 800942c:	20000988 	.word	0x20000988
 8009430:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8009434:	4b44      	ldr	r3, [pc, #272]	; (8009548 <RadioIrqProcess+0x3d4>)
 8009436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009438:	2b00      	cmp	r3, #0
 800943a:	d079      	beq.n	8009530 <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 800943c:	4a43      	ldr	r2, [pc, #268]	; (800954c <RadioIrqProcess+0x3d8>)
 800943e:	4b42      	ldr	r3, [pc, #264]	; (8009548 <RadioIrqProcess+0x3d4>)
 8009440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009442:	0c1b      	lsrs	r3, r3, #16
 8009444:	b2db      	uxtb	r3, r3
 8009446:	4619      	mov	r1, r3
 8009448:	f640 1003 	movw	r0, #2307	; 0x903
 800944c:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 800944e:	4a3f      	ldr	r2, [pc, #252]	; (800954c <RadioIrqProcess+0x3d8>)
 8009450:	4b3d      	ldr	r3, [pc, #244]	; (8009548 <RadioIrqProcess+0x3d4>)
 8009452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009454:	0a1b      	lsrs	r3, r3, #8
 8009456:	b2db      	uxtb	r3, r3
 8009458:	4619      	mov	r1, r3
 800945a:	f640 1004 	movw	r0, #2308	; 0x904
 800945e:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8009460:	4a3a      	ldr	r2, [pc, #232]	; (800954c <RadioIrqProcess+0x3d8>)
 8009462:	4b39      	ldr	r3, [pc, #228]	; (8009548 <RadioIrqProcess+0x3d4>)
 8009464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009466:	b2db      	uxtb	r3, r3
 8009468:	4619      	mov	r1, r3
 800946a:	f640 1005 	movw	r0, #2309	; 0x905
 800946e:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8009470:	4c36      	ldr	r4, [pc, #216]	; (800954c <RadioIrqProcess+0x3d8>)
 8009472:	4b37      	ldr	r3, [pc, #220]	; (8009550 <RadioIrqProcess+0x3dc>)
 8009474:	f640 1002 	movw	r0, #2306	; 0x902
 8009478:	4798      	blx	r3
 800947a:	4603      	mov	r3, r0
 800947c:	f043 0301 	orr.w	r3, r3, #1
 8009480:	b2db      	uxtb	r3, r3
 8009482:	4619      	mov	r1, r3
 8009484:	f640 1002 	movw	r0, #2306	; 0x902
 8009488:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 800948a:	4b2f      	ldr	r3, [pc, #188]	; (8009548 <RadioIrqProcess+0x3d4>)
 800948c:	2200      	movs	r2, #0
 800948e:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8009490:	2300      	movs	r3, #0
 8009492:	2200      	movs	r2, #0
 8009494:	f240 2162 	movw	r1, #610	; 0x262
 8009498:	f240 2062 	movw	r0, #610	; 0x262
 800949c:	f001 f89e 	bl	800a5dc <SUBGRF_SetDioIrqParams>
        break;
 80094a0:	e046      	b.n	8009530 <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 80094a2:	f001 ff38 	bl	800b316 <RFW_Is_Init>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d143      	bne.n	8009534 <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 80094ac:	f001 ff69 	bl	800b382 <RFW_ReceivePayload>
        break;
 80094b0:	e040      	b.n	8009534 <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 80094b2:	4828      	ldr	r0, [pc, #160]	; (8009554 <RadioIrqProcess+0x3e0>)
 80094b4:	f002 f99e 	bl	800b7f4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80094b8:	4b23      	ldr	r3, [pc, #140]	; (8009548 <RadioIrqProcess+0x3d4>)
 80094ba:	785b      	ldrb	r3, [r3, #1]
 80094bc:	f083 0301 	eor.w	r3, r3, #1
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d002      	beq.n	80094cc <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 80094c6:	2000      	movs	r0, #0
 80094c8:	f000 feb4 	bl	800a234 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80094cc:	4b22      	ldr	r3, [pc, #136]	; (8009558 <RadioIrqProcess+0x3e4>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d031      	beq.n	8009538 <RadioIrqProcess+0x3c4>
 80094d4:	4b20      	ldr	r3, [pc, #128]	; (8009558 <RadioIrqProcess+0x3e4>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d02c      	beq.n	8009538 <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 80094de:	4b1e      	ldr	r3, [pc, #120]	; (8009558 <RadioIrqProcess+0x3e4>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	4798      	blx	r3
        break;
 80094e6:	e027      	b.n	8009538 <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 80094e8:	4b17      	ldr	r3, [pc, #92]	; (8009548 <RadioIrqProcess+0x3d4>)
 80094ea:	785b      	ldrb	r3, [r3, #1]
 80094ec:	f083 0301 	eor.w	r3, r3, #1
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d002      	beq.n	80094fc <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 80094f6:	2000      	movs	r0, #0
 80094f8:	f000 fe9c 	bl	800a234 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80094fc:	4b16      	ldr	r3, [pc, #88]	; (8009558 <RadioIrqProcess+0x3e4>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d01b      	beq.n	800953c <RadioIrqProcess+0x3c8>
 8009504:	4b14      	ldr	r3, [pc, #80]	; (8009558 <RadioIrqProcess+0x3e4>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d016      	beq.n	800953c <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 800950e:	4b12      	ldr	r3, [pc, #72]	; (8009558 <RadioIrqProcess+0x3e4>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	4798      	blx	r3
        break;
 8009516:	e011      	b.n	800953c <RadioIrqProcess+0x3c8>
        break;
 8009518:	bf00      	nop
 800951a:	e010      	b.n	800953e <RadioIrqProcess+0x3ca>
        break;
 800951c:	bf00      	nop
 800951e:	e00e      	b.n	800953e <RadioIrqProcess+0x3ca>
        break;
 8009520:	bf00      	nop
 8009522:	e00c      	b.n	800953e <RadioIrqProcess+0x3ca>
        break;
 8009524:	bf00      	nop
 8009526:	e00a      	b.n	800953e <RadioIrqProcess+0x3ca>
        break;
 8009528:	bf00      	nop
 800952a:	e008      	b.n	800953e <RadioIrqProcess+0x3ca>
        break;
 800952c:	bf00      	nop
 800952e:	e006      	b.n	800953e <RadioIrqProcess+0x3ca>
        break;
 8009530:	bf00      	nop
 8009532:	e004      	b.n	800953e <RadioIrqProcess+0x3ca>
        break;
 8009534:	bf00      	nop
 8009536:	e002      	b.n	800953e <RadioIrqProcess+0x3ca>
        break;
 8009538:	bf00      	nop
 800953a:	e000      	b.n	800953e <RadioIrqProcess+0x3ca>
        break;
 800953c:	bf00      	nop
    }
}
 800953e:	bf00      	nop
 8009540:	3708      	adds	r7, #8
 8009542:	46bd      	mov	sp, r7
 8009544:	bdb0      	pop	{r4, r5, r7, pc}
 8009546:	bf00      	nop
 8009548:	20000964 	.word	0x20000964
 800954c:	08008f83 	.word	0x08008f83
 8009550:	08008fa7 	.word	0x08008fa7
 8009554:	200009d8 	.word	0x200009d8
 8009558:	20000960 	.word	0x20000960

0800955c <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 800955c:	b580      	push	{r7, lr}
 800955e:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8009560:	4b09      	ldr	r3, [pc, #36]	; (8009588 <RadioTxPrbs+0x2c>)
 8009562:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009566:	2101      	movs	r1, #1
 8009568:	4618      	mov	r0, r3
 800956a:	f001 fcdb 	bl	800af24 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800956e:	4b07      	ldr	r3, [pc, #28]	; (800958c <RadioTxPrbs+0x30>)
 8009570:	212d      	movs	r1, #45	; 0x2d
 8009572:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8009576:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8009578:	f000 ff1f 	bl	800a3ba <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800957c:	4804      	ldr	r0, [pc, #16]	; (8009590 <RadioTxPrbs+0x34>)
 800957e:	f000 fe75 	bl	800a26c <SUBGRF_SetTx>
}
 8009582:	bf00      	nop
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	20000964 	.word	0x20000964
 800958c:	08008f83 	.word	0x08008f83
 8009590:	000fffff 	.word	0x000fffff

08009594 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	4603      	mov	r3, r0
 800959c:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800959e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095a2:	4618      	mov	r0, r3
 80095a4:	f001 fce6 	bl	800af74 <SUBGRF_SetRfTxPower>
 80095a8:	4603      	mov	r3, r0
 80095aa:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80095ac:	210e      	movs	r1, #14
 80095ae:	f640 101f 	movw	r0, #2335	; 0x91f
 80095b2:	f001 fbc3 	bl	800ad3c <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80095b6:	7bfb      	ldrb	r3, [r7, #15]
 80095b8:	2101      	movs	r1, #1
 80095ba:	4618      	mov	r0, r3
 80095bc:	f001 fcb2 	bl	800af24 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80095c0:	f000 fef2 	bl	800a3a8 <SUBGRF_SetTxContinuousWave>
}
 80095c4:	bf00      	nop
 80095c6:	3710      	adds	r7, #16
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 80095cc:	b480      	push	{r7}
 80095ce:	b089      	sub	sp, #36	; 0x24
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	4613      	mov	r3, r2
 80095d8:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 80095da:	2300      	movs	r3, #0
 80095dc:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 80095de:	2300      	movs	r3, #0
 80095e0:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 80095e2:	2300      	movs	r3, #0
 80095e4:	61bb      	str	r3, [r7, #24]
 80095e6:	e011      	b.n	800960c <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	68ba      	ldr	r2, [r7, #8]
 80095ec:	4413      	add	r3, r2
 80095ee:	781a      	ldrb	r2, [r3, #0]
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	68b9      	ldr	r1, [r7, #8]
 80095f4:	440b      	add	r3, r1
 80095f6:	43d2      	mvns	r2, r2
 80095f8:	b2d2      	uxtb	r2, r2
 80095fa:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 80095fc:	69bb      	ldr	r3, [r7, #24]
 80095fe:	68fa      	ldr	r2, [r7, #12]
 8009600:	4413      	add	r3, r2
 8009602:	2200      	movs	r2, #0
 8009604:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	3301      	adds	r3, #1
 800960a:	61bb      	str	r3, [r7, #24]
 800960c:	79fb      	ldrb	r3, [r7, #7]
 800960e:	69ba      	ldr	r2, [r7, #24]
 8009610:	429a      	cmp	r2, r3
 8009612:	dbe9      	blt.n	80095e8 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8009614:	2300      	movs	r3, #0
 8009616:	61bb      	str	r3, [r7, #24]
 8009618:	e049      	b.n	80096ae <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	425a      	negs	r2, r3
 800961e:	f003 0307 	and.w	r3, r3, #7
 8009622:	f002 0207 	and.w	r2, r2, #7
 8009626:	bf58      	it	pl
 8009628:	4253      	negpl	r3, r2
 800962a:	b2db      	uxtb	r3, r3
 800962c:	f1c3 0307 	rsb	r3, r3, #7
 8009630:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	2b00      	cmp	r3, #0
 8009636:	da00      	bge.n	800963a <payload_integration+0x6e>
 8009638:	3307      	adds	r3, #7
 800963a:	10db      	asrs	r3, r3, #3
 800963c:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800963e:	69bb      	ldr	r3, [r7, #24]
 8009640:	3301      	adds	r3, #1
 8009642:	425a      	negs	r2, r3
 8009644:	f003 0307 	and.w	r3, r3, #7
 8009648:	f002 0207 	and.w	r2, r2, #7
 800964c:	bf58      	it	pl
 800964e:	4253      	negpl	r3, r2
 8009650:	b2db      	uxtb	r3, r3
 8009652:	f1c3 0307 	rsb	r3, r3, #7
 8009656:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8009658:	69bb      	ldr	r3, [r7, #24]
 800965a:	3301      	adds	r3, #1
 800965c:	2b00      	cmp	r3, #0
 800965e:	da00      	bge.n	8009662 <payload_integration+0x96>
 8009660:	3307      	adds	r3, #7
 8009662:	10db      	asrs	r3, r3, #3
 8009664:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8009666:	7dbb      	ldrb	r3, [r7, #22]
 8009668:	68ba      	ldr	r2, [r7, #8]
 800966a:	4413      	add	r3, r2
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	461a      	mov	r2, r3
 8009670:	7dfb      	ldrb	r3, [r7, #23]
 8009672:	fa42 f303 	asr.w	r3, r2, r3
 8009676:	b2db      	uxtb	r3, r3
 8009678:	f003 0301 	and.w	r3, r3, #1
 800967c:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 800967e:	7ffa      	ldrb	r2, [r7, #31]
 8009680:	7cfb      	ldrb	r3, [r7, #19]
 8009682:	4053      	eors	r3, r2
 8009684:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8009686:	7d3b      	ldrb	r3, [r7, #20]
 8009688:	68fa      	ldr	r2, [r7, #12]
 800968a:	4413      	add	r3, r2
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	b25a      	sxtb	r2, r3
 8009690:	7ff9      	ldrb	r1, [r7, #31]
 8009692:	7d7b      	ldrb	r3, [r7, #21]
 8009694:	fa01 f303 	lsl.w	r3, r1, r3
 8009698:	b25b      	sxtb	r3, r3
 800969a:	4313      	orrs	r3, r2
 800969c:	b259      	sxtb	r1, r3
 800969e:	7d3b      	ldrb	r3, [r7, #20]
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	4413      	add	r3, r2
 80096a4:	b2ca      	uxtb	r2, r1
 80096a6:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	3301      	adds	r3, #1
 80096ac:	61bb      	str	r3, [r7, #24]
 80096ae:	79fb      	ldrb	r3, [r7, #7]
 80096b0:	00db      	lsls	r3, r3, #3
 80096b2:	69ba      	ldr	r2, [r7, #24]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	dbb0      	blt.n	800961a <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 80096b8:	7ffb      	ldrb	r3, [r7, #31]
 80096ba:	01db      	lsls	r3, r3, #7
 80096bc:	b25a      	sxtb	r2, r3
 80096be:	7ffb      	ldrb	r3, [r7, #31]
 80096c0:	019b      	lsls	r3, r3, #6
 80096c2:	b25b      	sxtb	r3, r3
 80096c4:	4313      	orrs	r3, r2
 80096c6:	b25b      	sxtb	r3, r3
 80096c8:	7ffa      	ldrb	r2, [r7, #31]
 80096ca:	2a00      	cmp	r2, #0
 80096cc:	d101      	bne.n	80096d2 <payload_integration+0x106>
 80096ce:	2220      	movs	r2, #32
 80096d0:	e000      	b.n	80096d4 <payload_integration+0x108>
 80096d2:	2200      	movs	r2, #0
 80096d4:	4313      	orrs	r3, r2
 80096d6:	b259      	sxtb	r1, r3
 80096d8:	79fb      	ldrb	r3, [r7, #7]
 80096da:	68fa      	ldr	r2, [r7, #12]
 80096dc:	4413      	add	r3, r2
 80096de:	b2ca      	uxtb	r2, r1
 80096e0:	701a      	strb	r2, [r3, #0]
}
 80096e2:	bf00      	nop
 80096e4:	3724      	adds	r7, #36	; 0x24
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bc80      	pop	{r7}
 80096ea:	4770      	bx	lr

080096ec <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b08c      	sub	sp, #48	; 0x30
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60b9      	str	r1, [r7, #8]
 80096f4:	607a      	str	r2, [r7, #4]
 80096f6:	603b      	str	r3, [r7, #0]
 80096f8:	4603      	mov	r3, r0
 80096fa:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 80096fc:	2300      	movs	r3, #0
 80096fe:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 8009700:	2300      	movs	r3, #0
 8009702:	623b      	str	r3, [r7, #32]
 8009704:	2300      	movs	r3, #0
 8009706:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8009708:	f001 fdff 	bl	800b30a <RFW_DeInit>

    if( rxContinuous != 0 )
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d001      	beq.n	8009716 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8009712:	2300      	movs	r3, #0
 8009714:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2b00      	cmp	r3, #0
 800971a:	bf14      	ite	ne
 800971c:	2301      	movne	r3, #1
 800971e:	2300      	moveq	r3, #0
 8009720:	b2da      	uxtb	r2, r3
 8009722:	4ba3      	ldr	r3, [pc, #652]	; (80099b0 <RadioSetRxGenericConfig+0x2c4>)
 8009724:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8009726:	7bfb      	ldrb	r3, [r7, #15]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d003      	beq.n	8009734 <RadioSetRxGenericConfig+0x48>
 800972c:	2b01      	cmp	r3, #1
 800972e:	f000 80dc 	beq.w	80098ea <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8009732:	e194      	b.n	8009a5e <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d003      	beq.n	8009744 <RadioSetRxGenericConfig+0x58>
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d102      	bne.n	800974a <RadioSetRxGenericConfig+0x5e>
            return -1;
 8009744:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009748:	e18a      	b.n	8009a60 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	7f9b      	ldrb	r3, [r3, #30]
 800974e:	2b08      	cmp	r3, #8
 8009750:	d902      	bls.n	8009758 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8009752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009756:	e183      	b.n	8009a60 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	6919      	ldr	r1, [r3, #16]
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	7f9b      	ldrb	r3, [r3, #30]
 8009760:	b29a      	uxth	r2, r3
 8009762:	f107 0320 	add.w	r3, r7, #32
 8009766:	4618      	mov	r0, r3
 8009768:	f001 ff66 	bl	800b638 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	bf14      	ite	ne
 8009774:	2301      	movne	r3, #1
 8009776:	2300      	moveq	r3, #0
 8009778:	b2db      	uxtb	r3, r3
 800977a:	4618      	mov	r0, r3
 800977c:	f000 fe26 	bl	800a3cc <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009780:	4b8b      	ldr	r3, [pc, #556]	; (80099b0 <RadioSetRxGenericConfig+0x2c4>)
 8009782:	2200      	movs	r2, #0
 8009784:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	4a88      	ldr	r2, [pc, #544]	; (80099b0 <RadioSetRxGenericConfig+0x2c4>)
 800978e:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	f893 2020 	ldrb.w	r2, [r3, #32]
 8009796:	4b86      	ldr	r3, [pc, #536]	; (80099b0 <RadioSetRxGenericConfig+0x2c4>)
 8009798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	4618      	mov	r0, r3
 80097a2:	f001 fce5 	bl	800b170 <SUBGRF_GetFskBandwidthRegValue>
 80097a6:	4603      	mov	r3, r0
 80097a8:	461a      	mov	r2, r3
 80097aa:	4b81      	ldr	r3, [pc, #516]	; (80099b0 <RadioSetRxGenericConfig+0x2c4>)
 80097ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80097b0:	4b7f      	ldr	r3, [pc, #508]	; (80099b0 <RadioSetRxGenericConfig+0x2c4>)
 80097b2:	2200      	movs	r2, #0
 80097b4:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	00db      	lsls	r3, r3, #3
 80097be:	b29a      	uxth	r2, r3
 80097c0:	4b7b      	ldr	r3, [pc, #492]	; (80099b0 <RadioSetRxGenericConfig+0x2c4>)
 80097c2:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	7fda      	ldrb	r2, [r3, #31]
 80097c8:	4b79      	ldr	r3, [pc, #484]	; (80099b0 <RadioSetRxGenericConfig+0x2c4>)
 80097ca:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	7f9b      	ldrb	r3, [r3, #30]
 80097d0:	00db      	lsls	r3, r3, #3
 80097d2:	b2da      	uxtb	r2, r3
 80097d4:	4b76      	ldr	r3, [pc, #472]	; (80099b0 <RadioSetRxGenericConfig+0x2c4>)
 80097d6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80097de:	4b74      	ldr	r3, [pc, #464]	; (80099b0 <RadioSetRxGenericConfig+0x2c4>)
 80097e0:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d105      	bne.n	80097f8 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	695b      	ldr	r3, [r3, #20]
 80097f0:	b2da      	uxtb	r2, r3
 80097f2:	4b6f      	ldr	r3, [pc, #444]	; (80099b0 <RadioSetRxGenericConfig+0x2c4>)
 80097f4:	759a      	strb	r2, [r3, #22]
 80097f6:	e00b      	b.n	8009810 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80097fe:	2b02      	cmp	r3, #2
 8009800:	d103      	bne.n	800980a <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8009802:	4b6b      	ldr	r3, [pc, #428]	; (80099b0 <RadioSetRxGenericConfig+0x2c4>)
 8009804:	22ff      	movs	r2, #255	; 0xff
 8009806:	759a      	strb	r2, [r3, #22]
 8009808:	e002      	b.n	8009810 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800980a:	4b69      	ldr	r3, [pc, #420]	; (80099b0 <RadioSetRxGenericConfig+0x2c4>)
 800980c:	22ff      	movs	r2, #255	; 0xff
 800980e:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009816:	2b02      	cmp	r3, #2
 8009818:	d004      	beq.n	8009824 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009820:	2b02      	cmp	r3, #2
 8009822:	d12d      	bne.n	8009880 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800982a:	2bf1      	cmp	r3, #241	; 0xf1
 800982c:	d00c      	beq.n	8009848 <RadioSetRxGenericConfig+0x15c>
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009834:	2bf2      	cmp	r3, #242	; 0xf2
 8009836:	d007      	beq.n	8009848 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800983e:	2b01      	cmp	r3, #1
 8009840:	d002      	beq.n	8009848 <RadioSetRxGenericConfig+0x15c>
                return -1;
 8009842:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009846:	e10b      	b.n	8009a60 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 8009848:	2300      	movs	r3, #0
 800984a:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8009850:	4b58      	ldr	r3, [pc, #352]	; (80099b4 <RadioSetRxGenericConfig+0x2c8>)
 8009852:	6819      	ldr	r1, [r3, #0]
 8009854:	f107 0314 	add.w	r3, r7, #20
 8009858:	4a57      	ldr	r2, [pc, #348]	; (80099b8 <RadioSetRxGenericConfig+0x2cc>)
 800985a:	4618      	mov	r0, r3
 800985c:	f001 fd48 	bl	800b2f0 <RFW_Init>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d002      	beq.n	800986c <RadioSetRxGenericConfig+0x180>
                return -1;
 8009866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800986a:	e0f9      	b.n	8009a60 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800986c:	4b50      	ldr	r3, [pc, #320]	; (80099b0 <RadioSetRxGenericConfig+0x2c4>)
 800986e:	2200      	movs	r2, #0
 8009870:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009872:	4b4f      	ldr	r3, [pc, #316]	; (80099b0 <RadioSetRxGenericConfig+0x2c4>)
 8009874:	2201      	movs	r2, #1
 8009876:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009878:	4b4d      	ldr	r3, [pc, #308]	; (80099b0 <RadioSetRxGenericConfig+0x2c4>)
 800987a:	2200      	movs	r2, #0
 800987c:	755a      	strb	r2, [r3, #21]
        {
 800987e:	e00e      	b.n	800989e <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8009886:	4b4a      	ldr	r3, [pc, #296]	; (80099b0 <RadioSetRxGenericConfig+0x2c4>)
 8009888:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8009890:	4b47      	ldr	r3, [pc, #284]	; (80099b0 <RadioSetRxGenericConfig+0x2c4>)
 8009892:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800989a:	4b45      	ldr	r3, [pc, #276]	; (80099b0 <RadioSetRxGenericConfig+0x2c4>)
 800989c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800989e:	f7ff fa6e 	bl	8008d7e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80098a2:	2000      	movs	r0, #0
 80098a4:	f7fe fc0a 	bl	80080bc <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80098a8:	4844      	ldr	r0, [pc, #272]	; (80099bc <RadioSetRxGenericConfig+0x2d0>)
 80098aa:	f001 f82d 	bl	800a908 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80098ae:	4844      	ldr	r0, [pc, #272]	; (80099c0 <RadioSetRxGenericConfig+0x2d4>)
 80098b0:	f001 f8fc 	bl	800aaac <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80098b4:	f107 0320 	add.w	r3, r7, #32
 80098b8:	4618      	mov	r0, r3
 80098ba:	f000 fbc0 	bl	800a03e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	8b9b      	ldrh	r3, [r3, #28]
 80098c2:	4618      	mov	r0, r3
 80098c4:	f000 fc0a 	bl	800a0dc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	8b1b      	ldrh	r3, [r3, #24]
 80098cc:	4618      	mov	r0, r3
 80098ce:	f000 fbe5 	bl	800a09c <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80098d8:	fb03 f202 	mul.w	r2, r3, r2
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80098e4:	4a32      	ldr	r2, [pc, #200]	; (80099b0 <RadioSetRxGenericConfig+0x2c4>)
 80098e6:	6093      	str	r3, [r2, #8]
        break;
 80098e8:	e0b9      	b.n	8009a5e <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d102      	bne.n	80098f8 <RadioSetRxGenericConfig+0x20c>
            return -1;
 80098f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098f6:	e0b3      	b.n	8009a60 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d104      	bne.n	800990c <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	695b      	ldr	r3, [r3, #20]
 8009906:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800990a:	e002      	b.n	8009912 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 800990c:	23ff      	movs	r3, #255	; 0xff
 800990e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009916:	2b00      	cmp	r3, #0
 8009918:	bf14      	ite	ne
 800991a:	2301      	movne	r3, #1
 800991c:	2300      	moveq	r3, #0
 800991e:	b2db      	uxtb	r3, r3
 8009920:	4618      	mov	r0, r3
 8009922:	f000 fd53 	bl	800a3cc <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	b2db      	uxtb	r3, r3
 800992a:	4618      	mov	r0, r3
 800992c:	f000 fd5d 	bl	800a3ea <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009930:	4b1f      	ldr	r3, [pc, #124]	; (80099b0 <RadioSetRxGenericConfig+0x2c4>)
 8009932:	2201      	movs	r2, #1
 8009934:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800993e:	4b1c      	ldr	r3, [pc, #112]	; (80099b0 <RadioSetRxGenericConfig+0x2c4>)
 8009940:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800994a:	4b19      	ldr	r3, [pc, #100]	; (80099b0 <RadioSetRxGenericConfig+0x2c4>)
 800994c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8009956:	4b16      	ldr	r3, [pc, #88]	; (80099b0 <RadioSetRxGenericConfig+0x2c4>)
 8009958:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009962:	2b02      	cmp	r3, #2
 8009964:	d010      	beq.n	8009988 <RadioSetRxGenericConfig+0x29c>
 8009966:	2b02      	cmp	r3, #2
 8009968:	dc2c      	bgt.n	80099c4 <RadioSetRxGenericConfig+0x2d8>
 800996a:	2b00      	cmp	r3, #0
 800996c:	d002      	beq.n	8009974 <RadioSetRxGenericConfig+0x288>
 800996e:	2b01      	cmp	r3, #1
 8009970:	d005      	beq.n	800997e <RadioSetRxGenericConfig+0x292>
            break;
 8009972:	e027      	b.n	80099c4 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009974:	4b0e      	ldr	r3, [pc, #56]	; (80099b0 <RadioSetRxGenericConfig+0x2c4>)
 8009976:	2200      	movs	r2, #0
 8009978:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800997c:	e023      	b.n	80099c6 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800997e:	4b0c      	ldr	r3, [pc, #48]	; (80099b0 <RadioSetRxGenericConfig+0x2c4>)
 8009980:	2201      	movs	r2, #1
 8009982:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009986:	e01e      	b.n	80099c6 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800998e:	2b0b      	cmp	r3, #11
 8009990:	d004      	beq.n	800999c <RadioSetRxGenericConfig+0x2b0>
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009998:	2b0c      	cmp	r3, #12
 800999a:	d104      	bne.n	80099a6 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800999c:	4b04      	ldr	r3, [pc, #16]	; (80099b0 <RadioSetRxGenericConfig+0x2c4>)
 800999e:	2201      	movs	r2, #1
 80099a0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80099a4:	e00f      	b.n	80099c6 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80099a6:	4b02      	ldr	r3, [pc, #8]	; (80099b0 <RadioSetRxGenericConfig+0x2c4>)
 80099a8:	2200      	movs	r2, #0
 80099aa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80099ae:	e00a      	b.n	80099c6 <RadioSetRxGenericConfig+0x2da>
 80099b0:	20000964 	.word	0x20000964
 80099b4:	20000960 	.word	0x20000960
 80099b8:	200009d8 	.word	0x200009d8
 80099bc:	2000099c 	.word	0x2000099c
 80099c0:	20000972 	.word	0x20000972
            break;
 80099c4:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80099c6:	4b28      	ldr	r3, [pc, #160]	; (8009a68 <RadioSetRxGenericConfig+0x37c>)
 80099c8:	2201      	movs	r2, #1
 80099ca:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80099d0:	4b25      	ldr	r3, [pc, #148]	; (8009a68 <RadioSetRxGenericConfig+0x37c>)
 80099d2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80099da:	4b23      	ldr	r3, [pc, #140]	; (8009a68 <RadioSetRxGenericConfig+0x37c>)
 80099dc:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80099de:	4a22      	ldr	r2, [pc, #136]	; (8009a68 <RadioSetRxGenericConfig+0x37c>)
 80099e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099e4:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80099ec:	4b1e      	ldr	r3, [pc, #120]	; (8009a68 <RadioSetRxGenericConfig+0x37c>)
 80099ee:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80099f8:	4b1b      	ldr	r3, [pc, #108]	; (8009a68 <RadioSetRxGenericConfig+0x37c>)
 80099fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 80099fe:	f7ff f9be 	bl	8008d7e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8009a02:	2001      	movs	r0, #1
 8009a04:	f7fe fb5a 	bl	80080bc <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009a08:	4818      	ldr	r0, [pc, #96]	; (8009a6c <RadioSetRxGenericConfig+0x380>)
 8009a0a:	f000 ff7d 	bl	800a908 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009a0e:	4818      	ldr	r0, [pc, #96]	; (8009a70 <RadioSetRxGenericConfig+0x384>)
 8009a10:	f001 f84c 	bl	800aaac <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8009a14:	4b14      	ldr	r3, [pc, #80]	; (8009a68 <RadioSetRxGenericConfig+0x37c>)
 8009a16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d10d      	bne.n	8009a3a <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8009a1e:	f240 7036 	movw	r0, #1846	; 0x736
 8009a22:	f001 f99f 	bl	800ad64 <SUBGRF_ReadRegister>
 8009a26:	4603      	mov	r3, r0
 8009a28:	f023 0304 	bic.w	r3, r3, #4
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	4619      	mov	r1, r3
 8009a30:	f240 7036 	movw	r0, #1846	; 0x736
 8009a34:	f001 f982 	bl	800ad3c <SUBGRF_WriteRegister>
 8009a38:	e00c      	b.n	8009a54 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8009a3a:	f240 7036 	movw	r0, #1846	; 0x736
 8009a3e:	f001 f991 	bl	800ad64 <SUBGRF_ReadRegister>
 8009a42:	4603      	mov	r3, r0
 8009a44:	f043 0304 	orr.w	r3, r3, #4
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	f240 7036 	movw	r0, #1846	; 0x736
 8009a50:	f001 f974 	bl	800ad3c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8009a54:	4b04      	ldr	r3, [pc, #16]	; (8009a68 <RadioSetRxGenericConfig+0x37c>)
 8009a56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a5a:	609a      	str	r2, [r3, #8]
        break;
 8009a5c:	bf00      	nop
    }
    return status;
 8009a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3730      	adds	r7, #48	; 0x30
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	20000964 	.word	0x20000964
 8009a6c:	2000099c 	.word	0x2000099c
 8009a70:	20000972 	.word	0x20000972

08009a74 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b08e      	sub	sp, #56	; 0x38
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60b9      	str	r1, [r7, #8]
 8009a7c:	607b      	str	r3, [r7, #4]
 8009a7e:	4603      	mov	r3, r0
 8009a80:	73fb      	strb	r3, [r7, #15]
 8009a82:	4613      	mov	r3, r2
 8009a84:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8009a86:	2300      	movs	r3, #0
 8009a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8009a8e:	f001 fc3c 	bl	800b30a <RFW_DeInit>
    switch( modem )
 8009a92:	7bfb      	ldrb	r3, [r7, #15]
 8009a94:	2b03      	cmp	r3, #3
 8009a96:	f200 8204 	bhi.w	8009ea2 <RadioSetTxGenericConfig+0x42e>
 8009a9a:	a201      	add	r2, pc, #4	; (adr r2, 8009aa0 <RadioSetTxGenericConfig+0x2c>)
 8009a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa0:	08009c25 	.word	0x08009c25
 8009aa4:	08009d6d 	.word	0x08009d6d
 8009aa8:	08009e65 	.word	0x08009e65
 8009aac:	08009ab1 	.word	0x08009ab1
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	7c9b      	ldrb	r3, [r3, #18]
 8009ab4:	2b08      	cmp	r3, #8
 8009ab6:	d902      	bls.n	8009abe <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8009ab8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009abc:	e206      	b.n	8009ecc <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	6899      	ldr	r1, [r3, #8]
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	7c9b      	ldrb	r3, [r3, #18]
 8009ac6:	b29a      	uxth	r2, r3
 8009ac8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009acc:	4618      	mov	r0, r3
 8009ace:	f001 fdb3 	bl	800b638 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d102      	bne.n	8009ae0 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8009ada:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ade:	e1f5      	b.n	8009ecc <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f242 7210 	movw	r2, #10000	; 0x2710
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d813      	bhi.n	8009b14 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8009aec:	2302      	movs	r3, #2
 8009aee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8009af2:	4b99      	ldr	r3, [pc, #612]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009af4:	2203      	movs	r2, #3
 8009af6:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8009af8:	4b97      	ldr	r3, [pc, #604]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009afa:	2203      	movs	r2, #3
 8009afc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a94      	ldr	r2, [pc, #592]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009b06:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	7cda      	ldrb	r2, [r3, #19]
 8009b0c:	4b92      	ldr	r3, [pc, #584]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009b0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b12:	e017      	b.n	8009b44 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8009b14:	2300      	movs	r3, #0
 8009b16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009b1a:	4b8f      	ldr	r3, [pc, #572]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009b20:	4b8d      	ldr	r3, [pc, #564]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009b22:	2200      	movs	r2, #0
 8009b24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a8a      	ldr	r2, [pc, #552]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009b2e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	7cda      	ldrb	r2, [r3, #19]
 8009b34:	4b88      	ldr	r3, [pc, #544]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009b36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	089b      	lsrs	r3, r3, #2
 8009b40:	4a85      	ldr	r2, [pc, #532]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009b42:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	00db      	lsls	r3, r3, #3
 8009b4c:	b29a      	uxth	r2, r3
 8009b4e:	4b82      	ldr	r3, [pc, #520]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009b50:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8009b52:	4b81      	ldr	r3, [pc, #516]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009b54:	2204      	movs	r2, #4
 8009b56:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	7c9b      	ldrb	r3, [r3, #18]
 8009b5c:	00db      	lsls	r3, r3, #3
 8009b5e:	b2da      	uxtb	r2, r3
 8009b60:	4b7d      	ldr	r3, [pc, #500]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009b62:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8009b64:	4b7c      	ldr	r3, [pc, #496]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009b66:	2200      	movs	r2, #0
 8009b68:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	7d9b      	ldrb	r3, [r3, #22]
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	d003      	beq.n	8009b7a <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	7d1b      	ldrb	r3, [r3, #20]
 8009b76:	2b02      	cmp	r3, #2
 8009b78:	d12b      	bne.n	8009bd2 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	7d5b      	ldrb	r3, [r3, #21]
 8009b7e:	2bf1      	cmp	r3, #241	; 0xf1
 8009b80:	d00a      	beq.n	8009b98 <RadioSetTxGenericConfig+0x124>
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	7d5b      	ldrb	r3, [r3, #21]
 8009b86:	2bf2      	cmp	r3, #242	; 0xf2
 8009b88:	d006      	beq.n	8009b98 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	7d5b      	ldrb	r3, [r3, #21]
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d002      	beq.n	8009b98 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8009b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b96:	e199      	b.n	8009ecc <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8009ba2:	4b6e      	ldr	r3, [pc, #440]	; (8009d5c <RadioSetTxGenericConfig+0x2e8>)
 8009ba4:	6819      	ldr	r1, [r3, #0]
 8009ba6:	f107 0320 	add.w	r3, r7, #32
 8009baa:	4a6d      	ldr	r2, [pc, #436]	; (8009d60 <RadioSetTxGenericConfig+0x2ec>)
 8009bac:	4618      	mov	r0, r3
 8009bae:	f001 fb9f 	bl	800b2f0 <RFW_Init>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d002      	beq.n	8009bbe <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8009bb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bbc:	e186      	b.n	8009ecc <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009bbe:	4b66      	ldr	r3, [pc, #408]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009bc4:	4b64      	ldr	r3, [pc, #400]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009bca:	4b63      	ldr	r3, [pc, #396]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009bcc:	2200      	movs	r2, #0
 8009bce:	755a      	strb	r2, [r3, #21]
        {
 8009bd0:	e00b      	b.n	8009bea <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	7d5a      	ldrb	r2, [r3, #21]
 8009bd6:	4b60      	ldr	r3, [pc, #384]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009bd8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	7d9a      	ldrb	r2, [r3, #22]
 8009bde:	4b5e      	ldr	r3, [pc, #376]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009be0:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	7d1a      	ldrb	r2, [r3, #20]
 8009be6:	4b5c      	ldr	r3, [pc, #368]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009be8:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8009bea:	f7ff f8c8 	bl	8008d7e <RadioStandby>
        RadioSetModem( radio_modem );
 8009bee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7fe fa62 	bl	80080bc <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009bf8:	485a      	ldr	r0, [pc, #360]	; (8009d64 <RadioSetTxGenericConfig+0x2f0>)
 8009bfa:	f000 fe85 	bl	800a908 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009bfe:	485a      	ldr	r0, [pc, #360]	; (8009d68 <RadioSetTxGenericConfig+0x2f4>)
 8009c00:	f000 ff54 	bl	800aaac <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009c04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f000 fa18 	bl	800a03e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	8a1b      	ldrh	r3, [r3, #16]
 8009c12:	4618      	mov	r0, r3
 8009c14:	f000 fa62 	bl	800a0dc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	899b      	ldrh	r3, [r3, #12]
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f000 fa3d 	bl	800a09c <SUBGRF_SetCrcPolynomial>
        break;
 8009c22:	e13f      	b.n	8009ea4 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d102      	bne.n	8009c32 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8009c2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c30:	e14c      	b.n	8009ecc <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	7c9b      	ldrb	r3, [r3, #18]
 8009c36:	2b08      	cmp	r3, #8
 8009c38:	d902      	bls.n	8009c40 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8009c3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c3e:	e145      	b.n	8009ecc <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	6899      	ldr	r1, [r3, #8]
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	7c9b      	ldrb	r3, [r3, #18]
 8009c48:	b29a      	uxth	r2, r3
 8009c4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f001 fcf2 	bl	800b638 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009c54:	4b40      	ldr	r3, [pc, #256]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009c56:	2200      	movs	r2, #0
 8009c58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a3d      	ldr	r2, [pc, #244]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009c62:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	7cda      	ldrb	r2, [r3, #19]
 8009c68:	4b3b      	ldr	r3, [pc, #236]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	699b      	ldr	r3, [r3, #24]
 8009c72:	4a39      	ldr	r2, [pc, #228]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009c74:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009c76:	4b38      	ldr	r3, [pc, #224]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009c78:	2200      	movs	r2, #0
 8009c7a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	00db      	lsls	r3, r3, #3
 8009c84:	b29a      	uxth	r2, r3
 8009c86:	4b34      	ldr	r3, [pc, #208]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009c88:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8009c8a:	4b33      	ldr	r3, [pc, #204]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009c8c:	2204      	movs	r2, #4
 8009c8e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	7c9b      	ldrb	r3, [r3, #18]
 8009c94:	00db      	lsls	r3, r3, #3
 8009c96:	b2da      	uxtb	r2, r3
 8009c98:	4b2f      	ldr	r3, [pc, #188]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009c9a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8009c9c:	4b2e      	ldr	r3, [pc, #184]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	7d9b      	ldrb	r3, [r3, #22]
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	d003      	beq.n	8009cb2 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	7d1b      	ldrb	r3, [r3, #20]
 8009cae:	2b02      	cmp	r3, #2
 8009cb0:	d12a      	bne.n	8009d08 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	7d5b      	ldrb	r3, [r3, #21]
 8009cb6:	2bf1      	cmp	r3, #241	; 0xf1
 8009cb8:	d00a      	beq.n	8009cd0 <RadioSetTxGenericConfig+0x25c>
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	7d5b      	ldrb	r3, [r3, #21]
 8009cbe:	2bf2      	cmp	r3, #242	; 0xf2
 8009cc0:	d006      	beq.n	8009cd0 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	7d5b      	ldrb	r3, [r3, #21]
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d002      	beq.n	8009cd0 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8009cca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cce:	e0fd      	b.n	8009ecc <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8009cd8:	4b20      	ldr	r3, [pc, #128]	; (8009d5c <RadioSetTxGenericConfig+0x2e8>)
 8009cda:	6819      	ldr	r1, [r3, #0]
 8009cdc:	f107 0314 	add.w	r3, r7, #20
 8009ce0:	4a1f      	ldr	r2, [pc, #124]	; (8009d60 <RadioSetTxGenericConfig+0x2ec>)
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f001 fb04 	bl	800b2f0 <RFW_Init>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d002      	beq.n	8009cf4 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 8009cee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cf2:	e0eb      	b.n	8009ecc <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009cf4:	4b18      	ldr	r3, [pc, #96]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009cfa:	4b17      	ldr	r3, [pc, #92]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009d00:	4b15      	ldr	r3, [pc, #84]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009d02:	2200      	movs	r2, #0
 8009d04:	755a      	strb	r2, [r3, #21]
        {
 8009d06:	e00b      	b.n	8009d20 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	7d5a      	ldrb	r2, [r3, #21]
 8009d0c:	4b12      	ldr	r3, [pc, #72]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009d0e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	7d9a      	ldrb	r2, [r3, #22]
 8009d14:	4b10      	ldr	r3, [pc, #64]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009d16:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	7d1a      	ldrb	r2, [r3, #20]
 8009d1c:	4b0e      	ldr	r3, [pc, #56]	; (8009d58 <RadioSetTxGenericConfig+0x2e4>)
 8009d1e:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8009d20:	f7ff f82d 	bl	8008d7e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8009d24:	2000      	movs	r0, #0
 8009d26:	f7fe f9c9 	bl	80080bc <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009d2a:	480e      	ldr	r0, [pc, #56]	; (8009d64 <RadioSetTxGenericConfig+0x2f0>)
 8009d2c:	f000 fdec 	bl	800a908 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009d30:	480d      	ldr	r0, [pc, #52]	; (8009d68 <RadioSetTxGenericConfig+0x2f4>)
 8009d32:	f000 febb 	bl	800aaac <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009d36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f000 f97f 	bl	800a03e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	8a1b      	ldrh	r3, [r3, #16]
 8009d44:	4618      	mov	r0, r3
 8009d46:	f000 f9c9 	bl	800a0dc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	899b      	ldrh	r3, [r3, #12]
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f000 f9a4 	bl	800a09c <SUBGRF_SetCrcPolynomial>
        break;
 8009d54:	e0a6      	b.n	8009ea4 <RadioSetTxGenericConfig+0x430>
 8009d56:	bf00      	nop
 8009d58:	20000964 	.word	0x20000964
 8009d5c:	20000960 	.word	0x20000960
 8009d60:	200009c0 	.word	0x200009c0
 8009d64:	2000099c 	.word	0x2000099c
 8009d68:	20000972 	.word	0x20000972
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009d6c:	4b59      	ldr	r3, [pc, #356]	; (8009ed4 <RadioSetTxGenericConfig+0x460>)
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	781a      	ldrb	r2, [r3, #0]
 8009d78:	4b56      	ldr	r3, [pc, #344]	; (8009ed4 <RadioSetTxGenericConfig+0x460>)
 8009d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	785a      	ldrb	r2, [r3, #1]
 8009d82:	4b54      	ldr	r3, [pc, #336]	; (8009ed4 <RadioSetTxGenericConfig+0x460>)
 8009d84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	789a      	ldrb	r2, [r3, #2]
 8009d8c:	4b51      	ldr	r3, [pc, #324]	; (8009ed4 <RadioSetTxGenericConfig+0x460>)
 8009d8e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	78db      	ldrb	r3, [r3, #3]
 8009d96:	2b02      	cmp	r3, #2
 8009d98:	d010      	beq.n	8009dbc <RadioSetTxGenericConfig+0x348>
 8009d9a:	2b02      	cmp	r3, #2
 8009d9c:	dc20      	bgt.n	8009de0 <RadioSetTxGenericConfig+0x36c>
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d002      	beq.n	8009da8 <RadioSetTxGenericConfig+0x334>
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d005      	beq.n	8009db2 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 8009da6:	e01b      	b.n	8009de0 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009da8:	4b4a      	ldr	r3, [pc, #296]	; (8009ed4 <RadioSetTxGenericConfig+0x460>)
 8009daa:	2200      	movs	r2, #0
 8009dac:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009db0:	e017      	b.n	8009de2 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009db2:	4b48      	ldr	r3, [pc, #288]	; (8009ed4 <RadioSetTxGenericConfig+0x460>)
 8009db4:	2201      	movs	r2, #1
 8009db6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009dba:	e012      	b.n	8009de2 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	2b0b      	cmp	r3, #11
 8009dc2:	d003      	beq.n	8009dcc <RadioSetTxGenericConfig+0x358>
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	2b0c      	cmp	r3, #12
 8009dca:	d104      	bne.n	8009dd6 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009dcc:	4b41      	ldr	r3, [pc, #260]	; (8009ed4 <RadioSetTxGenericConfig+0x460>)
 8009dce:	2201      	movs	r2, #1
 8009dd0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009dd4:	e005      	b.n	8009de2 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009dd6:	4b3f      	ldr	r3, [pc, #252]	; (8009ed4 <RadioSetTxGenericConfig+0x460>)
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009dde:	e000      	b.n	8009de2 <RadioSetTxGenericConfig+0x36e>
            break;
 8009de0:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009de2:	4b3c      	ldr	r3, [pc, #240]	; (8009ed4 <RadioSetTxGenericConfig+0x460>)
 8009de4:	2201      	movs	r2, #1
 8009de6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	889a      	ldrh	r2, [r3, #4]
 8009dec:	4b39      	ldr	r3, [pc, #228]	; (8009ed4 <RadioSetTxGenericConfig+0x460>)
 8009dee:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	799a      	ldrb	r2, [r3, #6]
 8009df4:	4b37      	ldr	r3, [pc, #220]	; (8009ed4 <RadioSetTxGenericConfig+0x460>)
 8009df6:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	79da      	ldrb	r2, [r3, #7]
 8009dfc:	4b35      	ldr	r3, [pc, #212]	; (8009ed4 <RadioSetTxGenericConfig+0x460>)
 8009dfe:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	7a1a      	ldrb	r2, [r3, #8]
 8009e06:	4b33      	ldr	r3, [pc, #204]	; (8009ed4 <RadioSetTxGenericConfig+0x460>)
 8009e08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 8009e0c:	f7fe ffb7 	bl	8008d7e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8009e10:	2001      	movs	r0, #1
 8009e12:	f7fe f953 	bl	80080bc <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009e16:	4830      	ldr	r0, [pc, #192]	; (8009ed8 <RadioSetTxGenericConfig+0x464>)
 8009e18:	f000 fd76 	bl	800a908 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009e1c:	482f      	ldr	r0, [pc, #188]	; (8009edc <RadioSetTxGenericConfig+0x468>)
 8009e1e:	f000 fe45 	bl	800aaac <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8009e22:	4b2c      	ldr	r3, [pc, #176]	; (8009ed4 <RadioSetTxGenericConfig+0x460>)
 8009e24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e28:	2b06      	cmp	r3, #6
 8009e2a:	d10d      	bne.n	8009e48 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8009e2c:	f640 0089 	movw	r0, #2185	; 0x889
 8009e30:	f000 ff98 	bl	800ad64 <SUBGRF_ReadRegister>
 8009e34:	4603      	mov	r3, r0
 8009e36:	f023 0304 	bic.w	r3, r3, #4
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	f640 0089 	movw	r0, #2185	; 0x889
 8009e42:	f000 ff7b 	bl	800ad3c <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 8009e46:	e02d      	b.n	8009ea4 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8009e48:	f640 0089 	movw	r0, #2185	; 0x889
 8009e4c:	f000 ff8a 	bl	800ad64 <SUBGRF_ReadRegister>
 8009e50:	4603      	mov	r3, r0
 8009e52:	f043 0304 	orr.w	r3, r3, #4
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	4619      	mov	r1, r3
 8009e5a:	f640 0089 	movw	r0, #2185	; 0x889
 8009e5e:	f000 ff6d 	bl	800ad3c <SUBGRF_WriteRegister>
        break;
 8009e62:	e01f      	b.n	8009ea4 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d004      	beq.n	8009e76 <RadioSetTxGenericConfig+0x402>
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e74:	d902      	bls.n	8009e7c <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8009e76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e7a:	e027      	b.n	8009ecc <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8009e7c:	2003      	movs	r0, #3
 8009e7e:	f7fe f91d 	bl	80080bc <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8009e82:	4b14      	ldr	r3, [pc, #80]	; (8009ed4 <RadioSetTxGenericConfig+0x460>)
 8009e84:	2202      	movs	r2, #2
 8009e86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a11      	ldr	r2, [pc, #68]	; (8009ed4 <RadioSetTxGenericConfig+0x460>)
 8009e90:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8009e92:	4b10      	ldr	r3, [pc, #64]	; (8009ed4 <RadioSetTxGenericConfig+0x460>)
 8009e94:	2216      	movs	r2, #22
 8009e96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009e9a:	480f      	ldr	r0, [pc, #60]	; (8009ed8 <RadioSetTxGenericConfig+0x464>)
 8009e9c:	f000 fd34 	bl	800a908 <SUBGRF_SetModulationParams>
        break;
 8009ea0:	e000      	b.n	8009ea4 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8009ea2:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8009ea4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f001 f863 	bl	800af74 <SUBGRF_SetRfTxPower>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	4b08      	ldr	r3, [pc, #32]	; (8009ed4 <RadioSetTxGenericConfig+0x460>)
 8009eb4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8009eb8:	4b06      	ldr	r3, [pc, #24]	; (8009ed4 <RadioSetTxGenericConfig+0x460>)
 8009eba:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f001 fa37 	bl	800b332 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8009ec4:	4a03      	ldr	r2, [pc, #12]	; (8009ed4 <RadioSetTxGenericConfig+0x460>)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6053      	str	r3, [r2, #4]
    return 0;
 8009eca:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3738      	adds	r7, #56	; 0x38
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}
 8009ed4:	20000964 	.word	0x20000964
 8009ed8:	2000099c 	.word	0x2000099c
 8009edc:	20000972 	.word	0x20000972

08009ee0 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b085      	sub	sp, #20
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8009eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3714      	adds	r7, #20
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bc80      	pop	{r7}
 8009ef6:	4770      	bx	lr

08009ef8 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009f02:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8009f04:	4618      	mov	r0, r3
 8009f06:	370c      	adds	r7, #12
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bc80      	pop	{r7}
 8009f0c:	4770      	bx	lr
	...

08009f10 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d002      	beq.n	8009f24 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8009f1e:	4a1d      	ldr	r2, [pc, #116]	; (8009f94 <SUBGRF_Init+0x84>)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8009f24:	f7f8 fda6 	bl	8002a74 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8009f28:	2002      	movs	r0, #2
 8009f2a:	f001 f8ff 	bl	800b12c <Radio_SMPS_Set>

    ImageCalibrated = false;
 8009f2e:	4b1a      	ldr	r3, [pc, #104]	; (8009f98 <SUBGRF_Init+0x88>)
 8009f30:	2200      	movs	r2, #0
 8009f32:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8009f34:	2000      	movs	r0, #0
 8009f36:	f000 f97d 	bl	800a234 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8009f3a:	f001 fb52 	bl	800b5e2 <RBI_IsTCXO>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d10e      	bne.n	8009f62 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8009f44:	2140      	movs	r1, #64	; 0x40
 8009f46:	2001      	movs	r0, #1
 8009f48:	f000 fb82 	bl	800a650 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8009f4c:	2100      	movs	r1, #0
 8009f4e:	f640 1011 	movw	r0, #2321	; 0x911
 8009f52:	f000 fef3 	bl	800ad3c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8009f56:	237f      	movs	r3, #127	; 0x7f
 8009f58:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8009f5a:	7b38      	ldrb	r0, [r7, #12]
 8009f5c:	f000 fa8b 	bl	800a476 <SUBGRF_Calibrate>
 8009f60:	e009      	b.n	8009f76 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8009f62:	2120      	movs	r1, #32
 8009f64:	f640 1011 	movw	r0, #2321	; 0x911
 8009f68:	f000 fee8 	bl	800ad3c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8009f6c:	2120      	movs	r1, #32
 8009f6e:	f640 1012 	movw	r0, #2322	; 0x912
 8009f72:	f000 fee3 	bl	800ad3c <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009f76:	210e      	movs	r1, #14
 8009f78:	f640 101f 	movw	r0, #2335	; 0x91f
 8009f7c:	f000 fede 	bl	800ad3c <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8009f80:	f001 fa86 	bl	800b490 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8009f84:	4b05      	ldr	r3, [pc, #20]	; (8009f9c <SUBGRF_Init+0x8c>)
 8009f86:	2201      	movs	r2, #1
 8009f88:	701a      	strb	r2, [r3, #0]
}
 8009f8a:	bf00      	nop
 8009f8c:	3710      	adds	r7, #16
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
 8009f92:	bf00      	nop
 8009f94:	200009fc 	.word	0x200009fc
 8009f98:	200009f8 	.word	0x200009f8
 8009f9c:	200009f0 	.word	0x200009f0

08009fa0 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	af00      	add	r7, sp, #0
    return OperatingMode;
 8009fa4:	4b02      	ldr	r3, [pc, #8]	; (8009fb0 <SUBGRF_GetOperatingMode+0x10>)
 8009fa6:	781b      	ldrb	r3, [r3, #0]
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bc80      	pop	{r7}
 8009fae:	4770      	bx	lr
 8009fb0:	200009f0 	.word	0x200009f0

08009fb4 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8009fc0:	78fb      	ldrb	r3, [r7, #3]
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	6879      	ldr	r1, [r7, #4]
 8009fc6:	2000      	movs	r0, #0
 8009fc8:	f000 ff24 	bl	800ae14 <SUBGRF_WriteBuffer>
}
 8009fcc:	bf00      	nop
 8009fce:	3708      	adds	r7, #8
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b086      	sub	sp, #24
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	4613      	mov	r3, r2
 8009fe0:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8009fe6:	f107 0317 	add.w	r3, r7, #23
 8009fea:	4619      	mov	r1, r3
 8009fec:	68b8      	ldr	r0, [r7, #8]
 8009fee:	f000 fe27 	bl	800ac40 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	79fa      	ldrb	r2, [r7, #7]
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d201      	bcs.n	800a000 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e007      	b.n	800a010 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800a000:	7df8      	ldrb	r0, [r7, #23]
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	461a      	mov	r2, r3
 800a008:	68f9      	ldr	r1, [r7, #12]
 800a00a:	f000 ff25 	bl	800ae58 <SUBGRF_ReadBuffer>

    return 0;
 800a00e:	2300      	movs	r3, #0
}
 800a010:	4618      	mov	r0, r3
 800a012:	3718      	adds	r7, #24
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	460b      	mov	r3, r1
 800a022:	607a      	str	r2, [r7, #4]
 800a024:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800a026:	7afb      	ldrb	r3, [r7, #11]
 800a028:	4619      	mov	r1, r3
 800a02a:	68f8      	ldr	r0, [r7, #12]
 800a02c:	f7ff ffc2 	bl	8009fb4 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 f91b 	bl	800a26c <SUBGRF_SetTx>
}
 800a036:	bf00      	nop
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}

0800a03e <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 800a03e:	b580      	push	{r7, lr}
 800a040:	b082      	sub	sp, #8
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800a046:	2208      	movs	r2, #8
 800a048:	6879      	ldr	r1, [r7, #4]
 800a04a:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 800a04e:	f000 fe9d 	bl	800ad8c <SUBGRF_WriteRegisters>
    return 0;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3708      	adds	r7, #8
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	4603      	mov	r3, r0
 800a064:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800a066:	88fb      	ldrh	r3, [r7, #6]
 800a068:	0a1b      	lsrs	r3, r3, #8
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800a070:	88fb      	ldrh	r3, [r7, #6]
 800a072:	b2db      	uxtb	r3, r3
 800a074:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800a076:	f000 fb6f 	bl	800a758 <SUBGRF_GetPacketType>
 800a07a:	4603      	mov	r3, r0
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d108      	bne.n	800a092 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800a080:	f107 030c 	add.w	r3, r7, #12
 800a084:	2202      	movs	r2, #2
 800a086:	4619      	mov	r1, r3
 800a088:	f240 60bc 	movw	r0, #1724	; 0x6bc
 800a08c:	f000 fe7e 	bl	800ad8c <SUBGRF_WriteRegisters>
            break;
 800a090:	e000      	b.n	800a094 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800a092:	bf00      	nop
    }
}
 800a094:	bf00      	nop
 800a096:	3710      	adds	r7, #16
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800a0a6:	88fb      	ldrh	r3, [r7, #6]
 800a0a8:	0a1b      	lsrs	r3, r3, #8
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800a0b0:	88fb      	ldrh	r3, [r7, #6]
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800a0b6:	f000 fb4f 	bl	800a758 <SUBGRF_GetPacketType>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d108      	bne.n	800a0d2 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800a0c0:	f107 030c 	add.w	r3, r7, #12
 800a0c4:	2202      	movs	r2, #2
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	f240 60be 	movw	r0, #1726	; 0x6be
 800a0cc:	f000 fe5e 	bl	800ad8c <SUBGRF_WriteRegisters>
            break;
 800a0d0:	e000      	b.n	800a0d4 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800a0d2:	bf00      	nop
    }
}
 800a0d4:	bf00      	nop
 800a0d6:	3710      	adds	r7, #16
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800a0ea:	f000 fb35 	bl	800a758 <SUBGRF_GetPacketType>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d121      	bne.n	800a138 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800a0f4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800a0f8:	f000 fe34 	bl	800ad64 <SUBGRF_ReadRegister>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	f023 0301 	bic.w	r3, r3, #1
 800a102:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800a104:	88fb      	ldrh	r3, [r7, #6]
 800a106:	0a1b      	lsrs	r3, r3, #8
 800a108:	b29b      	uxth	r3, r3
 800a10a:	b25b      	sxtb	r3, r3
 800a10c:	f003 0301 	and.w	r3, r3, #1
 800a110:	b25a      	sxtb	r2, r3
 800a112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a116:	4313      	orrs	r3, r2
 800a118:	b25b      	sxtb	r3, r3
 800a11a:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800a11c:	7bfb      	ldrb	r3, [r7, #15]
 800a11e:	4619      	mov	r1, r3
 800a120:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800a124:	f000 fe0a 	bl	800ad3c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800a128:	88fb      	ldrh	r3, [r7, #6]
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	4619      	mov	r1, r3
 800a12e:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800a132:	f000 fe03 	bl	800ad3c <SUBGRF_WriteRegister>
            break;
 800a136:	e000      	b.n	800a13a <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800a138:	bf00      	nop
    }
}
 800a13a:	bf00      	nop
 800a13c:	3710      	adds	r7, #16
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b082      	sub	sp, #8
 800a146:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800a148:	2300      	movs	r3, #0
 800a14a:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800a14c:	2300      	movs	r3, #0
 800a14e:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800a150:	2300      	movs	r3, #0
 800a152:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800a154:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800a158:	f000 fe04 	bl	800ad64 <SUBGRF_ReadRegister>
 800a15c:	4603      	mov	r3, r0
 800a15e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800a160:	79fb      	ldrb	r3, [r7, #7]
 800a162:	f023 0301 	bic.w	r3, r3, #1
 800a166:	b2db      	uxtb	r3, r3
 800a168:	4619      	mov	r1, r3
 800a16a:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800a16e:	f000 fde5 	bl	800ad3c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800a172:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800a176:	f000 fdf5 	bl	800ad64 <SUBGRF_ReadRegister>
 800a17a:	4603      	mov	r3, r0
 800a17c:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800a17e:	79bb      	ldrb	r3, [r7, #6]
 800a180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a184:	b2db      	uxtb	r3, r3
 800a186:	4619      	mov	r1, r3
 800a188:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800a18c:	f000 fdd6 	bl	800ad3c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800a190:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800a194:	f000 f88a 	bl	800a2ac <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800a198:	463b      	mov	r3, r7
 800a19a:	2204      	movs	r2, #4
 800a19c:	4619      	mov	r1, r3
 800a19e:	f640 0019 	movw	r0, #2073	; 0x819
 800a1a2:	f000 fe15 	bl	800add0 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800a1a6:	2000      	movs	r0, #0
 800a1a8:	f000 f844 	bl	800a234 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800a1ac:	79fb      	ldrb	r3, [r7, #7]
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800a1b4:	f000 fdc2 	bl	800ad3c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800a1b8:	79bb      	ldrb	r3, [r7, #6]
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800a1c0:	f000 fdbc 	bl	800ad3c <SUBGRF_WriteRegister>

    return number;
 800a1c4:	683b      	ldr	r3, [r7, #0]
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3708      	adds	r7, #8
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
	...

0800a1d0 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800a1d8:	2000      	movs	r0, #0
 800a1da:	f001 f999 	bl	800b510 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800a1de:	2002      	movs	r0, #2
 800a1e0:	f000 ffa4 	bl	800b12c <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a1e4:	793b      	ldrb	r3, [r7, #4]
 800a1e6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800a1f0:	793b      	ldrb	r3, [r7, #4]
 800a1f2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a1f6:	b2db      	uxtb	r3, r3
 800a1f8:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a1fa:	b25b      	sxtb	r3, r3
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800a200:	793b      	ldrb	r3, [r7, #4]
 800a202:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a206:	b2db      	uxtb	r3, r3
 800a208:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800a20a:	4313      	orrs	r3, r2
 800a20c:	b25b      	sxtb	r3, r3
 800a20e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a210:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800a212:	f107 030f 	add.w	r3, r7, #15
 800a216:	2201      	movs	r2, #1
 800a218:	4619      	mov	r1, r3
 800a21a:	2084      	movs	r0, #132	; 0x84
 800a21c:	f000 fe3e 	bl	800ae9c <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800a220:	4b03      	ldr	r3, [pc, #12]	; (800a230 <SUBGRF_SetSleep+0x60>)
 800a222:	2200      	movs	r2, #0
 800a224:	701a      	strb	r2, [r3, #0]
}
 800a226:	bf00      	nop
 800a228:	3710      	adds	r7, #16
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop
 800a230:	200009f0 	.word	0x200009f0

0800a234 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	4603      	mov	r3, r0
 800a23c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800a23e:	1dfb      	adds	r3, r7, #7
 800a240:	2201      	movs	r2, #1
 800a242:	4619      	mov	r1, r3
 800a244:	2080      	movs	r0, #128	; 0x80
 800a246:	f000 fe29 	bl	800ae9c <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800a24a:	79fb      	ldrb	r3, [r7, #7]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d103      	bne.n	800a258 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800a250:	4b05      	ldr	r3, [pc, #20]	; (800a268 <SUBGRF_SetStandby+0x34>)
 800a252:	2201      	movs	r2, #1
 800a254:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800a256:	e002      	b.n	800a25e <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800a258:	4b03      	ldr	r3, [pc, #12]	; (800a268 <SUBGRF_SetStandby+0x34>)
 800a25a:	2202      	movs	r2, #2
 800a25c:	701a      	strb	r2, [r3, #0]
}
 800a25e:	bf00      	nop
 800a260:	3708      	adds	r7, #8
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
 800a266:	bf00      	nop
 800a268:	200009f0 	.word	0x200009f0

0800a26c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800a274:	4b0c      	ldr	r3, [pc, #48]	; (800a2a8 <SUBGRF_SetTx+0x3c>)
 800a276:	2204      	movs	r2, #4
 800a278:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	0c1b      	lsrs	r3, r3, #16
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	0a1b      	lsrs	r3, r3, #8
 800a286:	b2db      	uxtb	r3, r3
 800a288:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800a290:	f107 030c 	add.w	r3, r7, #12
 800a294:	2203      	movs	r2, #3
 800a296:	4619      	mov	r1, r3
 800a298:	2083      	movs	r0, #131	; 0x83
 800a29a:	f000 fdff 	bl	800ae9c <SUBGRF_WriteCommand>
}
 800a29e:	bf00      	nop
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	200009f0 	.word	0x200009f0

0800a2ac <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800a2b4:	4b0c      	ldr	r3, [pc, #48]	; (800a2e8 <SUBGRF_SetRx+0x3c>)
 800a2b6:	2205      	movs	r2, #5
 800a2b8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	0c1b      	lsrs	r3, r3, #16
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	0a1b      	lsrs	r3, r3, #8
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800a2d0:	f107 030c 	add.w	r3, r7, #12
 800a2d4:	2203      	movs	r2, #3
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	2082      	movs	r0, #130	; 0x82
 800a2da:	f000 fddf 	bl	800ae9c <SUBGRF_WriteCommand>
}
 800a2de:	bf00      	nop
 800a2e0:	3710      	adds	r7, #16
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	200009f0 	.word	0x200009f0

0800a2ec <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800a2f4:	4b0e      	ldr	r3, [pc, #56]	; (800a330 <SUBGRF_SetRxBoosted+0x44>)
 800a2f6:	2205      	movs	r2, #5
 800a2f8:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800a2fa:	2197      	movs	r1, #151	; 0x97
 800a2fc:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800a300:	f000 fd1c 	bl	800ad3c <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	0c1b      	lsrs	r3, r3, #16
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	0a1b      	lsrs	r3, r3, #8
 800a310:	b2db      	uxtb	r3, r3
 800a312:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	b2db      	uxtb	r3, r3
 800a318:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800a31a:	f107 030c 	add.w	r3, r7, #12
 800a31e:	2203      	movs	r2, #3
 800a320:	4619      	mov	r1, r3
 800a322:	2082      	movs	r0, #130	; 0x82
 800a324:	f000 fdba 	bl	800ae9c <SUBGRF_WriteCommand>
}
 800a328:	bf00      	nop
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	200009f0 	.word	0x200009f0

0800a334 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	0c1b      	lsrs	r3, r3, #16
 800a342:	b2db      	uxtb	r3, r3
 800a344:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	0a1b      	lsrs	r3, r3, #8
 800a34a:	b2db      	uxtb	r3, r3
 800a34c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	b2db      	uxtb	r3, r3
 800a352:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	0c1b      	lsrs	r3, r3, #16
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	0a1b      	lsrs	r3, r3, #8
 800a360:	b2db      	uxtb	r3, r3
 800a362:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	b2db      	uxtb	r3, r3
 800a368:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800a36a:	f107 0308 	add.w	r3, r7, #8
 800a36e:	2206      	movs	r2, #6
 800a370:	4619      	mov	r1, r3
 800a372:	2094      	movs	r0, #148	; 0x94
 800a374:	f000 fd92 	bl	800ae9c <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800a378:	4b03      	ldr	r3, [pc, #12]	; (800a388 <SUBGRF_SetRxDutyCycle+0x54>)
 800a37a:	2206      	movs	r2, #6
 800a37c:	701a      	strb	r2, [r3, #0]
}
 800a37e:	bf00      	nop
 800a380:	3710      	adds	r7, #16
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	200009f0 	.word	0x200009f0

0800a38c <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800a390:	2200      	movs	r2, #0
 800a392:	2100      	movs	r1, #0
 800a394:	20c5      	movs	r0, #197	; 0xc5
 800a396:	f000 fd81 	bl	800ae9c <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800a39a:	4b02      	ldr	r3, [pc, #8]	; (800a3a4 <SUBGRF_SetCad+0x18>)
 800a39c:	2207      	movs	r2, #7
 800a39e:	701a      	strb	r2, [r3, #0]
}
 800a3a0:	bf00      	nop
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	200009f0 	.word	0x200009f0

0800a3a8 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	20d1      	movs	r0, #209	; 0xd1
 800a3b2:	f000 fd73 	bl	800ae9c <SUBGRF_WriteCommand>
}
 800a3b6:	bf00      	nop
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800a3be:	2200      	movs	r2, #0
 800a3c0:	2100      	movs	r1, #0
 800a3c2:	20d2      	movs	r0, #210	; 0xd2
 800a3c4:	f000 fd6a 	bl	800ae9c <SUBGRF_WriteCommand>
}
 800a3c8:	bf00      	nop
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b082      	sub	sp, #8
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800a3d6:	1dfb      	adds	r3, r7, #7
 800a3d8:	2201      	movs	r2, #1
 800a3da:	4619      	mov	r1, r3
 800a3dc:	209f      	movs	r0, #159	; 0x9f
 800a3de:	f000 fd5d 	bl	800ae9c <SUBGRF_WriteCommand>
}
 800a3e2:	bf00      	nop
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b084      	sub	sp, #16
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800a3f4:	1dfb      	adds	r3, r7, #7
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	20a0      	movs	r0, #160	; 0xa0
 800a3fc:	f000 fd4e 	bl	800ae9c <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800a400:	79fb      	ldrb	r3, [r7, #7]
 800a402:	2b3f      	cmp	r3, #63	; 0x3f
 800a404:	d91c      	bls.n	800a440 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800a406:	79fb      	ldrb	r3, [r7, #7]
 800a408:	085b      	lsrs	r3, r3, #1
 800a40a:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800a40c:	2300      	movs	r3, #0
 800a40e:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800a410:	2300      	movs	r3, #0
 800a412:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800a414:	e005      	b.n	800a422 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800a416:	7bfb      	ldrb	r3, [r7, #15]
 800a418:	089b      	lsrs	r3, r3, #2
 800a41a:	73fb      	strb	r3, [r7, #15]
            exp++;
 800a41c:	7bbb      	ldrb	r3, [r7, #14]
 800a41e:	3301      	adds	r3, #1
 800a420:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800a422:	7bfb      	ldrb	r3, [r7, #15]
 800a424:	2b1f      	cmp	r3, #31
 800a426:	d8f6      	bhi.n	800a416 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800a428:	7bfb      	ldrb	r3, [r7, #15]
 800a42a:	00db      	lsls	r3, r3, #3
 800a42c:	b2da      	uxtb	r2, r3
 800a42e:	7bbb      	ldrb	r3, [r7, #14]
 800a430:	4413      	add	r3, r2
 800a432:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800a434:	7b7b      	ldrb	r3, [r7, #13]
 800a436:	4619      	mov	r1, r3
 800a438:	f240 7006 	movw	r0, #1798	; 0x706
 800a43c:	f000 fc7e 	bl	800ad3c <SUBGRF_WriteRegister>
    }
}
 800a440:	bf00      	nop
 800a442:	3710      	adds	r7, #16
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800a44e:	f001 f8d3 	bl	800b5f8 <RBI_IsDCDC>
 800a452:	4603      	mov	r3, r0
 800a454:	2b01      	cmp	r3, #1
 800a456:	d102      	bne.n	800a45e <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800a458:	2301      	movs	r3, #1
 800a45a:	71fb      	strb	r3, [r7, #7]
 800a45c:	e001      	b.n	800a462 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800a45e:	2300      	movs	r3, #0
 800a460:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800a462:	1dfb      	adds	r3, r7, #7
 800a464:	2201      	movs	r2, #1
 800a466:	4619      	mov	r1, r3
 800a468:	2096      	movs	r0, #150	; 0x96
 800a46a:	f000 fd17 	bl	800ae9c <SUBGRF_WriteCommand>
}
 800a46e:	bf00      	nop
 800a470:	3708      	adds	r7, #8
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}

0800a476 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800a476:	b580      	push	{r7, lr}
 800a478:	b084      	sub	sp, #16
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a47e:	793b      	ldrb	r3, [r7, #4]
 800a480:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a484:	b2db      	uxtb	r3, r3
 800a486:	019b      	lsls	r3, r3, #6
 800a488:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a48a:	793b      	ldrb	r3, [r7, #4]
 800a48c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a490:	b2db      	uxtb	r3, r3
 800a492:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a494:	b25b      	sxtb	r3, r3
 800a496:	4313      	orrs	r3, r2
 800a498:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a49a:	793b      	ldrb	r3, [r7, #4]
 800a49c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a4a0:	b2db      	uxtb	r3, r3
 800a4a2:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a4a4:	b25b      	sxtb	r3, r3
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a4aa:	793b      	ldrb	r3, [r7, #4]
 800a4ac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a4b4:	b25b      	sxtb	r3, r3
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a4ba:	793b      	ldrb	r3, [r7, #4]
 800a4bc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a4c4:	b25b      	sxtb	r3, r3
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800a4ca:	793b      	ldrb	r3, [r7, #4]
 800a4cc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a4d4:	b25b      	sxtb	r3, r3
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800a4da:	793b      	ldrb	r3, [r7, #4]
 800a4dc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	b25b      	sxtb	r3, r3
 800a4e8:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a4ea:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800a4ec:	f107 030f 	add.w	r3, r7, #15
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	2089      	movs	r0, #137	; 0x89
 800a4f6:	f000 fcd1 	bl	800ae9c <SUBGRF_WriteCommand>
}
 800a4fa:	bf00      	nop
 800a4fc:	3710      	adds	r7, #16
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
	...

0800a504 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	4a1d      	ldr	r2, [pc, #116]	; (800a584 <SUBGRF_CalibrateImage+0x80>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d904      	bls.n	800a51e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800a514:	23e1      	movs	r3, #225	; 0xe1
 800a516:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800a518:	23e9      	movs	r3, #233	; 0xe9
 800a51a:	737b      	strb	r3, [r7, #13]
 800a51c:	e027      	b.n	800a56e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	4a19      	ldr	r2, [pc, #100]	; (800a588 <SUBGRF_CalibrateImage+0x84>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d904      	bls.n	800a530 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800a526:	23d7      	movs	r3, #215	; 0xd7
 800a528:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800a52a:	23db      	movs	r3, #219	; 0xdb
 800a52c:	737b      	strb	r3, [r7, #13]
 800a52e:	e01e      	b.n	800a56e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	4a16      	ldr	r2, [pc, #88]	; (800a58c <SUBGRF_CalibrateImage+0x88>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d904      	bls.n	800a542 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800a538:	23c1      	movs	r3, #193	; 0xc1
 800a53a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800a53c:	23c5      	movs	r3, #197	; 0xc5
 800a53e:	737b      	strb	r3, [r7, #13]
 800a540:	e015      	b.n	800a56e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	4a12      	ldr	r2, [pc, #72]	; (800a590 <SUBGRF_CalibrateImage+0x8c>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d904      	bls.n	800a554 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800a54a:	2375      	movs	r3, #117	; 0x75
 800a54c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800a54e:	2381      	movs	r3, #129	; 0x81
 800a550:	737b      	strb	r3, [r7, #13]
 800a552:	e00c      	b.n	800a56e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	4a0f      	ldr	r2, [pc, #60]	; (800a594 <SUBGRF_CalibrateImage+0x90>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d904      	bls.n	800a566 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 800a55c:	236b      	movs	r3, #107	; 0x6b
 800a55e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800a560:	236f      	movs	r3, #111	; 0x6f
 800a562:	737b      	strb	r3, [r7, #13]
 800a564:	e003      	b.n	800a56e <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800a566:	2329      	movs	r3, #41	; 0x29
 800a568:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800a56a:	232b      	movs	r3, #43	; 0x2b
 800a56c:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800a56e:	f107 030c 	add.w	r3, r7, #12
 800a572:	2202      	movs	r2, #2
 800a574:	4619      	mov	r1, r3
 800a576:	2098      	movs	r0, #152	; 0x98
 800a578:	f000 fc90 	bl	800ae9c <SUBGRF_WriteCommand>
}
 800a57c:	bf00      	nop
 800a57e:	3710      	adds	r7, #16
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}
 800a584:	35a4e900 	.word	0x35a4e900
 800a588:	32a9f880 	.word	0x32a9f880
 800a58c:	2de54480 	.word	0x2de54480
 800a590:	1b6b0b00 	.word	0x1b6b0b00
 800a594:	1954fc40 	.word	0x1954fc40

0800a598 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800a598:	b590      	push	{r4, r7, lr}
 800a59a:	b085      	sub	sp, #20
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	4604      	mov	r4, r0
 800a5a0:	4608      	mov	r0, r1
 800a5a2:	4611      	mov	r1, r2
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	4623      	mov	r3, r4
 800a5a8:	71fb      	strb	r3, [r7, #7]
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	71bb      	strb	r3, [r7, #6]
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	717b      	strb	r3, [r7, #5]
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800a5b6:	79fb      	ldrb	r3, [r7, #7]
 800a5b8:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800a5ba:	79bb      	ldrb	r3, [r7, #6]
 800a5bc:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800a5be:	797b      	ldrb	r3, [r7, #5]
 800a5c0:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800a5c2:	793b      	ldrb	r3, [r7, #4]
 800a5c4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800a5c6:	f107 030c 	add.w	r3, r7, #12
 800a5ca:	2204      	movs	r2, #4
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	2095      	movs	r0, #149	; 0x95
 800a5d0:	f000 fc64 	bl	800ae9c <SUBGRF_WriteCommand>
}
 800a5d4:	bf00      	nop
 800a5d6:	3714      	adds	r7, #20
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd90      	pop	{r4, r7, pc}

0800a5dc <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800a5dc:	b590      	push	{r4, r7, lr}
 800a5de:	b085      	sub	sp, #20
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	4604      	mov	r4, r0
 800a5e4:	4608      	mov	r0, r1
 800a5e6:	4611      	mov	r1, r2
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	4623      	mov	r3, r4
 800a5ec:	80fb      	strh	r3, [r7, #6]
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	80bb      	strh	r3, [r7, #4]
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	807b      	strh	r3, [r7, #2]
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800a5fa:	88fb      	ldrh	r3, [r7, #6]
 800a5fc:	0a1b      	lsrs	r3, r3, #8
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	b2db      	uxtb	r3, r3
 800a602:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800a604:	88fb      	ldrh	r3, [r7, #6]
 800a606:	b2db      	uxtb	r3, r3
 800a608:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800a60a:	88bb      	ldrh	r3, [r7, #4]
 800a60c:	0a1b      	lsrs	r3, r3, #8
 800a60e:	b29b      	uxth	r3, r3
 800a610:	b2db      	uxtb	r3, r3
 800a612:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800a614:	88bb      	ldrh	r3, [r7, #4]
 800a616:	b2db      	uxtb	r3, r3
 800a618:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800a61a:	887b      	ldrh	r3, [r7, #2]
 800a61c:	0a1b      	lsrs	r3, r3, #8
 800a61e:	b29b      	uxth	r3, r3
 800a620:	b2db      	uxtb	r3, r3
 800a622:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800a624:	887b      	ldrh	r3, [r7, #2]
 800a626:	b2db      	uxtb	r3, r3
 800a628:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800a62a:	883b      	ldrh	r3, [r7, #0]
 800a62c:	0a1b      	lsrs	r3, r3, #8
 800a62e:	b29b      	uxth	r3, r3
 800a630:	b2db      	uxtb	r3, r3
 800a632:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800a634:	883b      	ldrh	r3, [r7, #0]
 800a636:	b2db      	uxtb	r3, r3
 800a638:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800a63a:	f107 0308 	add.w	r3, r7, #8
 800a63e:	2208      	movs	r2, #8
 800a640:	4619      	mov	r1, r3
 800a642:	2008      	movs	r0, #8
 800a644:	f000 fc2a 	bl	800ae9c <SUBGRF_WriteCommand>
}
 800a648:	bf00      	nop
 800a64a:	3714      	adds	r7, #20
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd90      	pop	{r4, r7, pc}

0800a650 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	4603      	mov	r3, r0
 800a658:	6039      	str	r1, [r7, #0]
 800a65a:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800a65c:	79fb      	ldrb	r3, [r7, #7]
 800a65e:	f003 0307 	and.w	r3, r3, #7
 800a662:	b2db      	uxtb	r3, r3
 800a664:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	0c1b      	lsrs	r3, r3, #16
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	0a1b      	lsrs	r3, r3, #8
 800a672:	b2db      	uxtb	r3, r3
 800a674:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800a67c:	f107 030c 	add.w	r3, r7, #12
 800a680:	2204      	movs	r2, #4
 800a682:	4619      	mov	r1, r3
 800a684:	2097      	movs	r0, #151	; 0x97
 800a686:	f000 fc09 	bl	800ae9c <SUBGRF_WriteCommand>
}
 800a68a:	bf00      	nop
 800a68c:	3710      	adds	r7, #16
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
	...

0800a694 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800a694:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a698:	b084      	sub	sp, #16
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800a6a2:	4b1d      	ldr	r3, [pc, #116]	; (800a718 <SUBGRF_SetRfFrequency+0x84>)
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	f083 0301 	eor.w	r3, r3, #1
 800a6aa:	b2db      	uxtb	r3, r3
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d005      	beq.n	800a6bc <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f7ff ff27 	bl	800a504 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800a6b6:	4b18      	ldr	r3, [pc, #96]	; (800a718 <SUBGRF_SetRfFrequency+0x84>)
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	461c      	mov	r4, r3
 800a6c2:	4615      	mov	r5, r2
 800a6c4:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800a6c8:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800a6cc:	4a13      	ldr	r2, [pc, #76]	; (800a71c <SUBGRF_SetRfFrequency+0x88>)
 800a6ce:	f04f 0300 	mov.w	r3, #0
 800a6d2:	4640      	mov	r0, r8
 800a6d4:	4649      	mov	r1, r9
 800a6d6:	f7f5 fda3 	bl	8000220 <__aeabi_uldivmod>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	460b      	mov	r3, r1
 800a6de:	4613      	mov	r3, r2
 800a6e0:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	0e1b      	lsrs	r3, r3, #24
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	0c1b      	lsrs	r3, r3, #16
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	0a1b      	lsrs	r3, r3, #8
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800a700:	f107 0308 	add.w	r3, r7, #8
 800a704:	2204      	movs	r2, #4
 800a706:	4619      	mov	r1, r3
 800a708:	2086      	movs	r0, #134	; 0x86
 800a70a:	f000 fbc7 	bl	800ae9c <SUBGRF_WriteCommand>
}
 800a70e:	bf00      	nop
 800a710:	3710      	adds	r7, #16
 800a712:	46bd      	mov	sp, r7
 800a714:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a718:	200009f8 	.word	0x200009f8
 800a71c:	01e84800 	.word	0x01e84800

0800a720 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	4603      	mov	r3, r0
 800a728:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800a72a:	79fa      	ldrb	r2, [r7, #7]
 800a72c:	4b09      	ldr	r3, [pc, #36]	; (800a754 <SUBGRF_SetPacketType+0x34>)
 800a72e:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800a730:	79fb      	ldrb	r3, [r7, #7]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d104      	bne.n	800a740 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800a736:	2100      	movs	r1, #0
 800a738:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800a73c:	f000 fafe 	bl	800ad3c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800a740:	1dfb      	adds	r3, r7, #7
 800a742:	2201      	movs	r2, #1
 800a744:	4619      	mov	r1, r3
 800a746:	208a      	movs	r0, #138	; 0x8a
 800a748:	f000 fba8 	bl	800ae9c <SUBGRF_WriteCommand>
}
 800a74c:	bf00      	nop
 800a74e:	3708      	adds	r7, #8
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}
 800a754:	200009f1 	.word	0x200009f1

0800a758 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800a758:	b480      	push	{r7}
 800a75a:	af00      	add	r7, sp, #0
    return PacketType;
 800a75c:	4b02      	ldr	r3, [pc, #8]	; (800a768 <SUBGRF_GetPacketType+0x10>)
 800a75e:	781b      	ldrb	r3, [r3, #0]
}
 800a760:	4618      	mov	r0, r3
 800a762:	46bd      	mov	sp, r7
 800a764:	bc80      	pop	{r7}
 800a766:	4770      	bx	lr
 800a768:	200009f1 	.word	0x200009f1

0800a76c <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	4603      	mov	r3, r0
 800a774:	71fb      	strb	r3, [r7, #7]
 800a776:	460b      	mov	r3, r1
 800a778:	71bb      	strb	r3, [r7, #6]
 800a77a:	4613      	mov	r3, r2
 800a77c:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800a77e:	79fb      	ldrb	r3, [r7, #7]
 800a780:	2b01      	cmp	r3, #1
 800a782:	d149      	bne.n	800a818 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800a784:	2000      	movs	r0, #0
 800a786:	f000 ff42 	bl	800b60e <RBI_GetRFOMaxPowerConfig>
 800a78a:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 800a78c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	429a      	cmp	r2, r3
 800a794:	da01      	bge.n	800a79a <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2b0e      	cmp	r3, #14
 800a79e:	d10e      	bne.n	800a7be <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	2100      	movs	r1, #0
 800a7a6:	2004      	movs	r0, #4
 800a7a8:	f7ff fef6 	bl	800a598 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a7ac:	79ba      	ldrb	r2, [r7, #6]
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	1ad3      	subs	r3, r2, r3
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	330e      	adds	r3, #14
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	71bb      	strb	r3, [r7, #6]
 800a7bc:	e01f      	b.n	800a7fe <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2b0a      	cmp	r3, #10
 800a7c2:	d10e      	bne.n	800a7e2 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	2001      	movs	r0, #1
 800a7cc:	f7ff fee4 	bl	800a598 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800a7d0:	79ba      	ldrb	r2, [r7, #6]
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	1ad3      	subs	r3, r2, r3
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	330d      	adds	r3, #13
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	71bb      	strb	r3, [r7, #6]
 800a7e0:	e00d      	b.n	800a7fe <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	2100      	movs	r1, #0
 800a7e8:	2007      	movs	r0, #7
 800a7ea:	f7ff fed5 	bl	800a598 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a7ee:	79ba      	ldrb	r2, [r7, #6]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	1ad3      	subs	r3, r2, r3
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	330e      	adds	r3, #14
 800a7fa:	b2db      	uxtb	r3, r3
 800a7fc:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800a7fe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a802:	f113 0f11 	cmn.w	r3, #17
 800a806:	da01      	bge.n	800a80c <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800a808:	23ef      	movs	r3, #239	; 0xef
 800a80a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800a80c:	2118      	movs	r1, #24
 800a80e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800a812:	f000 fa93 	bl	800ad3c <SUBGRF_WriteRegister>
 800a816:	e067      	b.n	800a8e8 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800a818:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800a81c:	f000 faa2 	bl	800ad64 <SUBGRF_ReadRegister>
 800a820:	4603      	mov	r3, r0
 800a822:	f043 031e 	orr.w	r3, r3, #30
 800a826:	b2db      	uxtb	r3, r3
 800a828:	4619      	mov	r1, r3
 800a82a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800a82e:	f000 fa85 	bl	800ad3c <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800a832:	2001      	movs	r0, #1
 800a834:	f000 feeb 	bl	800b60e <RBI_GetRFOMaxPowerConfig>
 800a838:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800a83a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a83e:	68fa      	ldr	r2, [r7, #12]
 800a840:	429a      	cmp	r2, r3
 800a842:	da01      	bge.n	800a848 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2b14      	cmp	r3, #20
 800a84c:	d10e      	bne.n	800a86c <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800a84e:	2301      	movs	r3, #1
 800a850:	2200      	movs	r2, #0
 800a852:	2105      	movs	r1, #5
 800a854:	2003      	movs	r0, #3
 800a856:	f7ff fe9f 	bl	800a598 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a85a:	79ba      	ldrb	r2, [r7, #6]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	1ad3      	subs	r3, r2, r3
 800a862:	b2db      	uxtb	r3, r3
 800a864:	3316      	adds	r3, #22
 800a866:	b2db      	uxtb	r3, r3
 800a868:	71bb      	strb	r3, [r7, #6]
 800a86a:	e031      	b.n	800a8d0 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2b11      	cmp	r3, #17
 800a870:	d10e      	bne.n	800a890 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800a872:	2301      	movs	r3, #1
 800a874:	2200      	movs	r2, #0
 800a876:	2103      	movs	r1, #3
 800a878:	2002      	movs	r0, #2
 800a87a:	f7ff fe8d 	bl	800a598 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a87e:	79ba      	ldrb	r2, [r7, #6]
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	b2db      	uxtb	r3, r3
 800a884:	1ad3      	subs	r3, r2, r3
 800a886:	b2db      	uxtb	r3, r3
 800a888:	3316      	adds	r3, #22
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	71bb      	strb	r3, [r7, #6]
 800a88e:	e01f      	b.n	800a8d0 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2b0e      	cmp	r3, #14
 800a894:	d10e      	bne.n	800a8b4 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800a896:	2301      	movs	r3, #1
 800a898:	2200      	movs	r2, #0
 800a89a:	2102      	movs	r1, #2
 800a89c:	2002      	movs	r0, #2
 800a89e:	f7ff fe7b 	bl	800a598 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a8a2:	79ba      	ldrb	r2, [r7, #6]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	b2db      	uxtb	r3, r3
 800a8a8:	1ad3      	subs	r3, r2, r3
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	330e      	adds	r3, #14
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	71bb      	strb	r3, [r7, #6]
 800a8b2:	e00d      	b.n	800a8d0 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	2107      	movs	r1, #7
 800a8ba:	2004      	movs	r0, #4
 800a8bc:	f7ff fe6c 	bl	800a598 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a8c0:	79ba      	ldrb	r2, [r7, #6]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	1ad3      	subs	r3, r2, r3
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	3316      	adds	r3, #22
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800a8d0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a8d4:	f113 0f09 	cmn.w	r3, #9
 800a8d8:	da01      	bge.n	800a8de <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800a8da:	23f7      	movs	r3, #247	; 0xf7
 800a8dc:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800a8de:	2138      	movs	r1, #56	; 0x38
 800a8e0:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800a8e4:	f000 fa2a 	bl	800ad3c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800a8e8:	79bb      	ldrb	r3, [r7, #6]
 800a8ea:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 800a8ec:	797b      	ldrb	r3, [r7, #5]
 800a8ee:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800a8f0:	f107 0308 	add.w	r3, r7, #8
 800a8f4:	2202      	movs	r2, #2
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	208e      	movs	r0, #142	; 0x8e
 800a8fa:	f000 facf 	bl	800ae9c <SUBGRF_WriteCommand>
}
 800a8fe:	bf00      	nop
 800a900:	3710      	adds	r7, #16
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
	...

0800a908 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800a908:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a90c:	b086      	sub	sp, #24
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800a912:	2300      	movs	r3, #0
 800a914:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800a916:	4a61      	ldr	r2, [pc, #388]	; (800aa9c <SUBGRF_SetModulationParams+0x194>)
 800a918:	f107 0308 	add.w	r3, r7, #8
 800a91c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a920:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	781a      	ldrb	r2, [r3, #0]
 800a928:	4b5d      	ldr	r3, [pc, #372]	; (800aaa0 <SUBGRF_SetModulationParams+0x198>)
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d004      	beq.n	800a93a <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	4618      	mov	r0, r3
 800a936:	f7ff fef3 	bl	800a720 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	2b03      	cmp	r3, #3
 800a940:	f200 80a5 	bhi.w	800aa8e <SUBGRF_SetModulationParams+0x186>
 800a944:	a201      	add	r2, pc, #4	; (adr r2, 800a94c <SUBGRF_SetModulationParams+0x44>)
 800a946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a94a:	bf00      	nop
 800a94c:	0800a95d 	.word	0x0800a95d
 800a950:	0800aa1d 	.word	0x0800aa1d
 800a954:	0800a9df 	.word	0x0800a9df
 800a958:	0800aa4b 	.word	0x0800aa4b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800a95c:	2308      	movs	r3, #8
 800a95e:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	4a4f      	ldr	r2, [pc, #316]	; (800aaa4 <SUBGRF_SetModulationParams+0x19c>)
 800a966:	fbb2 f3f3 	udiv	r3, r2, r3
 800a96a:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	0c1b      	lsrs	r3, r3, #16
 800a970:	b2db      	uxtb	r3, r3
 800a972:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	0a1b      	lsrs	r3, r3, #8
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	7b1b      	ldrb	r3, [r3, #12]
 800a986:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	7b5b      	ldrb	r3, [r3, #13]
 800a98c:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	689b      	ldr	r3, [r3, #8]
 800a992:	2200      	movs	r2, #0
 800a994:	461c      	mov	r4, r3
 800a996:	4615      	mov	r5, r2
 800a998:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800a99c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800a9a0:	4a41      	ldr	r2, [pc, #260]	; (800aaa8 <SUBGRF_SetModulationParams+0x1a0>)
 800a9a2:	f04f 0300 	mov.w	r3, #0
 800a9a6:	4640      	mov	r0, r8
 800a9a8:	4649      	mov	r1, r9
 800a9aa:	f7f5 fc39 	bl	8000220 <__aeabi_uldivmod>
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	460b      	mov	r3, r1
 800a9b2:	4613      	mov	r3, r2
 800a9b4:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	0c1b      	lsrs	r3, r3, #16
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	0a1b      	lsrs	r3, r3, #8
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a9cc:	7cfb      	ldrb	r3, [r7, #19]
 800a9ce:	b29a      	uxth	r2, r3
 800a9d0:	f107 0308 	add.w	r3, r7, #8
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	208b      	movs	r0, #139	; 0x8b
 800a9d8:	f000 fa60 	bl	800ae9c <SUBGRF_WriteCommand>
        break;
 800a9dc:	e058      	b.n	800aa90 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800a9de:	2304      	movs	r3, #4
 800a9e0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	691b      	ldr	r3, [r3, #16]
 800a9e6:	4a2f      	ldr	r2, [pc, #188]	; (800aaa4 <SUBGRF_SetModulationParams+0x19c>)
 800a9e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9ec:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	0c1b      	lsrs	r3, r3, #16
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	0a1b      	lsrs	r3, r3, #8
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	7d1b      	ldrb	r3, [r3, #20]
 800aa08:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800aa0a:	7cfb      	ldrb	r3, [r7, #19]
 800aa0c:	b29a      	uxth	r2, r3
 800aa0e:	f107 0308 	add.w	r3, r7, #8
 800aa12:	4619      	mov	r1, r3
 800aa14:	208b      	movs	r0, #139	; 0x8b
 800aa16:	f000 fa41 	bl	800ae9c <SUBGRF_WriteCommand>
        break;
 800aa1a:	e039      	b.n	800aa90 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800aa1c:	2304      	movs	r3, #4
 800aa1e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	7e1b      	ldrb	r3, [r3, #24]
 800aa24:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	7e5b      	ldrb	r3, [r3, #25]
 800aa2a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	7e9b      	ldrb	r3, [r3, #26]
 800aa30:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	7edb      	ldrb	r3, [r3, #27]
 800aa36:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800aa38:	7cfb      	ldrb	r3, [r7, #19]
 800aa3a:	b29a      	uxth	r2, r3
 800aa3c:	f107 0308 	add.w	r3, r7, #8
 800aa40:	4619      	mov	r1, r3
 800aa42:	208b      	movs	r0, #139	; 0x8b
 800aa44:	f000 fa2a 	bl	800ae9c <SUBGRF_WriteCommand>

        break;
 800aa48:	e022      	b.n	800aa90 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800aa4a:	2305      	movs	r3, #5
 800aa4c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	4a14      	ldr	r2, [pc, #80]	; (800aaa4 <SUBGRF_SetModulationParams+0x19c>)
 800aa54:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa58:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	0c1b      	lsrs	r3, r3, #16
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	0a1b      	lsrs	r3, r3, #8
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	b2db      	uxtb	r3, r3
 800aa6e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	7b1b      	ldrb	r3, [r3, #12]
 800aa74:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	7b5b      	ldrb	r3, [r3, #13]
 800aa7a:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800aa7c:	7cfb      	ldrb	r3, [r7, #19]
 800aa7e:	b29a      	uxth	r2, r3
 800aa80:	f107 0308 	add.w	r3, r7, #8
 800aa84:	4619      	mov	r1, r3
 800aa86:	208b      	movs	r0, #139	; 0x8b
 800aa88:	f000 fa08 	bl	800ae9c <SUBGRF_WriteCommand>
        break;
 800aa8c:	e000      	b.n	800aa90 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800aa8e:	bf00      	nop
    }
}
 800aa90:	bf00      	nop
 800aa92:	3718      	adds	r7, #24
 800aa94:	46bd      	mov	sp, r7
 800aa96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800aa9a:	bf00      	nop
 800aa9c:	0800cdc4 	.word	0x0800cdc4
 800aaa0:	200009f1 	.word	0x200009f1
 800aaa4:	3d090000 	.word	0x3d090000
 800aaa8:	01e84800 	.word	0x01e84800

0800aaac <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b086      	sub	sp, #24
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800aab4:	2300      	movs	r3, #0
 800aab6:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800aab8:	4a48      	ldr	r2, [pc, #288]	; (800abdc <SUBGRF_SetPacketParams+0x130>)
 800aaba:	f107 030c 	add.w	r3, r7, #12
 800aabe:	ca07      	ldmia	r2, {r0, r1, r2}
 800aac0:	c303      	stmia	r3!, {r0, r1}
 800aac2:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	781a      	ldrb	r2, [r3, #0]
 800aac8:	4b45      	ldr	r3, [pc, #276]	; (800abe0 <SUBGRF_SetPacketParams+0x134>)
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d004      	beq.n	800aada <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	4618      	mov	r0, r3
 800aad6:	f7ff fe23 	bl	800a720 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	2b03      	cmp	r3, #3
 800aae0:	d878      	bhi.n	800abd4 <SUBGRF_SetPacketParams+0x128>
 800aae2:	a201      	add	r2, pc, #4	; (adr r2, 800aae8 <SUBGRF_SetPacketParams+0x3c>)
 800aae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae8:	0800aaf9 	.word	0x0800aaf9
 800aaec:	0800ab89 	.word	0x0800ab89
 800aaf0:	0800ab7d 	.word	0x0800ab7d
 800aaf4:	0800aaf9 	.word	0x0800aaf9
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	7a5b      	ldrb	r3, [r3, #9]
 800aafc:	2bf1      	cmp	r3, #241	; 0xf1
 800aafe:	d10a      	bne.n	800ab16 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800ab00:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ab04:	f7ff faaa 	bl	800a05c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800ab08:	f248 0005 	movw	r0, #32773	; 0x8005
 800ab0c:	f7ff fac6 	bl	800a09c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800ab10:	2302      	movs	r3, #2
 800ab12:	75bb      	strb	r3, [r7, #22]
 800ab14:	e011      	b.n	800ab3a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	7a5b      	ldrb	r3, [r3, #9]
 800ab1a:	2bf2      	cmp	r3, #242	; 0xf2
 800ab1c:	d10a      	bne.n	800ab34 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800ab1e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800ab22:	f7ff fa9b 	bl	800a05c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800ab26:	f241 0021 	movw	r0, #4129	; 0x1021
 800ab2a:	f7ff fab7 	bl	800a09c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800ab2e:	2306      	movs	r3, #6
 800ab30:	75bb      	strb	r3, [r7, #22]
 800ab32:	e002      	b.n	800ab3a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	7a5b      	ldrb	r3, [r3, #9]
 800ab38:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800ab3a:	2309      	movs	r3, #9
 800ab3c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	885b      	ldrh	r3, [r3, #2]
 800ab42:	0a1b      	lsrs	r3, r3, #8
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	885b      	ldrh	r3, [r3, #2]
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	791b      	ldrb	r3, [r3, #4]
 800ab56:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	795b      	ldrb	r3, [r3, #5]
 800ab5c:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	799b      	ldrb	r3, [r3, #6]
 800ab62:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	79db      	ldrb	r3, [r3, #7]
 800ab68:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	7a1b      	ldrb	r3, [r3, #8]
 800ab6e:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800ab70:	7dbb      	ldrb	r3, [r7, #22]
 800ab72:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	7a9b      	ldrb	r3, [r3, #10]
 800ab78:	753b      	strb	r3, [r7, #20]
        break;
 800ab7a:	e022      	b.n	800abc2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	7b1b      	ldrb	r3, [r3, #12]
 800ab84:	733b      	strb	r3, [r7, #12]
        break;
 800ab86:	e01c      	b.n	800abc2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800ab88:	2306      	movs	r3, #6
 800ab8a:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	89db      	ldrh	r3, [r3, #14]
 800ab90:	0a1b      	lsrs	r3, r3, #8
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	89db      	ldrh	r3, [r3, #14]
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	7c1a      	ldrb	r2, [r3, #16]
 800aba4:	4b0f      	ldr	r3, [pc, #60]	; (800abe4 <SUBGRF_SetPacketParams+0x138>)
 800aba6:	4611      	mov	r1, r2
 800aba8:	7019      	strb	r1, [r3, #0]
 800abaa:	4613      	mov	r3, r2
 800abac:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	7c5b      	ldrb	r3, [r3, #17]
 800abb2:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	7c9b      	ldrb	r3, [r3, #18]
 800abb8:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	7cdb      	ldrb	r3, [r3, #19]
 800abbe:	747b      	strb	r3, [r7, #17]
        break;
 800abc0:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800abc2:	7dfb      	ldrb	r3, [r7, #23]
 800abc4:	b29a      	uxth	r2, r3
 800abc6:	f107 030c 	add.w	r3, r7, #12
 800abca:	4619      	mov	r1, r3
 800abcc:	208c      	movs	r0, #140	; 0x8c
 800abce:	f000 f965 	bl	800ae9c <SUBGRF_WriteCommand>
 800abd2:	e000      	b.n	800abd6 <SUBGRF_SetPacketParams+0x12a>
        return;
 800abd4:	bf00      	nop
}
 800abd6:	3718      	adds	r7, #24
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	0800cdcc 	.word	0x0800cdcc
 800abe0:	200009f1 	.word	0x200009f1
 800abe4:	200009f2 	.word	0x200009f2

0800abe8 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	4603      	mov	r3, r0
 800abf0:	460a      	mov	r2, r1
 800abf2:	71fb      	strb	r3, [r7, #7]
 800abf4:	4613      	mov	r3, r2
 800abf6:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800abf8:	79fb      	ldrb	r3, [r7, #7]
 800abfa:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800abfc:	79bb      	ldrb	r3, [r7, #6]
 800abfe:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800ac00:	f107 030c 	add.w	r3, r7, #12
 800ac04:	2202      	movs	r2, #2
 800ac06:	4619      	mov	r1, r3
 800ac08:	208f      	movs	r0, #143	; 0x8f
 800ac0a:	f000 f947 	bl	800ae9c <SUBGRF_WriteCommand>
}
 800ac0e:	bf00      	nop
 800ac10:	3710      	adds	r7, #16
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b082      	sub	sp, #8
 800ac1a:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800ac20:	1d3b      	adds	r3, r7, #4
 800ac22:	2201      	movs	r2, #1
 800ac24:	4619      	mov	r1, r3
 800ac26:	2015      	movs	r0, #21
 800ac28:	f000 f95a 	bl	800aee0 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800ac2c:	793b      	ldrb	r3, [r7, #4]
 800ac2e:	425b      	negs	r3, r3
 800ac30:	105b      	asrs	r3, r3, #1
 800ac32:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800ac34:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3708      	adds	r7, #8
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800ac4a:	f107 030c 	add.w	r3, r7, #12
 800ac4e:	2202      	movs	r2, #2
 800ac50:	4619      	mov	r1, r3
 800ac52:	2013      	movs	r0, #19
 800ac54:	f000 f944 	bl	800aee0 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800ac58:	f7ff fd7e 	bl	800a758 <SUBGRF_GetPacketType>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	2b01      	cmp	r3, #1
 800ac60:	d10d      	bne.n	800ac7e <SUBGRF_GetRxBufferStatus+0x3e>
 800ac62:	4b0c      	ldr	r3, [pc, #48]	; (800ac94 <SUBGRF_GetRxBufferStatus+0x54>)
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d108      	bne.n	800ac7e <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800ac6c:	f240 7002 	movw	r0, #1794	; 0x702
 800ac70:	f000 f878 	bl	800ad64 <SUBGRF_ReadRegister>
 800ac74:	4603      	mov	r3, r0
 800ac76:	461a      	mov	r2, r3
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	701a      	strb	r2, [r3, #0]
 800ac7c:	e002      	b.n	800ac84 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800ac7e:	7b3a      	ldrb	r2, [r7, #12]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800ac84:	7b7a      	ldrb	r2, [r7, #13]
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	701a      	strb	r2, [r3, #0]
}
 800ac8a:	bf00      	nop
 800ac8c:	3710      	adds	r7, #16
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	200009f2 	.word	0x200009f2

0800ac98 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800aca0:	f107 030c 	add.w	r3, r7, #12
 800aca4:	2203      	movs	r2, #3
 800aca6:	4619      	mov	r1, r3
 800aca8:	2014      	movs	r0, #20
 800acaa:	f000 f919 	bl	800aee0 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800acae:	f7ff fd53 	bl	800a758 <SUBGRF_GetPacketType>
 800acb2:	4603      	mov	r3, r0
 800acb4:	461a      	mov	r2, r3
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d002      	beq.n	800acc8 <SUBGRF_GetPacketStatus+0x30>
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d013      	beq.n	800acee <SUBGRF_GetPacketStatus+0x56>
 800acc6:	e02a      	b.n	800ad1e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800acc8:	7b3a      	ldrb	r2, [r7, #12]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800acce:	7b7b      	ldrb	r3, [r7, #13]
 800acd0:	425b      	negs	r3, r3
 800acd2:	105b      	asrs	r3, r3, #1
 800acd4:	b25a      	sxtb	r2, r3
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800acda:	7bbb      	ldrb	r3, [r7, #14]
 800acdc:	425b      	negs	r3, r3
 800acde:	105b      	asrs	r3, r3, #1
 800ace0:	b25a      	sxtb	r2, r3
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2200      	movs	r2, #0
 800acea:	609a      	str	r2, [r3, #8]
            break;
 800acec:	e020      	b.n	800ad30 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800acee:	7b3b      	ldrb	r3, [r7, #12]
 800acf0:	425b      	negs	r3, r3
 800acf2:	105b      	asrs	r3, r3, #1
 800acf4:	b25a      	sxtb	r2, r3
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800acfa:	7b7b      	ldrb	r3, [r7, #13]
 800acfc:	b25b      	sxtb	r3, r3
 800acfe:	3302      	adds	r3, #2
 800ad00:	109b      	asrs	r3, r3, #2
 800ad02:	b25a      	sxtb	r2, r3
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800ad08:	7bbb      	ldrb	r3, [r7, #14]
 800ad0a:	425b      	negs	r3, r3
 800ad0c:	105b      	asrs	r3, r3, #1
 800ad0e:	b25a      	sxtb	r2, r3
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800ad14:	4b08      	ldr	r3, [pc, #32]	; (800ad38 <SUBGRF_GetPacketStatus+0xa0>)
 800ad16:	681a      	ldr	r2, [r3, #0]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	611a      	str	r2, [r3, #16]
            break;
 800ad1c:	e008      	b.n	800ad30 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800ad1e:	2214      	movs	r2, #20
 800ad20:	2100      	movs	r1, #0
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 fca7 	bl	800b676 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	220f      	movs	r2, #15
 800ad2c:	701a      	strb	r2, [r3, #0]
            break;
 800ad2e:	bf00      	nop
    }
}
 800ad30:	bf00      	nop
 800ad32:	3710      	adds	r7, #16
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	200009f4 	.word	0x200009f4

0800ad3c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b082      	sub	sp, #8
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	4603      	mov	r3, r0
 800ad44:	460a      	mov	r2, r1
 800ad46:	80fb      	strh	r3, [r7, #6]
 800ad48:	4613      	mov	r3, r2
 800ad4a:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800ad4c:	1d7a      	adds	r2, r7, #5
 800ad4e:	88f9      	ldrh	r1, [r7, #6]
 800ad50:	2301      	movs	r3, #1
 800ad52:	4803      	ldr	r0, [pc, #12]	; (800ad60 <SUBGRF_WriteRegister+0x24>)
 800ad54:	f7fa fdaa 	bl	80058ac <HAL_SUBGHZ_WriteRegisters>
}
 800ad58:	bf00      	nop
 800ad5a:	3708      	adds	r7, #8
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	200004bc 	.word	0x200004bc

0800ad64 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800ad6e:	f107 020f 	add.w	r2, r7, #15
 800ad72:	88f9      	ldrh	r1, [r7, #6]
 800ad74:	2301      	movs	r3, #1
 800ad76:	4804      	ldr	r0, [pc, #16]	; (800ad88 <SUBGRF_ReadRegister+0x24>)
 800ad78:	f7fa fdf7 	bl	800596a <HAL_SUBGHZ_ReadRegisters>
    return data;
 800ad7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	200004bc 	.word	0x200004bc

0800ad8c <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b086      	sub	sp, #24
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	4603      	mov	r3, r0
 800ad94:	6039      	str	r1, [r7, #0]
 800ad96:	80fb      	strh	r3, [r7, #6]
 800ad98:	4613      	mov	r3, r2
 800ad9a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad9c:	f3ef 8310 	mrs	r3, PRIMASK
 800ada0:	60fb      	str	r3, [r7, #12]
  return(result);
 800ada2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ada4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ada6:	b672      	cpsid	i
}
 800ada8:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800adaa:	88bb      	ldrh	r3, [r7, #4]
 800adac:	88f9      	ldrh	r1, [r7, #6]
 800adae:	683a      	ldr	r2, [r7, #0]
 800adb0:	4806      	ldr	r0, [pc, #24]	; (800adcc <SUBGRF_WriteRegisters+0x40>)
 800adb2:	f7fa fd7b 	bl	80058ac <HAL_SUBGHZ_WriteRegisters>
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	f383 8810 	msr	PRIMASK, r3
}
 800adc0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800adc2:	bf00      	nop
 800adc4:	3718      	adds	r7, #24
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	200004bc 	.word	0x200004bc

0800add0 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b086      	sub	sp, #24
 800add4:	af00      	add	r7, sp, #0
 800add6:	4603      	mov	r3, r0
 800add8:	6039      	str	r1, [r7, #0]
 800adda:	80fb      	strh	r3, [r7, #6]
 800addc:	4613      	mov	r3, r2
 800adde:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ade0:	f3ef 8310 	mrs	r3, PRIMASK
 800ade4:	60fb      	str	r3, [r7, #12]
  return(result);
 800ade6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ade8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800adea:	b672      	cpsid	i
}
 800adec:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800adee:	88bb      	ldrh	r3, [r7, #4]
 800adf0:	88f9      	ldrh	r1, [r7, #6]
 800adf2:	683a      	ldr	r2, [r7, #0]
 800adf4:	4806      	ldr	r0, [pc, #24]	; (800ae10 <SUBGRF_ReadRegisters+0x40>)
 800adf6:	f7fa fdb8 	bl	800596a <HAL_SUBGHZ_ReadRegisters>
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	f383 8810 	msr	PRIMASK, r3
}
 800ae04:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ae06:	bf00      	nop
 800ae08:	3718      	adds	r7, #24
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}
 800ae0e:	bf00      	nop
 800ae10:	200004bc 	.word	0x200004bc

0800ae14 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b086      	sub	sp, #24
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	6039      	str	r1, [r7, #0]
 800ae1e:	71fb      	strb	r3, [r7, #7]
 800ae20:	4613      	mov	r3, r2
 800ae22:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae24:	f3ef 8310 	mrs	r3, PRIMASK
 800ae28:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ae2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae2e:	b672      	cpsid	i
}
 800ae30:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800ae32:	79bb      	ldrb	r3, [r7, #6]
 800ae34:	b29b      	uxth	r3, r3
 800ae36:	79f9      	ldrb	r1, [r7, #7]
 800ae38:	683a      	ldr	r2, [r7, #0]
 800ae3a:	4806      	ldr	r0, [pc, #24]	; (800ae54 <SUBGRF_WriteBuffer+0x40>)
 800ae3c:	f7fa fea9 	bl	8005b92 <HAL_SUBGHZ_WriteBuffer>
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	f383 8810 	msr	PRIMASK, r3
}
 800ae4a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ae4c:	bf00      	nop
 800ae4e:	3718      	adds	r7, #24
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}
 800ae54:	200004bc 	.word	0x200004bc

0800ae58 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b086      	sub	sp, #24
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	4603      	mov	r3, r0
 800ae60:	6039      	str	r1, [r7, #0]
 800ae62:	71fb      	strb	r3, [r7, #7]
 800ae64:	4613      	mov	r3, r2
 800ae66:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae68:	f3ef 8310 	mrs	r3, PRIMASK
 800ae6c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ae70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae72:	b672      	cpsid	i
}
 800ae74:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800ae76:	79bb      	ldrb	r3, [r7, #6]
 800ae78:	b29b      	uxth	r3, r3
 800ae7a:	79f9      	ldrb	r1, [r7, #7]
 800ae7c:	683a      	ldr	r2, [r7, #0]
 800ae7e:	4806      	ldr	r0, [pc, #24]	; (800ae98 <SUBGRF_ReadBuffer+0x40>)
 800ae80:	f7fa feda 	bl	8005c38 <HAL_SUBGHZ_ReadBuffer>
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	f383 8810 	msr	PRIMASK, r3
}
 800ae8e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ae90:	bf00      	nop
 800ae92:	3718      	adds	r7, #24
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	200004bc 	.word	0x200004bc

0800ae9c <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b086      	sub	sp, #24
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	4603      	mov	r3, r0
 800aea4:	6039      	str	r1, [r7, #0]
 800aea6:	71fb      	strb	r3, [r7, #7]
 800aea8:	4613      	mov	r3, r2
 800aeaa:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aeac:	f3ef 8310 	mrs	r3, PRIMASK
 800aeb0:	60fb      	str	r3, [r7, #12]
  return(result);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800aeb4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aeb6:	b672      	cpsid	i
}
 800aeb8:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800aeba:	88bb      	ldrh	r3, [r7, #4]
 800aebc:	79f9      	ldrb	r1, [r7, #7]
 800aebe:	683a      	ldr	r2, [r7, #0]
 800aec0:	4806      	ldr	r0, [pc, #24]	; (800aedc <SUBGRF_WriteCommand+0x40>)
 800aec2:	f7fa fdb3 	bl	8005a2c <HAL_SUBGHZ_ExecSetCmd>
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	f383 8810 	msr	PRIMASK, r3
}
 800aed0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800aed2:	bf00      	nop
 800aed4:	3718      	adds	r7, #24
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	200004bc 	.word	0x200004bc

0800aee0 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b086      	sub	sp, #24
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	4603      	mov	r3, r0
 800aee8:	6039      	str	r1, [r7, #0]
 800aeea:	71fb      	strb	r3, [r7, #7]
 800aeec:	4613      	mov	r3, r2
 800aeee:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aef0:	f3ef 8310 	mrs	r3, PRIMASK
 800aef4:	60fb      	str	r3, [r7, #12]
  return(result);
 800aef6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800aef8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aefa:	b672      	cpsid	i
}
 800aefc:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800aefe:	88bb      	ldrh	r3, [r7, #4]
 800af00:	79f9      	ldrb	r1, [r7, #7]
 800af02:	683a      	ldr	r2, [r7, #0]
 800af04:	4806      	ldr	r0, [pc, #24]	; (800af20 <SUBGRF_ReadCommand+0x40>)
 800af06:	f7fa fdf0 	bl	8005aea <HAL_SUBGHZ_ExecGetCmd>
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	f383 8810 	msr	PRIMASK, r3
}
 800af14:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800af16:	bf00      	nop
 800af18:	3718      	adds	r7, #24
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
 800af1e:	bf00      	nop
 800af20:	200004bc 	.word	0x200004bc

0800af24 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b084      	sub	sp, #16
 800af28:	af00      	add	r7, sp, #0
 800af2a:	4603      	mov	r3, r0
 800af2c:	460a      	mov	r2, r1
 800af2e:	71fb      	strb	r3, [r7, #7]
 800af30:	4613      	mov	r3, r2
 800af32:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800af34:	2301      	movs	r3, #1
 800af36:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800af38:	79bb      	ldrb	r3, [r7, #6]
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d10d      	bne.n	800af5a <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800af3e:	79fb      	ldrb	r3, [r7, #7]
 800af40:	2b01      	cmp	r3, #1
 800af42:	d104      	bne.n	800af4e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800af44:	2302      	movs	r3, #2
 800af46:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800af48:	2004      	movs	r0, #4
 800af4a:	f000 f8ef 	bl	800b12c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800af4e:	79fb      	ldrb	r3, [r7, #7]
 800af50:	2b02      	cmp	r3, #2
 800af52:	d107      	bne.n	800af64 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800af54:	2303      	movs	r3, #3
 800af56:	73fb      	strb	r3, [r7, #15]
 800af58:	e004      	b.n	800af64 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800af5a:	79bb      	ldrb	r3, [r7, #6]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d101      	bne.n	800af64 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800af60:	2301      	movs	r3, #1
 800af62:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800af64:	7bfb      	ldrb	r3, [r7, #15]
 800af66:	4618      	mov	r0, r3
 800af68:	f000 fad2 	bl	800b510 <RBI_ConfigRFSwitch>
}
 800af6c:	bf00      	nop
 800af6e:	3710      	adds	r7, #16
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	4603      	mov	r3, r0
 800af7c:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800af7e:	2301      	movs	r3, #1
 800af80:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800af82:	f000 fb23 	bl	800b5cc <RBI_GetTxConfig>
 800af86:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	2b02      	cmp	r3, #2
 800af8c:	d016      	beq.n	800afbc <SUBGRF_SetRfTxPower+0x48>
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	2b02      	cmp	r3, #2
 800af92:	dc16      	bgt.n	800afc2 <SUBGRF_SetRfTxPower+0x4e>
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d003      	beq.n	800afa2 <SUBGRF_SetRfTxPower+0x2e>
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d00a      	beq.n	800afb6 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800afa0:	e00f      	b.n	800afc2 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800afa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800afa6:	2b0f      	cmp	r3, #15
 800afa8:	dd02      	ble.n	800afb0 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800afaa:	2302      	movs	r3, #2
 800afac:	73fb      	strb	r3, [r7, #15]
            break;
 800afae:	e009      	b.n	800afc4 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800afb0:	2301      	movs	r3, #1
 800afb2:	73fb      	strb	r3, [r7, #15]
            break;
 800afb4:	e006      	b.n	800afc4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800afb6:	2301      	movs	r3, #1
 800afb8:	73fb      	strb	r3, [r7, #15]
            break;
 800afba:	e003      	b.n	800afc4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800afbc:	2302      	movs	r3, #2
 800afbe:	73fb      	strb	r3, [r7, #15]
            break;
 800afc0:	e000      	b.n	800afc4 <SUBGRF_SetRfTxPower+0x50>
            break;
 800afc2:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800afc4:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800afc8:	7bfb      	ldrb	r3, [r7, #15]
 800afca:	2202      	movs	r2, #2
 800afcc:	4618      	mov	r0, r3
 800afce:	f7ff fbcd 	bl	800a76c <SUBGRF_SetTxParams>

    return paSelect;
 800afd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3710      	adds	r7, #16
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800afdc:	b480      	push	{r7}
 800afde:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800afe0:	2301      	movs	r3, #1
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bc80      	pop	{r7}
 800afe8:	4770      	bx	lr
	...

0800afec <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800aff4:	4b03      	ldr	r3, [pc, #12]	; (800b004 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	2001      	movs	r0, #1
 800affa:	4798      	blx	r3
}
 800affc:	bf00      	nop
 800affe:	3708      	adds	r7, #8
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}
 800b004:	200009fc 	.word	0x200009fc

0800b008 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b082      	sub	sp, #8
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800b010:	4b03      	ldr	r3, [pc, #12]	; (800b020 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	2002      	movs	r0, #2
 800b016:	4798      	blx	r3
}
 800b018:	bf00      	nop
 800b01a:	3708      	adds	r7, #8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	200009fc 	.word	0x200009fc

0800b024 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800b02c:	4b03      	ldr	r3, [pc, #12]	; (800b03c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2040      	movs	r0, #64	; 0x40
 800b032:	4798      	blx	r3
}
 800b034:	bf00      	nop
 800b036:	3708      	adds	r7, #8
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}
 800b03c:	200009fc 	.word	0x200009fc

0800b040 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b082      	sub	sp, #8
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	460b      	mov	r3, r1
 800b04a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800b04c:	78fb      	ldrb	r3, [r7, #3]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d002      	beq.n	800b058 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800b052:	2b01      	cmp	r3, #1
 800b054:	d005      	beq.n	800b062 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800b056:	e00a      	b.n	800b06e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800b058:	4b07      	ldr	r3, [pc, #28]	; (800b078 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2080      	movs	r0, #128	; 0x80
 800b05e:	4798      	blx	r3
            break;
 800b060:	e005      	b.n	800b06e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800b062:	4b05      	ldr	r3, [pc, #20]	; (800b078 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b06a:	4798      	blx	r3
            break;
 800b06c:	bf00      	nop
    }
}
 800b06e:	bf00      	nop
 800b070:	3708      	adds	r7, #8
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop
 800b078:	200009fc 	.word	0x200009fc

0800b07c <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b082      	sub	sp, #8
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800b084:	4b04      	ldr	r3, [pc, #16]	; (800b098 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b08c:	4798      	blx	r3
}
 800b08e:	bf00      	nop
 800b090:	3708      	adds	r7, #8
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	200009fc 	.word	0x200009fc

0800b09c <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800b0a4:	4b03      	ldr	r3, [pc, #12]	; (800b0b4 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2020      	movs	r0, #32
 800b0aa:	4798      	blx	r3
}
 800b0ac:	bf00      	nop
 800b0ae:	3708      	adds	r7, #8
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	200009fc 	.word	0x200009fc

0800b0b8 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800b0c0:	4b03      	ldr	r3, [pc, #12]	; (800b0d0 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2004      	movs	r0, #4
 800b0c6:	4798      	blx	r3
}
 800b0c8:	bf00      	nop
 800b0ca:	3708      	adds	r7, #8
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}
 800b0d0:	200009fc 	.word	0x200009fc

0800b0d4 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800b0dc:	4b03      	ldr	r3, [pc, #12]	; (800b0ec <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2008      	movs	r0, #8
 800b0e2:	4798      	blx	r3
}
 800b0e4:	bf00      	nop
 800b0e6:	3708      	adds	r7, #8
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}
 800b0ec:	200009fc 	.word	0x200009fc

0800b0f0 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800b0f8:	4b03      	ldr	r3, [pc, #12]	; (800b108 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	2010      	movs	r0, #16
 800b0fe:	4798      	blx	r3
}
 800b100:	bf00      	nop
 800b102:	3708      	adds	r7, #8
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}
 800b108:	200009fc 	.word	0x200009fc

0800b10c <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b082      	sub	sp, #8
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800b114:	4b04      	ldr	r3, [pc, #16]	; (800b128 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b11c:	4798      	blx	r3
}
 800b11e:	bf00      	nop
 800b120:	3708      	adds	r7, #8
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	200009fc 	.word	0x200009fc

0800b12c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	4603      	mov	r3, r0
 800b134:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800b136:	f000 fa5f 	bl	800b5f8 <RBI_IsDCDC>
 800b13a:	4603      	mov	r3, r0
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d112      	bne.n	800b166 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800b140:	f640 1023 	movw	r0, #2339	; 0x923
 800b144:	f7ff fe0e 	bl	800ad64 <SUBGRF_ReadRegister>
 800b148:	4603      	mov	r3, r0
 800b14a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800b14c:	7bfb      	ldrb	r3, [r7, #15]
 800b14e:	f023 0306 	bic.w	r3, r3, #6
 800b152:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800b154:	7bfa      	ldrb	r2, [r7, #15]
 800b156:	79fb      	ldrb	r3, [r7, #7]
 800b158:	4313      	orrs	r3, r2
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	4619      	mov	r1, r3
 800b15e:	f640 1023 	movw	r0, #2339	; 0x923
 800b162:	f7ff fdeb 	bl	800ad3c <SUBGRF_WriteRegister>
  }
}
 800b166:	bf00      	nop
 800b168:	3710      	adds	r7, #16
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
	...

0800b170 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800b170:	b480      	push	{r7}
 800b172:	b085      	sub	sp, #20
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d101      	bne.n	800b182 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800b17e:	231f      	movs	r3, #31
 800b180:	e016      	b.n	800b1b0 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800b182:	2300      	movs	r3, #0
 800b184:	73fb      	strb	r3, [r7, #15]
 800b186:	e00f      	b.n	800b1a8 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800b188:	7bfb      	ldrb	r3, [r7, #15]
 800b18a:	4a0c      	ldr	r2, [pc, #48]	; (800b1bc <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800b18c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b190:	687a      	ldr	r2, [r7, #4]
 800b192:	429a      	cmp	r2, r3
 800b194:	d205      	bcs.n	800b1a2 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800b196:	7bfb      	ldrb	r3, [r7, #15]
 800b198:	4a08      	ldr	r2, [pc, #32]	; (800b1bc <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800b19a:	00db      	lsls	r3, r3, #3
 800b19c:	4413      	add	r3, r2
 800b19e:	791b      	ldrb	r3, [r3, #4]
 800b1a0:	e006      	b.n	800b1b0 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800b1a2:	7bfb      	ldrb	r3, [r7, #15]
 800b1a4:	3301      	adds	r3, #1
 800b1a6:	73fb      	strb	r3, [r7, #15]
 800b1a8:	7bfb      	ldrb	r3, [r7, #15]
 800b1aa:	2b15      	cmp	r3, #21
 800b1ac:	d9ec      	bls.n	800b188 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800b1ae:	e7fe      	b.n	800b1ae <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3714      	adds	r7, #20
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bc80      	pop	{r7}
 800b1b8:	4770      	bx	lr
 800b1ba:	bf00      	nop
 800b1bc:	0800cf5c 	.word	0x0800cf5c

0800b1c0 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b08a      	sub	sp, #40	; 0x28
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800b1ca:	4b35      	ldr	r3, [pc, #212]	; (800b2a0 <SUBGRF_GetCFO+0xe0>)
 800b1cc:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800b1ce:	f640 0007 	movw	r0, #2055	; 0x807
 800b1d2:	f7ff fdc7 	bl	800ad64 <SUBGRF_ReadRegister>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800b1da:	7ffb      	ldrb	r3, [r7, #31]
 800b1dc:	08db      	lsrs	r3, r3, #3
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	f003 0303 	and.w	r3, r3, #3
 800b1e4:	3328      	adds	r3, #40	; 0x28
 800b1e6:	443b      	add	r3, r7
 800b1e8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800b1ec:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800b1ee:	7ffb      	ldrb	r3, [r7, #31]
 800b1f0:	f003 0307 	and.w	r3, r3, #7
 800b1f4:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800b1f6:	7fba      	ldrb	r2, [r7, #30]
 800b1f8:	7f7b      	ldrb	r3, [r7, #29]
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	fa02 f303 	lsl.w	r3, r2, r3
 800b200:	461a      	mov	r2, r3
 800b202:	4b28      	ldr	r3, [pc, #160]	; (800b2a4 <SUBGRF_GetCFO+0xe4>)
 800b204:	fbb3 f3f2 	udiv	r3, r3, r2
 800b208:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800b20a:	69ba      	ldr	r2, [r7, #24]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b212:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800b214:	2301      	movs	r3, #1
 800b216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800b21a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b21e:	697a      	ldr	r2, [r7, #20]
 800b220:	fb02 f303 	mul.w	r3, r2, r3
 800b224:	2b07      	cmp	r3, #7
 800b226:	d802      	bhi.n	800b22e <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800b228:	2302      	movs	r3, #2
 800b22a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800b22e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b232:	697a      	ldr	r2, [r7, #20]
 800b234:	fb02 f303 	mul.w	r3, r2, r3
 800b238:	2b03      	cmp	r3, #3
 800b23a:	d802      	bhi.n	800b242 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800b23c:	2304      	movs	r3, #4
 800b23e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800b242:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b246:	69bb      	ldr	r3, [r7, #24]
 800b248:	fb02 f303 	mul.w	r3, r2, r3
 800b24c:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800b24e:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800b252:	f7ff fd87 	bl	800ad64 <SUBGRF_ReadRegister>
 800b256:	4603      	mov	r3, r0
 800b258:	021b      	lsls	r3, r3, #8
 800b25a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b25e:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800b260:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800b264:	f7ff fd7e 	bl	800ad64 <SUBGRF_ReadRegister>
 800b268:	4603      	mov	r3, r0
 800b26a:	461a      	mov	r2, r3
 800b26c:	6a3b      	ldr	r3, [r7, #32]
 800b26e:	4313      	orrs	r3, r2
 800b270:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800b272:	6a3b      	ldr	r3, [r7, #32]
 800b274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d005      	beq.n	800b288 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800b27c:	6a3b      	ldr	r3, [r7, #32]
 800b27e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b282:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b286:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	095b      	lsrs	r3, r3, #5
 800b28c:	6a3a      	ldr	r2, [r7, #32]
 800b28e:	fb02 f303 	mul.w	r3, r2, r3
 800b292:	11da      	asrs	r2, r3, #7
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	601a      	str	r2, [r3, #0]
}
 800b298:	bf00      	nop
 800b29a:	3728      	adds	r7, #40	; 0x28
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	0c0a0804 	.word	0x0c0a0804
 800b2a4:	01e84800 	.word	0x01e84800

0800b2a8 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b087      	sub	sp, #28
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	60b9      	str	r1, [r7, #8]
 800b2b2:	607a      	str	r2, [r7, #4]
 800b2b4:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800b2ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2be:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800b2c0:	697b      	ldr	r3, [r7, #20]
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	371c      	adds	r7, #28
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bc80      	pop	{r7}
 800b2ca:	4770      	bx	lr

0800b2cc <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b087      	sub	sp, #28
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	60b9      	str	r1, [r7, #8]
 800b2d6:	607a      	str	r2, [r7, #4]
 800b2d8:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800b2de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2e2:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800b2e4:	697b      	ldr	r3, [r7, #20]
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	371c      	adds	r7, #28
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bc80      	pop	{r7}
 800b2ee:	4770      	bx	lr

0800b2f0 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b085      	sub	sp, #20
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800b2fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800b300:	4618      	mov	r0, r3
 800b302:	3714      	adds	r7, #20
 800b304:	46bd      	mov	sp, r7
 800b306:	bc80      	pop	{r7}
 800b308:	4770      	bx	lr

0800b30a <RFW_DeInit>:

void RFW_DeInit( void )
{
 800b30a:	b480      	push	{r7}
 800b30c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800b30e:	bf00      	nop
 800b310:	46bd      	mov	sp, r7
 800b312:	bc80      	pop	{r7}
 800b314:	4770      	bx	lr

0800b316 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800b316:	b480      	push	{r7}
 800b318:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800b31a:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	46bd      	mov	sp, r7
 800b320:	bc80      	pop	{r7}
 800b322:	4770      	bx	lr

0800b324 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800b324:	b480      	push	{r7}
 800b326:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800b328:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bc80      	pop	{r7}
 800b330:	4770      	bx	lr

0800b332 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800b332:	b480      	push	{r7}
 800b334:	b083      	sub	sp, #12
 800b336:	af00      	add	r7, sp, #0
 800b338:	4603      	mov	r3, r0
 800b33a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800b33c:	bf00      	nop
 800b33e:	370c      	adds	r7, #12
 800b340:	46bd      	mov	sp, r7
 800b342:	bc80      	pop	{r7}
 800b344:	4770      	bx	lr

0800b346 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800b346:	b480      	push	{r7}
 800b348:	b087      	sub	sp, #28
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	60f8      	str	r0, [r7, #12]
 800b34e:	460b      	mov	r3, r1
 800b350:	607a      	str	r2, [r7, #4]
 800b352:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800b354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b358:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800b35a:	697b      	ldr	r3, [r7, #20]
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	371c      	adds	r7, #28
 800b360:	46bd      	mov	sp, r7
 800b362:	bc80      	pop	{r7}
 800b364:	4770      	bx	lr

0800b366 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800b366:	b480      	push	{r7}
 800b368:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800b36a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800b36e:	4618      	mov	r0, r3
 800b370:	46bd      	mov	sp, r7
 800b372:	bc80      	pop	{r7}
 800b374:	4770      	bx	lr

0800b376 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800b376:	b480      	push	{r7}
 800b378:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800b37a:	bf00      	nop
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bc80      	pop	{r7}
 800b380:	4770      	bx	lr

0800b382 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800b382:	b480      	push	{r7}
 800b384:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800b386:	bf00      	nop
 800b388:	46bd      	mov	sp, r7
 800b38a:	bc80      	pop	{r7}
 800b38c:	4770      	bx	lr

0800b38e <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800b38e:	b480      	push	{r7}
 800b390:	b083      	sub	sp, #12
 800b392:	af00      	add	r7, sp, #0
 800b394:	4603      	mov	r3, r0
 800b396:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800b398:	bf00      	nop
 800b39a:	370c      	adds	r7, #12
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bc80      	pop	{r7}
 800b3a0:	4770      	bx	lr

0800b3a2 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800b3a2:	b580      	push	{r7, lr}
 800b3a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800b3a6:	f7f7 fb8a 	bl	8002abe <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800b3aa:	f000 f809 	bl	800b3c0 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800b3ae:	bf00      	nop
 800b3b0:	bd80      	pop	{r7, pc}

0800b3b2 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800b3b2:	b480      	push	{r7}
 800b3b4:	af00      	add	r7, sp, #0

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_OS */

  /* USER CODE END MX_SubGHz_Phy_Process_OS */
}
 800b3b6:	bf00      	nop
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bc80      	pop	{r7}
 800b3bc:	4770      	bx	lr
	...

0800b3c0 <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800b3c4:	4b0a      	ldr	r3, [pc, #40]	; (800b3f0 <SubghzApp_Init+0x30>)
 800b3c6:	4a0b      	ldr	r2, [pc, #44]	; (800b3f4 <SubghzApp_Init+0x34>)
 800b3c8:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800b3ca:	4b09      	ldr	r3, [pc, #36]	; (800b3f0 <SubghzApp_Init+0x30>)
 800b3cc:	4a0a      	ldr	r2, [pc, #40]	; (800b3f8 <SubghzApp_Init+0x38>)
 800b3ce:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800b3d0:	4b07      	ldr	r3, [pc, #28]	; (800b3f0 <SubghzApp_Init+0x30>)
 800b3d2:	4a0a      	ldr	r2, [pc, #40]	; (800b3fc <SubghzApp_Init+0x3c>)
 800b3d4:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800b3d6:	4b06      	ldr	r3, [pc, #24]	; (800b3f0 <SubghzApp_Init+0x30>)
 800b3d8:	4a09      	ldr	r2, [pc, #36]	; (800b400 <SubghzApp_Init+0x40>)
 800b3da:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800b3dc:	4b04      	ldr	r3, [pc, #16]	; (800b3f0 <SubghzApp_Init+0x30>)
 800b3de:	4a09      	ldr	r2, [pc, #36]	; (800b404 <SubghzApp_Init+0x44>)
 800b3e0:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800b3e2:	4b09      	ldr	r3, [pc, #36]	; (800b408 <SubghzApp_Init+0x48>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4802      	ldr	r0, [pc, #8]	; (800b3f0 <SubghzApp_Init+0x30>)
 800b3e8:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 800b3ea:	bf00      	nop
 800b3ec:	bd80      	pop	{r7, pc}
 800b3ee:	bf00      	nop
 800b3f0:	20000a00 	.word	0x20000a00
 800b3f4:	0800b40d 	.word	0x0800b40d
 800b3f8:	0800b419 	.word	0x0800b419
 800b3fc:	0800b43d 	.word	0x0800b43d
 800b400:	0800b449 	.word	0x0800b449
 800b404:	0800b455 	.word	0x0800b455
 800b408:	0800cecc 	.word	0x0800cecc

0800b40c <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800b40c:	b480      	push	{r7}
 800b40e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 800b410:	bf00      	nop
 800b412:	46bd      	mov	sp, r7
 800b414:	bc80      	pop	{r7}
 800b416:	4770      	bx	lr

0800b418 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800b418:	b480      	push	{r7}
 800b41a:	b085      	sub	sp, #20
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	60f8      	str	r0, [r7, #12]
 800b420:	4608      	mov	r0, r1
 800b422:	4611      	mov	r1, r2
 800b424:	461a      	mov	r2, r3
 800b426:	4603      	mov	r3, r0
 800b428:	817b      	strh	r3, [r7, #10]
 800b42a:	460b      	mov	r3, r1
 800b42c:	813b      	strh	r3, [r7, #8]
 800b42e:	4613      	mov	r3, r2
 800b430:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 800b432:	bf00      	nop
 800b434:	3714      	adds	r7, #20
 800b436:	46bd      	mov	sp, r7
 800b438:	bc80      	pop	{r7}
 800b43a:	4770      	bx	lr

0800b43c <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800b43c:	b480      	push	{r7}
 800b43e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 800b440:	bf00      	nop
 800b442:	46bd      	mov	sp, r7
 800b444:	bc80      	pop	{r7}
 800b446:	4770      	bx	lr

0800b448 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800b448:	b480      	push	{r7}
 800b44a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 800b44c:	bf00      	nop
 800b44e:	46bd      	mov	sp, r7
 800b450:	bc80      	pop	{r7}
 800b452:	4770      	bx	lr

0800b454 <OnRxError>:

static void OnRxError(void)
{
 800b454:	b480      	push	{r7}
 800b456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 800b458:	bf00      	nop
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bc80      	pop	{r7}
 800b45e:	4770      	bx	lr

0800b460 <LL_AHB2_GRP1_EnableClock>:
{
 800b460:	b480      	push	{r7}
 800b462:	b085      	sub	sp, #20
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800b468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b46c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b46e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	4313      	orrs	r3, r2
 800b476:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800b478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b47c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	4013      	ands	r3, r2
 800b482:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b484:	68fb      	ldr	r3, [r7, #12]
}
 800b486:	bf00      	nop
 800b488:	3714      	adds	r7, #20
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bc80      	pop	{r7}
 800b48e:	4770      	bx	lr

0800b490 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b086      	sub	sp, #24
 800b494:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800b496:	2300      	movs	r3, #0
 800b498:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN RBI_Init_2 */
	GPIO_InitTypeDef gpio_init_structure = { 0 };
 800b49a:	463b      	mov	r3, r7
 800b49c:	2200      	movs	r2, #0
 800b49e:	601a      	str	r2, [r3, #0]
 800b4a0:	605a      	str	r2, [r3, #4]
 800b4a2:	609a      	str	r2, [r3, #8]
 800b4a4:	60da      	str	r2, [r3, #12]
 800b4a6:	611a      	str	r2, [r3, #16]

	/* Enable the Radio Switch Clock */
	RF_SW_CTRL3_GPIO_CLK_ENABLE();
 800b4a8:	2004      	movs	r0, #4
 800b4aa:	f7ff ffd9 	bl	800b460 <LL_AHB2_GRP1_EnableClock>

	/* Configure the Radio Switch pin */
	gpio_init_structure.Pin = RF_SW_CTRL1_PIN;
 800b4ae:	2310      	movs	r3, #16
 800b4b0:	603b      	str	r3, [r7, #0]
	gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	607b      	str	r3, [r7, #4]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	60bb      	str	r3, [r7, #8]
	gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4ba:	2303      	movs	r3, #3
 800b4bc:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800b4be:	463b      	mov	r3, r7
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	4812      	ldr	r0, [pc, #72]	; (800b50c <RBI_Init+0x7c>)
 800b4c4:	f7f8 fc4e 	bl	8003d64 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800b4c8:	2320      	movs	r3, #32
 800b4ca:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800b4cc:	463b      	mov	r3, r7
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	480e      	ldr	r0, [pc, #56]	; (800b50c <RBI_Init+0x7c>)
 800b4d2:	f7f8 fc47 	bl	8003d64 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 800b4d6:	2308      	movs	r3, #8
 800b4d8:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 800b4da:	463b      	mov	r3, r7
 800b4dc:	4619      	mov	r1, r3
 800b4de:	480b      	ldr	r0, [pc, #44]	; (800b50c <RBI_Init+0x7c>)
 800b4e0:	f7f8 fc40 	bl	8003d64 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	2120      	movs	r1, #32
 800b4e8:	4808      	ldr	r0, [pc, #32]	; (800b50c <RBI_Init+0x7c>)
 800b4ea:	f7f8 fd9b 	bl	8004024 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	2110      	movs	r1, #16
 800b4f2:	4806      	ldr	r0, [pc, #24]	; (800b50c <RBI_Init+0x7c>)
 800b4f4:	f7f8 fd96 	bl	8004024 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	2108      	movs	r1, #8
 800b4fc:	4803      	ldr	r0, [pc, #12]	; (800b50c <RBI_Init+0x7c>)
 800b4fe:	f7f8 fd91 	bl	8004024 <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800b502:	697b      	ldr	r3, [r7, #20]
#endif  /* USE_BSP_DRIVER  */
}
 800b504:	4618      	mov	r0, r3
 800b506:	3718      	adds	r7, #24
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}
 800b50c:	48000800 	.word	0x48000800

0800b510 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	4603      	mov	r3, r0
 800b518:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800b51a:	2300      	movs	r3, #0
 800b51c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
	switch (Config) {
 800b51e:	79fb      	ldrb	r3, [r7, #7]
 800b520:	2b03      	cmp	r3, #3
 800b522:	d84b      	bhi.n	800b5bc <RBI_ConfigRFSwitch+0xac>
 800b524:	a201      	add	r2, pc, #4	; (adr r2, 800b52c <RBI_ConfigRFSwitch+0x1c>)
 800b526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b52a:	bf00      	nop
 800b52c:	0800b53d 	.word	0x0800b53d
 800b530:	0800b55d 	.word	0x0800b55d
 800b534:	0800b57d 	.word	0x0800b57d
 800b538:	0800b59d 	.word	0x0800b59d
	case RADIO_SWITCH_OFF: {
		/* Turn off switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN,
 800b53c:	2200      	movs	r2, #0
 800b53e:	2108      	movs	r1, #8
 800b540:	4821      	ldr	r0, [pc, #132]	; (800b5c8 <RBI_ConfigRFSwitch+0xb8>)
 800b542:	f7f8 fd6f 	bl	8004024 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800b546:	2200      	movs	r2, #0
 800b548:	2110      	movs	r1, #16
 800b54a:	481f      	ldr	r0, [pc, #124]	; (800b5c8 <RBI_ConfigRFSwitch+0xb8>)
 800b54c:	f7f8 fd6a 	bl	8004024 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 800b550:	2200      	movs	r2, #0
 800b552:	2120      	movs	r1, #32
 800b554:	481c      	ldr	r0, [pc, #112]	; (800b5c8 <RBI_ConfigRFSwitch+0xb8>)
 800b556:	f7f8 fd65 	bl	8004024 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 800b55a:	e030      	b.n	800b5be <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RX: {
		/*Turns On in Rx Mode the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800b55c:	2201      	movs	r2, #1
 800b55e:	2108      	movs	r1, #8
 800b560:	4819      	ldr	r0, [pc, #100]	; (800b5c8 <RBI_ConfigRFSwitch+0xb8>)
 800b562:	f7f8 fd5f 	bl	8004024 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800b566:	2201      	movs	r2, #1
 800b568:	2110      	movs	r1, #16
 800b56a:	4817      	ldr	r0, [pc, #92]	; (800b5c8 <RBI_ConfigRFSwitch+0xb8>)
 800b56c:	f7f8 fd5a 	bl	8004024 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 800b570:	2200      	movs	r2, #0
 800b572:	2120      	movs	r1, #32
 800b574:	4814      	ldr	r0, [pc, #80]	; (800b5c8 <RBI_ConfigRFSwitch+0xb8>)
 800b576:	f7f8 fd55 	bl	8004024 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 800b57a:	e020      	b.n	800b5be <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_LP: {
		/*Turns On in Tx Low Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800b57c:	2201      	movs	r2, #1
 800b57e:	2108      	movs	r1, #8
 800b580:	4811      	ldr	r0, [pc, #68]	; (800b5c8 <RBI_ConfigRFSwitch+0xb8>)
 800b582:	f7f8 fd4f 	bl	8004024 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800b586:	2201      	movs	r2, #1
 800b588:	2110      	movs	r1, #16
 800b58a:	480f      	ldr	r0, [pc, #60]	; (800b5c8 <RBI_ConfigRFSwitch+0xb8>)
 800b58c:	f7f8 fd4a 	bl	8004024 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800b590:	2201      	movs	r2, #1
 800b592:	2120      	movs	r1, #32
 800b594:	480c      	ldr	r0, [pc, #48]	; (800b5c8 <RBI_ConfigRFSwitch+0xb8>)
 800b596:	f7f8 fd45 	bl	8004024 <HAL_GPIO_WritePin>
		break;
 800b59a:	e010      	b.n	800b5be <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_HP: {
		/*Turns On in Tx High Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800b59c:	2201      	movs	r2, #1
 800b59e:	2108      	movs	r1, #8
 800b5a0:	4809      	ldr	r0, [pc, #36]	; (800b5c8 <RBI_ConfigRFSwitch+0xb8>)
 800b5a2:	f7f8 fd3f 	bl	8004024 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	2110      	movs	r1, #16
 800b5aa:	4807      	ldr	r0, [pc, #28]	; (800b5c8 <RBI_ConfigRFSwitch+0xb8>)
 800b5ac:	f7f8 fd3a 	bl	8004024 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	2120      	movs	r1, #32
 800b5b4:	4804      	ldr	r0, [pc, #16]	; (800b5c8 <RBI_ConfigRFSwitch+0xb8>)
 800b5b6:	f7f8 fd35 	bl	8004024 <HAL_GPIO_WritePin>
		break;
 800b5ba:	e000      	b.n	800b5be <RBI_ConfigRFSwitch+0xae>
	}
	default:
		break;
 800b5bc:	bf00      	nop
	}
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800b5be:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3710      	adds	r7, #16
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}
 800b5c8:	48000800 	.word	0x48000800

0800b5cc <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
	return RADIO_CONF_RFO_LP_HP;
 800b5d6:	2300      	movs	r3, #0
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	370c      	adds	r7, #12
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bc80      	pop	{r7}
 800b5e0:	4770      	bx	lr

0800b5e2 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800b5e2:	b480      	push	{r7}
 800b5e4:	b083      	sub	sp, #12
 800b5e6:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
	return IS_TCXO_SUPPORTED;
 800b5ec:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	370c      	adds	r7, #12
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bc80      	pop	{r7}
 800b5f6:	4770      	bx	lr

0800b5f8 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b083      	sub	sp, #12
 800b5fc:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800b5fe:	2301      	movs	r3, #1
 800b600:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
	return IS_DCDC_SUPPORTED;
 800b602:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b604:	4618      	mov	r0, r3
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	bc80      	pop	{r7}
 800b60c:	4770      	bx	lr

0800b60e <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800b60e:	b480      	push	{r7}
 800b610:	b085      	sub	sp, #20
 800b612:	af00      	add	r7, sp, #0
 800b614:	4603      	mov	r3, r0
 800b616:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800b618:	2300      	movs	r3, #0
 800b61a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
// #warning user to provide its board code or to call his board driver functions
	if (Config == RBI_RFO_LP_MAXPOWER) {
 800b61c:	79fb      	ldrb	r3, [r7, #7]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d102      	bne.n	800b628 <RBI_GetRFOMaxPowerConfig+0x1a>
		ret = 15; /*dBm*/
 800b622:	230f      	movs	r3, #15
 800b624:	60fb      	str	r3, [r7, #12]
 800b626:	e001      	b.n	800b62c <RBI_GetRFOMaxPowerConfig+0x1e>
	} else {
		ret = 22; /*dBm*/
 800b628:	2316      	movs	r3, #22
 800b62a:	60fb      	str	r3, [r7, #12]
	}
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800b62c:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3714      	adds	r7, #20
 800b632:	46bd      	mov	sp, r7
 800b634:	bc80      	pop	{r7}
 800b636:	4770      	bx	lr

0800b638 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800b638:	b480      	push	{r7}
 800b63a:	b087      	sub	sp, #28
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	4613      	mov	r3, r2
 800b644:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	613b      	str	r3, [r7, #16]

  while( size-- )
 800b64e:	e007      	b.n	800b660 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800b650:	693a      	ldr	r2, [r7, #16]
 800b652:	1c53      	adds	r3, r2, #1
 800b654:	613b      	str	r3, [r7, #16]
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	1c59      	adds	r1, r3, #1
 800b65a:	6179      	str	r1, [r7, #20]
 800b65c:	7812      	ldrb	r2, [r2, #0]
 800b65e:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b660:	88fb      	ldrh	r3, [r7, #6]
 800b662:	1e5a      	subs	r2, r3, #1
 800b664:	80fa      	strh	r2, [r7, #6]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d1f2      	bne.n	800b650 <UTIL_MEM_cpy_8+0x18>
    }
}
 800b66a:	bf00      	nop
 800b66c:	bf00      	nop
 800b66e:	371c      	adds	r7, #28
 800b670:	46bd      	mov	sp, r7
 800b672:	bc80      	pop	{r7}
 800b674:	4770      	bx	lr

0800b676 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800b676:	b480      	push	{r7}
 800b678:	b085      	sub	sp, #20
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
 800b67e:	460b      	mov	r3, r1
 800b680:	70fb      	strb	r3, [r7, #3]
 800b682:	4613      	mov	r3, r2
 800b684:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800b68a:	e004      	b.n	800b696 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	1c5a      	adds	r2, r3, #1
 800b690:	60fa      	str	r2, [r7, #12]
 800b692:	78fa      	ldrb	r2, [r7, #3]
 800b694:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b696:	883b      	ldrh	r3, [r7, #0]
 800b698:	1e5a      	subs	r2, r3, #1
 800b69a:	803a      	strh	r2, [r7, #0]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d1f5      	bne.n	800b68c <UTIL_MEM_set_8+0x16>
  }
}
 800b6a0:	bf00      	nop
 800b6a2:	bf00      	nop
 800b6a4:	3714      	adds	r7, #20
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bc80      	pop	{r7}
 800b6aa:	4770      	bx	lr

0800b6ac <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	60f8      	str	r0, [r7, #12]
 800b6b4:	60b9      	str	r1, [r7, #8]
 800b6b6:	603b      	str	r3, [r7, #0]
 800b6b8:	4613      	mov	r3, r2
 800b6ba:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d023      	beq.n	800b70a <UTIL_TIMER_Create+0x5e>
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d020      	beq.n	800b70a <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800b6ce:	4b11      	ldr	r3, [pc, #68]	; (800b714 <UTIL_TIMER_Create+0x68>)
 800b6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d2:	68b8      	ldr	r0, [r7, #8]
 800b6d4:	4798      	blx	r3
 800b6d6:	4602      	mov	r2, r0
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	683a      	ldr	r2, [r7, #0]
 800b6f2:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	69ba      	ldr	r2, [r7, #24]
 800b6f8:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	79fa      	ldrb	r2, [r7, #7]
 800b6fe:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2200      	movs	r2, #0
 800b704:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800b706:	2300      	movs	r3, #0
 800b708:	e000      	b.n	800b70c <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800b70a:	2301      	movs	r3, #1
  }
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3710      	adds	r7, #16
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}
 800b714:	0800ce78 	.word	0x0800ce78

0800b718 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b08a      	sub	sp, #40	; 0x28
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b720:	2300      	movs	r3, #0
 800b722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d056      	beq.n	800b7da <UTIL_TIMER_Start+0xc2>
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f000 f929 	bl	800b984 <TimerExists>
 800b732:	4603      	mov	r3, r0
 800b734:	f083 0301 	eor.w	r3, r3, #1
 800b738:	b2db      	uxtb	r3, r3
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d04d      	beq.n	800b7da <UTIL_TIMER_Start+0xc2>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	7a5b      	ldrb	r3, [r3, #9]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d149      	bne.n	800b7da <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b746:	f3ef 8310 	mrs	r3, PRIMASK
 800b74a:	613b      	str	r3, [r7, #16]
  return(result);
 800b74c:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b74e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b750:	b672      	cpsid	i
}
 800b752:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800b75a:	4b24      	ldr	r3, [pc, #144]	; (800b7ec <UTIL_TIMER_Start+0xd4>)
 800b75c:	6a1b      	ldr	r3, [r3, #32]
 800b75e:	4798      	blx	r3
 800b760:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800b762:	6a3a      	ldr	r2, [r7, #32]
 800b764:	69bb      	ldr	r3, [r7, #24]
 800b766:	429a      	cmp	r2, r3
 800b768:	d201      	bcs.n	800b76e <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800b76a:	69bb      	ldr	r3, [r7, #24]
 800b76c:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6a3a      	ldr	r2, [r7, #32]
 800b772:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2201      	movs	r2, #1
 800b77e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2200      	movs	r2, #0
 800b784:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800b786:	4b1a      	ldr	r3, [pc, #104]	; (800b7f0 <UTIL_TIMER_Start+0xd8>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d106      	bne.n	800b79c <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800b78e:	4b17      	ldr	r3, [pc, #92]	; (800b7ec <UTIL_TIMER_Start+0xd4>)
 800b790:	691b      	ldr	r3, [r3, #16]
 800b792:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 f96b 	bl	800ba70 <TimerInsertNewHeadTimer>
 800b79a:	e017      	b.n	800b7cc <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800b79c:	4b13      	ldr	r3, [pc, #76]	; (800b7ec <UTIL_TIMER_Start+0xd4>)
 800b79e:	699b      	ldr	r3, [r3, #24]
 800b7a0:	4798      	blx	r3
 800b7a2:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681a      	ldr	r2, [r3, #0]
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	441a      	add	r2, r3
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	4b0e      	ldr	r3, [pc, #56]	; (800b7f0 <UTIL_TIMER_Start+0xd8>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d203      	bcs.n	800b7c6 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 f956 	bl	800ba70 <TimerInsertNewHeadTimer>
 800b7c4:	e002      	b.n	800b7cc <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f000 f922 	bl	800ba10 <TimerInsertTimer>
 800b7cc:	69fb      	ldr	r3, [r7, #28]
 800b7ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f383 8810 	msr	PRIMASK, r3
}
 800b7d6:	bf00      	nop
  {
 800b7d8:	e002      	b.n	800b7e0 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800b7da:	2301      	movs	r3, #1
 800b7dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800b7e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3728      	adds	r7, #40	; 0x28
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}
 800b7ec:	0800ce78 	.word	0x0800ce78
 800b7f0:	20000a1c 	.word	0x20000a1c

0800b7f4 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b088      	sub	sp, #32
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d05b      	beq.n	800b8be <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b806:	f3ef 8310 	mrs	r3, PRIMASK
 800b80a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b80c:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b80e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b810:	b672      	cpsid	i
}
 800b812:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800b814:	4b2d      	ldr	r3, [pc, #180]	; (800b8cc <UTIL_TIMER_Stop+0xd8>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800b81a:	4b2c      	ldr	r3, [pc, #176]	; (800b8cc <UTIL_TIMER_Stop+0xd8>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2201      	movs	r2, #1
 800b824:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800b826:	4b29      	ldr	r3, [pc, #164]	; (800b8cc <UTIL_TIMER_Stop+0xd8>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d041      	beq.n	800b8b2 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2200      	movs	r2, #0
 800b832:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800b834:	4b25      	ldr	r3, [pc, #148]	; (800b8cc <UTIL_TIMER_Stop+0xd8>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d134      	bne.n	800b8a8 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800b83e:	4b23      	ldr	r3, [pc, #140]	; (800b8cc <UTIL_TIMER_Stop+0xd8>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	2200      	movs	r2, #0
 800b844:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800b846:	4b21      	ldr	r3, [pc, #132]	; (800b8cc <UTIL_TIMER_Stop+0xd8>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	695b      	ldr	r3, [r3, #20]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d00a      	beq.n	800b866 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800b850:	4b1e      	ldr	r3, [pc, #120]	; (800b8cc <UTIL_TIMER_Stop+0xd8>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	695b      	ldr	r3, [r3, #20]
 800b856:	4a1d      	ldr	r2, [pc, #116]	; (800b8cc <UTIL_TIMER_Stop+0xd8>)
 800b858:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800b85a:	4b1c      	ldr	r3, [pc, #112]	; (800b8cc <UTIL_TIMER_Stop+0xd8>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4618      	mov	r0, r3
 800b860:	f000 f8ac 	bl	800b9bc <TimerSetTimeout>
 800b864:	e023      	b.n	800b8ae <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800b866:	4b1a      	ldr	r3, [pc, #104]	; (800b8d0 <UTIL_TIMER_Stop+0xdc>)
 800b868:	68db      	ldr	r3, [r3, #12]
 800b86a:	4798      	blx	r3
            TimerListHead = NULL;
 800b86c:	4b17      	ldr	r3, [pc, #92]	; (800b8cc <UTIL_TIMER_Stop+0xd8>)
 800b86e:	2200      	movs	r2, #0
 800b870:	601a      	str	r2, [r3, #0]
 800b872:	e01c      	b.n	800b8ae <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800b874:	697a      	ldr	r2, [r7, #20]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	429a      	cmp	r2, r3
 800b87a:	d110      	bne.n	800b89e <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	695b      	ldr	r3, [r3, #20]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d006      	beq.n	800b892 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	695b      	ldr	r3, [r3, #20]
 800b888:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b88a:	69bb      	ldr	r3, [r7, #24]
 800b88c:	697a      	ldr	r2, [r7, #20]
 800b88e:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800b890:	e00d      	b.n	800b8ae <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800b892:	2300      	movs	r3, #0
 800b894:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b896:	69bb      	ldr	r3, [r7, #24]
 800b898:	697a      	ldr	r2, [r7, #20]
 800b89a:	615a      	str	r2, [r3, #20]
            break;
 800b89c:	e007      	b.n	800b8ae <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	695b      	ldr	r3, [r3, #20]
 800b8a6:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d1e2      	bne.n	800b874 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	77fb      	strb	r3, [r7, #31]
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	f383 8810 	msr	PRIMASK, r3
}
 800b8bc:	e001      	b.n	800b8c2 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800b8c2:	7ffb      	ldrb	r3, [r7, #31]
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3720      	adds	r7, #32
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}
 800b8cc:	20000a1c 	.word	0x20000a1c
 800b8d0:	0800ce78 	.word	0x0800ce78

0800b8d4 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d102      	bne.n	800b8ee <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	73fb      	strb	r3, [r7, #15]
 800b8ec:	e014      	b.n	800b918 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800b8ee:	4b0d      	ldr	r3, [pc, #52]	; (800b924 <UTIL_TIMER_SetPeriod+0x50>)
 800b8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f2:	6838      	ldr	r0, [r7, #0]
 800b8f4:	4798      	blx	r3
 800b8f6:	4602      	mov	r2, r0
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f000 f841 	bl	800b984 <TimerExists>
 800b902:	4603      	mov	r3, r0
 800b904:	2b00      	cmp	r3, #0
 800b906:	d007      	beq.n	800b918 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f7ff ff73 	bl	800b7f4 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f7ff ff02 	bl	800b718 <UTIL_TIMER_Start>
 800b914:	4603      	mov	r3, r0
 800b916:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800b918:	7bfb      	ldrb	r3, [r7, #15]
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3710      	adds	r7, #16
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	0800ce78 	.word	0x0800ce78

0800b928 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b082      	sub	sp, #8
 800b92c:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800b92e:	4b06      	ldr	r3, [pc, #24]	; (800b948 <UTIL_TIMER_GetCurrentTime+0x20>)
 800b930:	69db      	ldr	r3, [r3, #28]
 800b932:	4798      	blx	r3
 800b934:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800b936:	4b04      	ldr	r3, [pc, #16]	; (800b948 <UTIL_TIMER_GetCurrentTime+0x20>)
 800b938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	4798      	blx	r3
 800b93e:	4603      	mov	r3, r0
}
 800b940:	4618      	mov	r0, r3
 800b942:	3708      	adds	r7, #8
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}
 800b948:	0800ce78 	.word	0x0800ce78

0800b94c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b084      	sub	sp, #16
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800b954:	4b0a      	ldr	r3, [pc, #40]	; (800b980 <UTIL_TIMER_GetElapsedTime+0x34>)
 800b956:	69db      	ldr	r3, [r3, #28]
 800b958:	4798      	blx	r3
 800b95a:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800b95c:	4b08      	ldr	r3, [pc, #32]	; (800b980 <UTIL_TIMER_GetElapsedTime+0x34>)
 800b95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	4798      	blx	r3
 800b964:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800b966:	4b06      	ldr	r3, [pc, #24]	; (800b980 <UTIL_TIMER_GetElapsedTime+0x34>)
 800b968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b96a:	68f9      	ldr	r1, [r7, #12]
 800b96c:	68ba      	ldr	r2, [r7, #8]
 800b96e:	1a8a      	subs	r2, r1, r2
 800b970:	4610      	mov	r0, r2
 800b972:	4798      	blx	r3
 800b974:	4603      	mov	r3, r0
}
 800b976:	4618      	mov	r0, r3
 800b978:	3710      	adds	r7, #16
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	0800ce78 	.word	0x0800ce78

0800b984 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800b984:	b480      	push	{r7}
 800b986:	b085      	sub	sp, #20
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b98c:	4b0a      	ldr	r3, [pc, #40]	; (800b9b8 <TimerExists+0x34>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800b992:	e008      	b.n	800b9a6 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800b994:	68fa      	ldr	r2, [r7, #12]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d101      	bne.n	800b9a0 <TimerExists+0x1c>
    {
      return true;
 800b99c:	2301      	movs	r3, #1
 800b99e:	e006      	b.n	800b9ae <TimerExists+0x2a>
    }
    cur = cur->Next;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	695b      	ldr	r3, [r3, #20]
 800b9a4:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d1f3      	bne.n	800b994 <TimerExists+0x10>
  }
  return false;
 800b9ac:	2300      	movs	r3, #0
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3714      	adds	r7, #20
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bc80      	pop	{r7}
 800b9b6:	4770      	bx	lr
 800b9b8:	20000a1c 	.word	0x20000a1c

0800b9bc <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800b9bc:	b590      	push	{r4, r7, lr}
 800b9be:	b085      	sub	sp, #20
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800b9c4:	4b11      	ldr	r3, [pc, #68]	; (800ba0c <TimerSetTimeout+0x50>)
 800b9c6:	6a1b      	ldr	r3, [r3, #32]
 800b9c8:	4798      	blx	r3
 800b9ca:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681c      	ldr	r4, [r3, #0]
 800b9d6:	4b0d      	ldr	r3, [pc, #52]	; (800ba0c <TimerSetTimeout+0x50>)
 800b9d8:	699b      	ldr	r3, [r3, #24]
 800b9da:	4798      	blx	r3
 800b9dc:	4602      	mov	r2, r0
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	4413      	add	r3, r2
 800b9e2:	429c      	cmp	r4, r3
 800b9e4:	d207      	bcs.n	800b9f6 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800b9e6:	4b09      	ldr	r3, [pc, #36]	; (800ba0c <TimerSetTimeout+0x50>)
 800b9e8:	699b      	ldr	r3, [r3, #24]
 800b9ea:	4798      	blx	r3
 800b9ec:	4602      	mov	r2, r0
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	441a      	add	r2, r3
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800b9f6:	4b05      	ldr	r3, [pc, #20]	; (800ba0c <TimerSetTimeout+0x50>)
 800b9f8:	689b      	ldr	r3, [r3, #8]
 800b9fa:	687a      	ldr	r2, [r7, #4]
 800b9fc:	6812      	ldr	r2, [r2, #0]
 800b9fe:	4610      	mov	r0, r2
 800ba00:	4798      	blx	r3
}
 800ba02:	bf00      	nop
 800ba04:	3714      	adds	r7, #20
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd90      	pop	{r4, r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	0800ce78 	.word	0x0800ce78

0800ba10 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800ba10:	b480      	push	{r7}
 800ba12:	b085      	sub	sp, #20
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800ba18:	4b14      	ldr	r3, [pc, #80]	; (800ba6c <TimerInsertTimer+0x5c>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800ba1e:	4b13      	ldr	r3, [pc, #76]	; (800ba6c <TimerInsertTimer+0x5c>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	695b      	ldr	r3, [r3, #20]
 800ba24:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800ba26:	e012      	b.n	800ba4e <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681a      	ldr	r2, [r3, #0]
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	429a      	cmp	r2, r3
 800ba32:	d905      	bls.n	800ba40 <TimerInsertTimer+0x30>
    {
        cur = next;
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	695b      	ldr	r3, [r3, #20]
 800ba3c:	60bb      	str	r3, [r7, #8]
 800ba3e:	e006      	b.n	800ba4e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	68ba      	ldr	r2, [r7, #8]
 800ba4a:	615a      	str	r2, [r3, #20]
        return;
 800ba4c:	e009      	b.n	800ba62 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	695b      	ldr	r3, [r3, #20]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d1e8      	bne.n	800ba28 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	687a      	ldr	r2, [r7, #4]
 800ba5a:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	615a      	str	r2, [r3, #20]
}
 800ba62:	3714      	adds	r7, #20
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bc80      	pop	{r7}
 800ba68:	4770      	bx	lr
 800ba6a:	bf00      	nop
 800ba6c:	20000a1c 	.word	0x20000a1c

0800ba70 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b084      	sub	sp, #16
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800ba78:	4b0b      	ldr	r3, [pc, #44]	; (800baa8 <TimerInsertNewHeadTimer+0x38>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d002      	beq.n	800ba8a <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2200      	movs	r2, #0
 800ba88:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	68fa      	ldr	r2, [r7, #12]
 800ba8e:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800ba90:	4a05      	ldr	r2, [pc, #20]	; (800baa8 <TimerInsertNewHeadTimer+0x38>)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800ba96:	4b04      	ldr	r3, [pc, #16]	; (800baa8 <TimerInsertNewHeadTimer+0x38>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7ff ff8e 	bl	800b9bc <TimerSetTimeout>
}
 800baa0:	bf00      	nop
 800baa2:	3710      	adds	r7, #16
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	20000a1c 	.word	0x20000a1c

0800baac <_vsniprintf_r>:
 800baac:	b530      	push	{r4, r5, lr}
 800baae:	4614      	mov	r4, r2
 800bab0:	2c00      	cmp	r4, #0
 800bab2:	b09b      	sub	sp, #108	; 0x6c
 800bab4:	4605      	mov	r5, r0
 800bab6:	461a      	mov	r2, r3
 800bab8:	da05      	bge.n	800bac6 <_vsniprintf_r+0x1a>
 800baba:	238b      	movs	r3, #139	; 0x8b
 800babc:	6003      	str	r3, [r0, #0]
 800babe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bac2:	b01b      	add	sp, #108	; 0x6c
 800bac4:	bd30      	pop	{r4, r5, pc}
 800bac6:	f44f 7302 	mov.w	r3, #520	; 0x208
 800baca:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bace:	bf14      	ite	ne
 800bad0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800bad4:	4623      	moveq	r3, r4
 800bad6:	9302      	str	r3, [sp, #8]
 800bad8:	9305      	str	r3, [sp, #20]
 800bada:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bade:	9100      	str	r1, [sp, #0]
 800bae0:	9104      	str	r1, [sp, #16]
 800bae2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bae6:	4669      	mov	r1, sp
 800bae8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800baea:	f000 f8b5 	bl	800bc58 <_svfiprintf_r>
 800baee:	1c43      	adds	r3, r0, #1
 800baf0:	bfbc      	itt	lt
 800baf2:	238b      	movlt	r3, #139	; 0x8b
 800baf4:	602b      	strlt	r3, [r5, #0]
 800baf6:	2c00      	cmp	r4, #0
 800baf8:	d0e3      	beq.n	800bac2 <_vsniprintf_r+0x16>
 800bafa:	9b00      	ldr	r3, [sp, #0]
 800bafc:	2200      	movs	r2, #0
 800bafe:	701a      	strb	r2, [r3, #0]
 800bb00:	e7df      	b.n	800bac2 <_vsniprintf_r+0x16>
	...

0800bb04 <vsniprintf>:
 800bb04:	b507      	push	{r0, r1, r2, lr}
 800bb06:	9300      	str	r3, [sp, #0]
 800bb08:	4613      	mov	r3, r2
 800bb0a:	460a      	mov	r2, r1
 800bb0c:	4601      	mov	r1, r0
 800bb0e:	4803      	ldr	r0, [pc, #12]	; (800bb1c <vsniprintf+0x18>)
 800bb10:	6800      	ldr	r0, [r0, #0]
 800bb12:	f7ff ffcb 	bl	800baac <_vsniprintf_r>
 800bb16:	b003      	add	sp, #12
 800bb18:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb1c:	20000064 	.word	0x20000064

0800bb20 <memset>:
 800bb20:	4402      	add	r2, r0
 800bb22:	4603      	mov	r3, r0
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d100      	bne.n	800bb2a <memset+0xa>
 800bb28:	4770      	bx	lr
 800bb2a:	f803 1b01 	strb.w	r1, [r3], #1
 800bb2e:	e7f9      	b.n	800bb24 <memset+0x4>

0800bb30 <__errno>:
 800bb30:	4b01      	ldr	r3, [pc, #4]	; (800bb38 <__errno+0x8>)
 800bb32:	6818      	ldr	r0, [r3, #0]
 800bb34:	4770      	bx	lr
 800bb36:	bf00      	nop
 800bb38:	20000064 	.word	0x20000064

0800bb3c <__libc_init_array>:
 800bb3c:	b570      	push	{r4, r5, r6, lr}
 800bb3e:	4d0d      	ldr	r5, [pc, #52]	; (800bb74 <__libc_init_array+0x38>)
 800bb40:	4c0d      	ldr	r4, [pc, #52]	; (800bb78 <__libc_init_array+0x3c>)
 800bb42:	1b64      	subs	r4, r4, r5
 800bb44:	10a4      	asrs	r4, r4, #2
 800bb46:	2600      	movs	r6, #0
 800bb48:	42a6      	cmp	r6, r4
 800bb4a:	d109      	bne.n	800bb60 <__libc_init_array+0x24>
 800bb4c:	4d0b      	ldr	r5, [pc, #44]	; (800bb7c <__libc_init_array+0x40>)
 800bb4e:	4c0c      	ldr	r4, [pc, #48]	; (800bb80 <__libc_init_array+0x44>)
 800bb50:	f000 fc68 	bl	800c424 <_init>
 800bb54:	1b64      	subs	r4, r4, r5
 800bb56:	10a4      	asrs	r4, r4, #2
 800bb58:	2600      	movs	r6, #0
 800bb5a:	42a6      	cmp	r6, r4
 800bb5c:	d105      	bne.n	800bb6a <__libc_init_array+0x2e>
 800bb5e:	bd70      	pop	{r4, r5, r6, pc}
 800bb60:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb64:	4798      	blx	r3
 800bb66:	3601      	adds	r6, #1
 800bb68:	e7ee      	b.n	800bb48 <__libc_init_array+0xc>
 800bb6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb6e:	4798      	blx	r3
 800bb70:	3601      	adds	r6, #1
 800bb72:	e7f2      	b.n	800bb5a <__libc_init_array+0x1e>
 800bb74:	0800d048 	.word	0x0800d048
 800bb78:	0800d048 	.word	0x0800d048
 800bb7c:	0800d048 	.word	0x0800d048
 800bb80:	0800d04c 	.word	0x0800d04c

0800bb84 <__retarget_lock_acquire_recursive>:
 800bb84:	4770      	bx	lr

0800bb86 <__retarget_lock_release_recursive>:
 800bb86:	4770      	bx	lr

0800bb88 <memcpy>:
 800bb88:	440a      	add	r2, r1
 800bb8a:	4291      	cmp	r1, r2
 800bb8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bb90:	d100      	bne.n	800bb94 <memcpy+0xc>
 800bb92:	4770      	bx	lr
 800bb94:	b510      	push	{r4, lr}
 800bb96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb9e:	4291      	cmp	r1, r2
 800bba0:	d1f9      	bne.n	800bb96 <memcpy+0xe>
 800bba2:	bd10      	pop	{r4, pc}

0800bba4 <__ssputs_r>:
 800bba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bba8:	688e      	ldr	r6, [r1, #8]
 800bbaa:	461f      	mov	r7, r3
 800bbac:	42be      	cmp	r6, r7
 800bbae:	680b      	ldr	r3, [r1, #0]
 800bbb0:	4682      	mov	sl, r0
 800bbb2:	460c      	mov	r4, r1
 800bbb4:	4690      	mov	r8, r2
 800bbb6:	d82c      	bhi.n	800bc12 <__ssputs_r+0x6e>
 800bbb8:	898a      	ldrh	r2, [r1, #12]
 800bbba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bbbe:	d026      	beq.n	800bc0e <__ssputs_r+0x6a>
 800bbc0:	6965      	ldr	r5, [r4, #20]
 800bbc2:	6909      	ldr	r1, [r1, #16]
 800bbc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bbc8:	eba3 0901 	sub.w	r9, r3, r1
 800bbcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bbd0:	1c7b      	adds	r3, r7, #1
 800bbd2:	444b      	add	r3, r9
 800bbd4:	106d      	asrs	r5, r5, #1
 800bbd6:	429d      	cmp	r5, r3
 800bbd8:	bf38      	it	cc
 800bbda:	461d      	movcc	r5, r3
 800bbdc:	0553      	lsls	r3, r2, #21
 800bbde:	d527      	bpl.n	800bc30 <__ssputs_r+0x8c>
 800bbe0:	4629      	mov	r1, r5
 800bbe2:	f000 f957 	bl	800be94 <_malloc_r>
 800bbe6:	4606      	mov	r6, r0
 800bbe8:	b360      	cbz	r0, 800bc44 <__ssputs_r+0xa0>
 800bbea:	6921      	ldr	r1, [r4, #16]
 800bbec:	464a      	mov	r2, r9
 800bbee:	f7ff ffcb 	bl	800bb88 <memcpy>
 800bbf2:	89a3      	ldrh	r3, [r4, #12]
 800bbf4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bbf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbfc:	81a3      	strh	r3, [r4, #12]
 800bbfe:	6126      	str	r6, [r4, #16]
 800bc00:	6165      	str	r5, [r4, #20]
 800bc02:	444e      	add	r6, r9
 800bc04:	eba5 0509 	sub.w	r5, r5, r9
 800bc08:	6026      	str	r6, [r4, #0]
 800bc0a:	60a5      	str	r5, [r4, #8]
 800bc0c:	463e      	mov	r6, r7
 800bc0e:	42be      	cmp	r6, r7
 800bc10:	d900      	bls.n	800bc14 <__ssputs_r+0x70>
 800bc12:	463e      	mov	r6, r7
 800bc14:	6820      	ldr	r0, [r4, #0]
 800bc16:	4632      	mov	r2, r6
 800bc18:	4641      	mov	r1, r8
 800bc1a:	f000 fb86 	bl	800c32a <memmove>
 800bc1e:	68a3      	ldr	r3, [r4, #8]
 800bc20:	1b9b      	subs	r3, r3, r6
 800bc22:	60a3      	str	r3, [r4, #8]
 800bc24:	6823      	ldr	r3, [r4, #0]
 800bc26:	4433      	add	r3, r6
 800bc28:	6023      	str	r3, [r4, #0]
 800bc2a:	2000      	movs	r0, #0
 800bc2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc30:	462a      	mov	r2, r5
 800bc32:	f000 fb4b 	bl	800c2cc <_realloc_r>
 800bc36:	4606      	mov	r6, r0
 800bc38:	2800      	cmp	r0, #0
 800bc3a:	d1e0      	bne.n	800bbfe <__ssputs_r+0x5a>
 800bc3c:	6921      	ldr	r1, [r4, #16]
 800bc3e:	4650      	mov	r0, sl
 800bc40:	f000 fb9e 	bl	800c380 <_free_r>
 800bc44:	230c      	movs	r3, #12
 800bc46:	f8ca 3000 	str.w	r3, [sl]
 800bc4a:	89a3      	ldrh	r3, [r4, #12]
 800bc4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc50:	81a3      	strh	r3, [r4, #12]
 800bc52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc56:	e7e9      	b.n	800bc2c <__ssputs_r+0x88>

0800bc58 <_svfiprintf_r>:
 800bc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc5c:	4698      	mov	r8, r3
 800bc5e:	898b      	ldrh	r3, [r1, #12]
 800bc60:	061b      	lsls	r3, r3, #24
 800bc62:	b09d      	sub	sp, #116	; 0x74
 800bc64:	4607      	mov	r7, r0
 800bc66:	460d      	mov	r5, r1
 800bc68:	4614      	mov	r4, r2
 800bc6a:	d50e      	bpl.n	800bc8a <_svfiprintf_r+0x32>
 800bc6c:	690b      	ldr	r3, [r1, #16]
 800bc6e:	b963      	cbnz	r3, 800bc8a <_svfiprintf_r+0x32>
 800bc70:	2140      	movs	r1, #64	; 0x40
 800bc72:	f000 f90f 	bl	800be94 <_malloc_r>
 800bc76:	6028      	str	r0, [r5, #0]
 800bc78:	6128      	str	r0, [r5, #16]
 800bc7a:	b920      	cbnz	r0, 800bc86 <_svfiprintf_r+0x2e>
 800bc7c:	230c      	movs	r3, #12
 800bc7e:	603b      	str	r3, [r7, #0]
 800bc80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc84:	e0d0      	b.n	800be28 <_svfiprintf_r+0x1d0>
 800bc86:	2340      	movs	r3, #64	; 0x40
 800bc88:	616b      	str	r3, [r5, #20]
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	9309      	str	r3, [sp, #36]	; 0x24
 800bc8e:	2320      	movs	r3, #32
 800bc90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc94:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc98:	2330      	movs	r3, #48	; 0x30
 800bc9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800be40 <_svfiprintf_r+0x1e8>
 800bc9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bca2:	f04f 0901 	mov.w	r9, #1
 800bca6:	4623      	mov	r3, r4
 800bca8:	469a      	mov	sl, r3
 800bcaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcae:	b10a      	cbz	r2, 800bcb4 <_svfiprintf_r+0x5c>
 800bcb0:	2a25      	cmp	r2, #37	; 0x25
 800bcb2:	d1f9      	bne.n	800bca8 <_svfiprintf_r+0x50>
 800bcb4:	ebba 0b04 	subs.w	fp, sl, r4
 800bcb8:	d00b      	beq.n	800bcd2 <_svfiprintf_r+0x7a>
 800bcba:	465b      	mov	r3, fp
 800bcbc:	4622      	mov	r2, r4
 800bcbe:	4629      	mov	r1, r5
 800bcc0:	4638      	mov	r0, r7
 800bcc2:	f7ff ff6f 	bl	800bba4 <__ssputs_r>
 800bcc6:	3001      	adds	r0, #1
 800bcc8:	f000 80a9 	beq.w	800be1e <_svfiprintf_r+0x1c6>
 800bccc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcce:	445a      	add	r2, fp
 800bcd0:	9209      	str	r2, [sp, #36]	; 0x24
 800bcd2:	f89a 3000 	ldrb.w	r3, [sl]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	f000 80a1 	beq.w	800be1e <_svfiprintf_r+0x1c6>
 800bcdc:	2300      	movs	r3, #0
 800bcde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bce2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bce6:	f10a 0a01 	add.w	sl, sl, #1
 800bcea:	9304      	str	r3, [sp, #16]
 800bcec:	9307      	str	r3, [sp, #28]
 800bcee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcf2:	931a      	str	r3, [sp, #104]	; 0x68
 800bcf4:	4654      	mov	r4, sl
 800bcf6:	2205      	movs	r2, #5
 800bcf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcfc:	4850      	ldr	r0, [pc, #320]	; (800be40 <_svfiprintf_r+0x1e8>)
 800bcfe:	f7f4 fa3f 	bl	8000180 <memchr>
 800bd02:	9a04      	ldr	r2, [sp, #16]
 800bd04:	b9d8      	cbnz	r0, 800bd3e <_svfiprintf_r+0xe6>
 800bd06:	06d0      	lsls	r0, r2, #27
 800bd08:	bf44      	itt	mi
 800bd0a:	2320      	movmi	r3, #32
 800bd0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd10:	0711      	lsls	r1, r2, #28
 800bd12:	bf44      	itt	mi
 800bd14:	232b      	movmi	r3, #43	; 0x2b
 800bd16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd1a:	f89a 3000 	ldrb.w	r3, [sl]
 800bd1e:	2b2a      	cmp	r3, #42	; 0x2a
 800bd20:	d015      	beq.n	800bd4e <_svfiprintf_r+0xf6>
 800bd22:	9a07      	ldr	r2, [sp, #28]
 800bd24:	4654      	mov	r4, sl
 800bd26:	2000      	movs	r0, #0
 800bd28:	f04f 0c0a 	mov.w	ip, #10
 800bd2c:	4621      	mov	r1, r4
 800bd2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd32:	3b30      	subs	r3, #48	; 0x30
 800bd34:	2b09      	cmp	r3, #9
 800bd36:	d94d      	bls.n	800bdd4 <_svfiprintf_r+0x17c>
 800bd38:	b1b0      	cbz	r0, 800bd68 <_svfiprintf_r+0x110>
 800bd3a:	9207      	str	r2, [sp, #28]
 800bd3c:	e014      	b.n	800bd68 <_svfiprintf_r+0x110>
 800bd3e:	eba0 0308 	sub.w	r3, r0, r8
 800bd42:	fa09 f303 	lsl.w	r3, r9, r3
 800bd46:	4313      	orrs	r3, r2
 800bd48:	9304      	str	r3, [sp, #16]
 800bd4a:	46a2      	mov	sl, r4
 800bd4c:	e7d2      	b.n	800bcf4 <_svfiprintf_r+0x9c>
 800bd4e:	9b03      	ldr	r3, [sp, #12]
 800bd50:	1d19      	adds	r1, r3, #4
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	9103      	str	r1, [sp, #12]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	bfbb      	ittet	lt
 800bd5a:	425b      	neglt	r3, r3
 800bd5c:	f042 0202 	orrlt.w	r2, r2, #2
 800bd60:	9307      	strge	r3, [sp, #28]
 800bd62:	9307      	strlt	r3, [sp, #28]
 800bd64:	bfb8      	it	lt
 800bd66:	9204      	strlt	r2, [sp, #16]
 800bd68:	7823      	ldrb	r3, [r4, #0]
 800bd6a:	2b2e      	cmp	r3, #46	; 0x2e
 800bd6c:	d10c      	bne.n	800bd88 <_svfiprintf_r+0x130>
 800bd6e:	7863      	ldrb	r3, [r4, #1]
 800bd70:	2b2a      	cmp	r3, #42	; 0x2a
 800bd72:	d134      	bne.n	800bdde <_svfiprintf_r+0x186>
 800bd74:	9b03      	ldr	r3, [sp, #12]
 800bd76:	1d1a      	adds	r2, r3, #4
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	9203      	str	r2, [sp, #12]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	bfb8      	it	lt
 800bd80:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bd84:	3402      	adds	r4, #2
 800bd86:	9305      	str	r3, [sp, #20]
 800bd88:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800be44 <_svfiprintf_r+0x1ec>
 800bd8c:	7821      	ldrb	r1, [r4, #0]
 800bd8e:	2203      	movs	r2, #3
 800bd90:	4650      	mov	r0, sl
 800bd92:	f7f4 f9f5 	bl	8000180 <memchr>
 800bd96:	b138      	cbz	r0, 800bda8 <_svfiprintf_r+0x150>
 800bd98:	9b04      	ldr	r3, [sp, #16]
 800bd9a:	eba0 000a 	sub.w	r0, r0, sl
 800bd9e:	2240      	movs	r2, #64	; 0x40
 800bda0:	4082      	lsls	r2, r0
 800bda2:	4313      	orrs	r3, r2
 800bda4:	3401      	adds	r4, #1
 800bda6:	9304      	str	r3, [sp, #16]
 800bda8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdac:	4826      	ldr	r0, [pc, #152]	; (800be48 <_svfiprintf_r+0x1f0>)
 800bdae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdb2:	2206      	movs	r2, #6
 800bdb4:	f7f4 f9e4 	bl	8000180 <memchr>
 800bdb8:	2800      	cmp	r0, #0
 800bdba:	d038      	beq.n	800be2e <_svfiprintf_r+0x1d6>
 800bdbc:	4b23      	ldr	r3, [pc, #140]	; (800be4c <_svfiprintf_r+0x1f4>)
 800bdbe:	bb1b      	cbnz	r3, 800be08 <_svfiprintf_r+0x1b0>
 800bdc0:	9b03      	ldr	r3, [sp, #12]
 800bdc2:	3307      	adds	r3, #7
 800bdc4:	f023 0307 	bic.w	r3, r3, #7
 800bdc8:	3308      	adds	r3, #8
 800bdca:	9303      	str	r3, [sp, #12]
 800bdcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdce:	4433      	add	r3, r6
 800bdd0:	9309      	str	r3, [sp, #36]	; 0x24
 800bdd2:	e768      	b.n	800bca6 <_svfiprintf_r+0x4e>
 800bdd4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdd8:	460c      	mov	r4, r1
 800bdda:	2001      	movs	r0, #1
 800bddc:	e7a6      	b.n	800bd2c <_svfiprintf_r+0xd4>
 800bdde:	2300      	movs	r3, #0
 800bde0:	3401      	adds	r4, #1
 800bde2:	9305      	str	r3, [sp, #20]
 800bde4:	4619      	mov	r1, r3
 800bde6:	f04f 0c0a 	mov.w	ip, #10
 800bdea:	4620      	mov	r0, r4
 800bdec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdf0:	3a30      	subs	r2, #48	; 0x30
 800bdf2:	2a09      	cmp	r2, #9
 800bdf4:	d903      	bls.n	800bdfe <_svfiprintf_r+0x1a6>
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d0c6      	beq.n	800bd88 <_svfiprintf_r+0x130>
 800bdfa:	9105      	str	r1, [sp, #20]
 800bdfc:	e7c4      	b.n	800bd88 <_svfiprintf_r+0x130>
 800bdfe:	fb0c 2101 	mla	r1, ip, r1, r2
 800be02:	4604      	mov	r4, r0
 800be04:	2301      	movs	r3, #1
 800be06:	e7f0      	b.n	800bdea <_svfiprintf_r+0x192>
 800be08:	ab03      	add	r3, sp, #12
 800be0a:	9300      	str	r3, [sp, #0]
 800be0c:	462a      	mov	r2, r5
 800be0e:	4b10      	ldr	r3, [pc, #64]	; (800be50 <_svfiprintf_r+0x1f8>)
 800be10:	a904      	add	r1, sp, #16
 800be12:	4638      	mov	r0, r7
 800be14:	f3af 8000 	nop.w
 800be18:	1c42      	adds	r2, r0, #1
 800be1a:	4606      	mov	r6, r0
 800be1c:	d1d6      	bne.n	800bdcc <_svfiprintf_r+0x174>
 800be1e:	89ab      	ldrh	r3, [r5, #12]
 800be20:	065b      	lsls	r3, r3, #25
 800be22:	f53f af2d 	bmi.w	800bc80 <_svfiprintf_r+0x28>
 800be26:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be28:	b01d      	add	sp, #116	; 0x74
 800be2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be2e:	ab03      	add	r3, sp, #12
 800be30:	9300      	str	r3, [sp, #0]
 800be32:	462a      	mov	r2, r5
 800be34:	4b06      	ldr	r3, [pc, #24]	; (800be50 <_svfiprintf_r+0x1f8>)
 800be36:	a904      	add	r1, sp, #16
 800be38:	4638      	mov	r0, r7
 800be3a:	f000 f919 	bl	800c070 <_printf_i>
 800be3e:	e7eb      	b.n	800be18 <_svfiprintf_r+0x1c0>
 800be40:	0800d00c 	.word	0x0800d00c
 800be44:	0800d012 	.word	0x0800d012
 800be48:	0800d016 	.word	0x0800d016
 800be4c:	00000000 	.word	0x00000000
 800be50:	0800bba5 	.word	0x0800bba5

0800be54 <sbrk_aligned>:
 800be54:	b570      	push	{r4, r5, r6, lr}
 800be56:	4e0e      	ldr	r6, [pc, #56]	; (800be90 <sbrk_aligned+0x3c>)
 800be58:	460c      	mov	r4, r1
 800be5a:	6831      	ldr	r1, [r6, #0]
 800be5c:	4605      	mov	r5, r0
 800be5e:	b911      	cbnz	r1, 800be66 <sbrk_aligned+0x12>
 800be60:	f000 fa7e 	bl	800c360 <_sbrk_r>
 800be64:	6030      	str	r0, [r6, #0]
 800be66:	4621      	mov	r1, r4
 800be68:	4628      	mov	r0, r5
 800be6a:	f000 fa79 	bl	800c360 <_sbrk_r>
 800be6e:	1c43      	adds	r3, r0, #1
 800be70:	d00a      	beq.n	800be88 <sbrk_aligned+0x34>
 800be72:	1cc4      	adds	r4, r0, #3
 800be74:	f024 0403 	bic.w	r4, r4, #3
 800be78:	42a0      	cmp	r0, r4
 800be7a:	d007      	beq.n	800be8c <sbrk_aligned+0x38>
 800be7c:	1a21      	subs	r1, r4, r0
 800be7e:	4628      	mov	r0, r5
 800be80:	f000 fa6e 	bl	800c360 <_sbrk_r>
 800be84:	3001      	adds	r0, #1
 800be86:	d101      	bne.n	800be8c <sbrk_aligned+0x38>
 800be88:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800be8c:	4620      	mov	r0, r4
 800be8e:	bd70      	pop	{r4, r5, r6, pc}
 800be90:	20000b60 	.word	0x20000b60

0800be94 <_malloc_r>:
 800be94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be98:	1ccd      	adds	r5, r1, #3
 800be9a:	f025 0503 	bic.w	r5, r5, #3
 800be9e:	3508      	adds	r5, #8
 800bea0:	2d0c      	cmp	r5, #12
 800bea2:	bf38      	it	cc
 800bea4:	250c      	movcc	r5, #12
 800bea6:	2d00      	cmp	r5, #0
 800bea8:	4607      	mov	r7, r0
 800beaa:	db01      	blt.n	800beb0 <_malloc_r+0x1c>
 800beac:	42a9      	cmp	r1, r5
 800beae:	d905      	bls.n	800bebc <_malloc_r+0x28>
 800beb0:	230c      	movs	r3, #12
 800beb2:	603b      	str	r3, [r7, #0]
 800beb4:	2600      	movs	r6, #0
 800beb6:	4630      	mov	r0, r6
 800beb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bebc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bf90 <_malloc_r+0xfc>
 800bec0:	f000 f9f8 	bl	800c2b4 <__malloc_lock>
 800bec4:	f8d8 3000 	ldr.w	r3, [r8]
 800bec8:	461c      	mov	r4, r3
 800beca:	bb5c      	cbnz	r4, 800bf24 <_malloc_r+0x90>
 800becc:	4629      	mov	r1, r5
 800bece:	4638      	mov	r0, r7
 800bed0:	f7ff ffc0 	bl	800be54 <sbrk_aligned>
 800bed4:	1c43      	adds	r3, r0, #1
 800bed6:	4604      	mov	r4, r0
 800bed8:	d155      	bne.n	800bf86 <_malloc_r+0xf2>
 800beda:	f8d8 4000 	ldr.w	r4, [r8]
 800bede:	4626      	mov	r6, r4
 800bee0:	2e00      	cmp	r6, #0
 800bee2:	d145      	bne.n	800bf70 <_malloc_r+0xdc>
 800bee4:	2c00      	cmp	r4, #0
 800bee6:	d048      	beq.n	800bf7a <_malloc_r+0xe6>
 800bee8:	6823      	ldr	r3, [r4, #0]
 800beea:	4631      	mov	r1, r6
 800beec:	4638      	mov	r0, r7
 800beee:	eb04 0903 	add.w	r9, r4, r3
 800bef2:	f000 fa35 	bl	800c360 <_sbrk_r>
 800bef6:	4581      	cmp	r9, r0
 800bef8:	d13f      	bne.n	800bf7a <_malloc_r+0xe6>
 800befa:	6821      	ldr	r1, [r4, #0]
 800befc:	1a6d      	subs	r5, r5, r1
 800befe:	4629      	mov	r1, r5
 800bf00:	4638      	mov	r0, r7
 800bf02:	f7ff ffa7 	bl	800be54 <sbrk_aligned>
 800bf06:	3001      	adds	r0, #1
 800bf08:	d037      	beq.n	800bf7a <_malloc_r+0xe6>
 800bf0a:	6823      	ldr	r3, [r4, #0]
 800bf0c:	442b      	add	r3, r5
 800bf0e:	6023      	str	r3, [r4, #0]
 800bf10:	f8d8 3000 	ldr.w	r3, [r8]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d038      	beq.n	800bf8a <_malloc_r+0xf6>
 800bf18:	685a      	ldr	r2, [r3, #4]
 800bf1a:	42a2      	cmp	r2, r4
 800bf1c:	d12b      	bne.n	800bf76 <_malloc_r+0xe2>
 800bf1e:	2200      	movs	r2, #0
 800bf20:	605a      	str	r2, [r3, #4]
 800bf22:	e00f      	b.n	800bf44 <_malloc_r+0xb0>
 800bf24:	6822      	ldr	r2, [r4, #0]
 800bf26:	1b52      	subs	r2, r2, r5
 800bf28:	d41f      	bmi.n	800bf6a <_malloc_r+0xd6>
 800bf2a:	2a0b      	cmp	r2, #11
 800bf2c:	d917      	bls.n	800bf5e <_malloc_r+0xca>
 800bf2e:	1961      	adds	r1, r4, r5
 800bf30:	42a3      	cmp	r3, r4
 800bf32:	6025      	str	r5, [r4, #0]
 800bf34:	bf18      	it	ne
 800bf36:	6059      	strne	r1, [r3, #4]
 800bf38:	6863      	ldr	r3, [r4, #4]
 800bf3a:	bf08      	it	eq
 800bf3c:	f8c8 1000 	streq.w	r1, [r8]
 800bf40:	5162      	str	r2, [r4, r5]
 800bf42:	604b      	str	r3, [r1, #4]
 800bf44:	4638      	mov	r0, r7
 800bf46:	f104 060b 	add.w	r6, r4, #11
 800bf4a:	f000 f9b9 	bl	800c2c0 <__malloc_unlock>
 800bf4e:	f026 0607 	bic.w	r6, r6, #7
 800bf52:	1d23      	adds	r3, r4, #4
 800bf54:	1af2      	subs	r2, r6, r3
 800bf56:	d0ae      	beq.n	800beb6 <_malloc_r+0x22>
 800bf58:	1b9b      	subs	r3, r3, r6
 800bf5a:	50a3      	str	r3, [r4, r2]
 800bf5c:	e7ab      	b.n	800beb6 <_malloc_r+0x22>
 800bf5e:	42a3      	cmp	r3, r4
 800bf60:	6862      	ldr	r2, [r4, #4]
 800bf62:	d1dd      	bne.n	800bf20 <_malloc_r+0x8c>
 800bf64:	f8c8 2000 	str.w	r2, [r8]
 800bf68:	e7ec      	b.n	800bf44 <_malloc_r+0xb0>
 800bf6a:	4623      	mov	r3, r4
 800bf6c:	6864      	ldr	r4, [r4, #4]
 800bf6e:	e7ac      	b.n	800beca <_malloc_r+0x36>
 800bf70:	4634      	mov	r4, r6
 800bf72:	6876      	ldr	r6, [r6, #4]
 800bf74:	e7b4      	b.n	800bee0 <_malloc_r+0x4c>
 800bf76:	4613      	mov	r3, r2
 800bf78:	e7cc      	b.n	800bf14 <_malloc_r+0x80>
 800bf7a:	230c      	movs	r3, #12
 800bf7c:	603b      	str	r3, [r7, #0]
 800bf7e:	4638      	mov	r0, r7
 800bf80:	f000 f99e 	bl	800c2c0 <__malloc_unlock>
 800bf84:	e797      	b.n	800beb6 <_malloc_r+0x22>
 800bf86:	6025      	str	r5, [r4, #0]
 800bf88:	e7dc      	b.n	800bf44 <_malloc_r+0xb0>
 800bf8a:	605b      	str	r3, [r3, #4]
 800bf8c:	deff      	udf	#255	; 0xff
 800bf8e:	bf00      	nop
 800bf90:	20000b5c 	.word	0x20000b5c

0800bf94 <_printf_common>:
 800bf94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf98:	4616      	mov	r6, r2
 800bf9a:	4699      	mov	r9, r3
 800bf9c:	688a      	ldr	r2, [r1, #8]
 800bf9e:	690b      	ldr	r3, [r1, #16]
 800bfa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	bfb8      	it	lt
 800bfa8:	4613      	movlt	r3, r2
 800bfaa:	6033      	str	r3, [r6, #0]
 800bfac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bfb0:	4607      	mov	r7, r0
 800bfb2:	460c      	mov	r4, r1
 800bfb4:	b10a      	cbz	r2, 800bfba <_printf_common+0x26>
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	6033      	str	r3, [r6, #0]
 800bfba:	6823      	ldr	r3, [r4, #0]
 800bfbc:	0699      	lsls	r1, r3, #26
 800bfbe:	bf42      	ittt	mi
 800bfc0:	6833      	ldrmi	r3, [r6, #0]
 800bfc2:	3302      	addmi	r3, #2
 800bfc4:	6033      	strmi	r3, [r6, #0]
 800bfc6:	6825      	ldr	r5, [r4, #0]
 800bfc8:	f015 0506 	ands.w	r5, r5, #6
 800bfcc:	d106      	bne.n	800bfdc <_printf_common+0x48>
 800bfce:	f104 0a19 	add.w	sl, r4, #25
 800bfd2:	68e3      	ldr	r3, [r4, #12]
 800bfd4:	6832      	ldr	r2, [r6, #0]
 800bfd6:	1a9b      	subs	r3, r3, r2
 800bfd8:	42ab      	cmp	r3, r5
 800bfda:	dc26      	bgt.n	800c02a <_printf_common+0x96>
 800bfdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bfe0:	1e13      	subs	r3, r2, #0
 800bfe2:	6822      	ldr	r2, [r4, #0]
 800bfe4:	bf18      	it	ne
 800bfe6:	2301      	movne	r3, #1
 800bfe8:	0692      	lsls	r2, r2, #26
 800bfea:	d42b      	bmi.n	800c044 <_printf_common+0xb0>
 800bfec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bff0:	4649      	mov	r1, r9
 800bff2:	4638      	mov	r0, r7
 800bff4:	47c0      	blx	r8
 800bff6:	3001      	adds	r0, #1
 800bff8:	d01e      	beq.n	800c038 <_printf_common+0xa4>
 800bffa:	6823      	ldr	r3, [r4, #0]
 800bffc:	6922      	ldr	r2, [r4, #16]
 800bffe:	f003 0306 	and.w	r3, r3, #6
 800c002:	2b04      	cmp	r3, #4
 800c004:	bf02      	ittt	eq
 800c006:	68e5      	ldreq	r5, [r4, #12]
 800c008:	6833      	ldreq	r3, [r6, #0]
 800c00a:	1aed      	subeq	r5, r5, r3
 800c00c:	68a3      	ldr	r3, [r4, #8]
 800c00e:	bf0c      	ite	eq
 800c010:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c014:	2500      	movne	r5, #0
 800c016:	4293      	cmp	r3, r2
 800c018:	bfc4      	itt	gt
 800c01a:	1a9b      	subgt	r3, r3, r2
 800c01c:	18ed      	addgt	r5, r5, r3
 800c01e:	2600      	movs	r6, #0
 800c020:	341a      	adds	r4, #26
 800c022:	42b5      	cmp	r5, r6
 800c024:	d11a      	bne.n	800c05c <_printf_common+0xc8>
 800c026:	2000      	movs	r0, #0
 800c028:	e008      	b.n	800c03c <_printf_common+0xa8>
 800c02a:	2301      	movs	r3, #1
 800c02c:	4652      	mov	r2, sl
 800c02e:	4649      	mov	r1, r9
 800c030:	4638      	mov	r0, r7
 800c032:	47c0      	blx	r8
 800c034:	3001      	adds	r0, #1
 800c036:	d103      	bne.n	800c040 <_printf_common+0xac>
 800c038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c03c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c040:	3501      	adds	r5, #1
 800c042:	e7c6      	b.n	800bfd2 <_printf_common+0x3e>
 800c044:	18e1      	adds	r1, r4, r3
 800c046:	1c5a      	adds	r2, r3, #1
 800c048:	2030      	movs	r0, #48	; 0x30
 800c04a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c04e:	4422      	add	r2, r4
 800c050:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c054:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c058:	3302      	adds	r3, #2
 800c05a:	e7c7      	b.n	800bfec <_printf_common+0x58>
 800c05c:	2301      	movs	r3, #1
 800c05e:	4622      	mov	r2, r4
 800c060:	4649      	mov	r1, r9
 800c062:	4638      	mov	r0, r7
 800c064:	47c0      	blx	r8
 800c066:	3001      	adds	r0, #1
 800c068:	d0e6      	beq.n	800c038 <_printf_common+0xa4>
 800c06a:	3601      	adds	r6, #1
 800c06c:	e7d9      	b.n	800c022 <_printf_common+0x8e>
	...

0800c070 <_printf_i>:
 800c070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c074:	7e0f      	ldrb	r7, [r1, #24]
 800c076:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c078:	2f78      	cmp	r7, #120	; 0x78
 800c07a:	4691      	mov	r9, r2
 800c07c:	4680      	mov	r8, r0
 800c07e:	460c      	mov	r4, r1
 800c080:	469a      	mov	sl, r3
 800c082:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c086:	d807      	bhi.n	800c098 <_printf_i+0x28>
 800c088:	2f62      	cmp	r7, #98	; 0x62
 800c08a:	d80a      	bhi.n	800c0a2 <_printf_i+0x32>
 800c08c:	2f00      	cmp	r7, #0
 800c08e:	f000 80d4 	beq.w	800c23a <_printf_i+0x1ca>
 800c092:	2f58      	cmp	r7, #88	; 0x58
 800c094:	f000 80c0 	beq.w	800c218 <_printf_i+0x1a8>
 800c098:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c09c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c0a0:	e03a      	b.n	800c118 <_printf_i+0xa8>
 800c0a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c0a6:	2b15      	cmp	r3, #21
 800c0a8:	d8f6      	bhi.n	800c098 <_printf_i+0x28>
 800c0aa:	a101      	add	r1, pc, #4	; (adr r1, 800c0b0 <_printf_i+0x40>)
 800c0ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c0b0:	0800c109 	.word	0x0800c109
 800c0b4:	0800c11d 	.word	0x0800c11d
 800c0b8:	0800c099 	.word	0x0800c099
 800c0bc:	0800c099 	.word	0x0800c099
 800c0c0:	0800c099 	.word	0x0800c099
 800c0c4:	0800c099 	.word	0x0800c099
 800c0c8:	0800c11d 	.word	0x0800c11d
 800c0cc:	0800c099 	.word	0x0800c099
 800c0d0:	0800c099 	.word	0x0800c099
 800c0d4:	0800c099 	.word	0x0800c099
 800c0d8:	0800c099 	.word	0x0800c099
 800c0dc:	0800c221 	.word	0x0800c221
 800c0e0:	0800c149 	.word	0x0800c149
 800c0e4:	0800c1db 	.word	0x0800c1db
 800c0e8:	0800c099 	.word	0x0800c099
 800c0ec:	0800c099 	.word	0x0800c099
 800c0f0:	0800c243 	.word	0x0800c243
 800c0f4:	0800c099 	.word	0x0800c099
 800c0f8:	0800c149 	.word	0x0800c149
 800c0fc:	0800c099 	.word	0x0800c099
 800c100:	0800c099 	.word	0x0800c099
 800c104:	0800c1e3 	.word	0x0800c1e3
 800c108:	682b      	ldr	r3, [r5, #0]
 800c10a:	1d1a      	adds	r2, r3, #4
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	602a      	str	r2, [r5, #0]
 800c110:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c114:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c118:	2301      	movs	r3, #1
 800c11a:	e09f      	b.n	800c25c <_printf_i+0x1ec>
 800c11c:	6820      	ldr	r0, [r4, #0]
 800c11e:	682b      	ldr	r3, [r5, #0]
 800c120:	0607      	lsls	r7, r0, #24
 800c122:	f103 0104 	add.w	r1, r3, #4
 800c126:	6029      	str	r1, [r5, #0]
 800c128:	d501      	bpl.n	800c12e <_printf_i+0xbe>
 800c12a:	681e      	ldr	r6, [r3, #0]
 800c12c:	e003      	b.n	800c136 <_printf_i+0xc6>
 800c12e:	0646      	lsls	r6, r0, #25
 800c130:	d5fb      	bpl.n	800c12a <_printf_i+0xba>
 800c132:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c136:	2e00      	cmp	r6, #0
 800c138:	da03      	bge.n	800c142 <_printf_i+0xd2>
 800c13a:	232d      	movs	r3, #45	; 0x2d
 800c13c:	4276      	negs	r6, r6
 800c13e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c142:	485a      	ldr	r0, [pc, #360]	; (800c2ac <_printf_i+0x23c>)
 800c144:	230a      	movs	r3, #10
 800c146:	e012      	b.n	800c16e <_printf_i+0xfe>
 800c148:	682b      	ldr	r3, [r5, #0]
 800c14a:	6820      	ldr	r0, [r4, #0]
 800c14c:	1d19      	adds	r1, r3, #4
 800c14e:	6029      	str	r1, [r5, #0]
 800c150:	0605      	lsls	r5, r0, #24
 800c152:	d501      	bpl.n	800c158 <_printf_i+0xe8>
 800c154:	681e      	ldr	r6, [r3, #0]
 800c156:	e002      	b.n	800c15e <_printf_i+0xee>
 800c158:	0641      	lsls	r1, r0, #25
 800c15a:	d5fb      	bpl.n	800c154 <_printf_i+0xe4>
 800c15c:	881e      	ldrh	r6, [r3, #0]
 800c15e:	4853      	ldr	r0, [pc, #332]	; (800c2ac <_printf_i+0x23c>)
 800c160:	2f6f      	cmp	r7, #111	; 0x6f
 800c162:	bf0c      	ite	eq
 800c164:	2308      	moveq	r3, #8
 800c166:	230a      	movne	r3, #10
 800c168:	2100      	movs	r1, #0
 800c16a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c16e:	6865      	ldr	r5, [r4, #4]
 800c170:	60a5      	str	r5, [r4, #8]
 800c172:	2d00      	cmp	r5, #0
 800c174:	bfa2      	ittt	ge
 800c176:	6821      	ldrge	r1, [r4, #0]
 800c178:	f021 0104 	bicge.w	r1, r1, #4
 800c17c:	6021      	strge	r1, [r4, #0]
 800c17e:	b90e      	cbnz	r6, 800c184 <_printf_i+0x114>
 800c180:	2d00      	cmp	r5, #0
 800c182:	d04b      	beq.n	800c21c <_printf_i+0x1ac>
 800c184:	4615      	mov	r5, r2
 800c186:	fbb6 f1f3 	udiv	r1, r6, r3
 800c18a:	fb03 6711 	mls	r7, r3, r1, r6
 800c18e:	5dc7      	ldrb	r7, [r0, r7]
 800c190:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c194:	4637      	mov	r7, r6
 800c196:	42bb      	cmp	r3, r7
 800c198:	460e      	mov	r6, r1
 800c19a:	d9f4      	bls.n	800c186 <_printf_i+0x116>
 800c19c:	2b08      	cmp	r3, #8
 800c19e:	d10b      	bne.n	800c1b8 <_printf_i+0x148>
 800c1a0:	6823      	ldr	r3, [r4, #0]
 800c1a2:	07de      	lsls	r6, r3, #31
 800c1a4:	d508      	bpl.n	800c1b8 <_printf_i+0x148>
 800c1a6:	6923      	ldr	r3, [r4, #16]
 800c1a8:	6861      	ldr	r1, [r4, #4]
 800c1aa:	4299      	cmp	r1, r3
 800c1ac:	bfde      	ittt	le
 800c1ae:	2330      	movle	r3, #48	; 0x30
 800c1b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c1b4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c1b8:	1b52      	subs	r2, r2, r5
 800c1ba:	6122      	str	r2, [r4, #16]
 800c1bc:	f8cd a000 	str.w	sl, [sp]
 800c1c0:	464b      	mov	r3, r9
 800c1c2:	aa03      	add	r2, sp, #12
 800c1c4:	4621      	mov	r1, r4
 800c1c6:	4640      	mov	r0, r8
 800c1c8:	f7ff fee4 	bl	800bf94 <_printf_common>
 800c1cc:	3001      	adds	r0, #1
 800c1ce:	d14a      	bne.n	800c266 <_printf_i+0x1f6>
 800c1d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c1d4:	b004      	add	sp, #16
 800c1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1da:	6823      	ldr	r3, [r4, #0]
 800c1dc:	f043 0320 	orr.w	r3, r3, #32
 800c1e0:	6023      	str	r3, [r4, #0]
 800c1e2:	4833      	ldr	r0, [pc, #204]	; (800c2b0 <_printf_i+0x240>)
 800c1e4:	2778      	movs	r7, #120	; 0x78
 800c1e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c1ea:	6823      	ldr	r3, [r4, #0]
 800c1ec:	6829      	ldr	r1, [r5, #0]
 800c1ee:	061f      	lsls	r7, r3, #24
 800c1f0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c1f4:	d402      	bmi.n	800c1fc <_printf_i+0x18c>
 800c1f6:	065f      	lsls	r7, r3, #25
 800c1f8:	bf48      	it	mi
 800c1fa:	b2b6      	uxthmi	r6, r6
 800c1fc:	07df      	lsls	r7, r3, #31
 800c1fe:	bf48      	it	mi
 800c200:	f043 0320 	orrmi.w	r3, r3, #32
 800c204:	6029      	str	r1, [r5, #0]
 800c206:	bf48      	it	mi
 800c208:	6023      	strmi	r3, [r4, #0]
 800c20a:	b91e      	cbnz	r6, 800c214 <_printf_i+0x1a4>
 800c20c:	6823      	ldr	r3, [r4, #0]
 800c20e:	f023 0320 	bic.w	r3, r3, #32
 800c212:	6023      	str	r3, [r4, #0]
 800c214:	2310      	movs	r3, #16
 800c216:	e7a7      	b.n	800c168 <_printf_i+0xf8>
 800c218:	4824      	ldr	r0, [pc, #144]	; (800c2ac <_printf_i+0x23c>)
 800c21a:	e7e4      	b.n	800c1e6 <_printf_i+0x176>
 800c21c:	4615      	mov	r5, r2
 800c21e:	e7bd      	b.n	800c19c <_printf_i+0x12c>
 800c220:	682b      	ldr	r3, [r5, #0]
 800c222:	6826      	ldr	r6, [r4, #0]
 800c224:	6961      	ldr	r1, [r4, #20]
 800c226:	1d18      	adds	r0, r3, #4
 800c228:	6028      	str	r0, [r5, #0]
 800c22a:	0635      	lsls	r5, r6, #24
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	d501      	bpl.n	800c234 <_printf_i+0x1c4>
 800c230:	6019      	str	r1, [r3, #0]
 800c232:	e002      	b.n	800c23a <_printf_i+0x1ca>
 800c234:	0670      	lsls	r0, r6, #25
 800c236:	d5fb      	bpl.n	800c230 <_printf_i+0x1c0>
 800c238:	8019      	strh	r1, [r3, #0]
 800c23a:	2300      	movs	r3, #0
 800c23c:	6123      	str	r3, [r4, #16]
 800c23e:	4615      	mov	r5, r2
 800c240:	e7bc      	b.n	800c1bc <_printf_i+0x14c>
 800c242:	682b      	ldr	r3, [r5, #0]
 800c244:	1d1a      	adds	r2, r3, #4
 800c246:	602a      	str	r2, [r5, #0]
 800c248:	681d      	ldr	r5, [r3, #0]
 800c24a:	6862      	ldr	r2, [r4, #4]
 800c24c:	2100      	movs	r1, #0
 800c24e:	4628      	mov	r0, r5
 800c250:	f7f3 ff96 	bl	8000180 <memchr>
 800c254:	b108      	cbz	r0, 800c25a <_printf_i+0x1ea>
 800c256:	1b40      	subs	r0, r0, r5
 800c258:	6060      	str	r0, [r4, #4]
 800c25a:	6863      	ldr	r3, [r4, #4]
 800c25c:	6123      	str	r3, [r4, #16]
 800c25e:	2300      	movs	r3, #0
 800c260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c264:	e7aa      	b.n	800c1bc <_printf_i+0x14c>
 800c266:	6923      	ldr	r3, [r4, #16]
 800c268:	462a      	mov	r2, r5
 800c26a:	4649      	mov	r1, r9
 800c26c:	4640      	mov	r0, r8
 800c26e:	47d0      	blx	sl
 800c270:	3001      	adds	r0, #1
 800c272:	d0ad      	beq.n	800c1d0 <_printf_i+0x160>
 800c274:	6823      	ldr	r3, [r4, #0]
 800c276:	079b      	lsls	r3, r3, #30
 800c278:	d413      	bmi.n	800c2a2 <_printf_i+0x232>
 800c27a:	68e0      	ldr	r0, [r4, #12]
 800c27c:	9b03      	ldr	r3, [sp, #12]
 800c27e:	4298      	cmp	r0, r3
 800c280:	bfb8      	it	lt
 800c282:	4618      	movlt	r0, r3
 800c284:	e7a6      	b.n	800c1d4 <_printf_i+0x164>
 800c286:	2301      	movs	r3, #1
 800c288:	4632      	mov	r2, r6
 800c28a:	4649      	mov	r1, r9
 800c28c:	4640      	mov	r0, r8
 800c28e:	47d0      	blx	sl
 800c290:	3001      	adds	r0, #1
 800c292:	d09d      	beq.n	800c1d0 <_printf_i+0x160>
 800c294:	3501      	adds	r5, #1
 800c296:	68e3      	ldr	r3, [r4, #12]
 800c298:	9903      	ldr	r1, [sp, #12]
 800c29a:	1a5b      	subs	r3, r3, r1
 800c29c:	42ab      	cmp	r3, r5
 800c29e:	dcf2      	bgt.n	800c286 <_printf_i+0x216>
 800c2a0:	e7eb      	b.n	800c27a <_printf_i+0x20a>
 800c2a2:	2500      	movs	r5, #0
 800c2a4:	f104 0619 	add.w	r6, r4, #25
 800c2a8:	e7f5      	b.n	800c296 <_printf_i+0x226>
 800c2aa:	bf00      	nop
 800c2ac:	0800d01d 	.word	0x0800d01d
 800c2b0:	0800d02e 	.word	0x0800d02e

0800c2b4 <__malloc_lock>:
 800c2b4:	4801      	ldr	r0, [pc, #4]	; (800c2bc <__malloc_lock+0x8>)
 800c2b6:	f7ff bc65 	b.w	800bb84 <__retarget_lock_acquire_recursive>
 800c2ba:	bf00      	nop
 800c2bc:	20000b58 	.word	0x20000b58

0800c2c0 <__malloc_unlock>:
 800c2c0:	4801      	ldr	r0, [pc, #4]	; (800c2c8 <__malloc_unlock+0x8>)
 800c2c2:	f7ff bc60 	b.w	800bb86 <__retarget_lock_release_recursive>
 800c2c6:	bf00      	nop
 800c2c8:	20000b58 	.word	0x20000b58

0800c2cc <_realloc_r>:
 800c2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2d0:	4680      	mov	r8, r0
 800c2d2:	4614      	mov	r4, r2
 800c2d4:	460e      	mov	r6, r1
 800c2d6:	b921      	cbnz	r1, 800c2e2 <_realloc_r+0x16>
 800c2d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2dc:	4611      	mov	r1, r2
 800c2de:	f7ff bdd9 	b.w	800be94 <_malloc_r>
 800c2e2:	b92a      	cbnz	r2, 800c2f0 <_realloc_r+0x24>
 800c2e4:	f000 f84c 	bl	800c380 <_free_r>
 800c2e8:	4625      	mov	r5, r4
 800c2ea:	4628      	mov	r0, r5
 800c2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2f0:	f000 f890 	bl	800c414 <_malloc_usable_size_r>
 800c2f4:	4284      	cmp	r4, r0
 800c2f6:	4607      	mov	r7, r0
 800c2f8:	d802      	bhi.n	800c300 <_realloc_r+0x34>
 800c2fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c2fe:	d812      	bhi.n	800c326 <_realloc_r+0x5a>
 800c300:	4621      	mov	r1, r4
 800c302:	4640      	mov	r0, r8
 800c304:	f7ff fdc6 	bl	800be94 <_malloc_r>
 800c308:	4605      	mov	r5, r0
 800c30a:	2800      	cmp	r0, #0
 800c30c:	d0ed      	beq.n	800c2ea <_realloc_r+0x1e>
 800c30e:	42bc      	cmp	r4, r7
 800c310:	4622      	mov	r2, r4
 800c312:	4631      	mov	r1, r6
 800c314:	bf28      	it	cs
 800c316:	463a      	movcs	r2, r7
 800c318:	f7ff fc36 	bl	800bb88 <memcpy>
 800c31c:	4631      	mov	r1, r6
 800c31e:	4640      	mov	r0, r8
 800c320:	f000 f82e 	bl	800c380 <_free_r>
 800c324:	e7e1      	b.n	800c2ea <_realloc_r+0x1e>
 800c326:	4635      	mov	r5, r6
 800c328:	e7df      	b.n	800c2ea <_realloc_r+0x1e>

0800c32a <memmove>:
 800c32a:	4288      	cmp	r0, r1
 800c32c:	b510      	push	{r4, lr}
 800c32e:	eb01 0402 	add.w	r4, r1, r2
 800c332:	d902      	bls.n	800c33a <memmove+0x10>
 800c334:	4284      	cmp	r4, r0
 800c336:	4623      	mov	r3, r4
 800c338:	d807      	bhi.n	800c34a <memmove+0x20>
 800c33a:	1e43      	subs	r3, r0, #1
 800c33c:	42a1      	cmp	r1, r4
 800c33e:	d008      	beq.n	800c352 <memmove+0x28>
 800c340:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c344:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c348:	e7f8      	b.n	800c33c <memmove+0x12>
 800c34a:	4402      	add	r2, r0
 800c34c:	4601      	mov	r1, r0
 800c34e:	428a      	cmp	r2, r1
 800c350:	d100      	bne.n	800c354 <memmove+0x2a>
 800c352:	bd10      	pop	{r4, pc}
 800c354:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c358:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c35c:	e7f7      	b.n	800c34e <memmove+0x24>
	...

0800c360 <_sbrk_r>:
 800c360:	b538      	push	{r3, r4, r5, lr}
 800c362:	4d06      	ldr	r5, [pc, #24]	; (800c37c <_sbrk_r+0x1c>)
 800c364:	2300      	movs	r3, #0
 800c366:	4604      	mov	r4, r0
 800c368:	4608      	mov	r0, r1
 800c36a:	602b      	str	r3, [r5, #0]
 800c36c:	f7f6 fbce 	bl	8002b0c <_sbrk>
 800c370:	1c43      	adds	r3, r0, #1
 800c372:	d102      	bne.n	800c37a <_sbrk_r+0x1a>
 800c374:	682b      	ldr	r3, [r5, #0]
 800c376:	b103      	cbz	r3, 800c37a <_sbrk_r+0x1a>
 800c378:	6023      	str	r3, [r4, #0]
 800c37a:	bd38      	pop	{r3, r4, r5, pc}
 800c37c:	20000b64 	.word	0x20000b64

0800c380 <_free_r>:
 800c380:	b538      	push	{r3, r4, r5, lr}
 800c382:	4605      	mov	r5, r0
 800c384:	2900      	cmp	r1, #0
 800c386:	d041      	beq.n	800c40c <_free_r+0x8c>
 800c388:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c38c:	1f0c      	subs	r4, r1, #4
 800c38e:	2b00      	cmp	r3, #0
 800c390:	bfb8      	it	lt
 800c392:	18e4      	addlt	r4, r4, r3
 800c394:	f7ff ff8e 	bl	800c2b4 <__malloc_lock>
 800c398:	4a1d      	ldr	r2, [pc, #116]	; (800c410 <_free_r+0x90>)
 800c39a:	6813      	ldr	r3, [r2, #0]
 800c39c:	b933      	cbnz	r3, 800c3ac <_free_r+0x2c>
 800c39e:	6063      	str	r3, [r4, #4]
 800c3a0:	6014      	str	r4, [r2, #0]
 800c3a2:	4628      	mov	r0, r5
 800c3a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3a8:	f7ff bf8a 	b.w	800c2c0 <__malloc_unlock>
 800c3ac:	42a3      	cmp	r3, r4
 800c3ae:	d908      	bls.n	800c3c2 <_free_r+0x42>
 800c3b0:	6820      	ldr	r0, [r4, #0]
 800c3b2:	1821      	adds	r1, r4, r0
 800c3b4:	428b      	cmp	r3, r1
 800c3b6:	bf01      	itttt	eq
 800c3b8:	6819      	ldreq	r1, [r3, #0]
 800c3ba:	685b      	ldreq	r3, [r3, #4]
 800c3bc:	1809      	addeq	r1, r1, r0
 800c3be:	6021      	streq	r1, [r4, #0]
 800c3c0:	e7ed      	b.n	800c39e <_free_r+0x1e>
 800c3c2:	461a      	mov	r2, r3
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	b10b      	cbz	r3, 800c3cc <_free_r+0x4c>
 800c3c8:	42a3      	cmp	r3, r4
 800c3ca:	d9fa      	bls.n	800c3c2 <_free_r+0x42>
 800c3cc:	6811      	ldr	r1, [r2, #0]
 800c3ce:	1850      	adds	r0, r2, r1
 800c3d0:	42a0      	cmp	r0, r4
 800c3d2:	d10b      	bne.n	800c3ec <_free_r+0x6c>
 800c3d4:	6820      	ldr	r0, [r4, #0]
 800c3d6:	4401      	add	r1, r0
 800c3d8:	1850      	adds	r0, r2, r1
 800c3da:	4283      	cmp	r3, r0
 800c3dc:	6011      	str	r1, [r2, #0]
 800c3de:	d1e0      	bne.n	800c3a2 <_free_r+0x22>
 800c3e0:	6818      	ldr	r0, [r3, #0]
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	6053      	str	r3, [r2, #4]
 800c3e6:	4408      	add	r0, r1
 800c3e8:	6010      	str	r0, [r2, #0]
 800c3ea:	e7da      	b.n	800c3a2 <_free_r+0x22>
 800c3ec:	d902      	bls.n	800c3f4 <_free_r+0x74>
 800c3ee:	230c      	movs	r3, #12
 800c3f0:	602b      	str	r3, [r5, #0]
 800c3f2:	e7d6      	b.n	800c3a2 <_free_r+0x22>
 800c3f4:	6820      	ldr	r0, [r4, #0]
 800c3f6:	1821      	adds	r1, r4, r0
 800c3f8:	428b      	cmp	r3, r1
 800c3fa:	bf04      	itt	eq
 800c3fc:	6819      	ldreq	r1, [r3, #0]
 800c3fe:	685b      	ldreq	r3, [r3, #4]
 800c400:	6063      	str	r3, [r4, #4]
 800c402:	bf04      	itt	eq
 800c404:	1809      	addeq	r1, r1, r0
 800c406:	6021      	streq	r1, [r4, #0]
 800c408:	6054      	str	r4, [r2, #4]
 800c40a:	e7ca      	b.n	800c3a2 <_free_r+0x22>
 800c40c:	bd38      	pop	{r3, r4, r5, pc}
 800c40e:	bf00      	nop
 800c410:	20000b5c 	.word	0x20000b5c

0800c414 <_malloc_usable_size_r>:
 800c414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c418:	1f18      	subs	r0, r3, #4
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	bfbc      	itt	lt
 800c41e:	580b      	ldrlt	r3, [r1, r0]
 800c420:	18c0      	addlt	r0, r0, r3
 800c422:	4770      	bx	lr

0800c424 <_init>:
 800c424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c426:	bf00      	nop
 800c428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c42a:	bc08      	pop	{r3}
 800c42c:	469e      	mov	lr, r3
 800c42e:	4770      	bx	lr

0800c430 <_fini>:
 800c430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c432:	bf00      	nop
 800c434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c436:	bc08      	pop	{r3}
 800c438:	469e      	mov	lr, r3
 800c43a:	4770      	bx	lr
