
COM_S2S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2d0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a7c  0800c410  0800c410  0001c410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce8c  0800ce8c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce8c  0800ce8c  0001ce8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce94  0800ce94  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce94  0800ce94  0001ce94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce98  0800ce98  0001ce98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800ce9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b08  20000068  0800cf04  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b70  0800cf04  00020b70  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 13 .debug_info   000220ad  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004eac  00000000  00000000  00042182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f20  00000000  00000000  00047030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017c5  00000000  00000000  00048f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002251e  00000000  00000000  0004a715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000232f7  00000000  00000000  0006cc33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4689  00000000  00000000  0008ff2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008528  00000000  00000000  001545b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0015cadc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000068 	.word	0x20000068
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c3f8 	.word	0x0800c3f8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000006c 	.word	0x2000006c
 800017c:	0800c3f8 	.word	0x0800c3f8

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002a4:	f080 811b 	bcs.w	80004de <__udivmoddi4+0x28e>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8118 	bls.w	80004de <__udivmoddi4+0x28e>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002d2:	f080 8106 	bcs.w	80004e2 <__udivmoddi4+0x292>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8103 	bls.w	80004e2 <__udivmoddi4+0x292>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ec 	beq.w	80004d8 <__udivmoddi4+0x288>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f7 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 808f 	bne.w	800045e <__udivmoddi4+0x20e>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80ca 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80ba 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	4323      	orrs	r3, r4
 80003c2:	fa00 f901 	lsl.w	r9, r0, r1
 80003c6:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fbb5 f8f0 	udiv	r8, r5, r0
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	fb00 5518 	mls	r5, r0, r8, r5
 80003d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003dc:	fb08 f50e 	mul.w	r5, r8, lr
 80003e0:	42a5      	cmp	r5, r4
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f0 	udiv	r3, r4, r0
 8000408:	fb00 4413 	mls	r4, r0, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800042e:	fba0 8302 	umull	r8, r3, r0, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	429c      	cmp	r4, r3
 8000438:	46c6      	mov	lr, r8
 800043a:	461d      	mov	r5, r3
 800043c:	d355      	bcc.n	80004ea <__udivmoddi4+0x29a>
 800043e:	d052      	beq.n	80004e6 <__udivmoddi4+0x296>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb9 030e 	subs.w	r3, r9, lr
 8000446:	eb64 0405 	sbc.w	r4, r4, r5
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40cb      	lsrs	r3, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	431f      	orrs	r7, r3
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	2100      	movs	r1, #0
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c3 0120 	rsb	r1, r3, #32
 8000462:	fa02 fc03 	lsl.w	ip, r2, r3
 8000466:	fa20 f201 	lsr.w	r2, r0, r1
 800046a:	fa25 f101 	lsr.w	r1, r5, r1
 800046e:	409d      	lsls	r5, r3
 8000470:	432a      	orrs	r2, r5
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	fbb1 f0f7 	udiv	r0, r1, r7
 800047e:	fb07 1510 	mls	r5, r7, r0, r1
 8000482:	0c11      	lsrs	r1, r2, #16
 8000484:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000488:	fb00 f50e 	mul.w	r5, r0, lr
 800048c:	428d      	cmp	r5, r1
 800048e:	fa04 f403 	lsl.w	r4, r4, r3
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428d      	cmp	r5, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3802      	subs	r0, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1b49      	subs	r1, r1, r5
 80004a8:	b292      	uxth	r2, r2
 80004aa:	fbb1 f5f7 	udiv	r5, r1, r7
 80004ae:	fb07 1115 	mls	r1, r7, r5, r1
 80004b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b6:	fb05 f10e 	mul.w	r1, r5, lr
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x280>
 80004be:	eb1c 0202 	adds.w	r2, ip, r2
 80004c2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c6:	d216      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c8:	4291      	cmp	r1, r2
 80004ca:	d914      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004cc:	3d02      	subs	r5, #2
 80004ce:	4462      	add	r2, ip
 80004d0:	1a52      	subs	r2, r2, r1
 80004d2:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d6:	e739      	b.n	800034c <__udivmoddi4+0xfc>
 80004d8:	4631      	mov	r1, r6
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004de:	4639      	mov	r1, r7
 80004e0:	e6e7      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e2:	4610      	mov	r0, r2
 80004e4:	e6fc      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e6:	45c1      	cmp	r9, r8
 80004e8:	d2aa      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb63 050c 	sbc.w	r5, r3, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4645      	mov	r5, r8
 80004f8:	e7ea      	b.n	80004d0 <__udivmoddi4+0x280>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4640      	mov	r0, r8
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	46d0      	mov	r8, sl
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3d02      	subs	r5, #2
 8000508:	4462      	add	r2, ip
 800050a:	e733      	b.n	8000374 <__udivmoddi4+0x124>
 800050c:	4608      	mov	r0, r1
 800050e:	e70b      	b.n	8000328 <__udivmoddi4+0xd8>
 8000510:	4464      	add	r4, ip
 8000512:	3802      	subs	r0, #2
 8000514:	e743      	b.n	800039e <__udivmoddi4+0x14e>
 8000516:	bf00      	nop

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <updatePacket>:
uint8_t ax_buffer[150] = { 0 };
uint8_t ax_buff_stuffed[150] = { 0 };

uint8_t info_packet[INFO_LENGTH];

void updatePacket(uint8_t *OBC_Rx_buffer) {
 800051c:	b480      	push	{r7}
 800051e:	b087      	sub	sp, #28
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	info_packet[0] = OBC_Rx_buffer[1];  	// Packet Type
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	785a      	ldrb	r2, [r3, #1]
 8000528:	4b14      	ldr	r3, [pc, #80]	; (800057c <updatePacket+0x60>)
 800052a:	701a      	strb	r2, [r3, #0]
	int j = 1;
 800052c:	2301      	movs	r3, #1
 800052e:	617b      	str	r3, [r7, #20]
	int k = 3;
 8000530:	2303      	movs	r3, #3
 8000532:	613b      	str	r3, [r7, #16]
	int len_of_payload = OBC_Rx_buffer[2];  // length of info_field
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3302      	adds	r3, #2
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	60bb      	str	r3, [r7, #8]
//	myDebug("\nlen_of_payload: %d\r\n", len_of_payload);
	for (int i = 0; i < len_of_payload; i++) {
 800053c:	2300      	movs	r3, #0
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	e011      	b.n	8000566 <updatePacket+0x4a>
		info_packet[j] = OBC_Rx_buffer[k];
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	4413      	add	r3, r2
 8000548:	7819      	ldrb	r1, [r3, #0]
 800054a:	4a0c      	ldr	r2, [pc, #48]	; (800057c <updatePacket+0x60>)
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	4413      	add	r3, r2
 8000550:	460a      	mov	r2, r1
 8000552:	701a      	strb	r2, [r3, #0]
		j++;
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	3301      	adds	r3, #1
 8000558:	617b      	str	r3, [r7, #20]
		k++;
 800055a:	693b      	ldr	r3, [r7, #16]
 800055c:	3301      	adds	r3, #1
 800055e:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < len_of_payload; i++) {
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	3301      	adds	r3, #1
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	68fa      	ldr	r2, [r7, #12]
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	429a      	cmp	r2, r3
 800056c:	dbe9      	blt.n	8000542 <updatePacket+0x26>
//	myDebug("info_packet: 0x%x\r\n", info_packet);
//	for (int i = 0; i < len_of_payload; i++) {
//		myDebug("%02x ", info_packet[i]);
//	}
//	myDebug("\r\n");
}
 800056e:	bf00      	nop
 8000570:	bf00      	nop
 8000572:	371c      	adds	r7, #28
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	200001b4 	.word	0x200001b4

08000580 <getHDLCPacket>:

void getHDLCPacket(uint8_t *data, uint8_t data_len) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	460b      	mov	r3, r1
 800058a:	70fb      	strb	r3, [r7, #3]
//	for (int j = 0; j < data_len; j++) {
//		myDebug("%02x ", data[j]);
//	}
//	myDebug("\r\n");

	uint16_t crc = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	81fb      	strh	r3, [r7, #14]
	crc = calculateCRC_CCITT_AX25(data, data_len);
 8000590:	78fb      	ldrb	r3, [r7, #3]
 8000592:	4619      	mov	r1, r3
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f000 f96d 	bl	8000874 <calculateCRC_CCITT_AX25>
 800059a:	4603      	mov	r3, r0
 800059c:	81fb      	strh	r3, [r7, #14]

	temp_tx_buffer[0] = 0x7e;
 800059e:	4b22      	ldr	r3, [pc, #136]	; (8000628 <getHDLCPacket+0xa8>)
 80005a0:	227e      	movs	r2, #126	; 0x7e
 80005a2:	701a      	strb	r2, [r3, #0]

	int i = 1;
 80005a4:	2301      	movs	r3, #1
 80005a6:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < data_len; k++) {
 80005a8:	2300      	movs	r3, #0
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	e00e      	b.n	80005cc <getHDLCPacket+0x4c>
		temp_tx_buffer[i] = data[k];
 80005ae:	693b      	ldr	r3, [r7, #16]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	4413      	add	r3, r2
 80005b4:	7819      	ldrb	r1, [r3, #0]
 80005b6:	4a1c      	ldr	r2, [pc, #112]	; (8000628 <getHDLCPacket+0xa8>)
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	4413      	add	r3, r2
 80005bc:	460a      	mov	r2, r1
 80005be:	701a      	strb	r2, [r3, #0]
		i++;
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	3301      	adds	r3, #1
 80005c4:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < data_len; k++) {
 80005c6:	693b      	ldr	r3, [r7, #16]
 80005c8:	3301      	adds	r3, #1
 80005ca:	613b      	str	r3, [r7, #16]
 80005cc:	78fb      	ldrb	r3, [r7, #3]
 80005ce:	693a      	ldr	r2, [r7, #16]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	dbec      	blt.n	80005ae <getHDLCPacket+0x2e>
	}

	// Store CRC result in the packet array
	temp_tx_buffer[i] = (crc >> 8) & 0xFF; // Most significant byte
 80005d4:	89fb      	ldrh	r3, [r7, #14]
 80005d6:	0a1b      	lsrs	r3, r3, #8
 80005d8:	b29b      	uxth	r3, r3
 80005da:	b2d9      	uxtb	r1, r3
 80005dc:	4a12      	ldr	r2, [pc, #72]	; (8000628 <getHDLCPacket+0xa8>)
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	4413      	add	r3, r2
 80005e2:	460a      	mov	r2, r1
 80005e4:	701a      	strb	r2, [r3, #0]
	i++;
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	3301      	adds	r3, #1
 80005ea:	617b      	str	r3, [r7, #20]
	temp_tx_buffer[i] = crc & 0xFF;        // Least significant byte
 80005ec:	89fb      	ldrh	r3, [r7, #14]
 80005ee:	b2d9      	uxtb	r1, r3
 80005f0:	4a0d      	ldr	r2, [pc, #52]	; (8000628 <getHDLCPacket+0xa8>)
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	4413      	add	r3, r2
 80005f6:	460a      	mov	r2, r1
 80005f8:	701a      	strb	r2, [r3, #0]
	i++;
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	3301      	adds	r3, #1
 80005fe:	617b      	str	r3, [r7, #20]

	temp_tx_buffer[i] = 0x7e;
 8000600:	4a09      	ldr	r2, [pc, #36]	; (8000628 <getHDLCPacket+0xa8>)
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	4413      	add	r3, r2
 8000606:	227e      	movs	r2, #126	; 0x7e
 8000608:	701a      	strb	r2, [r3, #0]
//	for (int j = 0; j < destuffed_size - 1; j++) {
//		myDebug("%02x ", tem[j]);
//	}
//	myDebug("\r\n");

	memset(ax_buffer, '\0', sizeof(ax_buffer));
 800060a:	2296      	movs	r2, #150	; 0x96
 800060c:	2100      	movs	r1, #0
 800060e:	4807      	ldr	r0, [pc, #28]	; (800062c <getHDLCPacket+0xac>)
 8000610:	f00b fa70 	bl	800baf4 <memset>
	memset(ax_buff_stuffed, '\0', sizeof(ax_buff_stuffed));
 8000614:	2296      	movs	r2, #150	; 0x96
 8000616:	2100      	movs	r1, #0
 8000618:	4805      	ldr	r0, [pc, #20]	; (8000630 <getHDLCPacket+0xb0>)
 800061a:	f00b fa6b 	bl	800baf4 <memset>

}
 800061e:	bf00      	nop
 8000620:	3718      	adds	r7, #24
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000370 	.word	0x20000370
 800062c:	20000084 	.word	0x20000084
 8000630:	2000011c 	.word	0x2000011c

08000634 <getAX25Packet>:

void getAX25Packet(uint8_t *OBC_data_Field, uint8_t size) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	70fb      	strb	r3, [r7, #3]

	updatePacket(OBC_data_Field);
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f7ff ff6b 	bl	800051c <updatePacket>

	//destination field   9N2SI -0
	ax_buffer[0] = 0x72; //	ASCII->9, HEX->0x39, 1 bit shifted->0b01110010, Shifted HEX->0x72
 8000646:	4b3a      	ldr	r3, [pc, #232]	; (8000730 <getAX25Packet+0xfc>)
 8000648:	2272      	movs	r2, #114	; 0x72
 800064a:	701a      	strb	r2, [r3, #0]
	ax_buffer[1] = 0x9C; //	ASCII->N, HEX->0x4E, 1 bit shifted->0b10011100, Shifted HEX->0x9C
 800064c:	4b38      	ldr	r3, [pc, #224]	; (8000730 <getAX25Packet+0xfc>)
 800064e:	229c      	movs	r2, #156	; 0x9c
 8000650:	705a      	strb	r2, [r3, #1]
	ax_buffer[2] = 0x64; //	ASCII->2, HEX->0x32, 1 bit shifted->0b01100100, Shifted HEX->0x64
 8000652:	4b37      	ldr	r3, [pc, #220]	; (8000730 <getAX25Packet+0xfc>)
 8000654:	2264      	movs	r2, #100	; 0x64
 8000656:	709a      	strb	r2, [r3, #2]
	ax_buffer[3] = 0xA6; //	ASCII->S, HEX->0x53, 1 bit shifted->0b10100110, Shifted HEX->0xA6
 8000658:	4b35      	ldr	r3, [pc, #212]	; (8000730 <getAX25Packet+0xfc>)
 800065a:	22a6      	movs	r2, #166	; 0xa6
 800065c:	70da      	strb	r2, [r3, #3]
	ax_buffer[4] = 0x64; //	ASCII->I, HEX->0x49, 1 bit shifted->0b10010010, Shifted HEX->0x92
 800065e:	4b34      	ldr	r3, [pc, #208]	; (8000730 <getAX25Packet+0xfc>)
 8000660:	2264      	movs	r2, #100	; 0x64
 8000662:	711a      	strb	r2, [r3, #4]
	ax_buffer[5] = 0x40; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 8000664:	4b32      	ldr	r3, [pc, #200]	; (8000730 <getAX25Packet+0xfc>)
 8000666:	2240      	movs	r2, #64	; 0x40
 8000668:	715a      	strb	r2, [r3, #5]
	ax_buffer[6] = 0xE0; //	0b111SSID0, SSID->0000 and LSB is set to 0; if more addresses follow, HEX->0xE0
 800066a:	4b31      	ldr	r3, [pc, #196]	; (8000730 <getAX25Packet+0xfc>)
 800066c:	22e0      	movs	r2, #224	; 0xe0
 800066e:	719a      	strb	r2, [r3, #6]

	//source field   9N2SI -0
	ax_buffer[7] = 0x72; //	ASCII->9, HEX->0x39, 1 bit shifted->0b01110010, Shifted HEX->0x72
 8000670:	4b2f      	ldr	r3, [pc, #188]	; (8000730 <getAX25Packet+0xfc>)
 8000672:	2272      	movs	r2, #114	; 0x72
 8000674:	71da      	strb	r2, [r3, #7]
	ax_buffer[8] = 0x9C; //	ASCII->N, HEX->0x4E, 1 bit shifted->0b10011100, Shifted HEX->0x9C
 8000676:	4b2e      	ldr	r3, [pc, #184]	; (8000730 <getAX25Packet+0xfc>)
 8000678:	229c      	movs	r2, #156	; 0x9c
 800067a:	721a      	strb	r2, [r3, #8]
	ax_buffer[9] = 0x64; //	ASCII->2, HEX->0x32, 1 bit shifted->0b01100100, Shifted HEX->0x64
 800067c:	4b2c      	ldr	r3, [pc, #176]	; (8000730 <getAX25Packet+0xfc>)
 800067e:	2264      	movs	r2, #100	; 0x64
 8000680:	725a      	strb	r2, [r3, #9]
	ax_buffer[10] = 0xA6; //	ASCII->S, HEX->0x53, 1 bit shifted->0b10100110, Shifted HEX->0xA6
 8000682:	4b2b      	ldr	r3, [pc, #172]	; (8000730 <getAX25Packet+0xfc>)
 8000684:	22a6      	movs	r2, #166	; 0xa6
 8000686:	729a      	strb	r2, [r3, #10]
	ax_buffer[11] = 0x64; //	ASCII->I, HEX->0x49, 1 bit shifted->0b10010010, Shifted HEX->0x92
 8000688:	4b29      	ldr	r3, [pc, #164]	; (8000730 <getAX25Packet+0xfc>)
 800068a:	2264      	movs	r2, #100	; 0x64
 800068c:	72da      	strb	r2, [r3, #11]
	ax_buffer[12] = 0x40; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 800068e:	4b28      	ldr	r3, [pc, #160]	; (8000730 <getAX25Packet+0xfc>)
 8000690:	2240      	movs	r2, #64	; 0x40
 8000692:	731a      	strb	r2, [r3, #12]
	ax_buffer[13] = 0x61; //	0b011SSID1, SSID->0000 and LSB is set to 1 if this is the last address, HEX->0x61
 8000694:	4b26      	ldr	r3, [pc, #152]	; (8000730 <getAX25Packet+0xfc>)
 8000696:	2261      	movs	r2, #97	; 0x61
 8000698:	735a      	strb	r2, [r3, #13]

	//control bit
	ax_buffer[14] = 0x03; //  Unnumbered Information Frame, AX.25 is always 0b00000011 i.e 0x03 in HEX
 800069a:	4b25      	ldr	r3, [pc, #148]	; (8000730 <getAX25Packet+0xfc>)
 800069c:	2203      	movs	r2, #3
 800069e:	739a      	strb	r2, [r3, #14]

	//protocol identifier
	ax_buffer[15] = 0xF0; //	No Layer-3 Implemented so, 0b11110000 i.e 0xF0 in HEX
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <getAX25Packet+0xfc>)
 80006a2:	22f0      	movs	r2, #240	; 0xf0
 80006a4:	73da      	strb	r2, [r3, #15]

	int i = 16;
 80006a6:	2310      	movs	r3, #16
 80006a8:	617b      	str	r3, [r7, #20]

	for (int k = 0; k < size; k++) {
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
 80006ae:	e00e      	b.n	80006ce <getAX25Packet+0x9a>
		ax_buffer[i] = info_packet[k];
 80006b0:	4a20      	ldr	r2, [pc, #128]	; (8000734 <getAX25Packet+0x100>)
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	4413      	add	r3, r2
 80006b6:	7819      	ldrb	r1, [r3, #0]
 80006b8:	4a1d      	ldr	r2, [pc, #116]	; (8000730 <getAX25Packet+0xfc>)
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	4413      	add	r3, r2
 80006be:	460a      	mov	r2, r1
 80006c0:	701a      	strb	r2, [r3, #0]
		i++;
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	3301      	adds	r3, #1
 80006c6:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < size; k++) {
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	3301      	adds	r3, #1
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	693a      	ldr	r2, [r7, #16]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	dbec      	blt.n	80006b0 <getAX25Packet+0x7c>
	}

//	myDebug("Before Bit stuffing:");
	myDebug("\nReal Data, Length: %d", i);
 80006d6:	6979      	ldr	r1, [r7, #20]
 80006d8:	4817      	ldr	r0, [pc, #92]	; (8000738 <getAX25Packet+0x104>)
 80006da:	f000 f84f 	bl	800077c <myDebug>
	myDebug("\r\n");
 80006de:	4817      	ldr	r0, [pc, #92]	; (800073c <getAX25Packet+0x108>)
 80006e0:	f000 f84c 	bl	800077c <myDebug>
	for (int j = 0; j < i; j++) {
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	e00a      	b.n	8000700 <getAX25Packet+0xcc>
		myDebug("%02x ", ax_buffer[j]);
 80006ea:	4a11      	ldr	r2, [pc, #68]	; (8000730 <getAX25Packet+0xfc>)
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	4413      	add	r3, r2
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	4619      	mov	r1, r3
 80006f4:	4812      	ldr	r0, [pc, #72]	; (8000740 <getAX25Packet+0x10c>)
 80006f6:	f000 f841 	bl	800077c <myDebug>
	for (int j = 0; j < i; j++) {
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	3301      	adds	r3, #1
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fa      	ldr	r2, [r7, #12]
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	429a      	cmp	r2, r3
 8000706:	dbf0      	blt.n	80006ea <getAX25Packet+0xb6>
	}
	myDebug("\r\n");
 8000708:	480c      	ldr	r0, [pc, #48]	; (800073c <getAX25Packet+0x108>)
 800070a:	f000 f837 	bl	800077c <myDebug>

	// Bit Stuffing
	int stuffed_size = bit_stuffing(ax_buffer, ax_buff_stuffed, i);
 800070e:	697a      	ldr	r2, [r7, #20]
 8000710:	490c      	ldr	r1, [pc, #48]	; (8000744 <getAX25Packet+0x110>)
 8000712:	4807      	ldr	r0, [pc, #28]	; (8000730 <getAX25Packet+0xfc>)
 8000714:	f000 f8ed 	bl	80008f2 <bit_stuffing>
 8000718:	60b8      	str	r0, [r7, #8]

	getHDLCPacket(ax_buff_stuffed, stuffed_size);
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	4619      	mov	r1, r3
 8000720:	4808      	ldr	r0, [pc, #32]	; (8000744 <getAX25Packet+0x110>)
 8000722:	f7ff ff2d 	bl	8000580 <getHDLCPacket>
}
 8000726:	bf00      	nop
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000084 	.word	0x20000084
 8000734:	200001b4 	.word	0x200001b4
 8000738:	0800c410 	.word	0x0800c410
 800073c:	0800c428 	.word	0x0800c428
 8000740:	0800c42c 	.word	0x0800c42c
 8000744:	2000011c 	.word	0x2000011c

08000748 <delay_us>:
 */


#include "com_debug.h"

void delay_us(uint32_t us) {
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	uint32_t delay_counter_disp;
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <delay_us+0x30>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2200      	movs	r2, #0
 8000756:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000758:	e002      	b.n	8000760 <delay_us+0x18>
		delay_counter_disp++;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	3301      	adds	r3, #1
 800075e:	60fb      	str	r3, [r7, #12]
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <delay_us+0x30>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	429a      	cmp	r2, r3
 800076a:	d8f6      	bhi.n	800075a <delay_us+0x12>
	// wait for the counter to reach the us input in the parameter
}
 800076c:	bf00      	nop
 800076e:	bf00      	nop
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	200004d8 	.word	0x200004d8

0800077c <myDebug>:

void myDebug(const char *fmt, ...) {
 800077c:	b40f      	push	{r0, r1, r2, r3}
 800077e:	b580      	push	{r7, lr}
 8000780:	b082      	sub	sp, #8
 8000782:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	693a      	ldr	r2, [r7, #16]
 800078e:	2164      	movs	r1, #100	; 0x64
 8000790:	480a      	ldr	r0, [pc, #40]	; (80007bc <myDebug+0x40>)
 8000792:	f00b f9a1 	bl	800bad8 <vsniprintf>
	va_end(args);
	int len = bufferSize(temp);
 8000796:	4809      	ldr	r0, [pc, #36]	; (80007bc <myDebug+0x40>)
 8000798:	f000 f814 	bl	80007c4 <bufferSize>
 800079c:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) temp, len, 1000);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a6:	4905      	ldr	r1, [pc, #20]	; (80007bc <myDebug+0x40>)
 80007a8:	4805      	ldr	r0, [pc, #20]	; (80007c0 <myDebug+0x44>)
 80007aa:	f005 ff54 	bl	8006656 <HAL_UART_Transmit>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007b8:	b004      	add	sp, #16
 80007ba:	4770      	bx	lr
 80007bc:	20000218 	.word	0x20000218
 80007c0:	200005bc 	.word	0x200005bc

080007c4 <bufferSize>:
	va_end(args);
	int len = bufferSize(temp);
	HAL_UART_Transmit(&huart2, (uint8_t*) temp, len, 1000);
}

int bufferSize(char *buffer) {
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	int i = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 80007d0:	e002      	b.n	80007d8 <bufferSize+0x14>
		i++;
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	3301      	adds	r3, #1
 80007d6:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	1c5a      	adds	r2, r3, #1
 80007dc:	607a      	str	r2, [r7, #4]
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d1f6      	bne.n	80007d2 <bufferSize+0xe>
	return i;
 80007e4:	68fb      	ldr	r3, [r7, #12]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80007f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80007fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4313      	orrs	r3, r2
 8000806:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800080c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4013      	ands	r3, r2
 8000812:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000814:	68fb      	ldr	r3, [r7, #12]
}
 8000816:	bf00      	nop
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000824:	2004      	movs	r0, #4
 8000826:	f7ff ffe3 	bl	80007f0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800082a:	2001      	movs	r0, #1
 800082c:	f7ff ffe0 	bl	80007f0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000830:	2200      	movs	r2, #0
 8000832:	2100      	movs	r1, #0
 8000834:	200b      	movs	r0, #11
 8000836:	f002 fec8 	bl	80035ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800083a:	200b      	movs	r0, #11
 800083c:	f002 fedf 	bl	80035fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000840:	2200      	movs	r2, #0
 8000842:	2100      	movs	r1, #0
 8000844:	200c      	movs	r0, #12
 8000846:	f002 fec0 	bl	80035ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800084a:	200c      	movs	r0, #12
 800084c:	f002 fed7 	bl	80035fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000850:	2200      	movs	r2, #0
 8000852:	2100      	movs	r1, #0
 8000854:	200d      	movs	r0, #13
 8000856:	f002 feb8 	bl	80035ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800085a:	200d      	movs	r0, #13
 800085c:	f002 fecf 	bl	80035fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	2100      	movs	r1, #0
 8000864:	200e      	movs	r0, #14
 8000866:	f002 feb0 	bl	80035ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800086a:	200e      	movs	r0, #14
 800086c:	f002 fec7 	bl	80035fe <HAL_NVIC_EnableIRQ>

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}

08000874 <calculateCRC_CCITT_AX25>:
 */

#include "error_handler.h"

// Function to calculate CRC-CCITT for AX.25 frames
uint16_t calculateCRC_CCITT_AX25(const uint8_t *data, size_t length) {
 8000874:	b480      	push	{r7}
 8000876:	b087      	sub	sp, #28
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0xFFFF; // Initialize CRC register with 0xFFFF
 800087e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000882:	82fb      	strh	r3, [r7, #22]
	uint16_t CRC_POLY = 0x1021; // CRC polynomial for CCITT (0x1021)
 8000884:	f241 0321 	movw	r3, #4129	; 0x1021
 8000888:	817b      	strh	r3, [r7, #10]

	// Iterate through each byte of the input data
	for (size_t i = 0; i < length; i++) {
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	e026      	b.n	80008de <calculateCRC_CCITT_AX25+0x6a>
		crc ^= ((uint16_t) data[i] << 8); // XOR CRC with next byte of input data
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	4413      	add	r3, r2
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	021b      	lsls	r3, r3, #8
 800089a:	b21a      	sxth	r2, r3
 800089c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008a0:	4053      	eors	r3, r2
 80008a2:	b21b      	sxth	r3, r3
 80008a4:	82fb      	strh	r3, [r7, #22]

		// Iterate through each bit of the current byte
		for (int j = 0; j < 8; j++) {
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	e012      	b.n	80008d2 <calculateCRC_CCITT_AX25+0x5e>
			if (crc & 0x8000) { // If MSB of CRC is 1
 80008ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	da08      	bge.n	80008c6 <calculateCRC_CCITT_AX25+0x52>
				crc = (crc << 1) ^ CRC_POLY; // Left shift CRC and XOR with polynomial
 80008b4:	8afb      	ldrh	r3, [r7, #22]
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	b21a      	sxth	r2, r3
 80008ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80008be:	4053      	eors	r3, r2
 80008c0:	b21b      	sxth	r3, r3
 80008c2:	82fb      	strh	r3, [r7, #22]
 80008c4:	e002      	b.n	80008cc <calculateCRC_CCITT_AX25+0x58>
			} else {
				crc <<= 1; // Left shift CRC
 80008c6:	8afb      	ldrh	r3, [r7, #22]
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++) {
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	3301      	adds	r3, #1
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	2b07      	cmp	r3, #7
 80008d6:	dde9      	ble.n	80008ac <calculateCRC_CCITT_AX25+0x38>
	for (size_t i = 0; i < length; i++) {
 80008d8:	693b      	ldr	r3, [r7, #16]
 80008da:	3301      	adds	r3, #1
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d3d4      	bcc.n	8000890 <calculateCRC_CCITT_AX25+0x1c>
			}
		}
	}

	return crc; // Return calculated CRC
 80008e6:	8afb      	ldrh	r3, [r7, #22]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	371c      	adds	r7, #28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr

080008f2 <bit_stuffing>:
	}
	crcReg = crcReg ^ 0xFFFF;						// Final XOR with 0xFFFF
	return crcReg;
}

int bit_stuffing(uint8_t *data, uint8_t *output_data, int length) {
 80008f2:	b480      	push	{r7}
 80008f4:	b08f      	sub	sp, #60	; 0x3c
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	60f8      	str	r0, [r7, #12]
 80008fa:	60b9      	str	r1, [r7, #8]
 80008fc:	607a      	str	r2, [r7, #4]
	int out_index = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	637b      	str	r3, [r7, #52]	; 0x34
	int bit_count = 0; // Count of consecutive 1 bits
 8000902:	2300      	movs	r3, #0
 8000904:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t current_byte = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	int bit_pos = 7;
 800090c:	2307      	movs	r3, #7
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
	int stuffed_size = 0; // Track size of output data after bit stuffing
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
	int bits_stuffed = 0; // Number of bits stuffed since last size increase
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]

	//myDebug("Error handler: before Bit stuffing \n");

	for (int i = 0; i < length; i++) {
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
 800091c:	e078      	b.n	8000a10 <bit_stuffing+0x11e>
		for (int bit = 7; bit >= 0; bit--) {
 800091e:	2307      	movs	r3, #7
 8000920:	61bb      	str	r3, [r7, #24]
 8000922:	e06f      	b.n	8000a04 <bit_stuffing+0x112>
			int bit_val = (data[i] >> bit) & 1;
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	4413      	add	r3, r2
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	461a      	mov	r2, r3
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	fa42 f303 	asr.w	r3, r2, r3
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	617b      	str	r3, [r7, #20]

			//	myDebug("%d ", bit_val);

			current_byte |= (bit_val << bit_pos);
 800093a:	697a      	ldr	r2, [r7, #20]
 800093c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	b25a      	sxtb	r2, r3
 8000944:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000948:	4313      	orrs	r3, r2
 800094a:	b25b      	sxtb	r3, r3
 800094c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			bit_pos--;
 8000950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000952:	3b01      	subs	r3, #1
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28

			if (bit_val) {
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d02f      	beq.n	80009bc <bit_stuffing+0xca>
				bit_count++;
 800095c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800095e:	3301      	adds	r3, #1
 8000960:	633b      	str	r3, [r7, #48]	; 0x30
				if (bit_count == 5) {
 8000962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000964:	2b05      	cmp	r3, #5
 8000966:	d12b      	bne.n	80009c0 <bit_stuffing+0xce>
					// Insert a 0 bit after five consecutive 1s
					if (bit_pos < 0) {
 8000968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800096a:	2b00      	cmp	r3, #0
 800096c:	da10      	bge.n	8000990 <bit_stuffing+0x9e>
						output_data[out_index++] = current_byte;
 800096e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000970:	1c5a      	adds	r2, r3, #1
 8000972:	637a      	str	r2, [r7, #52]	; 0x34
 8000974:	461a      	mov	r2, r3
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	4413      	add	r3, r2
 800097a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800097e:	701a      	strb	r2, [r3, #0]
						stuffed_size++;
 8000980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000982:	3301      	adds	r3, #1
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
						current_byte = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						bit_pos = 7;
 800098c:	2307      	movs	r3, #7
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
					}
					current_byte &= ~(1 << bit_pos);
 8000990:	2201      	movs	r2, #1
 8000992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	b25b      	sxtb	r3, r3
 800099a:	43db      	mvns	r3, r3
 800099c:	b25a      	sxtb	r2, r3
 800099e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80009a2:	4013      	ands	r3, r2
 80009a4:	b25b      	sxtb	r3, r3
 80009a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					bit_pos--;
 80009aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ac:	3b01      	subs	r3, #1
 80009ae:	62bb      	str	r3, [r7, #40]	; 0x28
					bits_stuffed++;
 80009b0:	6a3b      	ldr	r3, [r7, #32]
 80009b2:	3301      	adds	r3, #1
 80009b4:	623b      	str	r3, [r7, #32]
					bit_count = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	633b      	str	r3, [r7, #48]	; 0x30
 80009ba:	e001      	b.n	80009c0 <bit_stuffing+0xce>
				}
			} else {
				bit_count = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	633b      	str	r3, [r7, #48]	; 0x30
			}

			if (bit_pos < 0) {
 80009c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	da10      	bge.n	80009e8 <bit_stuffing+0xf6>
				output_data[out_index++] = current_byte;
 80009c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009c8:	1c5a      	adds	r2, r3, #1
 80009ca:	637a      	str	r2, [r7, #52]	; 0x34
 80009cc:	461a      	mov	r2, r3
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	4413      	add	r3, r2
 80009d2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80009d6:	701a      	strb	r2, [r3, #0]
				stuffed_size++;
 80009d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009da:	3301      	adds	r3, #1
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
				current_byte = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				bit_pos = 7;
 80009e4:	2307      	movs	r3, #7
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			// Check if we've stuffed enough bits to increase size
			if (bits_stuffed >= 9 && bit_pos >= 0) {
 80009e8:	6a3b      	ldr	r3, [r7, #32]
 80009ea:	2b08      	cmp	r3, #8
 80009ec:	dd07      	ble.n	80009fe <bit_stuffing+0x10c>
 80009ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	db04      	blt.n	80009fe <bit_stuffing+0x10c>
				stuffed_size++;
 80009f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f6:	3301      	adds	r3, #1
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
				bits_stuffed = 0; // Reset bits_stuffed after increasing size
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
		for (int bit = 7; bit >= 0; bit--) {
 80009fe:	69bb      	ldr	r3, [r7, #24]
 8000a00:	3b01      	subs	r3, #1
 8000a02:	61bb      	str	r3, [r7, #24]
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	da8c      	bge.n	8000924 <bit_stuffing+0x32>
	for (int i = 0; i < length; i++) {
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	61fb      	str	r3, [r7, #28]
 8000a10:	69fa      	ldr	r2, [r7, #28]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	db82      	blt.n	800091e <bit_stuffing+0x2c>
			}
		}
	}
	//myDebug("\n");

	if (bit_pos < 7) {
 8000a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a1a:	2b06      	cmp	r3, #6
 8000a1c:	dc0b      	bgt.n	8000a36 <bit_stuffing+0x144>
		output_data[out_index++] = current_byte;
 8000a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a20:	1c5a      	adds	r2, r3, #1
 8000a22:	637a      	str	r2, [r7, #52]	; 0x34
 8000a24:	461a      	mov	r2, r3
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	4413      	add	r3, r2
 8000a2a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000a2e:	701a      	strb	r2, [r3, #0]
		stuffed_size++;
 8000a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a32:	3301      	adds	r3, #1
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
//			myDebug("%d ", bit_val);
//		}
//	}
//	myDebug("\n");

	return out_index; // Return the size of output data after bit stuffing
 8000a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	373c      	adds	r7, #60	; 0x3c
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr

08000a42 <bit_destuffing>:

int bit_destuffing(uint8_t *data, uint8_t *output_data, int length) {
 8000a42:	b480      	push	{r7}
 8000a44:	b08d      	sub	sp, #52	; 0x34
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	60f8      	str	r0, [r7, #12]
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
	int out_index = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62fb      	str	r3, [r7, #44]	; 0x2c
	int bit_count = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t current_byte = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int bit_pos = 7;
 8000a5c:	2307      	movs	r3, #7
 8000a5e:	623b      	str	r3, [r7, #32]

	for (int i = 0; i < length; i++) {
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
 8000a64:	e052      	b.n	8000b0c <bit_destuffing+0xca>
		for (int bit = 7; bit >= 0; bit--) {
 8000a66:	2307      	movs	r3, #7
 8000a68:	61bb      	str	r3, [r7, #24]
 8000a6a:	e049      	b.n	8000b00 <bit_destuffing+0xbe>
			int bit_val = (data[i] >> bit) & 1;
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	4413      	add	r3, r2
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	461a      	mov	r2, r3
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	fa42 f303 	asr.w	r3, r2, r3
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	617b      	str	r3, [r7, #20]

			if (bit_val) {
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d011      	beq.n	8000aac <bit_destuffing+0x6a>
				bit_count++;
 8000a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
				current_byte |= (bit_val << bit_pos);
 8000a8e:	697a      	ldr	r2, [r7, #20]
 8000a90:	6a3b      	ldr	r3, [r7, #32]
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	b25a      	sxtb	r2, r3
 8000a98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	b25b      	sxtb	r3, r3
 8000aa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				bit_pos--;
 8000aa4:	6a3b      	ldr	r3, [r7, #32]
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	623b      	str	r3, [r7, #32]
 8000aaa:	e015      	b.n	8000ad8 <bit_destuffing+0x96>
			} else {
				if (bit_count == 5) {
 8000aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aae:	2b05      	cmp	r3, #5
 8000ab0:	d102      	bne.n	8000ab8 <bit_destuffing+0x76>
					// Skip this bit as it is a stuffed bit
					bit_count = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
					continue;
 8000ab6:	e020      	b.n	8000afa <bit_destuffing+0xb8>
				} else {
					bit_count = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
					current_byte |= (bit_val << bit_pos);
 8000abc:	697a      	ldr	r2, [r7, #20]
 8000abe:	6a3b      	ldr	r3, [r7, #32]
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	b25a      	sxtb	r2, r3
 8000ac6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000aca:	4313      	orrs	r3, r2
 8000acc:	b25b      	sxtb	r3, r3
 8000ace:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					bit_pos--;
 8000ad2:	6a3b      	ldr	r3, [r7, #32]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	623b      	str	r3, [r7, #32]
				}
			}

			if (bit_pos < 0) {
 8000ad8:	6a3b      	ldr	r3, [r7, #32]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	da0d      	bge.n	8000afa <bit_destuffing+0xb8>
				output_data[out_index++] = current_byte;
 8000ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ae0:	1c5a      	adds	r2, r3, #1
 8000ae2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	4413      	add	r3, r2
 8000aea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000aee:	701a      	strb	r2, [r3, #0]
				current_byte = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				bit_pos = 7;
 8000af6:	2307      	movs	r3, #7
 8000af8:	623b      	str	r3, [r7, #32]
		for (int bit = 7; bit >= 0; bit--) {
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	3b01      	subs	r3, #1
 8000afe:	61bb      	str	r3, [r7, #24]
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	dab2      	bge.n	8000a6c <bit_destuffing+0x2a>
	for (int i = 0; i < length; i++) {
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	61fb      	str	r3, [r7, #28]
 8000b0c:	69fa      	ldr	r2, [r7, #28]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	dba8      	blt.n	8000a66 <bit_destuffing+0x24>
			}
		}
	}

	// Ensure the last byte is written if it's partially filled
	if (bit_pos < 7) {
 8000b14:	6a3b      	ldr	r3, [r7, #32]
 8000b16:	2b06      	cmp	r3, #6
 8000b18:	dc08      	bgt.n	8000b2c <bit_destuffing+0xea>
		output_data[out_index++] = current_byte;
 8000b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b1c:	1c5a      	adds	r2, r3, #1
 8000b1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000b20:	461a      	mov	r2, r3
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	4413      	add	r3, r2
 8000b26:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000b2a:	701a      	strb	r2, [r3, #0]
//			myDebug("%d ", bit_val);
//		}
//	}
//	myDebug("\n");

	return out_index;
 8000b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3734      	adds	r7, #52	; 0x34
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr

08000b38 <check_packet_type>:

int check_packet_type(uint8_t *OBC_UART) {
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	uint8_t packet_type_true = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	73fb      	strb	r3, [r7, #15]
	switch (OBC_UART[1]) {
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3301      	adds	r3, #1
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2bb2      	cmp	r3, #178	; 0xb2
 8000b4c:	d020      	beq.n	8000b90 <check_packet_type+0x58>
 8000b4e:	2bb2      	cmp	r3, #178	; 0xb2
 8000b50:	dc30      	bgt.n	8000bb4 <check_packet_type+0x7c>
 8000b52:	2bb1      	cmp	r3, #177	; 0xb1
 8000b54:	d019      	beq.n	8000b8a <check_packet_type+0x52>
 8000b56:	2bb1      	cmp	r3, #177	; 0xb1
 8000b58:	dc2c      	bgt.n	8000bb4 <check_packet_type+0x7c>
 8000b5a:	2b0e      	cmp	r3, #14
 8000b5c:	dc12      	bgt.n	8000b84 <check_packet_type+0x4c>
 8000b5e:	2b0a      	cmp	r3, #10
 8000b60:	db28      	blt.n	8000bb4 <check_packet_type+0x7c>
 8000b62:	3b0a      	subs	r3, #10
 8000b64:	2b04      	cmp	r3, #4
 8000b66:	d825      	bhi.n	8000bb4 <check_packet_type+0x7c>
 8000b68:	a201      	add	r2, pc, #4	; (adr r2, 8000b70 <check_packet_type+0x38>)
 8000b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b6e:	bf00      	nop
 8000b70:	08000b9d 	.word	0x08000b9d
 8000b74:	08000bb5 	.word	0x08000bb5
 8000b78:	08000ba9 	.word	0x08000ba9
 8000b7c:	08000baf 	.word	0x08000baf
 8000b80:	08000ba3 	.word	0x08000ba3
 8000b84:	2bac      	cmp	r3, #172	; 0xac
 8000b86:	d006      	beq.n	8000b96 <check_packet_type+0x5e>
 8000b88:	e014      	b.n	8000bb4 <check_packet_type+0x7c>

	case 0xb1:						// beacon_type_1
		packet_type_true = 1;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	73fb      	strb	r3, [r7, #15]
		break;
 8000b8e:	e013      	b.n	8000bb8 <check_packet_type+0x80>

	case 0xb2:						// beacon_type_2
		packet_type_true = 1;
 8000b90:	2301      	movs	r3, #1
 8000b92:	73fb      	strb	r3, [r7, #15]
		break;
 8000b94:	e010      	b.n	8000bb8 <check_packet_type+0x80>

	case 0xac:						// ack
		packet_type_true = 1;
 8000b96:	2301      	movs	r3, #1
 8000b98:	73fb      	strb	r3, [r7, #15]
		break;
 8000b9a:	e00d      	b.n	8000bb8 <check_packet_type+0x80>

	case 0x0a:						// digipeater packet
		packet_type_true = 1;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	73fb      	strb	r3, [r7, #15]
		break;
 8000ba0:	e00a      	b.n	8000bb8 <check_packet_type+0x80>

	case 0x0e:						// epdm
		packet_type_true = 1;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	73fb      	strb	r3, [r7, #15]
		break;
 8000ba6:	e007      	b.n	8000bb8 <check_packet_type+0x80>

	case 0x0c:						// camera
		packet_type_true = 1;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	73fb      	strb	r3, [r7, #15]
		break;
 8000bac:	e004      	b.n	8000bb8 <check_packet_type+0x80>

	case 0x0d:						// adcs
		packet_type_true = 1;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	73fb      	strb	r3, [r7, #15]
		break;
 8000bb2:	e001      	b.n	8000bb8 <check_packet_type+0x80>

	default:
		packet_type_true = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	73fb      	strb	r3, [r7, #15]
	}

	return packet_type_true;
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr

08000bc4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000be0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4013      	ands	r3, r2
 8000be6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000be8:	68fb      	ldr	r3, [r7, #12]
}
 8000bea:	bf00      	nop
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr

08000bf4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f7ff ffdb 	bl	8000bc4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0e:	2002      	movs	r0, #2
 8000c10:	f7ff ffd8 	bl	8000bc4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c14:	2004      	movs	r0, #4
 8000c16:	f7ff ffd5 	bl	8000bc4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 8000c20:	481f      	ldr	r0, [pc, #124]	; (8000ca0 <MX_GPIO_Init+0xac>)
 8000c22:	f003 f9e9 	bl	8003ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2138      	movs	r1, #56	; 0x38
 8000c2a:	481e      	ldr	r0, [pc, #120]	; (8000ca4 <MX_GPIO_Init+0xb0>)
 8000c2c:	f003 f9e4 	bl	8003ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000c30:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000c34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	4619      	mov	r1, r3
 8000c46:	4816      	ldr	r0, [pc, #88]	; (8000ca0 <MX_GPIO_Init+0xac>)
 8000c48:	f003 f876 	bl	8003d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000c4c:	2338      	movs	r3, #56	; 0x38
 8000c4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4810      	ldr	r0, [pc, #64]	; (8000ca4 <MX_GPIO_Init+0xb0>)
 8000c62:	f003 f869 	bl	8003d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 8000c66:	2303      	movs	r3, #3
 8000c68:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c6a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	4619      	mov	r1, r3
 8000c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7c:	f003 f85c 	bl	8003d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000c80:	2340      	movs	r3, #64	; 0x40
 8000c82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c84:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	4619      	mov	r1, r3
 8000c92:	4804      	ldr	r0, [pc, #16]	; (8000ca4 <MX_GPIO_Init+0xb0>)
 8000c94:	f003 f850 	bl	8003d38 <HAL_GPIO_Init>

}
 8000c98:	bf00      	nop
 8000c9a:	3718      	adds	r7, #24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	48000400 	.word	0x48000400
 8000ca4:	48000800 	.word	0x48000800

08000ca8 <countsDataBetweenFlags>:
int countsDataBetweenFlags(uint8_t *data, int data_length);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int countsDataBetweenFlags(uint8_t *data, int data_length) {
 8000ca8:	b480      	push	{r7}
 8000caa:	b087      	sub	sp, #28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
	int found_first_7e = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
	int start_index = 0, end_index = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < data_length; i++) {
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	e013      	b.n	8000cec <countsDataBetweenFlags+0x44>
		if (data[i] == 0x7e) {
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b7e      	cmp	r3, #126	; 0x7e
 8000cce:	d10a      	bne.n	8000ce6 <countsDataBetweenFlags+0x3e>
			if (!found_first_7e) {
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d104      	bne.n	8000ce0 <countsDataBetweenFlags+0x38>
				found_first_7e = 1;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	617b      	str	r3, [r7, #20]
				start_index = i;
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	e002      	b.n	8000ce6 <countsDataBetweenFlags+0x3e>
			} else {
				end_index = i;
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	60fb      	str	r3, [r7, #12]
				break;
 8000ce4:	e006      	b.n	8000cf4 <countsDataBetweenFlags+0x4c>
	for (int i = 0; i < data_length; i++) {
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68ba      	ldr	r2, [r7, #8]
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	dbe7      	blt.n	8000cc4 <countsDataBetweenFlags+0x1c>
			}
		}
	}

	if (end_index > start_index) {
 8000cf4:	68fa      	ldr	r2, [r7, #12]
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	dd04      	ble.n	8000d06 <countsDataBetweenFlags+0x5e>
		return end_index - start_index + 1;
 8000cfc:	68fa      	ldr	r2, [r7, #12]
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	3301      	adds	r3, #1
 8000d04:	e001      	b.n	8000d0a <countsDataBetweenFlags+0x62>
	} else {
		return -1; // Return -1 if two 0x7E flags are not found
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	371c      	adds	r7, #28
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr

08000d14 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d1a:	f002 fb13 	bl	8003344 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d1e:	f000 fa4f 	bl	80011c0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d22:	f7ff ff67 	bl	8000bf4 <MX_GPIO_Init>
	MX_DMA_Init();
 8000d26:	f7ff fd7b 	bl	8000820 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000d2a:	f002 f8fd 	bl	8002f28 <MX_USART2_UART_Init>
	MX_LPUART1_UART_Init();
 8000d2e:	f002 f861 	bl	8002df4 <MX_LPUART1_UART_Init>
	MX_TIM2_Init();
 8000d32:	f001 ff29 	bl	8002b88 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8000d36:	f002 f8ab 	bl	8002e90 <MX_USART1_UART_Init>
	MX_SubGHz_Phy_Init();
 8000d3a:	f00a fb1c 	bl	800b376 <MX_SubGHz_Phy_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim2);
 8000d3e:	487d      	ldr	r0, [pc, #500]	; (8000f34 <main+0x220>)
 8000d40:	f005 f9b2 	bl	80060a8 <HAL_TIM_Base_Start>

	myDebug("########## Slippers2Sat SATELLITE COM: BEGIN ##########\r\n");
 8000d44:	487c      	ldr	r0, [pc, #496]	; (8000f38 <main+0x224>)
 8000d46:	f7ff fd19 	bl	800077c <myDebug>
	myDebug("########## COMMUNICATION PARAMETERS ##########\r\n");
 8000d4a:	487c      	ldr	r0, [pc, #496]	; (8000f3c <main+0x228>)
 8000d4c:	f7ff fd16 	bl	800077c <myDebug>
	myDebug("Modulation: GFSK PACKET\r\n");
 8000d50:	487b      	ldr	r0, [pc, #492]	; (8000f40 <main+0x22c>)
 8000d52:	f7ff fd13 	bl	800077c <myDebug>
	myDebug("FREQUENCY MODES: DOWNLINK FREQ: %luHz and UPLINK FREQ: %lu Hz\r\n",
 8000d56:	4a7b      	ldr	r2, [pc, #492]	; (8000f44 <main+0x230>)
 8000d58:	497b      	ldr	r1, [pc, #492]	; (8000f48 <main+0x234>)
 8000d5a:	487c      	ldr	r0, [pc, #496]	; (8000f4c <main+0x238>)
 8000d5c:	f7ff fd0e 	bl	800077c <myDebug>
	FREQ_437_MHZ, FREQ_435_MHZ);
	myDebug("STM32 BSP_SubGHz-WL Radio: Low Power\n");
 8000d60:	487b      	ldr	r0, [pc, #492]	; (8000f50 <main+0x23c>)
 8000d62:	f7ff fd0b 	bl	800077c <myDebug>
	myDebug(
 8000d66:	230e      	movs	r3, #14
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2104      	movs	r1, #4
 8000d70:	4878      	ldr	r0, [pc, #480]	; (8000f54 <main+0x240>)
 8000d72:	f7ff fd03 	bl	800077c <myDebug>
			"POWER CONFIG:::- \n"
					"\t PA_DUTY_CYCLE: %x, HP_MAX: %x, PA_SEL: %x, POWER TX: %u dBm\r\n",
			PA_DUTY_CYCLE, HP_MAX, PA_SEL, POWER);

	myDebug("\n########## Wait for Handshake ##########\r\n");
 8000d76:	4878      	ldr	r0, [pc, #480]	; (8000f58 <main+0x244>)
 8000d78:	f7ff fd00 	bl	800077c <myDebug>

	pkt_params.PacketType = PACKET_TYPE_GFSK;
 8000d7c:	4b77      	ldr	r3, [pc, #476]	; (8000f5c <main+0x248>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
	pkt_params.Params.Gfsk.PayloadLength = RX_BUFF_LENGTH;
 8000d82:	4b76      	ldr	r3, [pc, #472]	; (8000f5c <main+0x248>)
 8000d84:	2264      	movs	r2, #100	; 0x64
 8000d86:	721a      	strb	r2, [r3, #8]
	pkt_params.Params.Gfsk.PreambleLength = 8; /*Convert byte into bit*/
 8000d88:	4b74      	ldr	r3, [pc, #464]	; (8000f5c <main+0x248>)
 8000d8a:	2208      	movs	r2, #8
 8000d8c:	805a      	strh	r2, [r3, #2]
	pkt_params.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8000d8e:	4b73      	ldr	r3, [pc, #460]	; (8000f5c <main+0x248>)
 8000d90:	2204      	movs	r2, #4
 8000d92:	711a      	strb	r2, [r3, #4]
	pkt_params.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8000d94:	4b71      	ldr	r3, [pc, #452]	; (8000f5c <main+0x248>)
 8000d96:	2218      	movs	r2, #24
 8000d98:	715a      	strb	r2, [r3, #5]
	pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8000d9a:	4b70      	ldr	r3, [pc, #448]	; (8000f5c <main+0x248>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	719a      	strb	r2, [r3, #6]
	pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8000da0:	4b6e      	ldr	r3, [pc, #440]	; (8000f5c <main+0x248>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	71da      	strb	r2, [r3, #7]
	pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8000da6:	4b6d      	ldr	r3, [pc, #436]	; (8000f5c <main+0x248>)
 8000da8:	22f2      	movs	r2, #242	; 0xf2
 8000daa:	725a      	strb	r2, [r3, #9]
	pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8000dac:	4b6b      	ldr	r3, [pc, #428]	; (8000f5c <main+0x248>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	729a      	strb	r2, [r3, #10]

	mod_params.PacketType = PACKET_TYPE_GFSK;
 8000db2:	4b6b      	ldr	r3, [pc, #428]	; (8000f60 <main+0x24c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
	mod_params.Params.Gfsk.Bandwidth = RX_BW_29300; /*Not used in TX*/
 8000db8:	4b69      	ldr	r3, [pc, #420]	; (8000f60 <main+0x24c>)
 8000dba:	220d      	movs	r2, #13
 8000dbc:	735a      	strb	r2, [r3, #13]
	mod_params.Params.Gfsk.BitRate = DEMO_DEFAULT_BR_1200;
 8000dbe:	4b68      	ldr	r3, [pc, #416]	; (8000f60 <main+0x24c>)
 8000dc0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000dc4:	605a      	str	r2, [r3, #4]
	mod_params.Params.Gfsk.Fdev = DEMO_DEFAULT_FDEV_1200;
 8000dc6:	4b66      	ldr	r3, [pc, #408]	; (8000f60 <main+0x24c>)
 8000dc8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000dcc:	609a      	str	r2, [r3, #8]
	mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8000dce:	4b64      	ldr	r3, [pc, #400]	; (8000f60 <main+0x24c>)
 8000dd0:	220b      	movs	r2, #11
 8000dd2:	731a      	strb	r2, [r3, #12]

	SUBGRF_Init(DioIrqHndlr);
 8000dd4:	4863      	ldr	r0, [pc, #396]	; (8000f64 <main+0x250>)
 8000dd6:	f009 f885 	bl	8009ee4 <SUBGRF_Init>
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8000dda:	2100      	movs	r1, #0
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f009 feed 	bl	800abbc <SUBGRF_SetBufferBaseAddress>
	SUBGRF_SetPacketParams(&pkt_params);
 8000de2:	485e      	ldr	r0, [pc, #376]	; (8000f5c <main+0x248>)
 8000de4:	f009 fe4c 	bl	800aa80 <SUBGRF_SetPacketParams>
	SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00,
 8000de8:	4a5f      	ldr	r2, [pc, #380]	; (8000f68 <main+0x254>)
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000df2:	e883 0003 	stmia.w	r3, {r0, r1}
 8000df6:	f107 030c 	add.w	r3, r7, #12
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f009 f909 	bl	800a012 <SUBGRF_SetSyncWord>
					0x00 });
	SUBGRF_SetWhiteningSeed(0x01FF);
 8000e00:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000e04:	f009 f954 	bl	800a0b0 <SUBGRF_SetWhiteningSeed>
	SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 8000e08:	484e      	ldr	r0, [pc, #312]	; (8000f44 <main+0x230>)
 8000e0a:	f009 fc2d 	bl	800a668 <SUBGRF_SetRfFrequency>
	SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 8000e0e:	2301      	movs	r3, #1
 8000e10:	2201      	movs	r2, #1
 8000e12:	2100      	movs	r1, #0
 8000e14:	2004      	movs	r0, #4
 8000e16:	f009 fba9 	bl	800a56c <SUBGRF_SetPaConfig>
	SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME); // Set to RFO_LP for low power
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	210e      	movs	r1, #14
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f009 fc8e 	bl	800a740 <SUBGRF_SetTxParams>
	SUBGRF_SetModulationParams(&mod_params);
 8000e24:	484e      	ldr	r0, [pc, #312]	; (8000f60 <main+0x24c>)
 8000e26:	f009 fd59 	bl	800a8dc <SUBGRF_SetModulationParams>
	SUBGRF_SetDioIrqParams(
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f240 210f 	movw	r1, #527	; 0x20f
 8000e32:	f240 200f 	movw	r0, #527	; 0x20f
 8000e36:	f009 fbbb 	bl	800a5b0 <SUBGRF_SetDioIrqParams>
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
			IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID, IRQ_RADIO_NONE,
			IRQ_RADIO_NONE);

	while (OBC_HANDSHAKE_FLAG == 0) {
 8000e3a:	e001      	b.n	8000e40 <main+0x12c>
		WAIT_FOR_HANDSHAKE();
 8000e3c:	f001 fc78 	bl	8002730 <WAIT_FOR_HANDSHAKE>
	while (OBC_HANDSHAKE_FLAG == 0) {
 8000e40:	4b4a      	ldr	r3, [pc, #296]	; (8000f6c <main+0x258>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d0f9      	beq.n	8000e3c <main+0x128>
	}

	myDebug(
 8000e48:	4849      	ldr	r0, [pc, #292]	; (8000f70 <main+0x25c>)
 8000e4a:	f7ff fc97 	bl	800077c <myDebug>
			"\n########## Operation Starts, Perform any one operation: ##########\r\n");
	myDebug("1. Transmit from Satellite\r\n");
 8000e4e:	4849      	ldr	r0, [pc, #292]	; (8000f74 <main+0x260>)
 8000e50:	f7ff fc94 	bl	800077c <myDebug>
	myDebug("2. Wait to receive GS Command\r\n");
 8000e54:	4848      	ldr	r0, [pc, #288]	; (8000f78 <main+0x264>)
 8000e56:	f7ff fc91 	bl	800077c <myDebug>

	myDebug("\n########## RX Configuration: ##########\n");
 8000e5a:	4848      	ldr	r0, [pc, #288]	; (8000f7c <main+0x268>)
 8000e5c:	f7ff fc8e 	bl	800077c <myDebug>

	myDebug("FREQUENCY MODS: UPLINK FREQ: %lu Hz\r\n", FREQ_435_MHZ);
 8000e60:	4938      	ldr	r1, [pc, #224]	; (8000f44 <main+0x230>)
 8000e62:	4847      	ldr	r0, [pc, #284]	; (8000f80 <main+0x26c>)
 8000e64:	f7ff fc8a 	bl	800077c <myDebug>
	myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 8000e68:	4b3d      	ldr	r3, [pc, #244]	; (8000f60 <main+0x24c>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4845      	ldr	r0, [pc, #276]	; (8000f84 <main+0x270>)
 8000e70:	f7ff fc84 	bl	800077c <myDebug>
	myDebug("Frequency Deviation: 	%d\n\r", mod_params.Params.Gfsk.Fdev);
 8000e74:	4b3a      	ldr	r3, [pc, #232]	; (8000f60 <main+0x24c>)
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4843      	ldr	r0, [pc, #268]	; (8000f88 <main+0x274>)
 8000e7c:	f7ff fc7e 	bl	800077c <myDebug>
	myDebug("RECEVING BANDWIDTH: 	%d\n\r", mod_params.Params.Gfsk.Bandwidth);
 8000e80:	4b37      	ldr	r3, [pc, #220]	; (8000f60 <main+0x24c>)
 8000e82:	7b5b      	ldrb	r3, [r3, #13]
 8000e84:	4619      	mov	r1, r3
 8000e86:	4841      	ldr	r0, [pc, #260]	; (8000f8c <main+0x278>)
 8000e88:	f7ff fc78 	bl	800077c <myDebug>
	myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8000e8c:	4b33      	ldr	r3, [pc, #204]	; (8000f5c <main+0x248>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	483f      	ldr	r0, [pc, #252]	; (8000f90 <main+0x27c>)
 8000e94:	f7ff fc72 	bl	800077c <myDebug>
	myDebug("PayloadLength 			%d\n\r", pkt_params.Params.Gfsk.PayloadLength);
 8000e98:	4b30      	ldr	r3, [pc, #192]	; (8000f5c <main+0x248>)
 8000e9a:	7a1b      	ldrb	r3, [r3, #8]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	483d      	ldr	r0, [pc, #244]	; (8000f94 <main+0x280>)
 8000ea0:	f7ff fc6c 	bl	800077c <myDebug>
	myDebug("PreambleLength 		%d\n\r", pkt_params.Params.Gfsk.PreambleLength);
 8000ea4:	4b2d      	ldr	r3, [pc, #180]	; (8000f5c <main+0x248>)
 8000ea6:	885b      	ldrh	r3, [r3, #2]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	483b      	ldr	r0, [pc, #236]	; (8000f98 <main+0x284>)
 8000eac:	f7ff fc66 	bl	800077c <myDebug>
	myDebug("PreambleMinDetect		%d\n\r",
			pkt_params.Params.Gfsk.PreambleMinDetect);
 8000eb0:	4b2a      	ldr	r3, [pc, #168]	; (8000f5c <main+0x248>)
 8000eb2:	791b      	ldrb	r3, [r3, #4]
	myDebug("PreambleMinDetect		%d\n\r",
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4839      	ldr	r0, [pc, #228]	; (8000f9c <main+0x288>)
 8000eb8:	f7ff fc60 	bl	800077c <myDebug>
	myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 8000ebc:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <main+0x248>)
 8000ebe:	79db      	ldrb	r3, [r3, #7]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4837      	ldr	r0, [pc, #220]	; (8000fa0 <main+0x28c>)
 8000ec4:	f7ff fc5a 	bl	800077c <myDebug>
	myDebug("__________*******************__________\r\n");
 8000ec8:	4836      	ldr	r0, [pc, #216]	; (8000fa4 <main+0x290>)
 8000eca:	f7ff fc57 	bl	800077c <myDebug>

	SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 8000ece:	481d      	ldr	r0, [pc, #116]	; (8000f44 <main+0x230>)
 8000ed0:	f009 fbca 	bl	800a668 <SUBGRF_SetRfFrequency>
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f00a f80e 	bl	800aef8 <SUBGRF_SetSwitch>
	SUBGRF_SetRxBoosted(0xFFFFFF);
 8000edc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8000ee0:	f009 f9ee 	bl	800a2c0 <SUBGRF_SetRxBoosted>

	HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 8000ee4:	4b30      	ldr	r3, [pc, #192]	; (8000fa8 <main+0x294>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	461a      	mov	r2, r3
 8000eec:	492f      	ldr	r1, [pc, #188]	; (8000fac <main+0x298>)
 8000eee:	4830      	ldr	r0, [pc, #192]	; (8000fb0 <main+0x29c>)
 8000ef0:	f005 fcfc 	bl	80068ec <HAL_UART_Receive_DMA>

	HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 8000ef4:	4b2c      	ldr	r3, [pc, #176]	; (8000fa8 <main+0x294>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	461a      	mov	r2, r3
 8000efc:	492b      	ldr	r1, [pc, #172]	; (8000fac <main+0x298>)
 8000efe:	482d      	ldr	r0, [pc, #180]	; (8000fb4 <main+0x2a0>)
 8000f00:	f005 fcf4 	bl	80068ec <HAL_UART_Receive_DMA>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		delay_us(500000);
 8000f04:	482c      	ldr	r0, [pc, #176]	; (8000fb8 <main+0x2a4>)
 8000f06:	f7ff fc1f 	bl	8000748 <delay_us>

		if (OBC_SUCCESS_DATA_RX_FLAG) {
 8000f0a:	4b2c      	ldr	r3, [pc, #176]	; (8000fbc <main+0x2a8>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f000 8128 	beq.w	8001164 <main+0x450>

			getAX25Packet(OBC_UART_RX, obc_ilen);
 8000f14:	4b2a      	ldr	r3, [pc, #168]	; (8000fc0 <main+0x2ac>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4824      	ldr	r0, [pc, #144]	; (8000fac <main+0x298>)
 8000f1c:	f7ff fb8a 	bl	8000634 <getAX25Packet>

			tx_buffer_len = countsDataBetweenFlags(temp_tx_buffer,
 8000f20:	2196      	movs	r1, #150	; 0x96
 8000f22:	4828      	ldr	r0, [pc, #160]	; (8000fc4 <main+0x2b0>)
 8000f24:	f7ff fec0 	bl	8000ca8 <countsDataBetweenFlags>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4a27      	ldr	r2, [pc, #156]	; (8000fc8 <main+0x2b4>)
 8000f2c:	6013      	str	r3, [r2, #0]
					sizeof(temp_tx_buffer));

//			myDebug("AX.25 complete GS packet ready to TX: 0x%x\r\n", temp_tx_buffer);
			for (int j = 0; j < tx_buffer_len; j++) {
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
 8000f32:	e057      	b.n	8000fe4 <main+0x2d0>
 8000f34:	200004d8 	.word	0x200004d8
 8000f38:	0800c434 	.word	0x0800c434
 8000f3c:	0800c470 	.word	0x0800c470
 8000f40:	0800c4a4 	.word	0x0800c4a4
 8000f44:	19f25968 	.word	0x19f25968
 8000f48:	1a11d018 	.word	0x1a11d018
 8000f4c:	0800c4c0 	.word	0x0800c4c0
 8000f50:	0800c500 	.word	0x0800c500
 8000f54:	0800c528 	.word	0x0800c528
 8000f58:	0800c57c 	.word	0x0800c57c
 8000f5c:	2000027c 	.word	0x2000027c
 8000f60:	20000290 	.word	0x20000290
 8000f64:	080017bd 	.word	0x080017bd
 8000f68:	0800c7bc 	.word	0x0800c7bc
 8000f6c:	200004a4 	.word	0x200004a4
 8000f70:	0800c5a8 	.word	0x0800c5a8
 8000f74:	0800c5f0 	.word	0x0800c5f0
 8000f78:	0800c610 	.word	0x0800c610
 8000f7c:	0800c630 	.word	0x0800c630
 8000f80:	0800c65c 	.word	0x0800c65c
 8000f84:	0800c684 	.word	0x0800c684
 8000f88:	0800c694 	.word	0x0800c694
 8000f8c:	0800c6b0 	.word	0x0800c6b0
 8000f90:	0800c6cc 	.word	0x0800c6cc
 8000f94:	0800c6e0 	.word	0x0800c6e0
 8000f98:	0800c6f8 	.word	0x0800c6f8
 8000f9c:	0800c710 	.word	0x0800c710
 8000fa0:	0800c728 	.word	0x0800c728
 8000fa4:	0800c73c 	.word	0x0800c73c
 8000fa8:	20000001 	.word	0x20000001
 8000fac:	20000314 	.word	0x20000314
 8000fb0:	20000650 	.word	0x20000650
 8000fb4:	20000528 	.word	0x20000528
 8000fb8:	0007a120 	.word	0x0007a120
 8000fbc:	2000036c 	.word	0x2000036c
 8000fc0:	20000311 	.word	0x20000311
 8000fc4:	20000370 	.word	0x20000370
 8000fc8:	200004a0 	.word	0x200004a0
				tx_buffer[j] = temp_tx_buffer[j];
 8000fcc:	4a67      	ldr	r2, [pc, #412]	; (800116c <main+0x458>)
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	7819      	ldrb	r1, [r3, #0]
 8000fd4:	4a66      	ldr	r2, [pc, #408]	; (8001170 <main+0x45c>)
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	4413      	add	r3, r2
 8000fda:	460a      	mov	r2, r1
 8000fdc:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < tx_buffer_len; j++) {
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	4b63      	ldr	r3, [pc, #396]	; (8001174 <main+0x460>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	697a      	ldr	r2, [r7, #20]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	dbee      	blt.n	8000fcc <main+0x2b8>
			}
//			myDebug("\r\n");

//			myDebug("size of tx_buffer = %d\r\n", tx_buffer_len);

			memset(OBC_UART_RX, '\0', obc_ilen);
 8000fee:	4b62      	ldr	r3, [pc, #392]	; (8001178 <main+0x464>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4861      	ldr	r0, [pc, #388]	; (800117c <main+0x468>)
 8000ff8:	f00a fd7c 	bl	800baf4 <memset>
			memset(temp_tx_buffer, '\0', sizeof(temp_tx_buffer));
 8000ffc:	2296      	movs	r2, #150	; 0x96
 8000ffe:	2100      	movs	r1, #0
 8001000:	485a      	ldr	r0, [pc, #360]	; (800116c <main+0x458>)
 8001002:	f00a fd77 	bl	800baf4 <memset>

			pkt_params.PacketType = PACKET_TYPE_GFSK;
 8001006:	4b5e      	ldr	r3, [pc, #376]	; (8001180 <main+0x46c>)
 8001008:	2200      	movs	r2, #0
 800100a:	701a      	strb	r2, [r3, #0]
			pkt_params.Params.Gfsk.PayloadLength = tx_buffer_len;
 800100c:	4b59      	ldr	r3, [pc, #356]	; (8001174 <main+0x460>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4b5b      	ldr	r3, [pc, #364]	; (8001180 <main+0x46c>)
 8001014:	721a      	strb	r2, [r3, #8]
			pkt_params.Params.Gfsk.PreambleLength = 8; /*Convert byte into bit*/
 8001016:	4b5a      	ldr	r3, [pc, #360]	; (8001180 <main+0x46c>)
 8001018:	2208      	movs	r2, #8
 800101a:	805a      	strh	r2, [r3, #2]
			pkt_params.Params.Gfsk.PreambleMinDetect =
 800101c:	4b58      	ldr	r3, [pc, #352]	; (8001180 <main+0x46c>)
 800101e:	2204      	movs	r2, #4
 8001020:	711a      	strb	r2, [r3, #4]
					RADIO_PREAMBLE_DETECTOR_08_BITS;
			pkt_params.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8001022:	4b57      	ldr	r3, [pc, #348]	; (8001180 <main+0x46c>)
 8001024:	2218      	movs	r2, #24
 8001026:	715a      	strb	r2, [r3, #5]
			pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8001028:	4b55      	ldr	r3, [pc, #340]	; (8001180 <main+0x46c>)
 800102a:	2200      	movs	r2, #0
 800102c:	719a      	strb	r2, [r3, #6]
			pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 800102e:	4b54      	ldr	r3, [pc, #336]	; (8001180 <main+0x46c>)
 8001030:	2200      	movs	r2, #0
 8001032:	71da      	strb	r2, [r3, #7]
			pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8001034:	4b52      	ldr	r3, [pc, #328]	; (8001180 <main+0x46c>)
 8001036:	22f2      	movs	r2, #242	; 0xf2
 8001038:	725a      	strb	r2, [r3, #9]
			pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800103a:	4b51      	ldr	r3, [pc, #324]	; (8001180 <main+0x46c>)
 800103c:	2201      	movs	r2, #1
 800103e:	729a      	strb	r2, [r3, #10]

			mod_params.PacketType = PACKET_TYPE_GFSK;
 8001040:	4b50      	ldr	r3, [pc, #320]	; (8001184 <main+0x470>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
			mod_params.Params.Gfsk.Bandwidth = RX_BW_29300; /*Not used in TX*/
 8001046:	4b4f      	ldr	r3, [pc, #316]	; (8001184 <main+0x470>)
 8001048:	220d      	movs	r2, #13
 800104a:	735a      	strb	r2, [r3, #13]
			mod_params.Params.Gfsk.BitRate = DEMO_DEFAULT_BR_4800;
 800104c:	4b4d      	ldr	r3, [pc, #308]	; (8001184 <main+0x470>)
 800104e:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8001052:	605a      	str	r2, [r3, #4]
			mod_params.Params.Gfsk.Fdev = DEMO_DEFAULT_FDEV_4800;
 8001054:	4b4b      	ldr	r3, [pc, #300]	; (8001184 <main+0x470>)
 8001056:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800105a:	609a      	str	r2, [r3, #8]
			mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800105c:	4b49      	ldr	r3, [pc, #292]	; (8001184 <main+0x470>)
 800105e:	220b      	movs	r2, #11
 8001060:	731a      	strb	r2, [r3, #12]

			SUBGRF_Init(DioIrqHndlr);
 8001062:	4849      	ldr	r0, [pc, #292]	; (8001188 <main+0x474>)
 8001064:	f008 ff3e 	bl	8009ee4 <SUBGRF_Init>
			SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8001068:	2100      	movs	r1, #0
 800106a:	2000      	movs	r0, #0
 800106c:	f009 fda6 	bl	800abbc <SUBGRF_SetBufferBaseAddress>
			SUBGRF_SetPayload(tx_buffer, tx_buffer_len);
 8001070:	4b40      	ldr	r3, [pc, #256]	; (8001174 <main+0x460>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	4619      	mov	r1, r3
 8001078:	483d      	ldr	r0, [pc, #244]	; (8001170 <main+0x45c>)
 800107a:	f008 ff85 	bl	8009f88 <SUBGRF_SetPayload>
			SUBGRF_SetPacketParams(&pkt_params);
 800107e:	4840      	ldr	r0, [pc, #256]	; (8001180 <main+0x46c>)
 8001080:	f009 fcfe 	bl	800aa80 <SUBGRF_SetPacketParams>
			SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00,
 8001084:	4a41      	ldr	r2, [pc, #260]	; (800118c <main+0x478>)
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	e892 0003 	ldmia.w	r2, {r0, r1}
 800108c:	e883 0003 	stmia.w	r3, {r0, r1}
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	4618      	mov	r0, r3
 8001094:	f008 ffbd 	bl	800a012 <SUBGRF_SetSyncWord>
							0x00, 0x00, 0x00 });
			SUBGRF_SetWhiteningSeed(0x01FF);
 8001098:	f240 10ff 	movw	r0, #511	; 0x1ff
 800109c:	f009 f808 	bl	800a0b0 <SUBGRF_SetWhiteningSeed>
			SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 80010a0:	483b      	ldr	r0, [pc, #236]	; (8001190 <main+0x47c>)
 80010a2:	f009 fae1 	bl	800a668 <SUBGRF_SetRfFrequency>
			SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 80010a6:	2301      	movs	r3, #1
 80010a8:	2201      	movs	r2, #1
 80010aa:	2100      	movs	r1, #0
 80010ac:	2004      	movs	r0, #4
 80010ae:	f009 fa5d 	bl	800a56c <SUBGRF_SetPaConfig>
			SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME); // Set to RFO_LP for low power
 80010b2:	2202      	movs	r2, #2
 80010b4:	210e      	movs	r1, #14
 80010b6:	2001      	movs	r0, #1
 80010b8:	f009 fb42 	bl	800a740 <SUBGRF_SetTxParams>
			SUBGRF_SetModulationParams(&mod_params);
 80010bc:	4831      	ldr	r0, [pc, #196]	; (8001184 <main+0x470>)
 80010be:	f009 fc0d 	bl	800a8dc <SUBGRF_SetModulationParams>
			SUBGRF_SetDioIrqParams(
 80010c2:	2300      	movs	r3, #0
 80010c4:	2200      	movs	r2, #0
 80010c6:	f240 210f 	movw	r1, #527	; 0x20f
 80010ca:	f240 200f 	movw	r0, #527	; 0x20f
 80010ce:	f009 fa6f 	bl	800a5b0 <SUBGRF_SetDioIrqParams>
							| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
					IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
							| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
					IRQ_RADIO_NONE, IRQ_RADIO_NONE);

			myDebug("\n########## TX Configuration: ##########\n");
 80010d2:	4830      	ldr	r0, [pc, #192]	; (8001194 <main+0x480>)
 80010d4:	f7ff fb52 	bl	800077c <myDebug>

			myDebug("FREQUENCY MODS: DOWNLINK FREQ: %lu Hz\r\n", FREQ_437_MHZ);
 80010d8:	492d      	ldr	r1, [pc, #180]	; (8001190 <main+0x47c>)
 80010da:	482f      	ldr	r0, [pc, #188]	; (8001198 <main+0x484>)
 80010dc:	f7ff fb4e 	bl	800077c <myDebug>
			myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 80010e0:	4b28      	ldr	r3, [pc, #160]	; (8001184 <main+0x470>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	4619      	mov	r1, r3
 80010e6:	482d      	ldr	r0, [pc, #180]	; (800119c <main+0x488>)
 80010e8:	f7ff fb48 	bl	800077c <myDebug>
			myDebug("Frequency Deviation: 	%d\n\r",
 80010ec:	4b25      	ldr	r3, [pc, #148]	; (8001184 <main+0x470>)
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	4619      	mov	r1, r3
 80010f2:	482b      	ldr	r0, [pc, #172]	; (80011a0 <main+0x48c>)
 80010f4:	f7ff fb42 	bl	800077c <myDebug>
					mod_params.Params.Gfsk.Fdev);
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
					mod_params.Params.Gfsk.Bandwidth);
 80010f8:	4b22      	ldr	r3, [pc, #136]	; (8001184 <main+0x470>)
 80010fa:	7b5b      	ldrb	r3, [r3, #13]
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 80010fc:	4619      	mov	r1, r3
 80010fe:	4829      	ldr	r0, [pc, #164]	; (80011a4 <main+0x490>)
 8001100:	f7ff fb3c 	bl	800077c <myDebug>
			myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8001104:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <main+0x46c>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	4619      	mov	r1, r3
 800110a:	4827      	ldr	r0, [pc, #156]	; (80011a8 <main+0x494>)
 800110c:	f7ff fb36 	bl	800077c <myDebug>
			myDebug("PayloadLength 			%d\n\r",
					pkt_params.Params.Gfsk.PayloadLength);
 8001110:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <main+0x46c>)
 8001112:	7a1b      	ldrb	r3, [r3, #8]
			myDebug("PayloadLength 			%d\n\r",
 8001114:	4619      	mov	r1, r3
 8001116:	4825      	ldr	r0, [pc, #148]	; (80011ac <main+0x498>)
 8001118:	f7ff fb30 	bl	800077c <myDebug>
			myDebug("PreambleLength 		%d\n\r",
					pkt_params.Params.Gfsk.PreambleLength);
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <main+0x46c>)
 800111e:	885b      	ldrh	r3, [r3, #2]
			myDebug("PreambleLength 		%d\n\r",
 8001120:	4619      	mov	r1, r3
 8001122:	4823      	ldr	r0, [pc, #140]	; (80011b0 <main+0x49c>)
 8001124:	f7ff fb2a 	bl	800077c <myDebug>
			myDebug("PreambleMinDetect		%d\n\r",
					pkt_params.Params.Gfsk.PreambleMinDetect);
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <main+0x46c>)
 800112a:	791b      	ldrb	r3, [r3, #4]
			myDebug("PreambleMinDetect		%d\n\r",
 800112c:	4619      	mov	r1, r3
 800112e:	4821      	ldr	r0, [pc, #132]	; (80011b4 <main+0x4a0>)
 8001130:	f7ff fb24 	bl	800077c <myDebug>
			myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <main+0x46c>)
 8001136:	79db      	ldrb	r3, [r3, #7]
 8001138:	4619      	mov	r1, r3
 800113a:	481f      	ldr	r0, [pc, #124]	; (80011b8 <main+0x4a4>)
 800113c:	f7ff fb1e 	bl	800077c <myDebug>
			myDebug("__________*******************__________\r\n");
 8001140:	481e      	ldr	r0, [pc, #120]	; (80011bc <main+0x4a8>)
 8001142:	f7ff fb1b 	bl	800077c <myDebug>

			SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8001146:	4812      	ldr	r0, [pc, #72]	; (8001190 <main+0x47c>)
 8001148:	f009 fa8e 	bl	800a668 <SUBGRF_SetRfFrequency>
			//SUBGRF_SetSwitch(RFO_HP, RFSWITCH_TX); /*Set RF switch*/
			SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX); /*Set RF switch*/
 800114c:	2101      	movs	r1, #1
 800114e:	2001      	movs	r0, #1
 8001150:	f009 fed2 	bl	800aef8 <SUBGRF_SetSwitch>
			SUBGRF_SendPayload(tx_buffer, tx_buffer_len, 0);
 8001154:	4b07      	ldr	r3, [pc, #28]	; (8001174 <main+0x460>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2200      	movs	r2, #0
 800115c:	4619      	mov	r1, r3
 800115e:	4804      	ldr	r0, [pc, #16]	; (8001170 <main+0x45c>)
 8001160:	f008 ff44 	bl	8009fec <SUBGRF_SendPayload>
		}

		/* USER CODE END WHILE */
		MX_SubGHz_Phy_Process();
 8001164:	f00a f90f 	bl	800b386 <MX_SubGHz_Phy_Process>
		delay_us(500000);
 8001168:	e6cc      	b.n	8000f04 <main+0x1f0>
 800116a:	bf00      	nop
 800116c:	20000370 	.word	0x20000370
 8001170:	20000408 	.word	0x20000408
 8001174:	200004a0 	.word	0x200004a0
 8001178:	20000311 	.word	0x20000311
 800117c:	20000314 	.word	0x20000314
 8001180:	2000027c 	.word	0x2000027c
 8001184:	20000290 	.word	0x20000290
 8001188:	080017bd 	.word	0x080017bd
 800118c:	0800c7bc 	.word	0x0800c7bc
 8001190:	1a11d018 	.word	0x1a11d018
 8001194:	0800c768 	.word	0x0800c768
 8001198:	0800c794 	.word	0x0800c794
 800119c:	0800c684 	.word	0x0800c684
 80011a0:	0800c694 	.word	0x0800c694
 80011a4:	0800c6b0 	.word	0x0800c6b0
 80011a8:	0800c6cc 	.word	0x0800c6cc
 80011ac:	0800c6e0 	.word	0x0800c6e0
 80011b0:	0800c6f8 	.word	0x0800c6f8
 80011b4:	0800c710 	.word	0x0800c710
 80011b8:	0800c728 	.word	0x0800c728
 80011bc:	0800c73c 	.word	0x0800c73c

080011c0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b09a      	sub	sp, #104	; 0x68
 80011c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80011c6:	f107 0320 	add.w	r3, r7, #32
 80011ca:	2248      	movs	r2, #72	; 0x48
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f00a fc90 	bl	800baf4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	611a      	str	r2, [r3, #16]
 80011e2:	615a      	str	r2, [r3, #20]
 80011e4:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011e6:	4b25      	ldr	r3, [pc, #148]	; (800127c <SystemClock_Config+0xbc>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011ee:	4a23      	ldr	r2, [pc, #140]	; (800127c <SystemClock_Config+0xbc>)
 80011f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	4b21      	ldr	r3, [pc, #132]	; (800127c <SystemClock_Config+0xbc>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001202:	2301      	movs	r3, #1
 8001204:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8001206:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001210:	2302      	movs	r3, #2
 8001212:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001214:	2303      	movs	r3, #3
 8001216:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001218:	2310      	movs	r3, #16
 800121a:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 6;
 800121c:	2306      	movs	r3, #6
 800121e:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001220:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001224:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001226:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800122a:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800122c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001230:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001232:	f107 0320 	add.w	r3, r7, #32
 8001236:	4618      	mov	r0, r3
 8001238:	f003 f9c8 	bl	80045cc <HAL_RCC_OscConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <SystemClock_Config+0x86>
		Error_Handler();
 8001242:	f001 fa6f 	bl	8002724 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3 | RCC_CLOCKTYPE_HCLK
 8001246:	234f      	movs	r3, #79	; 0x4f
 8001248:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124a:	2303      	movs	r3, #3
 800124c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	2102      	movs	r1, #2
 8001262:	4618      	mov	r0, r3
 8001264:	f003 fd34 	bl	8004cd0 <HAL_RCC_ClockConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <SystemClock_Config+0xb2>
		Error_Handler();
 800126e:	f001 fa59 	bl	8002724 <Error_Handler>
	}
}
 8001272:	bf00      	nop
 8001274:	3768      	adds	r7, #104	; 0x68
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	58000400 	.word	0x58000400

08001280 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	if (huart == &huart2 || huart == &hlpuart1 || huart == &huart1) {
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4aa3      	ldr	r2, [pc, #652]	; (8001518 <HAL_UART_RxCpltCallback+0x298>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d008      	beq.n	80012a2 <HAL_UART_RxCpltCallback+0x22>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4aa2      	ldr	r2, [pc, #648]	; (800151c <HAL_UART_RxCpltCallback+0x29c>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d004      	beq.n	80012a2 <HAL_UART_RxCpltCallback+0x22>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4aa1      	ldr	r2, [pc, #644]	; (8001520 <HAL_UART_RxCpltCallback+0x2a0>)
 800129c:	4293      	cmp	r3, r2
 800129e:	f040 8267 	bne.w	8001770 <HAL_UART_RxCpltCallback+0x4f0>

		if (OBC_HANDSHAKE_FLAG) {
 80012a2:	4ba0      	ldr	r3, [pc, #640]	; (8001524 <HAL_UART_RxCpltCallback+0x2a4>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 8262 	beq.w	8001770 <HAL_UART_RxCpltCallback+0x4f0>

			uint8_t header = 0x00;
 80012ac:	2300      	movs	r3, #0
 80012ae:	74fb      	strb	r3, [r7, #19]

			if (OBC_UART_RX[0] == header || OBC_UART_RX[0] != 0x53) {
 80012b0:	4b9d      	ldr	r3, [pc, #628]	; (8001528 <HAL_UART_RxCpltCallback+0x2a8>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	7cfa      	ldrb	r2, [r7, #19]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d003      	beq.n	80012c2 <HAL_UART_RxCpltCallback+0x42>
 80012ba:	4b9b      	ldr	r3, [pc, #620]	; (8001528 <HAL_UART_RxCpltCallback+0x2a8>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b53      	cmp	r3, #83	; 0x53
 80012c0:	d011      	beq.n	80012e6 <HAL_UART_RxCpltCallback+0x66>

				for (int loop1 = 0; loop1 < sizeof(OBC_UART_RX); loop1++) {
 80012c2:	2300      	movs	r3, #0
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
 80012c6:	e00b      	b.n	80012e0 <HAL_UART_RxCpltCallback+0x60>
					OBC_UART_RX[loop1] = OBC_UART_RX[loop1 + 1];
 80012c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ca:	3301      	adds	r3, #1
 80012cc:	4a96      	ldr	r2, [pc, #600]	; (8001528 <HAL_UART_RxCpltCallback+0x2a8>)
 80012ce:	5cd1      	ldrb	r1, [r2, r3]
 80012d0:	4a95      	ldr	r2, [pc, #596]	; (8001528 <HAL_UART_RxCpltCallback+0x2a8>)
 80012d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d4:	4413      	add	r3, r2
 80012d6:	460a      	mov	r2, r1
 80012d8:	701a      	strb	r2, [r3, #0]
				for (int loop1 = 0; loop1 < sizeof(OBC_UART_RX); loop1++) {
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	3301      	adds	r3, #1
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
 80012e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e2:	2b54      	cmp	r3, #84	; 0x54
 80012e4:	d9f0      	bls.n	80012c8 <HAL_UART_RxCpltCallback+0x48>
				}
			}

			packet_type_true = check_packet_type(OBC_UART_RX);
 80012e6:	4890      	ldr	r0, [pc, #576]	; (8001528 <HAL_UART_RxCpltCallback+0x2a8>)
 80012e8:	f7ff fc26 	bl	8000b38 <check_packet_type>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4a8f      	ldr	r2, [pc, #572]	; (800152c <HAL_UART_RxCpltCallback+0x2ac>)
 80012f0:	6013      	str	r3, [r2, #0]

			if (packet_type_true) {
 80012f2:	4b8e      	ldr	r3, [pc, #568]	; (800152c <HAL_UART_RxCpltCallback+0x2ac>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 81ed 	beq.w	80016d6 <HAL_UART_RxCpltCallback+0x456>

				if (DIGIPEATER_STATUS == 1 && BEACON_COUNT == 0
 80012fc:	4b8c      	ldr	r3, [pc, #560]	; (8001530 <HAL_UART_RxCpltCallback+0x2b0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b01      	cmp	r3, #1
 8001302:	f040 818d 	bne.w	8001620 <HAL_UART_RxCpltCallback+0x3a0>
 8001306:	4b8b      	ldr	r3, [pc, #556]	; (8001534 <HAL_UART_RxCpltCallback+0x2b4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	f040 8188 	bne.w	8001620 <HAL_UART_RxCpltCallback+0x3a0>
						&& DIGIPEATER_RX_FLAG == 1) {
 8001310:	4b89      	ldr	r3, [pc, #548]	; (8001538 <HAL_UART_RxCpltCallback+0x2b8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b01      	cmp	r3, #1
 8001316:	f040 8183 	bne.w	8001620 <HAL_UART_RxCpltCallback+0x3a0>
					OBC_SUCCESS_DATA_RX_FLAG = 0;
 800131a:	4b88      	ldr	r3, [pc, #544]	; (800153c <HAL_UART_RxCpltCallback+0x2bc>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
//					for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
//						myDebug("%02x ", OBC_UART_RX[i]);
//					}
//					myDebug("\r\n");

					if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 8001320:	4b81      	ldr	r3, [pc, #516]	; (8001528 <HAL_UART_RxCpltCallback+0x2a8>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b53      	cmp	r3, #83	; 0x53
 8001326:	f040 813b 	bne.w	80015a0 <HAL_UART_RxCpltCallback+0x320>
 800132a:	4b7f      	ldr	r3, [pc, #508]	; (8001528 <HAL_UART_RxCpltCallback+0x2a8>)
 800132c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001330:	2b7e      	cmp	r3, #126	; 0x7e
 8001332:	f040 8135 	bne.w	80015a0 <HAL_UART_RxCpltCallback+0x320>
						myDebug(
 8001336:	4882      	ldr	r0, [pc, #520]	; (8001540 <HAL_UART_RxCpltCallback+0x2c0>)
 8001338:	f7ff fa20 	bl	800077c <myDebug>
								"--> Correct Digipeater Data received from OBC\n");
						obc_ilen = OBC_UART_RX[2];  //len of info
 800133c:	4b7a      	ldr	r3, [pc, #488]	; (8001528 <HAL_UART_RxCpltCallback+0x2a8>)
 800133e:	789a      	ldrb	r2, [r3, #2]
 8001340:	4b80      	ldr	r3, [pc, #512]	; (8001544 <HAL_UART_RxCpltCallback+0x2c4>)
 8001342:	701a      	strb	r2, [r3, #0]
						PACKET_TYPE = OBC_UART_RX[1]; //packet_type
 8001344:	4b78      	ldr	r3, [pc, #480]	; (8001528 <HAL_UART_RxCpltCallback+0x2a8>)
 8001346:	785a      	ldrb	r2, [r3, #1]
 8001348:	4b7f      	ldr	r3, [pc, #508]	; (8001548 <HAL_UART_RxCpltCallback+0x2c8>)
 800134a:	701a      	strb	r2, [r3, #0]
						DIGIPEATER_FLAG = 1;
 800134c:	4b7f      	ldr	r3, [pc, #508]	; (800154c <HAL_UART_RxCpltCallback+0x2cc>)
 800134e:	2201      	movs	r2, #1
 8001350:	601a      	str	r2, [r3, #0]

						getAX25Packet(OBC_UART_RX, obc_ilen);
 8001352:	4b7c      	ldr	r3, [pc, #496]	; (8001544 <HAL_UART_RxCpltCallback+0x2c4>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	4619      	mov	r1, r3
 8001358:	4873      	ldr	r0, [pc, #460]	; (8001528 <HAL_UART_RxCpltCallback+0x2a8>)
 800135a:	f7ff f96b 	bl	8000634 <getAX25Packet>

						tx_buffer_len = countsDataBetweenFlags(temp_tx_buffer,
 800135e:	2196      	movs	r1, #150	; 0x96
 8001360:	487b      	ldr	r0, [pc, #492]	; (8001550 <HAL_UART_RxCpltCallback+0x2d0>)
 8001362:	f7ff fca1 	bl	8000ca8 <countsDataBetweenFlags>
 8001366:	4603      	mov	r3, r0
 8001368:	4a7a      	ldr	r2, [pc, #488]	; (8001554 <HAL_UART_RxCpltCallback+0x2d4>)
 800136a:	6013      	str	r3, [r2, #0]
								sizeof(temp_tx_buffer));

//						myDebug("Digipeater Packet complete, ready to TX: 0x%x\r\n", temp_tx_buffer);
						for (int j = 0; j < tx_buffer_len; j++) {
 800136c:	2300      	movs	r3, #0
 800136e:	623b      	str	r3, [r7, #32]
 8001370:	e00b      	b.n	800138a <HAL_UART_RxCpltCallback+0x10a>
							tx_buffer[j] = temp_tx_buffer[j];
 8001372:	4a77      	ldr	r2, [pc, #476]	; (8001550 <HAL_UART_RxCpltCallback+0x2d0>)
 8001374:	6a3b      	ldr	r3, [r7, #32]
 8001376:	4413      	add	r3, r2
 8001378:	7819      	ldrb	r1, [r3, #0]
 800137a:	4a77      	ldr	r2, [pc, #476]	; (8001558 <HAL_UART_RxCpltCallback+0x2d8>)
 800137c:	6a3b      	ldr	r3, [r7, #32]
 800137e:	4413      	add	r3, r2
 8001380:	460a      	mov	r2, r1
 8001382:	701a      	strb	r2, [r3, #0]
						for (int j = 0; j < tx_buffer_len; j++) {
 8001384:	6a3b      	ldr	r3, [r7, #32]
 8001386:	3301      	adds	r3, #1
 8001388:	623b      	str	r3, [r7, #32]
 800138a:	4b72      	ldr	r3, [pc, #456]	; (8001554 <HAL_UART_RxCpltCallback+0x2d4>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6a3a      	ldr	r2, [r7, #32]
 8001390:	429a      	cmp	r2, r3
 8001392:	dbee      	blt.n	8001372 <HAL_UART_RxCpltCallback+0xf2>
						}
//						myDebug("\r\n");

//						myDebug("size of tx_buffer = %d\r\n", tx_buffer_len);

						memset(OBC_UART_RX, '\0', obc_ilen);
 8001394:	4b6b      	ldr	r3, [pc, #428]	; (8001544 <HAL_UART_RxCpltCallback+0x2c4>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	2100      	movs	r1, #0
 800139c:	4862      	ldr	r0, [pc, #392]	; (8001528 <HAL_UART_RxCpltCallback+0x2a8>)
 800139e:	f00a fba9 	bl	800baf4 <memset>
						memset(temp_tx_buffer, '\0', sizeof(temp_tx_buffer));
 80013a2:	2296      	movs	r2, #150	; 0x96
 80013a4:	2100      	movs	r1, #0
 80013a6:	486a      	ldr	r0, [pc, #424]	; (8001550 <HAL_UART_RxCpltCallback+0x2d0>)
 80013a8:	f00a fba4 	bl	800baf4 <memset>

						delay_us(500000);
 80013ac:	486b      	ldr	r0, [pc, #428]	; (800155c <HAL_UART_RxCpltCallback+0x2dc>)
 80013ae:	f7ff f9cb 	bl	8000748 <delay_us>

						pkt_params.PacketType = PACKET_TYPE_GFSK;
 80013b2:	4b6b      	ldr	r3, [pc, #428]	; (8001560 <HAL_UART_RxCpltCallback+0x2e0>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
						pkt_params.Params.Gfsk.PayloadLength = tx_buffer_len;
 80013b8:	4b66      	ldr	r3, [pc, #408]	; (8001554 <HAL_UART_RxCpltCallback+0x2d4>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4b68      	ldr	r3, [pc, #416]	; (8001560 <HAL_UART_RxCpltCallback+0x2e0>)
 80013c0:	721a      	strb	r2, [r3, #8]
						pkt_params.Params.Gfsk.PreambleLength = 8; /*Convert byte into bit*/
 80013c2:	4b67      	ldr	r3, [pc, #412]	; (8001560 <HAL_UART_RxCpltCallback+0x2e0>)
 80013c4:	2208      	movs	r2, #8
 80013c6:	805a      	strh	r2, [r3, #2]
						pkt_params.Params.Gfsk.PreambleMinDetect =
 80013c8:	4b65      	ldr	r3, [pc, #404]	; (8001560 <HAL_UART_RxCpltCallback+0x2e0>)
 80013ca:	2204      	movs	r2, #4
 80013cc:	711a      	strb	r2, [r3, #4]
								RADIO_PREAMBLE_DETECTOR_08_BITS;
						pkt_params.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80013ce:	4b64      	ldr	r3, [pc, #400]	; (8001560 <HAL_UART_RxCpltCallback+0x2e0>)
 80013d0:	2218      	movs	r2, #24
 80013d2:	715a      	strb	r2, [r3, #5]
						pkt_params.Params.Gfsk.AddrComp =
 80013d4:	4b62      	ldr	r3, [pc, #392]	; (8001560 <HAL_UART_RxCpltCallback+0x2e0>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	719a      	strb	r2, [r3, #6]
								RADIO_ADDRESSCOMP_FILT_OFF;
						pkt_params.Params.Gfsk.HeaderType =
 80013da:	4b61      	ldr	r3, [pc, #388]	; (8001560 <HAL_UART_RxCpltCallback+0x2e0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	71da      	strb	r2, [r3, #7]
								RADIO_PACKET_FIXED_LENGTH;
						pkt_params.Params.Gfsk.CrcLength =
 80013e0:	4b5f      	ldr	r3, [pc, #380]	; (8001560 <HAL_UART_RxCpltCallback+0x2e0>)
 80013e2:	22f2      	movs	r2, #242	; 0xf2
 80013e4:	725a      	strb	r2, [r3, #9]
								RADIO_CRC_2_BYTES_CCIT;
						pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80013e6:	4b5e      	ldr	r3, [pc, #376]	; (8001560 <HAL_UART_RxCpltCallback+0x2e0>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	729a      	strb	r2, [r3, #10]

						mod_params.PacketType = PACKET_TYPE_GFSK;
 80013ec:	4b5d      	ldr	r3, [pc, #372]	; (8001564 <HAL_UART_RxCpltCallback+0x2e4>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]
						mod_params.Params.Gfsk.Bandwidth = RX_BW_29300; /*Not used in TX*/
 80013f2:	4b5c      	ldr	r3, [pc, #368]	; (8001564 <HAL_UART_RxCpltCallback+0x2e4>)
 80013f4:	220d      	movs	r2, #13
 80013f6:	735a      	strb	r2, [r3, #13]
						mod_params.Params.Gfsk.BitRate = DEMO_DEFAULT_BR_1200;
 80013f8:	4b5a      	ldr	r3, [pc, #360]	; (8001564 <HAL_UART_RxCpltCallback+0x2e4>)
 80013fa:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80013fe:	605a      	str	r2, [r3, #4]
						mod_params.Params.Gfsk.Fdev = DEMO_DEFAULT_FDEV_1200;
 8001400:	4b58      	ldr	r3, [pc, #352]	; (8001564 <HAL_UART_RxCpltCallback+0x2e4>)
 8001402:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001406:	609a      	str	r2, [r3, #8]
						mod_params.Params.Gfsk.ModulationShaping =
 8001408:	4b56      	ldr	r3, [pc, #344]	; (8001564 <HAL_UART_RxCpltCallback+0x2e4>)
 800140a:	220b      	movs	r2, #11
 800140c:	731a      	strb	r2, [r3, #12]
								MOD_SHAPING_G_BT_1;

						SUBGRF_Init(DioIrqHndlr);
 800140e:	4856      	ldr	r0, [pc, #344]	; (8001568 <HAL_UART_RxCpltCallback+0x2e8>)
 8001410:	f008 fd68 	bl	8009ee4 <SUBGRF_Init>
						SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8001414:	2100      	movs	r1, #0
 8001416:	2000      	movs	r0, #0
 8001418:	f009 fbd0 	bl	800abbc <SUBGRF_SetBufferBaseAddress>
						SUBGRF_SetPayload(tx_buffer, tx_buffer_len);
 800141c:	4b4d      	ldr	r3, [pc, #308]	; (8001554 <HAL_UART_RxCpltCallback+0x2d4>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	4619      	mov	r1, r3
 8001424:	484c      	ldr	r0, [pc, #304]	; (8001558 <HAL_UART_RxCpltCallback+0x2d8>)
 8001426:	f008 fdaf 	bl	8009f88 <SUBGRF_SetPayload>
						SUBGRF_SetPacketParams(&pkt_params);
 800142a:	484d      	ldr	r0, [pc, #308]	; (8001560 <HAL_UART_RxCpltCallback+0x2e0>)
 800142c:	f009 fb28 	bl	800aa80 <SUBGRF_SetPacketParams>
						SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1,
 8001430:	4a4e      	ldr	r2, [pc, #312]	; (800156c <HAL_UART_RxCpltCallback+0x2ec>)
 8001432:	f107 0308 	add.w	r3, r7, #8
 8001436:	e892 0003 	ldmia.w	r2, {r0, r1}
 800143a:	e883 0003 	stmia.w	r3, {r0, r1}
 800143e:	f107 0308 	add.w	r3, r7, #8
 8001442:	4618      	mov	r0, r3
 8001444:	f008 fde5 	bl	800a012 <SUBGRF_SetSyncWord>
										0x00, 0x00, 0x00, 0x00, 0x00 });
						SUBGRF_SetWhiteningSeed(0x01FF);
 8001448:	f240 10ff 	movw	r0, #511	; 0x1ff
 800144c:	f008 fe30 	bl	800a0b0 <SUBGRF_SetWhiteningSeed>
						SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8001450:	4847      	ldr	r0, [pc, #284]	; (8001570 <HAL_UART_RxCpltCallback+0x2f0>)
 8001452:	f009 f909 	bl	800a668 <SUBGRF_SetRfFrequency>
						SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 8001456:	2301      	movs	r3, #1
 8001458:	2201      	movs	r2, #1
 800145a:	2100      	movs	r1, #0
 800145c:	2004      	movs	r0, #4
 800145e:	f009 f885 	bl	800a56c <SUBGRF_SetPaConfig>
						SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME); // Set to RFO_LP for low power
 8001462:	2202      	movs	r2, #2
 8001464:	210e      	movs	r1, #14
 8001466:	2001      	movs	r0, #1
 8001468:	f009 f96a 	bl	800a740 <SUBGRF_SetTxParams>
						SUBGRF_SetModulationParams(&mod_params);
 800146c:	483d      	ldr	r0, [pc, #244]	; (8001564 <HAL_UART_RxCpltCallback+0x2e4>)
 800146e:	f009 fa35 	bl	800a8dc <SUBGRF_SetModulationParams>
						SUBGRF_SetDioIrqParams(
 8001472:	2300      	movs	r3, #0
 8001474:	2200      	movs	r2, #0
 8001476:	f240 210f 	movw	r1, #527	; 0x20f
 800147a:	f240 200f 	movw	r0, #527	; 0x20f
 800147e:	f009 f897 	bl	800a5b0 <SUBGRF_SetDioIrqParams>
								IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED
										| IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT
										| IRQ_SYNCWORD_VALID, IRQ_RADIO_NONE,
								IRQ_RADIO_NONE);

						myDebug("\n########## TX Configuration: ##########\n");
 8001482:	483c      	ldr	r0, [pc, #240]	; (8001574 <HAL_UART_RxCpltCallback+0x2f4>)
 8001484:	f7ff f97a 	bl	800077c <myDebug>

						myDebug("FREQUENCY MODS: DOWNLINK FREQ: %lu Hz\r\n",
 8001488:	4939      	ldr	r1, [pc, #228]	; (8001570 <HAL_UART_RxCpltCallback+0x2f0>)
 800148a:	483b      	ldr	r0, [pc, #236]	; (8001578 <HAL_UART_RxCpltCallback+0x2f8>)
 800148c:	f7ff f976 	bl	800077c <myDebug>
						FREQ_437_MHZ);
						myDebug("Bit Rate: 	%d\n\r",
 8001490:	4b34      	ldr	r3, [pc, #208]	; (8001564 <HAL_UART_RxCpltCallback+0x2e4>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	4619      	mov	r1, r3
 8001496:	4839      	ldr	r0, [pc, #228]	; (800157c <HAL_UART_RxCpltCallback+0x2fc>)
 8001498:	f7ff f970 	bl	800077c <myDebug>
								mod_params.Params.Gfsk.BitRate);
						myDebug("Frequency Deviation: 	%d\n\r",
 800149c:	4b31      	ldr	r3, [pc, #196]	; (8001564 <HAL_UART_RxCpltCallback+0x2e4>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	4619      	mov	r1, r3
 80014a2:	4837      	ldr	r0, [pc, #220]	; (8001580 <HAL_UART_RxCpltCallback+0x300>)
 80014a4:	f7ff f96a 	bl	800077c <myDebug>
								mod_params.Params.Gfsk.Fdev);
						myDebug("RECEVING BANDWIDTH: 	%d\n\r",
								mod_params.Params.Gfsk.Bandwidth);
 80014a8:	4b2e      	ldr	r3, [pc, #184]	; (8001564 <HAL_UART_RxCpltCallback+0x2e4>)
 80014aa:	7b5b      	ldrb	r3, [r3, #13]
						myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 80014ac:	4619      	mov	r1, r3
 80014ae:	4835      	ldr	r0, [pc, #212]	; (8001584 <HAL_UART_RxCpltCallback+0x304>)
 80014b0:	f7ff f964 	bl	800077c <myDebug>
						myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 80014b4:	4b2a      	ldr	r3, [pc, #168]	; (8001560 <HAL_UART_RxCpltCallback+0x2e0>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	4833      	ldr	r0, [pc, #204]	; (8001588 <HAL_UART_RxCpltCallback+0x308>)
 80014bc:	f7ff f95e 	bl	800077c <myDebug>
						myDebug("PayloadLength 			%d\n\r",
								pkt_params.Params.Gfsk.PayloadLength);
 80014c0:	4b27      	ldr	r3, [pc, #156]	; (8001560 <HAL_UART_RxCpltCallback+0x2e0>)
 80014c2:	7a1b      	ldrb	r3, [r3, #8]
						myDebug("PayloadLength 			%d\n\r",
 80014c4:	4619      	mov	r1, r3
 80014c6:	4831      	ldr	r0, [pc, #196]	; (800158c <HAL_UART_RxCpltCallback+0x30c>)
 80014c8:	f7ff f958 	bl	800077c <myDebug>
						myDebug("PreambleLength 		%d\n\r",
								pkt_params.Params.Gfsk.PreambleLength);
 80014cc:	4b24      	ldr	r3, [pc, #144]	; (8001560 <HAL_UART_RxCpltCallback+0x2e0>)
 80014ce:	885b      	ldrh	r3, [r3, #2]
						myDebug("PreambleLength 		%d\n\r",
 80014d0:	4619      	mov	r1, r3
 80014d2:	482f      	ldr	r0, [pc, #188]	; (8001590 <HAL_UART_RxCpltCallback+0x310>)
 80014d4:	f7ff f952 	bl	800077c <myDebug>
						myDebug("PreambleMinDetect		%d\n\r",
								pkt_params.Params.Gfsk.PreambleMinDetect);
 80014d8:	4b21      	ldr	r3, [pc, #132]	; (8001560 <HAL_UART_RxCpltCallback+0x2e0>)
 80014da:	791b      	ldrb	r3, [r3, #4]
						myDebug("PreambleMinDetect		%d\n\r",
 80014dc:	4619      	mov	r1, r3
 80014de:	482d      	ldr	r0, [pc, #180]	; (8001594 <HAL_UART_RxCpltCallback+0x314>)
 80014e0:	f7ff f94c 	bl	800077c <myDebug>
						myDebug("HeaderType 			%d\n\r",
								pkt_params.Params.Gfsk.HeaderType);
 80014e4:	4b1e      	ldr	r3, [pc, #120]	; (8001560 <HAL_UART_RxCpltCallback+0x2e0>)
 80014e6:	79db      	ldrb	r3, [r3, #7]
						myDebug("HeaderType 			%d\n\r",
 80014e8:	4619      	mov	r1, r3
 80014ea:	482b      	ldr	r0, [pc, #172]	; (8001598 <HAL_UART_RxCpltCallback+0x318>)
 80014ec:	f7ff f946 	bl	800077c <myDebug>
						myDebug("__________*******************__________\r\n");
 80014f0:	482a      	ldr	r0, [pc, #168]	; (800159c <HAL_UART_RxCpltCallback+0x31c>)
 80014f2:	f7ff f943 	bl	800077c <myDebug>

						SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 80014f6:	481e      	ldr	r0, [pc, #120]	; (8001570 <HAL_UART_RxCpltCallback+0x2f0>)
 80014f8:	f009 f8b6 	bl	800a668 <SUBGRF_SetRfFrequency>
						//SUBGRF_SetSwitch(RFO_HP, RFSWITCH_TX); /*Set RF switch*/
						SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX); /*Set RF switch*/
 80014fc:	2101      	movs	r1, #1
 80014fe:	2001      	movs	r0, #1
 8001500:	f009 fcfa 	bl	800aef8 <SUBGRF_SetSwitch>
						SUBGRF_SendPayload(tx_buffer, tx_buffer_len, 0);
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <HAL_UART_RxCpltCallback+0x2d4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2200      	movs	r2, #0
 800150c:	4619      	mov	r1, r3
 800150e:	4812      	ldr	r0, [pc, #72]	; (8001558 <HAL_UART_RxCpltCallback+0x2d8>)
 8001510:	f008 fd6c 	bl	8009fec <SUBGRF_SendPayload>
					if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 8001514:	bf00      	nop
 8001516:	e11a      	b.n	800174e <HAL_UART_RxCpltCallback+0x4ce>
 8001518:	20000650 	.word	0x20000650
 800151c:	20000528 	.word	0x20000528
 8001520:	200005bc 	.word	0x200005bc
 8001524:	200004a4 	.word	0x200004a4
 8001528:	20000314 	.word	0x20000314
 800152c:	200004b8 	.word	0x200004b8
 8001530:	200004a8 	.word	0x200004a8
 8001534:	20000004 	.word	0x20000004
 8001538:	200004b4 	.word	0x200004b4
 800153c:	2000036c 	.word	0x2000036c
 8001540:	0800c7c4 	.word	0x0800c7c4
 8001544:	20000311 	.word	0x20000311
 8001548:	200004ac 	.word	0x200004ac
 800154c:	200004b0 	.word	0x200004b0
 8001550:	20000370 	.word	0x20000370
 8001554:	200004a0 	.word	0x200004a0
 8001558:	20000408 	.word	0x20000408
 800155c:	0007a120 	.word	0x0007a120
 8001560:	2000027c 	.word	0x2000027c
 8001564:	20000290 	.word	0x20000290
 8001568:	080017bd 	.word	0x080017bd
 800156c:	0800c7bc 	.word	0x0800c7bc
 8001570:	1a11d018 	.word	0x1a11d018
 8001574:	0800c768 	.word	0x0800c768
 8001578:	0800c794 	.word	0x0800c794
 800157c:	0800c684 	.word	0x0800c684
 8001580:	0800c694 	.word	0x0800c694
 8001584:	0800c6b0 	.word	0x0800c6b0
 8001588:	0800c6cc 	.word	0x0800c6cc
 800158c:	0800c6e0 	.word	0x0800c6e0
 8001590:	0800c6f8 	.word	0x0800c6f8
 8001594:	0800c710 	.word	0x0800c710
 8001598:	0800c728 	.word	0x0800c728
 800159c:	0800c73c 	.word	0x0800c73c

					} else {
						myDebug(
 80015a0:	4875      	ldr	r0, [pc, #468]	; (8001778 <HAL_UART_RxCpltCallback+0x4f8>)
 80015a2:	f7ff f8eb 	bl	800077c <myDebug>
								"*** Incorrect Digipeater Data received from OBC\n");
						if (HAL_UART_Transmit(&huart2, OBC_UART_RX, obc_plen,
 80015a6:	4b75      	ldr	r3, [pc, #468]	; (800177c <HAL_UART_RxCpltCallback+0x4fc>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80015b0:	4973      	ldr	r1, [pc, #460]	; (8001780 <HAL_UART_RxCpltCallback+0x500>)
 80015b2:	4874      	ldr	r0, [pc, #464]	; (8001784 <HAL_UART_RxCpltCallback+0x504>)
 80015b4:	f005 f84f 	bl	8006656 <HAL_UART_Transmit>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00c      	beq.n	80015d8 <HAL_UART_RxCpltCallback+0x358>
								2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, OBC_UART_RX,
 80015be:	4b6f      	ldr	r3, [pc, #444]	; (800177c <HAL_UART_RxCpltCallback+0x4fc>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80015c8:	496d      	ldr	r1, [pc, #436]	; (8001780 <HAL_UART_RxCpltCallback+0x500>)
 80015ca:	486f      	ldr	r0, [pc, #444]	; (8001788 <HAL_UART_RxCpltCallback+0x508>)
 80015cc:	f005 f843 	bl	8006656 <HAL_UART_Transmit>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f040 80bb 	bne.w	800174e <HAL_UART_RxCpltCallback+0x4ce>
										obc_plen, 2000) == HAL_OK) {
							myDebug(
 80015d8:	2155      	movs	r1, #85	; 0x55
 80015da:	486c      	ldr	r0, [pc, #432]	; (800178c <HAL_UART_RxCpltCallback+0x50c>)
 80015dc:	f7ff f8ce 	bl	800077c <myDebug>
									"*** Incorrect Digipeater Data re-transmit to OBC, Length: %d\r\n",
									sizeof(OBC_UART_RX));

							for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]
 80015e4:	e00a      	b.n	80015fc <HAL_UART_RxCpltCallback+0x37c>
								myDebug("%02x ", OBC_UART_RX[i]);
 80015e6:	4a66      	ldr	r2, [pc, #408]	; (8001780 <HAL_UART_RxCpltCallback+0x500>)
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	4413      	add	r3, r2
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	4619      	mov	r1, r3
 80015f0:	4867      	ldr	r0, [pc, #412]	; (8001790 <HAL_UART_RxCpltCallback+0x510>)
 80015f2:	f7ff f8c3 	bl	800077c <myDebug>
							for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3301      	adds	r3, #1
 80015fa:	61fb      	str	r3, [r7, #28]
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	2b54      	cmp	r3, #84	; 0x54
 8001600:	d9f1      	bls.n	80015e6 <HAL_UART_RxCpltCallback+0x366>
							}

							myDebug("\r\n");
 8001602:	4864      	ldr	r0, [pc, #400]	; (8001794 <HAL_UART_RxCpltCallback+0x514>)
 8001604:	f7ff f8ba 	bl	800077c <myDebug>

							memset(OBC_UART_RX, '\0', sizeof(OBC_UART_RX));
 8001608:	2255      	movs	r2, #85	; 0x55
 800160a:	2100      	movs	r1, #0
 800160c:	485c      	ldr	r0, [pc, #368]	; (8001780 <HAL_UART_RxCpltCallback+0x500>)
 800160e:	f00a fa71 	bl	800baf4 <memset>

							OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001612:	4b61      	ldr	r3, [pc, #388]	; (8001798 <HAL_UART_RxCpltCallback+0x518>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
							DIGIPEATER_FLAG = 0;
 8001618:	4b60      	ldr	r3, [pc, #384]	; (800179c <HAL_UART_RxCpltCallback+0x51c>)
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
					if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 800161e:	e096      	b.n	800174e <HAL_UART_RxCpltCallback+0x4ce>
//					for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
//						myDebug("%02x ", OBC_UART_RX[i]);
//					}
//					myDebug("\r\n");

					if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[(83)] == 0x7E) {
 8001620:	4b57      	ldr	r3, [pc, #348]	; (8001780 <HAL_UART_RxCpltCallback+0x500>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b53      	cmp	r3, #83	; 0x53
 8001626:	d11a      	bne.n	800165e <HAL_UART_RxCpltCallback+0x3de>
 8001628:	4b55      	ldr	r3, [pc, #340]	; (8001780 <HAL_UART_RxCpltCallback+0x500>)
 800162a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800162e:	2b7e      	cmp	r3, #126	; 0x7e
 8001630:	d115      	bne.n	800165e <HAL_UART_RxCpltCallback+0x3de>
//						myDebug("--> Correct command received from OBC\n");
						obc_ilen = OBC_UART_RX[2];  //len of info
 8001632:	4b53      	ldr	r3, [pc, #332]	; (8001780 <HAL_UART_RxCpltCallback+0x500>)
 8001634:	789a      	ldrb	r2, [r3, #2]
 8001636:	4b5a      	ldr	r3, [pc, #360]	; (80017a0 <HAL_UART_RxCpltCallback+0x520>)
 8001638:	701a      	strb	r2, [r3, #0]
						PACKET_TYPE = OBC_UART_RX[1]; //packet_type
 800163a:	4b51      	ldr	r3, [pc, #324]	; (8001780 <HAL_UART_RxCpltCallback+0x500>)
 800163c:	785a      	ldrb	r2, [r3, #1]
 800163e:	4b59      	ldr	r3, [pc, #356]	; (80017a4 <HAL_UART_RxCpltCallback+0x524>)
 8001640:	701a      	strb	r2, [r3, #0]

						if (PACKET_TYPE == 0xB1) {
 8001642:	4b58      	ldr	r3, [pc, #352]	; (80017a4 <HAL_UART_RxCpltCallback+0x524>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2bb1      	cmp	r3, #177	; 0xb1
 8001648:	d105      	bne.n	8001656 <HAL_UART_RxCpltCallback+0x3d6>
							BEACON_COUNT = 2;
 800164a:	4b57      	ldr	r3, [pc, #348]	; (80017a8 <HAL_UART_RxCpltCallback+0x528>)
 800164c:	2202      	movs	r2, #2
 800164e:	601a      	str	r2, [r3, #0]
							COUNT_BEACON = 2;
 8001650:	4b56      	ldr	r3, [pc, #344]	; (80017ac <HAL_UART_RxCpltCallback+0x52c>)
 8001652:	2202      	movs	r2, #2
 8001654:	601a      	str	r2, [r3, #0]
						}

						OBC_SUCCESS_DATA_RX_FLAG = 1;
 8001656:	4b50      	ldr	r3, [pc, #320]	; (8001798 <HAL_UART_RxCpltCallback+0x518>)
 8001658:	2201      	movs	r2, #1
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	e078      	b.n	8001750 <HAL_UART_RxCpltCallback+0x4d0>
					} else {
						myDebug("*** Incorrect command received from OBC\n");
 800165e:	4854      	ldr	r0, [pc, #336]	; (80017b0 <HAL_UART_RxCpltCallback+0x530>)
 8001660:	f7ff f88c 	bl	800077c <myDebug>
						if (HAL_UART_Transmit(&huart2, OBC_UART_RX, obc_plen,
 8001664:	4b45      	ldr	r3, [pc, #276]	; (800177c <HAL_UART_RxCpltCallback+0x4fc>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	b29a      	uxth	r2, r3
 800166a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800166e:	4944      	ldr	r1, [pc, #272]	; (8001780 <HAL_UART_RxCpltCallback+0x500>)
 8001670:	4844      	ldr	r0, [pc, #272]	; (8001784 <HAL_UART_RxCpltCallback+0x504>)
 8001672:	f004 fff0 	bl	8006656 <HAL_UART_Transmit>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00b      	beq.n	8001694 <HAL_UART_RxCpltCallback+0x414>
								2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, OBC_UART_RX,
 800167c:	4b3f      	ldr	r3, [pc, #252]	; (800177c <HAL_UART_RxCpltCallback+0x4fc>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	b29a      	uxth	r2, r3
 8001682:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001686:	493e      	ldr	r1, [pc, #248]	; (8001780 <HAL_UART_RxCpltCallback+0x500>)
 8001688:	483f      	ldr	r0, [pc, #252]	; (8001788 <HAL_UART_RxCpltCallback+0x508>)
 800168a:	f004 ffe4 	bl	8006656 <HAL_UART_Transmit>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d15d      	bne.n	8001750 <HAL_UART_RxCpltCallback+0x4d0>
										obc_plen, 2000) == HAL_OK) {
							myDebug(
 8001694:	2155      	movs	r1, #85	; 0x55
 8001696:	4847      	ldr	r0, [pc, #284]	; (80017b4 <HAL_UART_RxCpltCallback+0x534>)
 8001698:	f7ff f870 	bl	800077c <myDebug>
									"*** Incorrect command re-transmit to OBC, Length: %d\r\n",
									sizeof(OBC_UART_RX));

							for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 800169c:	2300      	movs	r3, #0
 800169e:	61bb      	str	r3, [r7, #24]
 80016a0:	e00a      	b.n	80016b8 <HAL_UART_RxCpltCallback+0x438>
								myDebug("%02x ", OBC_UART_RX[i]);
 80016a2:	4a37      	ldr	r2, [pc, #220]	; (8001780 <HAL_UART_RxCpltCallback+0x500>)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	4413      	add	r3, r2
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	4619      	mov	r1, r3
 80016ac:	4838      	ldr	r0, [pc, #224]	; (8001790 <HAL_UART_RxCpltCallback+0x510>)
 80016ae:	f7ff f865 	bl	800077c <myDebug>
							for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	3301      	adds	r3, #1
 80016b6:	61bb      	str	r3, [r7, #24]
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	2b54      	cmp	r3, #84	; 0x54
 80016bc:	d9f1      	bls.n	80016a2 <HAL_UART_RxCpltCallback+0x422>
							}

							myDebug("\r\n");
 80016be:	4835      	ldr	r0, [pc, #212]	; (8001794 <HAL_UART_RxCpltCallback+0x514>)
 80016c0:	f7ff f85c 	bl	800077c <myDebug>

							memset(OBC_UART_RX, '\0', sizeof(OBC_UART_RX));
 80016c4:	2255      	movs	r2, #85	; 0x55
 80016c6:	2100      	movs	r1, #0
 80016c8:	482d      	ldr	r0, [pc, #180]	; (8001780 <HAL_UART_RxCpltCallback+0x500>)
 80016ca:	f00a fa13 	bl	800baf4 <memset>

							OBC_SUCCESS_DATA_RX_FLAG = 0;
 80016ce:	4b32      	ldr	r3, [pc, #200]	; (8001798 <HAL_UART_RxCpltCallback+0x518>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	e03c      	b.n	8001750 <HAL_UART_RxCpltCallback+0x4d0>
						}
					}
				}
			} else {
				myDebug("*** Incorrect packet type received from OBC\n");
 80016d6:	4838      	ldr	r0, [pc, #224]	; (80017b8 <HAL_UART_RxCpltCallback+0x538>)
 80016d8:	f7ff f850 	bl	800077c <myDebug>

				if (HAL_UART_Transmit(&huart2, OBC_UART_RX, obc_plen, 2000)
 80016dc:	4b27      	ldr	r3, [pc, #156]	; (800177c <HAL_UART_RxCpltCallback+0x4fc>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80016e6:	4926      	ldr	r1, [pc, #152]	; (8001780 <HAL_UART_RxCpltCallback+0x500>)
 80016e8:	4826      	ldr	r0, [pc, #152]	; (8001784 <HAL_UART_RxCpltCallback+0x504>)
 80016ea:	f004 ffb4 	bl	8006656 <HAL_UART_Transmit>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d00b      	beq.n	800170c <HAL_UART_RxCpltCallback+0x48c>
						== HAL_OK
						|| HAL_UART_Transmit(&hlpuart1, OBC_UART_RX, obc_plen,
 80016f4:	4b21      	ldr	r3, [pc, #132]	; (800177c <HAL_UART_RxCpltCallback+0x4fc>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80016fe:	4920      	ldr	r1, [pc, #128]	; (8001780 <HAL_UART_RxCpltCallback+0x500>)
 8001700:	4821      	ldr	r0, [pc, #132]	; (8001788 <HAL_UART_RxCpltCallback+0x508>)
 8001702:	f004 ffa8 	bl	8006656 <HAL_UART_Transmit>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d121      	bne.n	8001750 <HAL_UART_RxCpltCallback+0x4d0>
								2000) == HAL_OK) {

					myDebug(
 800170c:	2155      	movs	r1, #85	; 0x55
 800170e:	4829      	ldr	r0, [pc, #164]	; (80017b4 <HAL_UART_RxCpltCallback+0x534>)
 8001710:	f7ff f834 	bl	800077c <myDebug>
							"*** Incorrect command re-transmit to OBC, Length: %d\r\n",
							sizeof(OBC_UART_RX));

					for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	e00a      	b.n	8001730 <HAL_UART_RxCpltCallback+0x4b0>
						myDebug("%02x ", OBC_UART_RX[i]);
 800171a:	4a19      	ldr	r2, [pc, #100]	; (8001780 <HAL_UART_RxCpltCallback+0x500>)
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	4413      	add	r3, r2
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	4619      	mov	r1, r3
 8001724:	481a      	ldr	r0, [pc, #104]	; (8001790 <HAL_UART_RxCpltCallback+0x510>)
 8001726:	f7ff f829 	bl	800077c <myDebug>
					for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	3301      	adds	r3, #1
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	2b54      	cmp	r3, #84	; 0x54
 8001734:	d9f1      	bls.n	800171a <HAL_UART_RxCpltCallback+0x49a>
					}

					myDebug("\r\n");
 8001736:	4817      	ldr	r0, [pc, #92]	; (8001794 <HAL_UART_RxCpltCallback+0x514>)
 8001738:	f7ff f820 	bl	800077c <myDebug>

					memset(OBC_UART_RX, '\0', sizeof(OBC_UART_RX));
 800173c:	2255      	movs	r2, #85	; 0x55
 800173e:	2100      	movs	r1, #0
 8001740:	480f      	ldr	r0, [pc, #60]	; (8001780 <HAL_UART_RxCpltCallback+0x500>)
 8001742:	f00a f9d7 	bl	800baf4 <memset>

					OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001746:	4b14      	ldr	r3, [pc, #80]	; (8001798 <HAL_UART_RxCpltCallback+0x518>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	e000      	b.n	8001750 <HAL_UART_RxCpltCallback+0x4d0>
					if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 800174e:	bf00      	nop
				}

			}

			HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 8001750:	4b0a      	ldr	r3, [pc, #40]	; (800177c <HAL_UART_RxCpltCallback+0x4fc>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	b29b      	uxth	r3, r3
 8001756:	461a      	mov	r2, r3
 8001758:	4909      	ldr	r1, [pc, #36]	; (8001780 <HAL_UART_RxCpltCallback+0x500>)
 800175a:	480a      	ldr	r0, [pc, #40]	; (8001784 <HAL_UART_RxCpltCallback+0x504>)
 800175c:	f005 f8c6 	bl	80068ec <HAL_UART_Receive_DMA>

			HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_UART_RxCpltCallback+0x4fc>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b29b      	uxth	r3, r3
 8001766:	461a      	mov	r2, r3
 8001768:	4905      	ldr	r1, [pc, #20]	; (8001780 <HAL_UART_RxCpltCallback+0x500>)
 800176a:	4807      	ldr	r0, [pc, #28]	; (8001788 <HAL_UART_RxCpltCallback+0x508>)
 800176c:	f005 f8be 	bl	80068ec <HAL_UART_Receive_DMA>
		}
	}
}
 8001770:	bf00      	nop
 8001772:	3728      	adds	r7, #40	; 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	0800c7f4 	.word	0x0800c7f4
 800177c:	20000001 	.word	0x20000001
 8001780:	20000314 	.word	0x20000314
 8001784:	20000650 	.word	0x20000650
 8001788:	20000528 	.word	0x20000528
 800178c:	0800c828 	.word	0x0800c828
 8001790:	0800c868 	.word	0x0800c868
 8001794:	0800c870 	.word	0x0800c870
 8001798:	2000036c 	.word	0x2000036c
 800179c:	200004b0 	.word	0x200004b0
 80017a0:	20000311 	.word	0x20000311
 80017a4:	200004ac 	.word	0x200004ac
 80017a8:	20000004 	.word	0x20000004
 80017ac:	20000008 	.word	0x20000008
 80017b0:	0800c874 	.word	0x0800c874
 80017b4:	0800c8a0 	.word	0x0800c8a0
 80017b8:	0800c8d8 	.word	0x0800c8d8

080017bc <DioIrqHndlr>:

void DioIrqHndlr(RadioIrqMasks_t radioIrq) {
 80017bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017c0:	b0bd      	sub	sp, #244	; 0xf4
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	4603      	mov	r3, r0
 80017c6:	84fb      	strh	r3, [r7, #38]	; 0x26
	if (radioIrq == IRQ_RX_DONE) {
 80017c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	f040 862f 	bne.w	800242e <DioIrqHndlr+0xc72>
		SUBGRF_GetPayload(rx_buffer, &rx_buffer_len, RX_BUFF_LENGTH);
 80017d0:	2264      	movs	r2, #100	; 0x64
 80017d2:	49a6      	ldr	r1, [pc, #664]	; (8001a6c <DioIrqHndlr+0x2b0>)
 80017d4:	48a6      	ldr	r0, [pc, #664]	; (8001a70 <DioIrqHndlr+0x2b4>)
 80017d6:	f008 fbe7 	bl	8009fa8 <SUBGRF_GetPayload>
		rssi_value = SUBGRF_GetRssiInst();
 80017da:	f009 fa06 	bl	800abea <SUBGRF_GetRssiInst>
 80017de:	4603      	mov	r3, r0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	4aa4      	ldr	r2, [pc, #656]	; (8001a74 <DioIrqHndlr+0x2b8>)
 80017e4:	7013      	strb	r3, [r2, #0]
		myDebug("\nGS Command Received: 0x%x\r\n");
 80017e6:	48a4      	ldr	r0, [pc, #656]	; (8001a78 <DioIrqHndlr+0x2bc>)
 80017e8:	f7fe ffc8 	bl	800077c <myDebug>

		uint8_t temp_rx_buffer_len = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
		temp_rx_buffer_len = countsDataBetweenFlags(rx_buffer, rx_buffer_len);
 80017f2:	4b9e      	ldr	r3, [pc, #632]	; (8001a6c <DioIrqHndlr+0x2b0>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	4619      	mov	r1, r3
 80017f8:	489d      	ldr	r0, [pc, #628]	; (8001a70 <DioIrqHndlr+0x2b4>)
 80017fa:	f7ff fa55 	bl	8000ca8 <countsDataBetweenFlags>
 80017fe:	4603      	mov	r3, r0
 8001800:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

		if (temp_rx_buffer_len != -1) {
 8001804:	466b      	mov	r3, sp
 8001806:	607b      	str	r3, [r7, #4]

			uint8_t temp_check_buff[temp_rx_buffer_len];
 8001808:	f897 20bf 	ldrb.w	r2, [r7, #191]	; 0xbf
 800180c:	4611      	mov	r1, r2
 800180e:	6239      	str	r1, [r7, #32]
 8001810:	460b      	mov	r3, r1
 8001812:	3b01      	subs	r3, #1
 8001814:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001818:	b2cb      	uxtb	r3, r1
 800181a:	2200      	movs	r2, #0
 800181c:	461c      	mov	r4, r3
 800181e:	4615      	mov	r5, r2
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	00eb      	lsls	r3, r5, #3
 800182a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800182e:	00e2      	lsls	r2, r4, #3
 8001830:	b2cb      	uxtb	r3, r1
 8001832:	2200      	movs	r2, #0
 8001834:	4698      	mov	r8, r3
 8001836:	4691      	mov	r9, r2
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	f04f 0300 	mov.w	r3, #0
 8001840:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001844:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001848:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800184c:	460b      	mov	r3, r1
 800184e:	3307      	adds	r3, #7
 8001850:	08db      	lsrs	r3, r3, #3
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	ebad 0d03 	sub.w	sp, sp, r3
 8001858:	466b      	mov	r3, sp
 800185a:	3300      	adds	r3, #0
 800185c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			for (int i = 0; i < temp_rx_buffer_len; i++) {
 8001860:	2300      	movs	r3, #0
 8001862:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001866:	e01a      	b.n	800189e <DioIrqHndlr+0xe2>
				temp_check_buff[i] = rx_buffer[i];
 8001868:	4a81      	ldr	r2, [pc, #516]	; (8001a70 <DioIrqHndlr+0x2b4>)
 800186a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800186e:	4413      	add	r3, r2
 8001870:	7819      	ldrb	r1, [r3, #0]
 8001872:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001876:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800187a:	4413      	add	r3, r2
 800187c:	460a      	mov	r2, r1
 800187e:	701a      	strb	r2, [r3, #0]
				myDebug("%02x ", temp_check_buff[i]);
 8001880:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001884:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001888:	4413      	add	r3, r2
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4619      	mov	r1, r3
 800188e:	487b      	ldr	r0, [pc, #492]	; (8001a7c <DioIrqHndlr+0x2c0>)
 8001890:	f7fe ff74 	bl	800077c <myDebug>
			for (int i = 0; i < temp_rx_buffer_len; i++) {
 8001894:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001898:	3301      	adds	r3, #1
 800189a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800189e:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80018a2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80018a6:	429a      	cmp	r2, r3
 80018a8:	dbde      	blt.n	8001868 <DioIrqHndlr+0xac>
			}
			myDebug("\r\n");
 80018aa:	4875      	ldr	r0, [pc, #468]	; (8001a80 <DioIrqHndlr+0x2c4>)
 80018ac:	f7fe ff66 	bl	800077c <myDebug>

			memset(rx_buffer, '\0', sizeof(rx_buffer));
 80018b0:	2264      	movs	r2, #100	; 0x64
 80018b2:	2100      	movs	r1, #0
 80018b4:	486e      	ldr	r0, [pc, #440]	; (8001a70 <DioIrqHndlr+0x2b4>)
 80018b6:	f00a f91d 	bl	800baf4 <memset>

			uint8_t crc_buff_len = temp_rx_buffer_len - 4;
 80018ba:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80018be:	3b04      	subs	r3, #4
 80018c0:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
			uint8_t crc_buff[crc_buff_len];
 80018c4:	f897 50b3 	ldrb.w	r5, [r7, #179]	; 0xb3
 80018c8:	462b      	mov	r3, r5
 80018ca:	3b01      	subs	r3, #1
 80018cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80018d0:	b2eb      	uxtb	r3, r5
 80018d2:	2200      	movs	r2, #0
 80018d4:	61bb      	str	r3, [r7, #24]
 80018d6:	61fa      	str	r2, [r7, #28]
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80018e4:	4649      	mov	r1, r9
 80018e6:	00cb      	lsls	r3, r1, #3
 80018e8:	4644      	mov	r4, r8
 80018ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018ee:	4641      	mov	r1, r8
 80018f0:	00ca      	lsls	r2, r1, #3
 80018f2:	b2eb      	uxtb	r3, r5
 80018f4:	2200      	movs	r2, #0
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	617a      	str	r2, [r7, #20]
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001906:	4649      	mov	r1, r9
 8001908:	00cb      	lsls	r3, r1, #3
 800190a:	4644      	mov	r4, r8
 800190c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001910:	4641      	mov	r1, r8
 8001912:	00ca      	lsls	r2, r1, #3
 8001914:	462b      	mov	r3, r5
 8001916:	3307      	adds	r3, #7
 8001918:	08db      	lsrs	r3, r3, #3
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	ebad 0d03 	sub.w	sp, sp, r3
 8001920:	466b      	mov	r3, sp
 8001922:	3300      	adds	r3, #0
 8001924:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

//			myDebug("\nGS Command Testing: 0x%x\r\n");

			int j = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			for (int i = 1; i <= crc_buff_len; i++) {
 800192e:	2301      	movs	r3, #1
 8001930:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001934:	e016      	b.n	8001964 <DioIrqHndlr+0x1a8>
				crc_buff[j] = temp_check_buff[i];
 8001936:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800193a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800193e:	4413      	add	r3, r2
 8001940:	7819      	ldrb	r1, [r3, #0]
 8001942:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001946:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800194a:	4413      	add	r3, r2
 800194c:	460a      	mov	r2, r1
 800194e:	701a      	strb	r2, [r3, #0]
//				myDebug("%02x ", crc_buff[j]);
				j++;
 8001950:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001954:	3301      	adds	r3, #1
 8001956:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			for (int i = 1; i <= crc_buff_len; i++) {
 800195a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800195e:	3301      	adds	r3, #1
 8001960:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001964:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8001968:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800196c:	429a      	cmp	r2, r3
 800196e:	dde2      	ble.n	8001936 <DioIrqHndlr+0x17a>
			}
			myDebug("\r\n");
 8001970:	4843      	ldr	r0, [pc, #268]	; (8001a80 <DioIrqHndlr+0x2c4>)
 8001972:	f7fe ff03 	bl	800077c <myDebug>

			uint16_t crc = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			crc = calculateCRC_CCITT_AX25(crc_buff, crc_buff_len);
 800197c:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8001980:	4619      	mov	r1, r3
 8001982:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001986:	f7fe ff75 	bl	8000874 <calculateCRC_CCITT_AX25>
 800198a:	4603      	mov	r3, r0
 800198c:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6

			uint8_t calc_crc[2];
			calc_crc[0] = (crc >> 8) & 0xFF;
 8001990:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001994:	0a1b      	lsrs	r3, r3, #8
 8001996:	b29b      	uxth	r3, r3
 8001998:	b2db      	uxtb	r3, r3
 800199a:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			calc_crc[1] = crc & 0xFF;
 800199e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95

			uint8_t msb_crc = temp_check_buff[temp_rx_buffer_len - 3];
 80019a8:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80019ac:	3b03      	subs	r3, #3
 80019ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80019b2:	5cd3      	ldrb	r3, [r2, r3]
 80019b4:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
			uint8_t lsb_crc = temp_check_buff[temp_rx_buffer_len - 2];
 80019b8:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80019bc:	3b02      	subs	r3, #2
 80019be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80019c2:	5cd3      	ldrb	r3, [r2, r3]
 80019c4:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4

			if (calc_crc[0] == msb_crc && calc_crc[1] == lsb_crc) {
 80019c8:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 80019cc:	f897 20a5 	ldrb.w	r2, [r7, #165]	; 0xa5
 80019d0:	429a      	cmp	r2, r3
 80019d2:	f040 84f3 	bne.w	80023bc <DioIrqHndlr+0xc00>
 80019d6:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80019da:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 80019de:	429a      	cmp	r2, r3
 80019e0:	f040 84ec 	bne.w	80023bc <DioIrqHndlr+0xc00>
 80019e4:	466b      	mov	r3, sp
 80019e6:	461e      	mov	r6, r3
//				myDebug("GS Command checksum correct: 0x%x\r\n");

				uint8_t gs_cmd_buff[100];
				int gs_cmd_len = bit_destuffing(crc_buff, gs_cmd_buff,
 80019e8:	f897 20b3 	ldrb.w	r2, [r7, #179]	; 0xb3
 80019ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019f0:	4619      	mov	r1, r3
 80019f2:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80019f6:	f7ff f824 	bl	8000a42 <bit_destuffing>
 80019fa:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
						crc_buff_len);
				gs_cmd_len--;
 80019fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a02:	3b01      	subs	r3, #1
 8001a04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

				uint8_t main_gs_cmd[gs_cmd_len];
 8001a08:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8001a0c:	1e63      	subs	r3, r4, #1
 8001a0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001a12:	4622      	mov	r2, r4
 8001a14:	2300      	movs	r3, #0
 8001a16:	60ba      	str	r2, [r7, #8]
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	f04f 0300 	mov.w	r3, #0
 8001a22:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001a26:	4649      	mov	r1, r9
 8001a28:	00cb      	lsls	r3, r1, #3
 8001a2a:	46c4      	mov	ip, r8
 8001a2c:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 8001a30:	4641      	mov	r1, r8
 8001a32:	00ca      	lsls	r2, r1, #3
 8001a34:	4622      	mov	r2, r4
 8001a36:	2300      	movs	r3, #0
 8001a38:	4692      	mov	sl, r2
 8001a3a:	469b      	mov	fp, r3
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	f04f 0300 	mov.w	r3, #0
 8001a44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001a48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001a4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001a50:	4623      	mov	r3, r4
 8001a52:	3307      	adds	r3, #7
 8001a54:	08db      	lsrs	r3, r3, #3
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	ebad 0d03 	sub.w	sp, sp, r3
 8001a5c:	466b      	mov	r3, sp
 8001a5e:	3300      	adds	r3, #0
 8001a60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
				for (int i = 0; i < gs_cmd_len; i++) {
 8001a64:	2300      	movs	r3, #0
 8001a66:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001a6a:	e01d      	b.n	8001aa8 <DioIrqHndlr+0x2ec>
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	200002ac 	.word	0x200002ac
 8001a74:	20000310 	.word	0x20000310
 8001a78:	0800c908 	.word	0x0800c908
 8001a7c:	0800c868 	.word	0x0800c868
 8001a80:	0800c870 	.word	0x0800c870
					main_gs_cmd[i] = gs_cmd_buff[i];
 8001a84:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001a8c:	4413      	add	r3, r2
 8001a8e:	7819      	ldrb	r1, [r3, #0]
 8001a90:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001a98:	4413      	add	r3, r2
 8001a9a:	460a      	mov	r2, r1
 8001a9c:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < gs_cmd_len; i++) {
 8001a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001aa8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001aac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	dbe7      	blt.n	8001a84 <DioIrqHndlr+0x2c8>
				}

				if (COUNT_BEACON == 1) {
 8001ab4:	4b9a      	ldr	r3, [pc, #616]	; (8001d20 <DioIrqHndlr+0x564>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	f040 8151 	bne.w	8001d60 <DioIrqHndlr+0x5a4>

					if ((main_gs_cmd[18] == 0xDF && main_gs_cmd[19] == 0xAB
 8001abe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ac2:	7c9b      	ldrb	r3, [r3, #18]
 8001ac4:	2bdf      	cmp	r3, #223	; 0xdf
 8001ac6:	d109      	bne.n	8001adc <DioIrqHndlr+0x320>
 8001ac8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001acc:	7cdb      	ldrb	r3, [r3, #19]
 8001ace:	2bab      	cmp	r3, #171	; 0xab
 8001ad0:	d104      	bne.n	8001adc <DioIrqHndlr+0x320>
							&& main_gs_cmd[20] == 0xD1) // Enable Digipeater Mission
 8001ad2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ad6:	7d1b      	ldrb	r3, [r3, #20]
 8001ad8:	2bd1      	cmp	r3, #209	; 0xd1
 8001ada:	d00e      	beq.n	8001afa <DioIrqHndlr+0x33e>
							|| (main_gs_cmd[18] == 0x53
 8001adc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ae0:	7c9b      	ldrb	r3, [r3, #18]
 8001ae2:	2b53      	cmp	r3, #83	; 0x53
 8001ae4:	d12e      	bne.n	8001b44 <DioIrqHndlr+0x388>
									&& main_gs_cmd[19] == 0x02
 8001ae6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001aea:	7cdb      	ldrb	r3, [r3, #19]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d129      	bne.n	8001b44 <DioIrqHndlr+0x388>
									&& main_gs_cmd[20] == 0x53)) { // Digipeater Packet
 8001af0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001af4:	7d1b      	ldrb	r3, [r3, #20]
 8001af6:	2b53      	cmp	r3, #83	; 0x53
 8001af8:	d124      	bne.n	8001b44 <DioIrqHndlr+0x388>

						myDebug("\n********GS Command failed: 0x%x\r\n");
 8001afa:	488a      	ldr	r0, [pc, #552]	; (8001d24 <DioIrqHndlr+0x568>)
 8001afc:	f7fe fe3e 	bl	800077c <myDebug>

						OBC_UART_RX[0] = 0x53;	//header
 8001b00:	4b89      	ldr	r3, [pc, #548]	; (8001d28 <DioIrqHndlr+0x56c>)
 8001b02:	2253      	movs	r2, #83	; 0x53
 8001b04:	701a      	strb	r2, [r3, #0]
						OBC_UART_RX[1] = 0xac;	//packet_ type
 8001b06:	4b88      	ldr	r3, [pc, #544]	; (8001d28 <DioIrqHndlr+0x56c>)
 8001b08:	22ac      	movs	r2, #172	; 0xac
 8001b0a:	705a      	strb	r2, [r3, #1]
						OBC_UART_RX[2] = 0x04;	//length of info
 8001b0c:	4b86      	ldr	r3, [pc, #536]	; (8001d28 <DioIrqHndlr+0x56c>)
 8001b0e:	2204      	movs	r2, #4
 8001b10:	709a      	strb	r2, [r3, #2]
						OBC_UART_RX[3] = 0x02;	//mcu_no
 8001b12:	4b85      	ldr	r3, [pc, #532]	; (8001d28 <DioIrqHndlr+0x56c>)
 8001b14:	2202      	movs	r2, #2
 8001b16:	70da      	strb	r2, [r3, #3]
						OBC_UART_RX[4] = 0xfc;	//false command
 8001b18:	4b83      	ldr	r3, [pc, #524]	; (8001d28 <DioIrqHndlr+0x56c>)
 8001b1a:	22fc      	movs	r2, #252	; 0xfc
 8001b1c:	711a      	strb	r2, [r3, #4]
						OBC_UART_RX[5] = 0xee;	//error prefix
 8001b1e:	4b82      	ldr	r3, [pc, #520]	; (8001d28 <DioIrqHndlr+0x56c>)
 8001b20:	22ee      	movs	r2, #238	; 0xee
 8001b22:	715a      	strb	r2, [r3, #5]
						obc_ilen = OBC_UART_RX[2];
 8001b24:	4b80      	ldr	r3, [pc, #512]	; (8001d28 <DioIrqHndlr+0x56c>)
 8001b26:	789a      	ldrb	r2, [r3, #2]
 8001b28:	4b80      	ldr	r3, [pc, #512]	; (8001d2c <DioIrqHndlr+0x570>)
 8001b2a:	701a      	strb	r2, [r3, #0]

						OBC_SUCCESS_DATA_RX_FLAG = 1;
 8001b2c:	4b80      	ldr	r3, [pc, #512]	; (8001d30 <DioIrqHndlr+0x574>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	601a      	str	r2, [r3, #0]

						memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001b32:	4623      	mov	r3, r4
 8001b34:	461a      	mov	r2, r3
 8001b36:	2100      	movs	r1, #0
 8001b38:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001b3c:	f009 ffda 	bl	800baf4 <memset>
 8001b40:	f000 bc3a 	b.w	80023b8 <DioIrqHndlr+0xbfc>

					} else if (main_gs_cmd[18] == 0xFD
 8001b44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b48:	7c9b      	ldrb	r3, [r3, #18]
 8001b4a:	2bfd      	cmp	r3, #253	; 0xfd
 8001b4c:	f040 808d 	bne.w	8001c6a <DioIrqHndlr+0x4ae>
							&& main_gs_cmd[19] == 0xBA
 8001b50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b54:	7cdb      	ldrb	r3, [r3, #19]
 8001b56:	2bba      	cmp	r3, #186	; 0xba
 8001b58:	f040 8087 	bne.w	8001c6a <DioIrqHndlr+0x4ae>
							&& main_gs_cmd[20] == 0xD0) {
 8001b5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b60:	7d1b      	ldrb	r3, [r3, #20]
 8001b62:	2bd0      	cmp	r3, #208	; 0xd0
 8001b64:	f040 8081 	bne.w	8001c6a <DioIrqHndlr+0x4ae>

						BEACON_COUNT = 2;
 8001b68:	4b72      	ldr	r3, [pc, #456]	; (8001d34 <DioIrqHndlr+0x578>)
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	601a      	str	r2, [r3, #0]
						OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001b6e:	4b70      	ldr	r3, [pc, #448]	; (8001d30 <DioIrqHndlr+0x574>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
						DIGIPEATER_STATUS = 0;
 8001b74:	4b70      	ldr	r3, [pc, #448]	; (8001d38 <DioIrqHndlr+0x57c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
						DIGIPEATER_FLAG = 0;
 8001b7a:	4b70      	ldr	r3, [pc, #448]	; (8001d3c <DioIrqHndlr+0x580>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]

						myDebug("\n-------> Digipeater MODE OFF\n\n");
 8001b80:	486f      	ldr	r0, [pc, #444]	; (8001d40 <DioIrqHndlr+0x584>)
 8001b82:	f7fe fdfb 	bl	800077c <myDebug>

						OBC_UART_RX[0] = 0x53;	//header
 8001b86:	4b68      	ldr	r3, [pc, #416]	; (8001d28 <DioIrqHndlr+0x56c>)
 8001b88:	2253      	movs	r2, #83	; 0x53
 8001b8a:	701a      	strb	r2, [r3, #0]
						OBC_UART_RX[1] = 0xac;	//packet_ type
 8001b8c:	4b66      	ldr	r3, [pc, #408]	; (8001d28 <DioIrqHndlr+0x56c>)
 8001b8e:	22ac      	movs	r2, #172	; 0xac
 8001b90:	705a      	strb	r2, [r3, #1]
						OBC_UART_RX[2] = 0x04;	//length of info
 8001b92:	4b65      	ldr	r3, [pc, #404]	; (8001d28 <DioIrqHndlr+0x56c>)
 8001b94:	2204      	movs	r2, #4
 8001b96:	709a      	strb	r2, [r3, #2]
						OBC_UART_RX[3] = 0x02;	//mcu_no
 8001b98:	4b63      	ldr	r3, [pc, #396]	; (8001d28 <DioIrqHndlr+0x56c>)
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	70da      	strb	r2, [r3, #3]
						OBC_UART_RX[4] = 0x00;	//Digipeater OFF
 8001b9e:	4b62      	ldr	r3, [pc, #392]	; (8001d28 <DioIrqHndlr+0x56c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	711a      	strb	r2, [r3, #4]
						OBC_UART_RX[5] = 0xdd;	//Digipeater prefix
 8001ba4:	4b60      	ldr	r3, [pc, #384]	; (8001d28 <DioIrqHndlr+0x56c>)
 8001ba6:	22dd      	movs	r2, #221	; 0xdd
 8001ba8:	715a      	strb	r2, [r3, #5]
						obc_ilen = OBC_UART_RX[2];
 8001baa:	4b5f      	ldr	r3, [pc, #380]	; (8001d28 <DioIrqHndlr+0x56c>)
 8001bac:	789a      	ldrb	r2, [r3, #2]
 8001bae:	4b5f      	ldr	r3, [pc, #380]	; (8001d2c <DioIrqHndlr+0x570>)
 8001bb0:	701a      	strb	r2, [r3, #0]

						myDebug("\nCommand sent to OBC, Length: %d\r\n",
 8001bb2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8001bb6:	4863      	ldr	r0, [pc, #396]	; (8001d44 <DioIrqHndlr+0x588>)
 8001bb8:	f7fe fde0 	bl	800077c <myDebug>
								gs_cmd_len);

						if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001bbc:	b2a2      	uxth	r2, r4
 8001bbe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001bc2:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001bc6:	4860      	ldr	r0, [pc, #384]	; (8001d48 <DioIrqHndlr+0x58c>)
 8001bc8:	f004 fd45 	bl	8006656 <HAL_UART_Transmit>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00a      	beq.n	8001be8 <DioIrqHndlr+0x42c>
								sizeof(main_gs_cmd), 2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8001bd2:	b2a2      	uxth	r2, r4
 8001bd4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001bd8:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001bdc:	485b      	ldr	r0, [pc, #364]	; (8001d4c <DioIrqHndlr+0x590>)
 8001bde:	f004 fd3a 	bl	8006656 <HAL_UART_Transmit>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d03c      	beq.n	8001c62 <DioIrqHndlr+0x4a6>
										sizeof(main_gs_cmd), 2000)) {

							for (int i = 0; i < gs_cmd_len; i++) {
 8001be8:	2300      	movs	r3, #0
 8001bea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001bee:	e00e      	b.n	8001c0e <DioIrqHndlr+0x452>
								myDebug("%02x ", main_gs_cmd[i]);
 8001bf0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001bf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001bf8:	4413      	add	r3, r2
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4854      	ldr	r0, [pc, #336]	; (8001d50 <DioIrqHndlr+0x594>)
 8001c00:	f7fe fdbc 	bl	800077c <myDebug>
							for (int i = 0; i < gs_cmd_len; i++) {
 8001c04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c08:	3301      	adds	r3, #1
 8001c0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001c0e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001c12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c16:	429a      	cmp	r2, r3
 8001c18:	dbea      	blt.n	8001bf0 <DioIrqHndlr+0x434>
							}

							myDebug("\r\n");
 8001c1a:	484e      	ldr	r0, [pc, #312]	; (8001d54 <DioIrqHndlr+0x598>)
 8001c1c:	f7fe fdae 	bl	800077c <myDebug>

							memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001c20:	4623      	mov	r3, r4
 8001c22:	461a      	mov	r2, r3
 8001c24:	2100      	movs	r1, #0
 8001c26:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001c2a:	f009 ff63 	bl	800baf4 <memset>
							memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001c2e:	2264      	movs	r2, #100	; 0x64
 8001c30:	2100      	movs	r1, #0
 8001c32:	4849      	ldr	r0, [pc, #292]	; (8001d58 <DioIrqHndlr+0x59c>)
 8001c34:	f009 ff5e 	bl	800baf4 <memset>
							memset(temp_check_buff, '\0',
									sizeof(temp_check_buff));
 8001c38:	6a3b      	ldr	r3, [r7, #32]
							memset(temp_check_buff, '\0',
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001c42:	f009 ff57 	bl	800baf4 <memset>
							memset(crc_buff, '\0', sizeof(crc_buff));
 8001c46:	462b      	mov	r3, r5
 8001c48:	461a      	mov	r2, r3
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001c50:	f009 ff50 	bl	800baf4 <memset>
							memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001c54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c58:	2264      	movs	r2, #100	; 0x64
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f009 ff49 	bl	800baf4 <memset>
						}

						OBC_SUCCESS_DATA_RX_FLAG = 1;
 8001c62:	4b33      	ldr	r3, [pc, #204]	; (8001d30 <DioIrqHndlr+0x574>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	e3a6      	b.n	80023b8 <DioIrqHndlr+0xbfc>

					} else {
						myDebug("\nCommand sent to OBC, Length: %d\r\n",
 8001c6a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8001c6e:	4835      	ldr	r0, [pc, #212]	; (8001d44 <DioIrqHndlr+0x588>)
 8001c70:	f7fe fd84 	bl	800077c <myDebug>
								gs_cmd_len);
						if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001c74:	b2a2      	uxth	r2, r4
 8001c76:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c7a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001c7e:	4832      	ldr	r0, [pc, #200]	; (8001d48 <DioIrqHndlr+0x58c>)
 8001c80:	f004 fce9 	bl	8006656 <HAL_UART_Transmit>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00b      	beq.n	8001ca2 <DioIrqHndlr+0x4e6>
								sizeof(main_gs_cmd), 2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8001c8a:	b2a2      	uxth	r2, r4
 8001c8c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c90:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001c94:	482d      	ldr	r0, [pc, #180]	; (8001d4c <DioIrqHndlr+0x590>)
 8001c96:	f004 fcde 	bl	8006656 <HAL_UART_Transmit>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 838b 	beq.w	80023b8 <DioIrqHndlr+0xbfc>
										sizeof(main_gs_cmd), 2000)) {

							for (int i = 0; i < gs_cmd_len; i++) {
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001ca8:	e00e      	b.n	8001cc8 <DioIrqHndlr+0x50c>
								myDebug("%02x ", main_gs_cmd[i]);
 8001caa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001cae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001cb2:	4413      	add	r3, r2
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4825      	ldr	r0, [pc, #148]	; (8001d50 <DioIrqHndlr+0x594>)
 8001cba:	f7fe fd5f 	bl	800077c <myDebug>
							for (int i = 0; i < gs_cmd_len; i++) {
 8001cbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001cc8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001ccc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	dbea      	blt.n	8001caa <DioIrqHndlr+0x4ee>
							}

							memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001cd4:	4623      	mov	r3, r4
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	2100      	movs	r1, #0
 8001cda:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001cde:	f009 ff09 	bl	800baf4 <memset>
							memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001ce2:	2264      	movs	r2, #100	; 0x64
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	481c      	ldr	r0, [pc, #112]	; (8001d58 <DioIrqHndlr+0x59c>)
 8001ce8:	f009 ff04 	bl	800baf4 <memset>
							memset(temp_check_buff, '\0',
									sizeof(temp_check_buff));
 8001cec:	6a3b      	ldr	r3, [r7, #32]
							memset(temp_check_buff, '\0',
 8001cee:	461a      	mov	r2, r3
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001cf6:	f009 fefd 	bl	800baf4 <memset>
							memset(crc_buff, '\0', sizeof(crc_buff));
 8001cfa:	462b      	mov	r3, r5
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	2100      	movs	r1, #0
 8001d00:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001d04:	f009 fef6 	bl	800baf4 <memset>
							memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001d08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d0c:	2264      	movs	r2, #100	; 0x64
 8001d0e:	2100      	movs	r1, #0
 8001d10:	4618      	mov	r0, r3
 8001d12:	f009 feef 	bl	800baf4 <memset>

							myDebug("\n\n_____OBC__RECEIVER_____\r\n");
 8001d16:	4811      	ldr	r0, [pc, #68]	; (8001d5c <DioIrqHndlr+0x5a0>)
 8001d18:	f7fe fd30 	bl	800077c <myDebug>
 8001d1c:	e34c      	b.n	80023b8 <DioIrqHndlr+0xbfc>
 8001d1e:	bf00      	nop
 8001d20:	20000008 	.word	0x20000008
 8001d24:	0800c928 	.word	0x0800c928
 8001d28:	20000314 	.word	0x20000314
 8001d2c:	20000311 	.word	0x20000311
 8001d30:	2000036c 	.word	0x2000036c
 8001d34:	20000004 	.word	0x20000004
 8001d38:	200004a8 	.word	0x200004a8
 8001d3c:	200004b0 	.word	0x200004b0
 8001d40:	0800c94c 	.word	0x0800c94c
 8001d44:	0800c96c 	.word	0x0800c96c
 8001d48:	20000650 	.word	0x20000650
 8001d4c:	20000528 	.word	0x20000528
 8001d50:	0800c868 	.word	0x0800c868
 8001d54:	0800c870 	.word	0x0800c870
 8001d58:	200002ac 	.word	0x200002ac
 8001d5c:	0800c990 	.word	0x0800c990
						}

					}
				} else if (COUNT_BEACON == 0) {
 8001d60:	4b96      	ldr	r3, [pc, #600]	; (8001fbc <DioIrqHndlr+0x800>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f040 8327 	bne.w	80023b8 <DioIrqHndlr+0xbfc>
					if (DIGIPEATER_STATUS == 1) {
 8001d6a:	4b95      	ldr	r3, [pc, #596]	; (8001fc0 <DioIrqHndlr+0x804>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	f040 8146 	bne.w	8002000 <DioIrqHndlr+0x844>
						if (main_gs_cmd[18] == 0xFD && main_gs_cmd[19] == 0xBA
 8001d74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d78:	7c9b      	ldrb	r3, [r3, #18]
 8001d7a:	2bfd      	cmp	r3, #253	; 0xfd
 8001d7c:	f040 808d 	bne.w	8001e9a <DioIrqHndlr+0x6de>
 8001d80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d84:	7cdb      	ldrb	r3, [r3, #19]
 8001d86:	2bba      	cmp	r3, #186	; 0xba
 8001d88:	f040 8087 	bne.w	8001e9a <DioIrqHndlr+0x6de>
								&& main_gs_cmd[20] == 0xD0) {
 8001d8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d90:	7d1b      	ldrb	r3, [r3, #20]
 8001d92:	2bd0      	cmp	r3, #208	; 0xd0
 8001d94:	f040 8081 	bne.w	8001e9a <DioIrqHndlr+0x6de>

							BEACON_COUNT = 2;
 8001d98:	4b8a      	ldr	r3, [pc, #552]	; (8001fc4 <DioIrqHndlr+0x808>)
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	601a      	str	r2, [r3, #0]
							OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001d9e:	4b8a      	ldr	r3, [pc, #552]	; (8001fc8 <DioIrqHndlr+0x80c>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
							DIGIPEATER_STATUS = 0;
 8001da4:	4b86      	ldr	r3, [pc, #536]	; (8001fc0 <DioIrqHndlr+0x804>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
							DIGIPEATER_FLAG = 0;
 8001daa:	4b88      	ldr	r3, [pc, #544]	; (8001fcc <DioIrqHndlr+0x810>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]

							myDebug("\n-------> Digipeater MODE OFF\n\n");
 8001db0:	4887      	ldr	r0, [pc, #540]	; (8001fd0 <DioIrqHndlr+0x814>)
 8001db2:	f7fe fce3 	bl	800077c <myDebug>

							OBC_UART_RX[0] = 0x53;	//header
 8001db6:	4b87      	ldr	r3, [pc, #540]	; (8001fd4 <DioIrqHndlr+0x818>)
 8001db8:	2253      	movs	r2, #83	; 0x53
 8001dba:	701a      	strb	r2, [r3, #0]
							OBC_UART_RX[1] = 0xac;	//packet_ type
 8001dbc:	4b85      	ldr	r3, [pc, #532]	; (8001fd4 <DioIrqHndlr+0x818>)
 8001dbe:	22ac      	movs	r2, #172	; 0xac
 8001dc0:	705a      	strb	r2, [r3, #1]
							OBC_UART_RX[2] = 0x04;	//length of info
 8001dc2:	4b84      	ldr	r3, [pc, #528]	; (8001fd4 <DioIrqHndlr+0x818>)
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	709a      	strb	r2, [r3, #2]
							OBC_UART_RX[3] = 0x02;	//mcu_no
 8001dc8:	4b82      	ldr	r3, [pc, #520]	; (8001fd4 <DioIrqHndlr+0x818>)
 8001dca:	2202      	movs	r2, #2
 8001dcc:	70da      	strb	r2, [r3, #3]
							OBC_UART_RX[4] = 0x00;	//Digipeater OFF
 8001dce:	4b81      	ldr	r3, [pc, #516]	; (8001fd4 <DioIrqHndlr+0x818>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	711a      	strb	r2, [r3, #4]
							OBC_UART_RX[5] = 0xdd;	//Digipeater prefix
 8001dd4:	4b7f      	ldr	r3, [pc, #508]	; (8001fd4 <DioIrqHndlr+0x818>)
 8001dd6:	22dd      	movs	r2, #221	; 0xdd
 8001dd8:	715a      	strb	r2, [r3, #5]
							obc_ilen = OBC_UART_RX[2];
 8001dda:	4b7e      	ldr	r3, [pc, #504]	; (8001fd4 <DioIrqHndlr+0x818>)
 8001ddc:	789a      	ldrb	r2, [r3, #2]
 8001dde:	4b7e      	ldr	r3, [pc, #504]	; (8001fd8 <DioIrqHndlr+0x81c>)
 8001de0:	701a      	strb	r2, [r3, #0]

							myDebug("\nCommand sent to OBC, Length: %d\r\n",
 8001de2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8001de6:	487d      	ldr	r0, [pc, #500]	; (8001fdc <DioIrqHndlr+0x820>)
 8001de8:	f7fe fcc8 	bl	800077c <myDebug>
									gs_cmd_len);

							if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001dec:	b2a2      	uxth	r2, r4
 8001dee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001df2:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001df6:	487a      	ldr	r0, [pc, #488]	; (8001fe0 <DioIrqHndlr+0x824>)
 8001df8:	f004 fc2d 	bl	8006656 <HAL_UART_Transmit>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00a      	beq.n	8001e18 <DioIrqHndlr+0x65c>
									sizeof(main_gs_cmd), 2000) == HAL_OK
									|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8001e02:	b2a2      	uxth	r2, r4
 8001e04:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e08:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001e0c:	4875      	ldr	r0, [pc, #468]	; (8001fe4 <DioIrqHndlr+0x828>)
 8001e0e:	f004 fc22 	bl	8006656 <HAL_UART_Transmit>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d03c      	beq.n	8001e92 <DioIrqHndlr+0x6d6>
											sizeof(main_gs_cmd), 2000)) {

								for (int i = 0; i < gs_cmd_len; i++) {
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001e1e:	e00e      	b.n	8001e3e <DioIrqHndlr+0x682>
									myDebug("%02x ", main_gs_cmd[i]);
 8001e20:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001e24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e28:	4413      	add	r3, r2
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	486e      	ldr	r0, [pc, #440]	; (8001fe8 <DioIrqHndlr+0x82c>)
 8001e30:	f7fe fca4 	bl	800077c <myDebug>
								for (int i = 0; i < gs_cmd_len; i++) {
 8001e34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e38:	3301      	adds	r3, #1
 8001e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001e3e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001e42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e46:	429a      	cmp	r2, r3
 8001e48:	dbea      	blt.n	8001e20 <DioIrqHndlr+0x664>
								}

								myDebug("\r\n");
 8001e4a:	4868      	ldr	r0, [pc, #416]	; (8001fec <DioIrqHndlr+0x830>)
 8001e4c:	f7fe fc96 	bl	800077c <myDebug>

								memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001e50:	4623      	mov	r3, r4
 8001e52:	461a      	mov	r2, r3
 8001e54:	2100      	movs	r1, #0
 8001e56:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001e5a:	f009 fe4b 	bl	800baf4 <memset>
								memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001e5e:	2264      	movs	r2, #100	; 0x64
 8001e60:	2100      	movs	r1, #0
 8001e62:	4863      	ldr	r0, [pc, #396]	; (8001ff0 <DioIrqHndlr+0x834>)
 8001e64:	f009 fe46 	bl	800baf4 <memset>
								memset(temp_check_buff, '\0',
										sizeof(temp_check_buff));
 8001e68:	6a3b      	ldr	r3, [r7, #32]
								memset(temp_check_buff, '\0',
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001e72:	f009 fe3f 	bl	800baf4 <memset>
								memset(crc_buff, '\0', sizeof(crc_buff));
 8001e76:	462b      	mov	r3, r5
 8001e78:	461a      	mov	r2, r3
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001e80:	f009 fe38 	bl	800baf4 <memset>
								memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001e84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e88:	2264      	movs	r2, #100	; 0x64
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f009 fe31 	bl	800baf4 <memset>
							}

							OBC_SUCCESS_DATA_RX_FLAG = 1;
 8001e92:	4b4d      	ldr	r3, [pc, #308]	; (8001fc8 <DioIrqHndlr+0x80c>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	e28e      	b.n	80023b8 <DioIrqHndlr+0xbfc>

						} else if (main_gs_cmd[18] == 0x53
 8001e9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e9e:	7c9b      	ldrb	r3, [r3, #18]
 8001ea0:	2b53      	cmp	r3, #83	; 0x53
 8001ea2:	d166      	bne.n	8001f72 <DioIrqHndlr+0x7b6>
								&& main_gs_cmd[19] == 0x02
 8001ea4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ea8:	7cdb      	ldrb	r3, [r3, #19]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d161      	bne.n	8001f72 <DioIrqHndlr+0x7b6>
								&& main_gs_cmd[20] == 0x53) { // if digipeater packet
 8001eae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001eb2:	7d1b      	ldrb	r3, [r3, #20]
 8001eb4:	2b53      	cmp	r3, #83	; 0x53
 8001eb6:	d15c      	bne.n	8001f72 <DioIrqHndlr+0x7b6>
							myDebug(
 8001eb8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8001ebc:	484d      	ldr	r0, [pc, #308]	; (8001ff4 <DioIrqHndlr+0x838>)
 8001ebe:	f7fe fc5d 	bl	800077c <myDebug>
									"\nDigipeater packet sent to OBC, Length: %d\r\n",
									gs_cmd_len);
							if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001ec2:	b2a2      	uxth	r2, r4
 8001ec4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001ec8:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001ecc:	4844      	ldr	r0, [pc, #272]	; (8001fe0 <DioIrqHndlr+0x824>)
 8001ece:	f004 fbc2 	bl	8006656 <HAL_UART_Transmit>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00b      	beq.n	8001ef0 <DioIrqHndlr+0x734>
									sizeof(main_gs_cmd), 2000) == HAL_OK
									|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8001ed8:	b2a2      	uxth	r2, r4
 8001eda:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001ede:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001ee2:	4840      	ldr	r0, [pc, #256]	; (8001fe4 <DioIrqHndlr+0x828>)
 8001ee4:	f004 fbb7 	bl	8006656 <HAL_UART_Transmit>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 8263 	beq.w	80023b6 <DioIrqHndlr+0xbfa>
											sizeof(main_gs_cmd), 2000)) {

								for (int i = 0; i < gs_cmd_len; i++) {
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001ef6:	e00e      	b.n	8001f16 <DioIrqHndlr+0x75a>
									myDebug("%02x ", main_gs_cmd[i]);
 8001ef8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001efc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f00:	4413      	add	r3, r2
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	4619      	mov	r1, r3
 8001f06:	4838      	ldr	r0, [pc, #224]	; (8001fe8 <DioIrqHndlr+0x82c>)
 8001f08:	f7fe fc38 	bl	800077c <myDebug>
								for (int i = 0; i < gs_cmd_len; i++) {
 8001f0c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f10:	3301      	adds	r3, #1
 8001f12:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001f16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001f1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	dbea      	blt.n	8001ef8 <DioIrqHndlr+0x73c>
								}

								myDebug("\r\n");
 8001f22:	4832      	ldr	r0, [pc, #200]	; (8001fec <DioIrqHndlr+0x830>)
 8001f24:	f7fe fc2a 	bl	800077c <myDebug>

								memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001f28:	4623      	mov	r3, r4
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001f32:	f009 fddf 	bl	800baf4 <memset>
								memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001f36:	2264      	movs	r2, #100	; 0x64
 8001f38:	2100      	movs	r1, #0
 8001f3a:	482d      	ldr	r0, [pc, #180]	; (8001ff0 <DioIrqHndlr+0x834>)
 8001f3c:	f009 fdda 	bl	800baf4 <memset>
								memset(temp_check_buff, '\0',
										sizeof(temp_check_buff));
 8001f40:	6a3b      	ldr	r3, [r7, #32]
								memset(temp_check_buff, '\0',
 8001f42:	461a      	mov	r2, r3
 8001f44:	2100      	movs	r1, #0
 8001f46:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001f4a:	f009 fdd3 	bl	800baf4 <memset>
								memset(crc_buff, '\0', sizeof(crc_buff));
 8001f4e:	462b      	mov	r3, r5
 8001f50:	461a      	mov	r2, r3
 8001f52:	2100      	movs	r1, #0
 8001f54:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001f58:	f009 fdcc 	bl	800baf4 <memset>
								memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001f5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f60:	2264      	movs	r2, #100	; 0x64
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f009 fdc5 	bl	800baf4 <memset>

								myDebug(
 8001f6a:	4823      	ldr	r0, [pc, #140]	; (8001ff8 <DioIrqHndlr+0x83c>)
 8001f6c:	f7fe fc06 	bl	800077c <myDebug>
							if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001f70:	e221      	b.n	80023b6 <DioIrqHndlr+0xbfa>
										"\n\n_____DIGIPEATER_OBC__RECEIVER_____\r\n");
							}
						} else {
							myDebug("\n********GS Command failed: 0x%x\r\n");
 8001f72:	4822      	ldr	r0, [pc, #136]	; (8001ffc <DioIrqHndlr+0x840>)
 8001f74:	f7fe fc02 	bl	800077c <myDebug>

							OBC_UART_RX[0] = 0x53;	//header
 8001f78:	4b16      	ldr	r3, [pc, #88]	; (8001fd4 <DioIrqHndlr+0x818>)
 8001f7a:	2253      	movs	r2, #83	; 0x53
 8001f7c:	701a      	strb	r2, [r3, #0]
							OBC_UART_RX[1] = 0xac;	//packet_ type
 8001f7e:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <DioIrqHndlr+0x818>)
 8001f80:	22ac      	movs	r2, #172	; 0xac
 8001f82:	705a      	strb	r2, [r3, #1]
							OBC_UART_RX[2] = 0x04;	//length of info
 8001f84:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <DioIrqHndlr+0x818>)
 8001f86:	2204      	movs	r2, #4
 8001f88:	709a      	strb	r2, [r3, #2]
							OBC_UART_RX[3] = 0x02;	//mcu_no
 8001f8a:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <DioIrqHndlr+0x818>)
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	70da      	strb	r2, [r3, #3]
							OBC_UART_RX[4] = 0xfc;	//false command
 8001f90:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <DioIrqHndlr+0x818>)
 8001f92:	22fc      	movs	r2, #252	; 0xfc
 8001f94:	711a      	strb	r2, [r3, #4]
							OBC_UART_RX[5] = 0xee;	//error prefix
 8001f96:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <DioIrqHndlr+0x818>)
 8001f98:	22ee      	movs	r2, #238	; 0xee
 8001f9a:	715a      	strb	r2, [r3, #5]
							obc_ilen = OBC_UART_RX[2];
 8001f9c:	4b0d      	ldr	r3, [pc, #52]	; (8001fd4 <DioIrqHndlr+0x818>)
 8001f9e:	789a      	ldrb	r2, [r3, #2]
 8001fa0:	4b0d      	ldr	r3, [pc, #52]	; (8001fd8 <DioIrqHndlr+0x81c>)
 8001fa2:	701a      	strb	r2, [r3, #0]

							OBC_SUCCESS_DATA_RX_FLAG = 1;
 8001fa4:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <DioIrqHndlr+0x80c>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]

							memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001faa:	4623      	mov	r3, r4
 8001fac:	461a      	mov	r2, r3
 8001fae:	2100      	movs	r1, #0
 8001fb0:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001fb4:	f009 fd9e 	bl	800baf4 <memset>
 8001fb8:	e1fe      	b.n	80023b8 <DioIrqHndlr+0xbfc>
 8001fba:	bf00      	nop
 8001fbc:	20000008 	.word	0x20000008
 8001fc0:	200004a8 	.word	0x200004a8
 8001fc4:	20000004 	.word	0x20000004
 8001fc8:	2000036c 	.word	0x2000036c
 8001fcc:	200004b0 	.word	0x200004b0
 8001fd0:	0800c94c 	.word	0x0800c94c
 8001fd4:	20000314 	.word	0x20000314
 8001fd8:	20000311 	.word	0x20000311
 8001fdc:	0800c96c 	.word	0x0800c96c
 8001fe0:	20000650 	.word	0x20000650
 8001fe4:	20000528 	.word	0x20000528
 8001fe8:	0800c868 	.word	0x0800c868
 8001fec:	0800c870 	.word	0x0800c870
 8001ff0:	200002ac 	.word	0x200002ac
 8001ff4:	0800c9ac 	.word	0x0800c9ac
 8001ff8:	0800c9dc 	.word	0x0800c9dc
 8001ffc:	0800c928 	.word	0x0800c928

						}
					} else if (DIGIPEATER_STATUS == 0) {
 8002000:	4bbe      	ldr	r3, [pc, #760]	; (80022fc <DioIrqHndlr+0xb40>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	f040 81d7 	bne.w	80023b8 <DioIrqHndlr+0xbfc>
						if (main_gs_cmd[18] == 0xFD && main_gs_cmd[19] == 0xBA
 800200a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800200e:	7c9b      	ldrb	r3, [r3, #18]
 8002010:	2bfd      	cmp	r3, #253	; 0xfd
 8002012:	f040 808d 	bne.w	8002130 <DioIrqHndlr+0x974>
 8002016:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800201a:	7cdb      	ldrb	r3, [r3, #19]
 800201c:	2bba      	cmp	r3, #186	; 0xba
 800201e:	f040 8087 	bne.w	8002130 <DioIrqHndlr+0x974>
								&& main_gs_cmd[20] == 0xD0) {
 8002022:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002026:	7d1b      	ldrb	r3, [r3, #20]
 8002028:	2bd0      	cmp	r3, #208	; 0xd0
 800202a:	f040 8081 	bne.w	8002130 <DioIrqHndlr+0x974>

							BEACON_COUNT = 2;
 800202e:	4bb4      	ldr	r3, [pc, #720]	; (8002300 <DioIrqHndlr+0xb44>)
 8002030:	2202      	movs	r2, #2
 8002032:	601a      	str	r2, [r3, #0]
							OBC_SUCCESS_DATA_RX_FLAG = 0;
 8002034:	4bb3      	ldr	r3, [pc, #716]	; (8002304 <DioIrqHndlr+0xb48>)
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
							DIGIPEATER_STATUS = 0;
 800203a:	4bb0      	ldr	r3, [pc, #704]	; (80022fc <DioIrqHndlr+0xb40>)
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
							DIGIPEATER_FLAG = 0;
 8002040:	4bb1      	ldr	r3, [pc, #708]	; (8002308 <DioIrqHndlr+0xb4c>)
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]

							myDebug("\n-------> Digipeater MODE OFF\n\n");
 8002046:	48b1      	ldr	r0, [pc, #708]	; (800230c <DioIrqHndlr+0xb50>)
 8002048:	f7fe fb98 	bl	800077c <myDebug>

							OBC_UART_RX[0] = 0x53;	//header
 800204c:	4bb0      	ldr	r3, [pc, #704]	; (8002310 <DioIrqHndlr+0xb54>)
 800204e:	2253      	movs	r2, #83	; 0x53
 8002050:	701a      	strb	r2, [r3, #0]
							OBC_UART_RX[1] = 0xac;	//packet_ type
 8002052:	4baf      	ldr	r3, [pc, #700]	; (8002310 <DioIrqHndlr+0xb54>)
 8002054:	22ac      	movs	r2, #172	; 0xac
 8002056:	705a      	strb	r2, [r3, #1]
							OBC_UART_RX[2] = 0x04;	//length of info
 8002058:	4bad      	ldr	r3, [pc, #692]	; (8002310 <DioIrqHndlr+0xb54>)
 800205a:	2204      	movs	r2, #4
 800205c:	709a      	strb	r2, [r3, #2]
							OBC_UART_RX[3] = 0x02;	//mcu_no
 800205e:	4bac      	ldr	r3, [pc, #688]	; (8002310 <DioIrqHndlr+0xb54>)
 8002060:	2202      	movs	r2, #2
 8002062:	70da      	strb	r2, [r3, #3]
							OBC_UART_RX[4] = 0x00;	//Digipeater OFF
 8002064:	4baa      	ldr	r3, [pc, #680]	; (8002310 <DioIrqHndlr+0xb54>)
 8002066:	2200      	movs	r2, #0
 8002068:	711a      	strb	r2, [r3, #4]
							OBC_UART_RX[5] = 0xdd;	//Digipeater prefix
 800206a:	4ba9      	ldr	r3, [pc, #676]	; (8002310 <DioIrqHndlr+0xb54>)
 800206c:	22dd      	movs	r2, #221	; 0xdd
 800206e:	715a      	strb	r2, [r3, #5]
							obc_ilen = OBC_UART_RX[2];
 8002070:	4ba7      	ldr	r3, [pc, #668]	; (8002310 <DioIrqHndlr+0xb54>)
 8002072:	789a      	ldrb	r2, [r3, #2]
 8002074:	4ba7      	ldr	r3, [pc, #668]	; (8002314 <DioIrqHndlr+0xb58>)
 8002076:	701a      	strb	r2, [r3, #0]

							myDebug("\nCommand sent to OBC, Length: %d\r\n",
 8002078:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800207c:	48a6      	ldr	r0, [pc, #664]	; (8002318 <DioIrqHndlr+0xb5c>)
 800207e:	f7fe fb7d 	bl	800077c <myDebug>
									gs_cmd_len);

							if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8002082:	b2a2      	uxth	r2, r4
 8002084:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002088:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800208c:	48a3      	ldr	r0, [pc, #652]	; (800231c <DioIrqHndlr+0xb60>)
 800208e:	f004 fae2 	bl	8006656 <HAL_UART_Transmit>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00a      	beq.n	80020ae <DioIrqHndlr+0x8f2>
									sizeof(main_gs_cmd), 2000) == HAL_OK
									|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8002098:	b2a2      	uxth	r2, r4
 800209a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800209e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80020a2:	489f      	ldr	r0, [pc, #636]	; (8002320 <DioIrqHndlr+0xb64>)
 80020a4:	f004 fad7 	bl	8006656 <HAL_UART_Transmit>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d03c      	beq.n	8002128 <DioIrqHndlr+0x96c>
											sizeof(main_gs_cmd), 2000)) {

								for (int i = 0; i < gs_cmd_len; i++) {
 80020ae:	2300      	movs	r3, #0
 80020b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80020b4:	e00e      	b.n	80020d4 <DioIrqHndlr+0x918>
									myDebug("%02x ", main_gs_cmd[i]);
 80020b6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80020ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80020be:	4413      	add	r3, r2
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	4619      	mov	r1, r3
 80020c4:	4897      	ldr	r0, [pc, #604]	; (8002324 <DioIrqHndlr+0xb68>)
 80020c6:	f7fe fb59 	bl	800077c <myDebug>
								for (int i = 0; i < gs_cmd_len; i++) {
 80020ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80020ce:	3301      	adds	r3, #1
 80020d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80020d4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80020d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80020dc:	429a      	cmp	r2, r3
 80020de:	dbea      	blt.n	80020b6 <DioIrqHndlr+0x8fa>
								}
								myDebug("\r\n");
 80020e0:	4891      	ldr	r0, [pc, #580]	; (8002328 <DioIrqHndlr+0xb6c>)
 80020e2:	f7fe fb4b 	bl	800077c <myDebug>

								memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 80020e6:	4623      	mov	r3, r4
 80020e8:	461a      	mov	r2, r3
 80020ea:	2100      	movs	r1, #0
 80020ec:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80020f0:	f009 fd00 	bl	800baf4 <memset>
								memset(rx_buffer, '\0', sizeof(rx_buffer));
 80020f4:	2264      	movs	r2, #100	; 0x64
 80020f6:	2100      	movs	r1, #0
 80020f8:	488c      	ldr	r0, [pc, #560]	; (800232c <DioIrqHndlr+0xb70>)
 80020fa:	f009 fcfb 	bl	800baf4 <memset>
								memset(temp_check_buff, '\0',
										sizeof(temp_check_buff));
 80020fe:	6a3b      	ldr	r3, [r7, #32]
								memset(temp_check_buff, '\0',
 8002100:	461a      	mov	r2, r3
 8002102:	2100      	movs	r1, #0
 8002104:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8002108:	f009 fcf4 	bl	800baf4 <memset>
								memset(crc_buff, '\0', sizeof(crc_buff));
 800210c:	462b      	mov	r3, r5
 800210e:	461a      	mov	r2, r3
 8002110:	2100      	movs	r1, #0
 8002112:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8002116:	f009 fced 	bl	800baf4 <memset>
								memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 800211a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800211e:	2264      	movs	r2, #100	; 0x64
 8002120:	2100      	movs	r1, #0
 8002122:	4618      	mov	r0, r3
 8002124:	f009 fce6 	bl	800baf4 <memset>
							}

							OBC_SUCCESS_DATA_RX_FLAG = 1;
 8002128:	4b76      	ldr	r3, [pc, #472]	; (8002304 <DioIrqHndlr+0xb48>)
 800212a:	2201      	movs	r2, #1
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	e143      	b.n	80023b8 <DioIrqHndlr+0xbfc>

						} else if (main_gs_cmd[18] == 0xDF
 8002130:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002134:	7c9b      	ldrb	r3, [r3, #18]
 8002136:	2bdf      	cmp	r3, #223	; 0xdf
 8002138:	f040 808d 	bne.w	8002256 <DioIrqHndlr+0xa9a>
								&& main_gs_cmd[19] == 0xAB
 800213c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002140:	7cdb      	ldrb	r3, [r3, #19]
 8002142:	2bab      	cmp	r3, #171	; 0xab
 8002144:	f040 8087 	bne.w	8002256 <DioIrqHndlr+0xa9a>
								&& main_gs_cmd[20] == 0xD1) {
 8002148:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800214c:	7d1b      	ldrb	r3, [r3, #20]
 800214e:	2bd1      	cmp	r3, #209	; 0xd1
 8002150:	f040 8081 	bne.w	8002256 <DioIrqHndlr+0xa9a>

							BEACON_COUNT = 0;
 8002154:	4b6a      	ldr	r3, [pc, #424]	; (8002300 <DioIrqHndlr+0xb44>)
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
							OBC_SUCCESS_DATA_RX_FLAG = 0;
 800215a:	4b6a      	ldr	r3, [pc, #424]	; (8002304 <DioIrqHndlr+0xb48>)
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
							DIGIPEATER_STATUS = 1;
 8002160:	4b66      	ldr	r3, [pc, #408]	; (80022fc <DioIrqHndlr+0xb40>)
 8002162:	2201      	movs	r2, #1
 8002164:	601a      	str	r2, [r3, #0]
							DIGIPEATER_RX_FLAG = 1;
 8002166:	4b72      	ldr	r3, [pc, #456]	; (8002330 <DioIrqHndlr+0xb74>)
 8002168:	2201      	movs	r2, #1
 800216a:	601a      	str	r2, [r3, #0]

							myDebug("\n-------> Digipeater MODE ON\n\n");
 800216c:	4871      	ldr	r0, [pc, #452]	; (8002334 <DioIrqHndlr+0xb78>)
 800216e:	f7fe fb05 	bl	800077c <myDebug>

							OBC_UART_RX[0] = 0x53;	//header
 8002172:	4b67      	ldr	r3, [pc, #412]	; (8002310 <DioIrqHndlr+0xb54>)
 8002174:	2253      	movs	r2, #83	; 0x53
 8002176:	701a      	strb	r2, [r3, #0]
							OBC_UART_RX[1] = 0xac;	//packet_ type
 8002178:	4b65      	ldr	r3, [pc, #404]	; (8002310 <DioIrqHndlr+0xb54>)
 800217a:	22ac      	movs	r2, #172	; 0xac
 800217c:	705a      	strb	r2, [r3, #1]
							OBC_UART_RX[2] = 0x04;	//length of info
 800217e:	4b64      	ldr	r3, [pc, #400]	; (8002310 <DioIrqHndlr+0xb54>)
 8002180:	2204      	movs	r2, #4
 8002182:	709a      	strb	r2, [r3, #2]
							OBC_UART_RX[3] = 0x02;	//mcu_no
 8002184:	4b62      	ldr	r3, [pc, #392]	; (8002310 <DioIrqHndlr+0xb54>)
 8002186:	2202      	movs	r2, #2
 8002188:	70da      	strb	r2, [r3, #3]
							OBC_UART_RX[4] = 0x01;	//Digipeater ON
 800218a:	4b61      	ldr	r3, [pc, #388]	; (8002310 <DioIrqHndlr+0xb54>)
 800218c:	2201      	movs	r2, #1
 800218e:	711a      	strb	r2, [r3, #4]
							OBC_UART_RX[5] = 0xdd;	//Digipeater prefix
 8002190:	4b5f      	ldr	r3, [pc, #380]	; (8002310 <DioIrqHndlr+0xb54>)
 8002192:	22dd      	movs	r2, #221	; 0xdd
 8002194:	715a      	strb	r2, [r3, #5]
							obc_ilen = OBC_UART_RX[2];
 8002196:	4b5e      	ldr	r3, [pc, #376]	; (8002310 <DioIrqHndlr+0xb54>)
 8002198:	789a      	ldrb	r2, [r3, #2]
 800219a:	4b5e      	ldr	r3, [pc, #376]	; (8002314 <DioIrqHndlr+0xb58>)
 800219c:	701a      	strb	r2, [r3, #0]

							myDebug("\nCommand sent to OBC, Length: %d\r\n",
 800219e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80021a2:	485d      	ldr	r0, [pc, #372]	; (8002318 <DioIrqHndlr+0xb5c>)
 80021a4:	f7fe faea 	bl	800077c <myDebug>
									gs_cmd_len);

							if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 80021a8:	b2a2      	uxth	r2, r4
 80021aa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80021ae:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80021b2:	485a      	ldr	r0, [pc, #360]	; (800231c <DioIrqHndlr+0xb60>)
 80021b4:	f004 fa4f 	bl	8006656 <HAL_UART_Transmit>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <DioIrqHndlr+0xa18>
									sizeof(main_gs_cmd), 2000) == HAL_OK
									|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 80021be:	b2a2      	uxth	r2, r4
 80021c0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80021c4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80021c8:	4855      	ldr	r0, [pc, #340]	; (8002320 <DioIrqHndlr+0xb64>)
 80021ca:	f004 fa44 	bl	8006656 <HAL_UART_Transmit>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d03c      	beq.n	800224e <DioIrqHndlr+0xa92>
											sizeof(main_gs_cmd), 2000)) {

								for (int i = 0; i < gs_cmd_len; i++) {
 80021d4:	2300      	movs	r3, #0
 80021d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80021da:	e00e      	b.n	80021fa <DioIrqHndlr+0xa3e>
									myDebug("%02x ", main_gs_cmd[i]);
 80021dc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80021e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80021e4:	4413      	add	r3, r2
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	4619      	mov	r1, r3
 80021ea:	484e      	ldr	r0, [pc, #312]	; (8002324 <DioIrqHndlr+0xb68>)
 80021ec:	f7fe fac6 	bl	800077c <myDebug>
								for (int i = 0; i < gs_cmd_len; i++) {
 80021f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80021f4:	3301      	adds	r3, #1
 80021f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80021fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80021fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002202:	429a      	cmp	r2, r3
 8002204:	dbea      	blt.n	80021dc <DioIrqHndlr+0xa20>
								}

								myDebug("\r\n");
 8002206:	4848      	ldr	r0, [pc, #288]	; (8002328 <DioIrqHndlr+0xb6c>)
 8002208:	f7fe fab8 	bl	800077c <myDebug>

								memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 800220c:	4623      	mov	r3, r4
 800220e:	461a      	mov	r2, r3
 8002210:	2100      	movs	r1, #0
 8002212:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002216:	f009 fc6d 	bl	800baf4 <memset>
								memset(rx_buffer, '\0', sizeof(rx_buffer));
 800221a:	2264      	movs	r2, #100	; 0x64
 800221c:	2100      	movs	r1, #0
 800221e:	4843      	ldr	r0, [pc, #268]	; (800232c <DioIrqHndlr+0xb70>)
 8002220:	f009 fc68 	bl	800baf4 <memset>
								memset(temp_check_buff, '\0',
										sizeof(temp_check_buff));
 8002224:	6a3b      	ldr	r3, [r7, #32]
								memset(temp_check_buff, '\0',
 8002226:	461a      	mov	r2, r3
 8002228:	2100      	movs	r1, #0
 800222a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800222e:	f009 fc61 	bl	800baf4 <memset>
								memset(crc_buff, '\0', sizeof(crc_buff));
 8002232:	462b      	mov	r3, r5
 8002234:	461a      	mov	r2, r3
 8002236:	2100      	movs	r1, #0
 8002238:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800223c:	f009 fc5a 	bl	800baf4 <memset>
								memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8002240:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002244:	2264      	movs	r2, #100	; 0x64
 8002246:	2100      	movs	r1, #0
 8002248:	4618      	mov	r0, r3
 800224a:	f009 fc53 	bl	800baf4 <memset>
							}

							OBC_SUCCESS_DATA_RX_FLAG = 1;
 800224e:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <DioIrqHndlr+0xb48>)
 8002250:	2201      	movs	r2, #1
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	e0b0      	b.n	80023b8 <DioIrqHndlr+0xbfc>

						} else if (main_gs_cmd[18] == 0x53
 8002256:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800225a:	7c9b      	ldrb	r3, [r3, #18]
 800225c:	2b53      	cmp	r3, #83	; 0x53
 800225e:	d12d      	bne.n	80022bc <DioIrqHndlr+0xb00>
								&& main_gs_cmd[19] == 0x02
 8002260:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002264:	7cdb      	ldrb	r3, [r3, #19]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d128      	bne.n	80022bc <DioIrqHndlr+0xb00>
								&& main_gs_cmd[20] == 0x53) { // Digipeater Packet
 800226a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800226e:	7d1b      	ldrb	r3, [r3, #20]
 8002270:	2b53      	cmp	r3, #83	; 0x53
 8002272:	d123      	bne.n	80022bc <DioIrqHndlr+0xb00>

							myDebug("\n********GS Command failed: 0x%x\r\n");
 8002274:	4830      	ldr	r0, [pc, #192]	; (8002338 <DioIrqHndlr+0xb7c>)
 8002276:	f7fe fa81 	bl	800077c <myDebug>

							OBC_UART_RX[0] = 0x53;	//header
 800227a:	4b25      	ldr	r3, [pc, #148]	; (8002310 <DioIrqHndlr+0xb54>)
 800227c:	2253      	movs	r2, #83	; 0x53
 800227e:	701a      	strb	r2, [r3, #0]
							OBC_UART_RX[1] = 0xac;	//packet_ type
 8002280:	4b23      	ldr	r3, [pc, #140]	; (8002310 <DioIrqHndlr+0xb54>)
 8002282:	22ac      	movs	r2, #172	; 0xac
 8002284:	705a      	strb	r2, [r3, #1]
							OBC_UART_RX[2] = 0x04;	//length of info
 8002286:	4b22      	ldr	r3, [pc, #136]	; (8002310 <DioIrqHndlr+0xb54>)
 8002288:	2204      	movs	r2, #4
 800228a:	709a      	strb	r2, [r3, #2]
							OBC_UART_RX[3] = 0x02;	//mcu_no
 800228c:	4b20      	ldr	r3, [pc, #128]	; (8002310 <DioIrqHndlr+0xb54>)
 800228e:	2202      	movs	r2, #2
 8002290:	70da      	strb	r2, [r3, #3]
							OBC_UART_RX[4] = 0xfc;	//false command
 8002292:	4b1f      	ldr	r3, [pc, #124]	; (8002310 <DioIrqHndlr+0xb54>)
 8002294:	22fc      	movs	r2, #252	; 0xfc
 8002296:	711a      	strb	r2, [r3, #4]
							OBC_UART_RX[5] = 0xee;	//error prefix
 8002298:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <DioIrqHndlr+0xb54>)
 800229a:	22ee      	movs	r2, #238	; 0xee
 800229c:	715a      	strb	r2, [r3, #5]
							obc_ilen = OBC_UART_RX[2];
 800229e:	4b1c      	ldr	r3, [pc, #112]	; (8002310 <DioIrqHndlr+0xb54>)
 80022a0:	789a      	ldrb	r2, [r3, #2]
 80022a2:	4b1c      	ldr	r3, [pc, #112]	; (8002314 <DioIrqHndlr+0xb58>)
 80022a4:	701a      	strb	r2, [r3, #0]

							OBC_SUCCESS_DATA_RX_FLAG = 1;
 80022a6:	4b17      	ldr	r3, [pc, #92]	; (8002304 <DioIrqHndlr+0xb48>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	601a      	str	r2, [r3, #0]

							memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 80022ac:	4623      	mov	r3, r4
 80022ae:	461a      	mov	r2, r3
 80022b0:	2100      	movs	r1, #0
 80022b2:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80022b6:	f009 fc1d 	bl	800baf4 <memset>
 80022ba:	e07d      	b.n	80023b8 <DioIrqHndlr+0xbfc>

						} else {
							myDebug("\nCommand sent to OBC, Length: %d\r\n",
 80022bc:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80022c0:	4815      	ldr	r0, [pc, #84]	; (8002318 <DioIrqHndlr+0xb5c>)
 80022c2:	f7fe fa5b 	bl	800077c <myDebug>
									gs_cmd_len);

							if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 80022c6:	b2a2      	uxth	r2, r4
 80022c8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80022cc:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80022d0:	4812      	ldr	r0, [pc, #72]	; (800231c <DioIrqHndlr+0xb60>)
 80022d2:	f004 f9c0 	bl	8006656 <HAL_UART_Transmit>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00a      	beq.n	80022f2 <DioIrqHndlr+0xb36>
									sizeof(main_gs_cmd), 2000) == HAL_OK
									|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 80022dc:	b2a2      	uxth	r2, r4
 80022de:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80022e2:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80022e6:	480e      	ldr	r0, [pc, #56]	; (8002320 <DioIrqHndlr+0xb64>)
 80022e8:	f004 f9b5 	bl	8006656 <HAL_UART_Transmit>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d062      	beq.n	80023b8 <DioIrqHndlr+0xbfc>
											sizeof(main_gs_cmd), 2000)) {

								for (int i = 0; i < gs_cmd_len; i++) {
 80022f2:	2300      	movs	r3, #0
 80022f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80022f8:	e02f      	b.n	800235a <DioIrqHndlr+0xb9e>
 80022fa:	bf00      	nop
 80022fc:	200004a8 	.word	0x200004a8
 8002300:	20000004 	.word	0x20000004
 8002304:	2000036c 	.word	0x2000036c
 8002308:	200004b0 	.word	0x200004b0
 800230c:	0800c94c 	.word	0x0800c94c
 8002310:	20000314 	.word	0x20000314
 8002314:	20000311 	.word	0x20000311
 8002318:	0800c96c 	.word	0x0800c96c
 800231c:	20000650 	.word	0x20000650
 8002320:	20000528 	.word	0x20000528
 8002324:	0800c868 	.word	0x0800c868
 8002328:	0800c870 	.word	0x0800c870
 800232c:	200002ac 	.word	0x200002ac
 8002330:	200004b4 	.word	0x200004b4
 8002334:	0800ca04 	.word	0x0800ca04
 8002338:	0800c928 	.word	0x0800c928
									myDebug("%02x ", main_gs_cmd[i]);
 800233c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002340:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002344:	4413      	add	r3, r2
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	4619      	mov	r1, r3
 800234a:	486a      	ldr	r0, [pc, #424]	; (80024f4 <DioIrqHndlr+0xd38>)
 800234c:	f7fe fa16 	bl	800077c <myDebug>
								for (int i = 0; i < gs_cmd_len; i++) {
 8002350:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002354:	3301      	adds	r3, #1
 8002356:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800235a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800235e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002362:	429a      	cmp	r2, r3
 8002364:	dbea      	blt.n	800233c <DioIrqHndlr+0xb80>
								}

								myDebug("\r\n");
 8002366:	4864      	ldr	r0, [pc, #400]	; (80024f8 <DioIrqHndlr+0xd3c>)
 8002368:	f7fe fa08 	bl	800077c <myDebug>

								memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 800236c:	4623      	mov	r3, r4
 800236e:	461a      	mov	r2, r3
 8002370:	2100      	movs	r1, #0
 8002372:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002376:	f009 fbbd 	bl	800baf4 <memset>
								memset(rx_buffer, '\0', sizeof(rx_buffer));
 800237a:	2264      	movs	r2, #100	; 0x64
 800237c:	2100      	movs	r1, #0
 800237e:	485f      	ldr	r0, [pc, #380]	; (80024fc <DioIrqHndlr+0xd40>)
 8002380:	f009 fbb8 	bl	800baf4 <memset>
								memset(temp_check_buff, '\0',
										sizeof(temp_check_buff));
 8002384:	6a3b      	ldr	r3, [r7, #32]
								memset(temp_check_buff, '\0',
 8002386:	461a      	mov	r2, r3
 8002388:	2100      	movs	r1, #0
 800238a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800238e:	f009 fbb1 	bl	800baf4 <memset>
								memset(crc_buff, '\0', sizeof(crc_buff));
 8002392:	462b      	mov	r3, r5
 8002394:	461a      	mov	r2, r3
 8002396:	2100      	movs	r1, #0
 8002398:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800239c:	f009 fbaa 	bl	800baf4 <memset>
								memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 80023a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023a4:	2264      	movs	r2, #100	; 0x64
 80023a6:	2100      	movs	r1, #0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f009 fba3 	bl	800baf4 <memset>

								myDebug("\n\n_____OBC__RECEIVER_____\r\n");
 80023ae:	4854      	ldr	r0, [pc, #336]	; (8002500 <DioIrqHndlr+0xd44>)
 80023b0:	f7fe f9e4 	bl	800077c <myDebug>
 80023b4:	e000      	b.n	80023b8 <DioIrqHndlr+0xbfc>
							if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 80023b6:	bf00      	nop
 80023b8:	46b5      	mov	sp, r6
			if (calc_crc[0] == msb_crc && calc_crc[1] == lsb_crc) {
 80023ba:	e01b      	b.n	80023f4 <DioIrqHndlr+0xc38>

						}
					}
				}
			} else {
				myDebug("\n********GS Command checksum incorrect: 0x%x\r\n");
 80023bc:	4851      	ldr	r0, [pc, #324]	; (8002504 <DioIrqHndlr+0xd48>)
 80023be:	f7fe f9dd 	bl	800077c <myDebug>

				OBC_UART_RX[0] = 0x53;	//header
 80023c2:	4b51      	ldr	r3, [pc, #324]	; (8002508 <DioIrqHndlr+0xd4c>)
 80023c4:	2253      	movs	r2, #83	; 0x53
 80023c6:	701a      	strb	r2, [r3, #0]
				OBC_UART_RX[1] = 0xac;	//packet_ type
 80023c8:	4b4f      	ldr	r3, [pc, #316]	; (8002508 <DioIrqHndlr+0xd4c>)
 80023ca:	22ac      	movs	r2, #172	; 0xac
 80023cc:	705a      	strb	r2, [r3, #1]
				OBC_UART_RX[2] = 0x04;	//length of info
 80023ce:	4b4e      	ldr	r3, [pc, #312]	; (8002508 <DioIrqHndlr+0xd4c>)
 80023d0:	2204      	movs	r2, #4
 80023d2:	709a      	strb	r2, [r3, #2]
				OBC_UART_RX[3] = 0x02;	//mcu_no
 80023d4:	4b4c      	ldr	r3, [pc, #304]	; (8002508 <DioIrqHndlr+0xd4c>)
 80023d6:	2202      	movs	r2, #2
 80023d8:	70da      	strb	r2, [r3, #3]
				OBC_UART_RX[4] = 0x01;	//checksum_error
 80023da:	4b4b      	ldr	r3, [pc, #300]	; (8002508 <DioIrqHndlr+0xd4c>)
 80023dc:	2201      	movs	r2, #1
 80023de:	711a      	strb	r2, [r3, #4]
				OBC_UART_RX[5] = 0xee;	//error prefix
 80023e0:	4b49      	ldr	r3, [pc, #292]	; (8002508 <DioIrqHndlr+0xd4c>)
 80023e2:	22ee      	movs	r2, #238	; 0xee
 80023e4:	715a      	strb	r2, [r3, #5]
				obc_ilen = OBC_UART_RX[2];
 80023e6:	4b48      	ldr	r3, [pc, #288]	; (8002508 <DioIrqHndlr+0xd4c>)
 80023e8:	789a      	ldrb	r2, [r3, #2]
 80023ea:	4b48      	ldr	r3, [pc, #288]	; (800250c <DioIrqHndlr+0xd50>)
 80023ec:	701a      	strb	r2, [r3, #0]

				OBC_SUCCESS_DATA_RX_FLAG = 1;
 80023ee:	4b48      	ldr	r3, [pc, #288]	; (8002510 <DioIrqHndlr+0xd54>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	f8d7 d004 	ldr.w	sp, [r7, #4]
			obc_ilen = OBC_UART_RX[2];

			OBC_SUCCESS_DATA_RX_FLAG = 1;
		}

		SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 80023f8:	4846      	ldr	r0, [pc, #280]	; (8002514 <DioIrqHndlr+0xd58>)
 80023fa:	f008 f935 	bl	800a668 <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 80023fe:	2100      	movs	r1, #0
 8002400:	2001      	movs	r0, #1
 8002402:	f008 fd79 	bl	800aef8 <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 8002406:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800240a:	f007 ff59 	bl	800a2c0 <SUBGRF_SetRxBoosted>

		HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 800240e:	4b42      	ldr	r3, [pc, #264]	; (8002518 <DioIrqHndlr+0xd5c>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	b29b      	uxth	r3, r3
 8002414:	461a      	mov	r2, r3
 8002416:	493c      	ldr	r1, [pc, #240]	; (8002508 <DioIrqHndlr+0xd4c>)
 8002418:	4840      	ldr	r0, [pc, #256]	; (800251c <DioIrqHndlr+0xd60>)
 800241a:	f004 fa67 	bl	80068ec <HAL_UART_Receive_DMA>

		HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 800241e:	4b3e      	ldr	r3, [pc, #248]	; (8002518 <DioIrqHndlr+0xd5c>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	b29b      	uxth	r3, r3
 8002424:	461a      	mov	r2, r3
 8002426:	4938      	ldr	r1, [pc, #224]	; (8002508 <DioIrqHndlr+0xd4c>)
 8002428:	483d      	ldr	r0, [pc, #244]	; (8002520 <DioIrqHndlr+0xd64>)
 800242a:	f004 fa5f 	bl	80068ec <HAL_UART_Receive_DMA>
	}

	if (radioIrq == IRQ_TX_DONE) {
 800242e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002430:	2b01      	cmp	r3, #1
 8002432:	f040 8145 	bne.w	80026c0 <DioIrqHndlr+0xf04>

		OBC_SUCCESS_DATA_RX_FLAG = 0;
 8002436:	4b36      	ldr	r3, [pc, #216]	; (8002510 <DioIrqHndlr+0xd54>)
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]

		myDebug("\nSatellite Data Transmitted Successful, Length: %d\r\n",
 800243c:	4b39      	ldr	r3, [pc, #228]	; (8002524 <DioIrqHndlr+0xd68>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4619      	mov	r1, r3
 8002442:	4839      	ldr	r0, [pc, #228]	; (8002528 <DioIrqHndlr+0xd6c>)
 8002444:	f7fe f99a 	bl	800077c <myDebug>
				tx_buffer_len);
		for (int i = 0; i < tx_buffer_len; i++) {
 8002448:	2300      	movs	r3, #0
 800244a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800244e:	e00d      	b.n	800246c <DioIrqHndlr+0xcb0>
			myDebug("%02x ", tx_buffer[i]);
 8002450:	4a36      	ldr	r2, [pc, #216]	; (800252c <DioIrqHndlr+0xd70>)
 8002452:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002456:	4413      	add	r3, r2
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	4619      	mov	r1, r3
 800245c:	4825      	ldr	r0, [pc, #148]	; (80024f4 <DioIrqHndlr+0xd38>)
 800245e:	f7fe f98d 	bl	800077c <myDebug>
		for (int i = 0; i < tx_buffer_len; i++) {
 8002462:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002466:	3301      	adds	r3, #1
 8002468:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800246c:	4b2d      	ldr	r3, [pc, #180]	; (8002524 <DioIrqHndlr+0xd68>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002474:	429a      	cmp	r2, r3
 8002476:	dbeb      	blt.n	8002450 <DioIrqHndlr+0xc94>
		}
		myDebug("\r\n");
 8002478:	481f      	ldr	r0, [pc, #124]	; (80024f8 <DioIrqHndlr+0xd3c>)
 800247a:	f7fe f97f 	bl	800077c <myDebug>

		memset(tx_buffer, '\0', sizeof(tx_buffer));
 800247e:	2296      	movs	r2, #150	; 0x96
 8002480:	2100      	movs	r1, #0
 8002482:	482a      	ldr	r0, [pc, #168]	; (800252c <DioIrqHndlr+0xd70>)
 8002484:	f009 fb36 	bl	800baf4 <memset>

		if (PACKET_TYPE == 0xB1 || PACKET_TYPE == 0xB2) {
 8002488:	4b29      	ldr	r3, [pc, #164]	; (8002530 <DioIrqHndlr+0xd74>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2bb1      	cmp	r3, #177	; 0xb1
 800248e:	d003      	beq.n	8002498 <DioIrqHndlr+0xcdc>
 8002490:	4b27      	ldr	r3, [pc, #156]	; (8002530 <DioIrqHndlr+0xd74>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2bb2      	cmp	r3, #178	; 0xb2
 8002496:	d10c      	bne.n	80024b2 <DioIrqHndlr+0xcf6>
			BEACON_COUNT--;
 8002498:	4b26      	ldr	r3, [pc, #152]	; (8002534 <DioIrqHndlr+0xd78>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	3b01      	subs	r3, #1
 800249e:	4a25      	ldr	r2, [pc, #148]	; (8002534 <DioIrqHndlr+0xd78>)
 80024a0:	6013      	str	r3, [r2, #0]
			COUNT_BEACON--;
 80024a2:	4b25      	ldr	r3, [pc, #148]	; (8002538 <DioIrqHndlr+0xd7c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	4a23      	ldr	r2, [pc, #140]	; (8002538 <DioIrqHndlr+0xd7c>)
 80024aa:	6013      	str	r3, [r2, #0]
			PACKET_TYPE = 0;
 80024ac:	4b20      	ldr	r3, [pc, #128]	; (8002530 <DioIrqHndlr+0xd74>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	701a      	strb	r2, [r3, #0]
		}

		if (DIGIPEATER_FLAG) {
 80024b2:	4b22      	ldr	r3, [pc, #136]	; (800253c <DioIrqHndlr+0xd80>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00e      	beq.n	80024d8 <DioIrqHndlr+0xd1c>
			BEACON_COUNT = 2;
 80024ba:	4b1e      	ldr	r3, [pc, #120]	; (8002534 <DioIrqHndlr+0xd78>)
 80024bc:	2202      	movs	r2, #2
 80024be:	601a      	str	r2, [r3, #0]
			OBC_SUCCESS_DATA_RX_FLAG = 0;
 80024c0:	4b13      	ldr	r3, [pc, #76]	; (8002510 <DioIrqHndlr+0xd54>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
			DIGIPEATER_STATUS = 0;
 80024c6:	4b1e      	ldr	r3, [pc, #120]	; (8002540 <DioIrqHndlr+0xd84>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
			DIGIPEATER_FLAG = 0;
 80024cc:	4b1b      	ldr	r3, [pc, #108]	; (800253c <DioIrqHndlr+0xd80>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
			DIGIPEATER_RX_FLAG = 0;
 80024d2:	4b1c      	ldr	r3, [pc, #112]	; (8002544 <DioIrqHndlr+0xd88>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
		}

		if (BEACON_COUNT == 0) {
 80024d8:	4b16      	ldr	r3, [pc, #88]	; (8002534 <DioIrqHndlr+0xd78>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d135      	bne.n	800254c <DioIrqHndlr+0xd90>
			OBC_SUCCESS_DATA_RX_FLAG = 0;
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <DioIrqHndlr+0xd54>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
			DIGIPEATER_STATUS = 1;
 80024e6:	4b16      	ldr	r3, [pc, #88]	; (8002540 <DioIrqHndlr+0xd84>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	601a      	str	r2, [r3, #0]
			myDebug("\n########## Digipeater Mode Configuration: ##########\n");
 80024ec:	4816      	ldr	r0, [pc, #88]	; (8002548 <DioIrqHndlr+0xd8c>)
 80024ee:	f7fe f945 	bl	800077c <myDebug>
 80024f2:	e02e      	b.n	8002552 <DioIrqHndlr+0xd96>
 80024f4:	0800c868 	.word	0x0800c868
 80024f8:	0800c870 	.word	0x0800c870
 80024fc:	200002ac 	.word	0x200002ac
 8002500:	0800c990 	.word	0x0800c990
 8002504:	0800ca24 	.word	0x0800ca24
 8002508:	20000314 	.word	0x20000314
 800250c:	20000311 	.word	0x20000311
 8002510:	2000036c 	.word	0x2000036c
 8002514:	19f25968 	.word	0x19f25968
 8002518:	20000001 	.word	0x20000001
 800251c:	20000650 	.word	0x20000650
 8002520:	20000528 	.word	0x20000528
 8002524:	200004a0 	.word	0x200004a0
 8002528:	0800ca54 	.word	0x0800ca54
 800252c:	20000408 	.word	0x20000408
 8002530:	200004ac 	.word	0x200004ac
 8002534:	20000004 	.word	0x20000004
 8002538:	20000008 	.word	0x20000008
 800253c:	200004b0 	.word	0x200004b0
 8002540:	200004a8 	.word	0x200004a8
 8002544:	200004b4 	.word	0x200004b4
 8002548:	0800ca8c 	.word	0x0800ca8c
		} else {
			DIGIPEATER_STATUS = 0;
 800254c:	4b5f      	ldr	r3, [pc, #380]	; (80026cc <DioIrqHndlr+0xf10>)
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
		}

		delay_us(500000);
 8002552:	485f      	ldr	r0, [pc, #380]	; (80026d0 <DioIrqHndlr+0xf14>)
 8002554:	f7fe f8f8 	bl	8000748 <delay_us>

		pkt_params.PacketType = PACKET_TYPE_GFSK;
 8002558:	4b5e      	ldr	r3, [pc, #376]	; (80026d4 <DioIrqHndlr+0xf18>)
 800255a:	2200      	movs	r2, #0
 800255c:	701a      	strb	r2, [r3, #0]
		pkt_params.Params.Gfsk.PayloadLength = RX_BUFF_LENGTH;
 800255e:	4b5d      	ldr	r3, [pc, #372]	; (80026d4 <DioIrqHndlr+0xf18>)
 8002560:	2264      	movs	r2, #100	; 0x64
 8002562:	721a      	strb	r2, [r3, #8]
		pkt_params.Params.Gfsk.PreambleLength = 8; /*Convert byte into bit*/
 8002564:	4b5b      	ldr	r3, [pc, #364]	; (80026d4 <DioIrqHndlr+0xf18>)
 8002566:	2208      	movs	r2, #8
 8002568:	805a      	strh	r2, [r3, #2]
		pkt_params.Params.Gfsk.PreambleMinDetect =
 800256a:	4b5a      	ldr	r3, [pc, #360]	; (80026d4 <DioIrqHndlr+0xf18>)
 800256c:	2204      	movs	r2, #4
 800256e:	711a      	strb	r2, [r3, #4]
				RADIO_PREAMBLE_DETECTOR_08_BITS;
		pkt_params.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8002570:	4b58      	ldr	r3, [pc, #352]	; (80026d4 <DioIrqHndlr+0xf18>)
 8002572:	2218      	movs	r2, #24
 8002574:	715a      	strb	r2, [r3, #5]
		pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8002576:	4b57      	ldr	r3, [pc, #348]	; (80026d4 <DioIrqHndlr+0xf18>)
 8002578:	2200      	movs	r2, #0
 800257a:	719a      	strb	r2, [r3, #6]
		pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 800257c:	4b55      	ldr	r3, [pc, #340]	; (80026d4 <DioIrqHndlr+0xf18>)
 800257e:	2200      	movs	r2, #0
 8002580:	71da      	strb	r2, [r3, #7]
		pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8002582:	4b54      	ldr	r3, [pc, #336]	; (80026d4 <DioIrqHndlr+0xf18>)
 8002584:	22f2      	movs	r2, #242	; 0xf2
 8002586:	725a      	strb	r2, [r3, #9]
		pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8002588:	4b52      	ldr	r3, [pc, #328]	; (80026d4 <DioIrqHndlr+0xf18>)
 800258a:	2201      	movs	r2, #1
 800258c:	729a      	strb	r2, [r3, #10]

		mod_params.PacketType = PACKET_TYPE_GFSK;
 800258e:	4b52      	ldr	r3, [pc, #328]	; (80026d8 <DioIrqHndlr+0xf1c>)
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]
		mod_params.Params.Gfsk.Bandwidth = RX_BW_29300; /*Not used in TX*/
 8002594:	4b50      	ldr	r3, [pc, #320]	; (80026d8 <DioIrqHndlr+0xf1c>)
 8002596:	220d      	movs	r2, #13
 8002598:	735a      	strb	r2, [r3, #13]
		mod_params.Params.Gfsk.BitRate = DEMO_DEFAULT_BR_1200;
 800259a:	4b4f      	ldr	r3, [pc, #316]	; (80026d8 <DioIrqHndlr+0xf1c>)
 800259c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80025a0:	605a      	str	r2, [r3, #4]
		mod_params.Params.Gfsk.Fdev = DEMO_DEFAULT_FDEV_1200;
 80025a2:	4b4d      	ldr	r3, [pc, #308]	; (80026d8 <DioIrqHndlr+0xf1c>)
 80025a4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80025a8:	609a      	str	r2, [r3, #8]
		mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80025aa:	4b4b      	ldr	r3, [pc, #300]	; (80026d8 <DioIrqHndlr+0xf1c>)
 80025ac:	220b      	movs	r2, #11
 80025ae:	731a      	strb	r2, [r3, #12]

		SUBGRF_Init(DioIrqHndlr);
 80025b0:	484a      	ldr	r0, [pc, #296]	; (80026dc <DioIrqHndlr+0xf20>)
 80025b2:	f007 fc97 	bl	8009ee4 <SUBGRF_Init>
		SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 80025b6:	2100      	movs	r1, #0
 80025b8:	2000      	movs	r0, #0
 80025ba:	f008 faff 	bl	800abbc <SUBGRF_SetBufferBaseAddress>
		SUBGRF_SetPacketParams(&pkt_params);
 80025be:	4845      	ldr	r0, [pc, #276]	; (80026d4 <DioIrqHndlr+0xf18>)
 80025c0:	f008 fa5e 	bl	800aa80 <SUBGRF_SetPacketParams>
		SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00,
 80025c4:	4a46      	ldr	r2, [pc, #280]	; (80026e0 <DioIrqHndlr+0xf24>)
 80025c6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80025ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025ce:	e883 0003 	stmia.w	r3, {r0, r1}
 80025d2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80025d6:	4618      	mov	r0, r3
 80025d8:	f007 fd1b 	bl	800a012 <SUBGRF_SetSyncWord>
						0x00, 0x00 });
		SUBGRF_SetWhiteningSeed(0x01FF);
 80025dc:	f240 10ff 	movw	r0, #511	; 0x1ff
 80025e0:	f007 fd66 	bl	800a0b0 <SUBGRF_SetWhiteningSeed>
		SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 80025e4:	483f      	ldr	r0, [pc, #252]	; (80026e4 <DioIrqHndlr+0xf28>)
 80025e6:	f008 f83f 	bl	800a668 <SUBGRF_SetRfFrequency>
		SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 80025ea:	2301      	movs	r3, #1
 80025ec:	2201      	movs	r2, #1
 80025ee:	2100      	movs	r1, #0
 80025f0:	2004      	movs	r0, #4
 80025f2:	f007 ffbb 	bl	800a56c <SUBGRF_SetPaConfig>
		SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME); // Set to RFO_LP for low power
 80025f6:	2202      	movs	r2, #2
 80025f8:	210e      	movs	r1, #14
 80025fa:	2001      	movs	r0, #1
 80025fc:	f008 f8a0 	bl	800a740 <SUBGRF_SetTxParams>
		SUBGRF_SetModulationParams(&mod_params);
 8002600:	4835      	ldr	r0, [pc, #212]	; (80026d8 <DioIrqHndlr+0xf1c>)
 8002602:	f008 f96b 	bl	800a8dc <SUBGRF_SetModulationParams>
		SUBGRF_SetDioIrqParams(
 8002606:	2300      	movs	r3, #0
 8002608:	2200      	movs	r2, #0
 800260a:	f240 210f 	movw	r1, #527	; 0x20f
 800260e:	f240 200f 	movw	r0, #527	; 0x20f
 8002612:	f007 ffcd 	bl	800a5b0 <SUBGRF_SetDioIrqParams>
						| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
				IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
						| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
				IRQ_RADIO_NONE, IRQ_RADIO_NONE);

		myDebug("\n########## RX Configuration: ##########\n");
 8002616:	4834      	ldr	r0, [pc, #208]	; (80026e8 <DioIrqHndlr+0xf2c>)
 8002618:	f7fe f8b0 	bl	800077c <myDebug>

		myDebug("FREQUENCY MODS: UPLINK FREQ: %lu Hz\r\n", FREQ_435_MHZ);
 800261c:	4931      	ldr	r1, [pc, #196]	; (80026e4 <DioIrqHndlr+0xf28>)
 800261e:	4833      	ldr	r0, [pc, #204]	; (80026ec <DioIrqHndlr+0xf30>)
 8002620:	f7fe f8ac 	bl	800077c <myDebug>
		myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 8002624:	4b2c      	ldr	r3, [pc, #176]	; (80026d8 <DioIrqHndlr+0xf1c>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	4619      	mov	r1, r3
 800262a:	4831      	ldr	r0, [pc, #196]	; (80026f0 <DioIrqHndlr+0xf34>)
 800262c:	f7fe f8a6 	bl	800077c <myDebug>
		myDebug("Frequency Deviation: 	%d\n\r", mod_params.Params.Gfsk.Fdev);
 8002630:	4b29      	ldr	r3, [pc, #164]	; (80026d8 <DioIrqHndlr+0xf1c>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	4619      	mov	r1, r3
 8002636:	482f      	ldr	r0, [pc, #188]	; (80026f4 <DioIrqHndlr+0xf38>)
 8002638:	f7fe f8a0 	bl	800077c <myDebug>
		myDebug("RECEVING BANDWIDTH: 	%d\n\r",
				mod_params.Params.Gfsk.Bandwidth);
 800263c:	4b26      	ldr	r3, [pc, #152]	; (80026d8 <DioIrqHndlr+0xf1c>)
 800263e:	7b5b      	ldrb	r3, [r3, #13]
		myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 8002640:	4619      	mov	r1, r3
 8002642:	482d      	ldr	r0, [pc, #180]	; (80026f8 <DioIrqHndlr+0xf3c>)
 8002644:	f7fe f89a 	bl	800077c <myDebug>
		myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8002648:	4b22      	ldr	r3, [pc, #136]	; (80026d4 <DioIrqHndlr+0xf18>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	4619      	mov	r1, r3
 800264e:	482b      	ldr	r0, [pc, #172]	; (80026fc <DioIrqHndlr+0xf40>)
 8002650:	f7fe f894 	bl	800077c <myDebug>
		myDebug("PayloadLength 			%d\n\r",
				pkt_params.Params.Gfsk.PayloadLength);
 8002654:	4b1f      	ldr	r3, [pc, #124]	; (80026d4 <DioIrqHndlr+0xf18>)
 8002656:	7a1b      	ldrb	r3, [r3, #8]
		myDebug("PayloadLength 			%d\n\r",
 8002658:	4619      	mov	r1, r3
 800265a:	4829      	ldr	r0, [pc, #164]	; (8002700 <DioIrqHndlr+0xf44>)
 800265c:	f7fe f88e 	bl	800077c <myDebug>
		myDebug("PreambleLength 		%d\n\r",
				pkt_params.Params.Gfsk.PreambleLength);
 8002660:	4b1c      	ldr	r3, [pc, #112]	; (80026d4 <DioIrqHndlr+0xf18>)
 8002662:	885b      	ldrh	r3, [r3, #2]
		myDebug("PreambleLength 		%d\n\r",
 8002664:	4619      	mov	r1, r3
 8002666:	4827      	ldr	r0, [pc, #156]	; (8002704 <DioIrqHndlr+0xf48>)
 8002668:	f7fe f888 	bl	800077c <myDebug>
		myDebug("PreambleMinDetect		%d\n\r",
				pkt_params.Params.Gfsk.PreambleMinDetect);
 800266c:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <DioIrqHndlr+0xf18>)
 800266e:	791b      	ldrb	r3, [r3, #4]
		myDebug("PreambleMinDetect		%d\n\r",
 8002670:	4619      	mov	r1, r3
 8002672:	4825      	ldr	r0, [pc, #148]	; (8002708 <DioIrqHndlr+0xf4c>)
 8002674:	f7fe f882 	bl	800077c <myDebug>
		myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 8002678:	4b16      	ldr	r3, [pc, #88]	; (80026d4 <DioIrqHndlr+0xf18>)
 800267a:	79db      	ldrb	r3, [r3, #7]
 800267c:	4619      	mov	r1, r3
 800267e:	4823      	ldr	r0, [pc, #140]	; (800270c <DioIrqHndlr+0xf50>)
 8002680:	f7fe f87c 	bl	800077c <myDebug>
		myDebug("__________*******************__________\r\n");
 8002684:	4822      	ldr	r0, [pc, #136]	; (8002710 <DioIrqHndlr+0xf54>)
 8002686:	f7fe f879 	bl	800077c <myDebug>

		SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 800268a:	4816      	ldr	r0, [pc, #88]	; (80026e4 <DioIrqHndlr+0xf28>)
 800268c:	f007 ffec 	bl	800a668 <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 8002690:	2100      	movs	r1, #0
 8002692:	2001      	movs	r0, #1
 8002694:	f008 fc30 	bl	800aef8 <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 8002698:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800269c:	f007 fe10 	bl	800a2c0 <SUBGRF_SetRxBoosted>

		HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 80026a0:	4b1c      	ldr	r3, [pc, #112]	; (8002714 <DioIrqHndlr+0xf58>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	461a      	mov	r2, r3
 80026a8:	491b      	ldr	r1, [pc, #108]	; (8002718 <DioIrqHndlr+0xf5c>)
 80026aa:	481c      	ldr	r0, [pc, #112]	; (800271c <DioIrqHndlr+0xf60>)
 80026ac:	f004 f91e 	bl	80068ec <HAL_UART_Receive_DMA>

		HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 80026b0:	4b18      	ldr	r3, [pc, #96]	; (8002714 <DioIrqHndlr+0xf58>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	461a      	mov	r2, r3
 80026b8:	4917      	ldr	r1, [pc, #92]	; (8002718 <DioIrqHndlr+0xf5c>)
 80026ba:	4819      	ldr	r0, [pc, #100]	; (8002720 <DioIrqHndlr+0xf64>)
 80026bc:	f004 f916 	bl	80068ec <HAL_UART_Receive_DMA>

	}

}
 80026c0:	bf00      	nop
 80026c2:	37f4      	adds	r7, #244	; 0xf4
 80026c4:	46bd      	mov	sp, r7
 80026c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026ca:	bf00      	nop
 80026cc:	200004a8 	.word	0x200004a8
 80026d0:	0007a120 	.word	0x0007a120
 80026d4:	2000027c 	.word	0x2000027c
 80026d8:	20000290 	.word	0x20000290
 80026dc:	080017bd 	.word	0x080017bd
 80026e0:	0800c7bc 	.word	0x0800c7bc
 80026e4:	19f25968 	.word	0x19f25968
 80026e8:	0800c630 	.word	0x0800c630
 80026ec:	0800c65c 	.word	0x0800c65c
 80026f0:	0800c684 	.word	0x0800c684
 80026f4:	0800c694 	.word	0x0800c694
 80026f8:	0800c6b0 	.word	0x0800c6b0
 80026fc:	0800c6cc 	.word	0x0800c6cc
 8002700:	0800c6e0 	.word	0x0800c6e0
 8002704:	0800c6f8 	.word	0x0800c6f8
 8002708:	0800c710 	.word	0x0800c710
 800270c:	0800c728 	.word	0x0800c728
 8002710:	0800c73c 	.word	0x0800c73c
 8002714:	20000001 	.word	0x20000001
 8002718:	20000314 	.word	0x20000314
 800271c:	20000650 	.word	0x20000650
 8002720:	20000528 	.word	0x20000528

08002724 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002728:	b672      	cpsid	i
}
 800272a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800272c:	e7fe      	b.n	800272c <Error_Handler+0x8>
	...

08002730 <WAIT_FOR_HANDSHAKE>:
#define ACK_LENGTH	(7)

extern uint8_t OBC_HANDSHAKE_FLAG;
uint8_t MainCMDHs[ACK_LENGTH];

void WAIT_FOR_HANDSHAKE() {
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0

	memset(MainCMDHs, '\0', ACK_LENGTH);
 8002736:	2207      	movs	r2, #7
 8002738:	2100      	movs	r1, #0
 800273a:	486c      	ldr	r0, [pc, #432]	; (80028ec <WAIT_FOR_HANDSHAKE+0x1bc>)
 800273c:	f009 f9da 	bl	800baf4 <memset>
	OBC_HANDSHAKE_FLAG = 0;
 8002740:	4b6b      	ldr	r3, [pc, #428]	; (80028f0 <WAIT_FOR_HANDSHAKE+0x1c0>)
 8002742:	2200      	movs	r2, #0
 8002744:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Receive(&huart2, MainCMDHs, ACK_LENGTH, 7000) == HAL_OK
 8002746:	f641 3358 	movw	r3, #7000	; 0x1b58
 800274a:	2207      	movs	r2, #7
 800274c:	4967      	ldr	r1, [pc, #412]	; (80028ec <WAIT_FOR_HANDSHAKE+0x1bc>)
 800274e:	4869      	ldr	r0, [pc, #420]	; (80028f4 <WAIT_FOR_HANDSHAKE+0x1c4>)
 8002750:	f004 f807 	bl	8006762 <HAL_UART_Receive>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00a      	beq.n	8002770 <WAIT_FOR_HANDSHAKE+0x40>
			|| HAL_UART_Receive(&hlpuart1, MainCMDHs, ACK_LENGTH, 7000)
 800275a:	f641 3358 	movw	r3, #7000	; 0x1b58
 800275e:	2207      	movs	r2, #7
 8002760:	4962      	ldr	r1, [pc, #392]	; (80028ec <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002762:	4865      	ldr	r0, [pc, #404]	; (80028f8 <WAIT_FOR_HANDSHAKE+0x1c8>)
 8002764:	f003 fffd 	bl	8006762 <HAL_UART_Receive>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	f040 80aa 	bne.w	80028c4 <WAIT_FOR_HANDSHAKE+0x194>
					== HAL_OK) {
		myDebug("--> Handshake command received from OBC: 0x%x\r\n");
 8002770:	4862      	ldr	r0, [pc, #392]	; (80028fc <WAIT_FOR_HANDSHAKE+0x1cc>)
 8002772:	f7fe f803 	bl	800077c <myDebug>
		for (int i = 0; i < (ACK_LENGTH); i++) {
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	e00a      	b.n	8002792 <WAIT_FOR_HANDSHAKE+0x62>
			myDebug("%02x ", MainCMDHs[i]);
 800277c:	4a5b      	ldr	r2, [pc, #364]	; (80028ec <WAIT_FOR_HANDSHAKE+0x1bc>)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	4413      	add	r3, r2
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	4619      	mov	r1, r3
 8002786:	485e      	ldr	r0, [pc, #376]	; (8002900 <WAIT_FOR_HANDSHAKE+0x1d0>)
 8002788:	f7fd fff8 	bl	800077c <myDebug>
		for (int i = 0; i < (ACK_LENGTH); i++) {
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	3301      	adds	r3, #1
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2b06      	cmp	r3, #6
 8002796:	ddf1      	ble.n	800277c <WAIT_FOR_HANDSHAKE+0x4c>
		}
		myDebug("\n");
 8002798:	485a      	ldr	r0, [pc, #360]	; (8002904 <WAIT_FOR_HANDSHAKE+0x1d4>)
 800279a:	f7fd ffef 	bl	800077c <myDebug>

		uint8_t header = 0x00;
 800279e:	2300      	movs	r3, #0
 80027a0:	71fb      	strb	r3, [r7, #7]

		if (MainCMDHs[0] == header) {
 80027a2:	4b52      	ldr	r3, [pc, #328]	; (80028ec <WAIT_FOR_HANDSHAKE+0x1bc>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	79fa      	ldrb	r2, [r7, #7]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d111      	bne.n	80027d0 <WAIT_FOR_HANDSHAKE+0xa0>

			for (int loop1 = 0; loop1 < sizeof(MainCMDHs); loop1++) {
 80027ac:	2300      	movs	r3, #0
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	e00b      	b.n	80027ca <WAIT_FOR_HANDSHAKE+0x9a>
				MainCMDHs[loop1] = MainCMDHs[loop1 + 1];
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	3301      	adds	r3, #1
 80027b6:	4a4d      	ldr	r2, [pc, #308]	; (80028ec <WAIT_FOR_HANDSHAKE+0x1bc>)
 80027b8:	5cd1      	ldrb	r1, [r2, r3]
 80027ba:	4a4c      	ldr	r2, [pc, #304]	; (80028ec <WAIT_FOR_HANDSHAKE+0x1bc>)
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4413      	add	r3, r2
 80027c0:	460a      	mov	r2, r1
 80027c2:	701a      	strb	r2, [r3, #0]
			for (int loop1 = 0; loop1 < sizeof(MainCMDHs); loop1++) {
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	3301      	adds	r3, #1
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	2b06      	cmp	r3, #6
 80027ce:	d9f0      	bls.n	80027b2 <WAIT_FOR_HANDSHAKE+0x82>
			}
		}

		if (MainCMDHs[0] == ACK_HEAD && MainCMDHs[5] == ACK_TAIL) {
 80027d0:	4b46      	ldr	r3, [pc, #280]	; (80028ec <WAIT_FOR_HANDSHAKE+0x1bc>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b53      	cmp	r3, #83	; 0x53
 80027d6:	d13a      	bne.n	800284e <WAIT_FOR_HANDSHAKE+0x11e>
 80027d8:	4b44      	ldr	r3, [pc, #272]	; (80028ec <WAIT_FOR_HANDSHAKE+0x1bc>)
 80027da:	795b      	ldrb	r3, [r3, #5]
 80027dc:	2b7e      	cmp	r3, #126	; 0x7e
 80027de:	d136      	bne.n	800284e <WAIT_FOR_HANDSHAKE+0x11e>
			myDebug("--> Command Acknowledged successful!\n");
 80027e0:	4849      	ldr	r0, [pc, #292]	; (8002908 <WAIT_FOR_HANDSHAKE+0x1d8>)
 80027e2:	f7fd ffcb 	bl	800077c <myDebug>
			if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 80027e6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80027ea:	2207      	movs	r2, #7
 80027ec:	493f      	ldr	r1, [pc, #252]	; (80028ec <WAIT_FOR_HANDSHAKE+0x1bc>)
 80027ee:	4841      	ldr	r0, [pc, #260]	; (80028f4 <WAIT_FOR_HANDSHAKE+0x1c4>)
 80027f0:	f003 ff31 	bl	8006656 <HAL_UART_Transmit>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d009      	beq.n	800280e <WAIT_FOR_HANDSHAKE+0xde>
					== HAL_OK
					|| HAL_UART_Transmit(&hlpuart1, MainCMDHs, ACK_LENGTH, 2000)
 80027fa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80027fe:	2207      	movs	r2, #7
 8002800:	493a      	ldr	r1, [pc, #232]	; (80028ec <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002802:	483d      	ldr	r0, [pc, #244]	; (80028f8 <WAIT_FOR_HANDSHAKE+0x1c8>)
 8002804:	f003 ff27 	bl	8006656 <HAL_UART_Transmit>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d158      	bne.n	80028c0 <WAIT_FOR_HANDSHAKE+0x190>
							== HAL_OK) {
				myDebug("--> Handshake ACK, re-transmit to OBC: \n");
 800280e:	483f      	ldr	r0, [pc, #252]	; (800290c <WAIT_FOR_HANDSHAKE+0x1dc>)
 8002810:	f7fd ffb4 	bl	800077c <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 8002814:	2300      	movs	r3, #0
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	e00a      	b.n	8002830 <WAIT_FOR_HANDSHAKE+0x100>
					myDebug("%02x ", MainCMDHs[i]);
 800281a:	4a34      	ldr	r2, [pc, #208]	; (80028ec <WAIT_FOR_HANDSHAKE+0x1bc>)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4413      	add	r3, r2
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	4619      	mov	r1, r3
 8002824:	4836      	ldr	r0, [pc, #216]	; (8002900 <WAIT_FOR_HANDSHAKE+0x1d0>)
 8002826:	f7fd ffa9 	bl	800077c <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	3301      	adds	r3, #1
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2b06      	cmp	r3, #6
 8002834:	ddf1      	ble.n	800281a <WAIT_FOR_HANDSHAKE+0xea>
				}
				myDebug("\n");
 8002836:	4833      	ldr	r0, [pc, #204]	; (8002904 <WAIT_FOR_HANDSHAKE+0x1d4>)
 8002838:	f7fd ffa0 	bl	800077c <myDebug>
				OBC_HANDSHAKE_FLAG = 1;
 800283c:	4b2c      	ldr	r3, [pc, #176]	; (80028f0 <WAIT_FOR_HANDSHAKE+0x1c0>)
 800283e:	2201      	movs	r2, #1
 8002840:	701a      	strb	r2, [r3, #0]
				memset(MainCMDHs, '\0', ACK_LENGTH);
 8002842:	2207      	movs	r2, #7
 8002844:	2100      	movs	r1, #0
 8002846:	4829      	ldr	r0, [pc, #164]	; (80028ec <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002848:	f009 f954 	bl	800baf4 <memset>
			if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 800284c:	e038      	b.n	80028c0 <WAIT_FOR_HANDSHAKE+0x190>
			}
		} else {
			myDebug("*** Unknown Handshake command received!\n");
 800284e:	4830      	ldr	r0, [pc, #192]	; (8002910 <WAIT_FOR_HANDSHAKE+0x1e0>)
 8002850:	f7fd ff94 	bl	800077c <myDebug>
			if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 8002854:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002858:	2207      	movs	r2, #7
 800285a:	4924      	ldr	r1, [pc, #144]	; (80028ec <WAIT_FOR_HANDSHAKE+0x1bc>)
 800285c:	4825      	ldr	r0, [pc, #148]	; (80028f4 <WAIT_FOR_HANDSHAKE+0x1c4>)
 800285e:	f003 fefa 	bl	8006656 <HAL_UART_Transmit>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d009      	beq.n	800287c <WAIT_FOR_HANDSHAKE+0x14c>
					== HAL_OK
					|| HAL_UART_Transmit(&hlpuart1, MainCMDHs, ACK_LENGTH, 7000)
 8002868:	f641 3358 	movw	r3, #7000	; 0x1b58
 800286c:	2207      	movs	r2, #7
 800286e:	491f      	ldr	r1, [pc, #124]	; (80028ec <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002870:	4821      	ldr	r0, [pc, #132]	; (80028f8 <WAIT_FOR_HANDSHAKE+0x1c8>)
 8002872:	f003 fef0 	bl	8006656 <HAL_UART_Transmit>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d131      	bne.n	80028e0 <WAIT_FOR_HANDSHAKE+0x1b0>
							== HAL_OK) {
				myDebug("--> Unknown Handshake ACK, re-transmit to OBC.\n");
 800287c:	4825      	ldr	r0, [pc, #148]	; (8002914 <WAIT_FOR_HANDSHAKE+0x1e4>)
 800287e:	f7fd ff7d 	bl	800077c <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 8002882:	2300      	movs	r3, #0
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	e00a      	b.n	800289e <WAIT_FOR_HANDSHAKE+0x16e>
					myDebug("%02x ", MainCMDHs[i]);
 8002888:	4a18      	ldr	r2, [pc, #96]	; (80028ec <WAIT_FOR_HANDSHAKE+0x1bc>)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	4413      	add	r3, r2
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	4619      	mov	r1, r3
 8002892:	481b      	ldr	r0, [pc, #108]	; (8002900 <WAIT_FOR_HANDSHAKE+0x1d0>)
 8002894:	f7fd ff72 	bl	800077c <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	3301      	adds	r3, #1
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2b06      	cmp	r3, #6
 80028a2:	ddf1      	ble.n	8002888 <WAIT_FOR_HANDSHAKE+0x158>
				}
				myDebug("\n");
 80028a4:	4817      	ldr	r0, [pc, #92]	; (8002904 <WAIT_FOR_HANDSHAKE+0x1d4>)
 80028a6:	f7fd ff69 	bl	800077c <myDebug>
				memset(MainCMDHs, '\0', ACK_LENGTH);
 80028aa:	2207      	movs	r2, #7
 80028ac:	2100      	movs	r1, #0
 80028ae:	480f      	ldr	r0, [pc, #60]	; (80028ec <WAIT_FOR_HANDSHAKE+0x1bc>)
 80028b0:	f009 f920 	bl	800baf4 <memset>
				OBC_HANDSHAKE_FLAG = 0;
 80028b4:	4b0e      	ldr	r3, [pc, #56]	; (80028f0 <WAIT_FOR_HANDSHAKE+0x1c0>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	701a      	strb	r2, [r3, #0]
				WAIT_FOR_HANDSHAKE();
 80028ba:	f7ff ff39 	bl	8002730 <WAIT_FOR_HANDSHAKE>
					== HAL_OK) {
 80028be:	e00f      	b.n	80028e0 <WAIT_FOR_HANDSHAKE+0x1b0>
			if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 80028c0:	bf00      	nop
					== HAL_OK) {
 80028c2:	e00d      	b.n	80028e0 <WAIT_FOR_HANDSHAKE+0x1b0>
			}
		}
	} else {
		OBC_HANDSHAKE_FLAG = 0;
 80028c4:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <WAIT_FOR_HANDSHAKE+0x1c0>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	701a      	strb	r2, [r3, #0]
		myDebug("*** Handshake Command receive failed, try again!\n");
 80028ca:	4813      	ldr	r0, [pc, #76]	; (8002918 <WAIT_FOR_HANDSHAKE+0x1e8>)
 80028cc:	f7fd ff56 	bl	800077c <myDebug>
		memset(MainCMDHs, '\0', ACK_LENGTH);
 80028d0:	2207      	movs	r2, #7
 80028d2:	2100      	movs	r1, #0
 80028d4:	4805      	ldr	r0, [pc, #20]	; (80028ec <WAIT_FOR_HANDSHAKE+0x1bc>)
 80028d6:	f009 f90d 	bl	800baf4 <memset>
		WAIT_FOR_HANDSHAKE();
 80028da:	f7ff ff29 	bl	8002730 <WAIT_FOR_HANDSHAKE>
	}
}
 80028de:	e000      	b.n	80028e2 <WAIT_FOR_HANDSHAKE+0x1b2>
					== HAL_OK) {
 80028e0:	bf00      	nop
}
 80028e2:	bf00      	nop
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	200004bc 	.word	0x200004bc
 80028f0:	200004a4 	.word	0x200004a4
 80028f4:	20000650 	.word	0x20000650
 80028f8:	20000528 	.word	0x20000528
 80028fc:	0800cac4 	.word	0x0800cac4
 8002900:	0800caf4 	.word	0x0800caf4
 8002904:	0800cafc 	.word	0x0800cafc
 8002908:	0800cb00 	.word	0x0800cb00
 800290c:	0800cb28 	.word	0x0800cb28
 8002910:	0800cb54 	.word	0x0800cb54
 8002914:	0800cb80 	.word	0x0800cb80
 8002918:	0800cbb0 	.word	0x0800cbb0

0800291c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr

08002928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800292c:	e7fe      	b.n	800292c <NMI_Handler+0x4>

0800292e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800292e:	b480      	push	{r7}
 8002930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002932:	e7fe      	b.n	8002932 <HardFault_Handler+0x4>

08002934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002938:	e7fe      	b.n	8002938 <MemManage_Handler+0x4>

0800293a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800293a:	b480      	push	{r7}
 800293c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800293e:	e7fe      	b.n	800293e <BusFault_Handler+0x4>

08002940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002944:	e7fe      	b.n	8002944 <UsageFault_Handler+0x4>

08002946 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002946:	b480      	push	{r7}
 8002948:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr

08002952 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002952:	b480      	push	{r7}
 8002954:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr

0800295e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800295e:	b480      	push	{r7}
 8002960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr

0800296a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800296e:	f000 fd43 	bl	80033f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800297c:	4802      	ldr	r0, [pc, #8]	; (8002988 <DMA1_Channel1_IRQHandler+0x10>)
 800297e:	f001 f83d 	bl	80039fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	200006e4 	.word	0x200006e4

0800298c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002990:	4802      	ldr	r0, [pc, #8]	; (800299c <DMA1_Channel2_IRQHandler+0x10>)
 8002992:	f001 f833 	bl	80039fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20000744 	.word	0x20000744

080029a0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 3 Interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80029a4:	4802      	ldr	r0, [pc, #8]	; (80029b0 <DMA1_Channel3_IRQHandler+0x10>)
 80029a6:	f001 f829 	bl	80039fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	200007a4 	.word	0x200007a4

080029b4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 4 Interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80029b8:	4802      	ldr	r0, [pc, #8]	; (80029c4 <DMA1_Channel4_IRQHandler+0x10>)
 80029ba:	f001 f81f 	bl	80039fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	20000804 	.word	0x20000804

080029c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029cc:	4802      	ldr	r0, [pc, #8]	; (80029d8 <USART1_IRQHandler+0x10>)
 80029ce:	f003 ffd9 	bl	8006984 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	200005bc 	.word	0x200005bc

080029dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029e0:	4802      	ldr	r0, [pc, #8]	; (80029ec <USART2_IRQHandler+0x10>)
 80029e2:	f003 ffcf 	bl	8006984 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000650 	.word	0x20000650

080029f0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80029f4:	4802      	ldr	r0, [pc, #8]	; (8002a00 <LPUART1_IRQHandler+0x10>)
 80029f6:	f003 ffc5 	bl	8006984 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20000528 	.word	0x20000528

08002a04 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8002a08:	4802      	ldr	r0, [pc, #8]	; (8002a14 <SUBGHZ_Radio_IRQHandler+0x10>)
 8002a0a:	f003 f957 	bl	8005cbc <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	200004c4 	.word	0x200004c4

08002a18 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a24:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a34:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
}
 8002a3e:	bf00      	nop
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8002a4c:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <MX_SUBGHZ_Init+0x20>)
 8002a4e:	2210      	movs	r2, #16
 8002a50:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8002a52:	4805      	ldr	r0, [pc, #20]	; (8002a68 <MX_SUBGHZ_Init+0x20>)
 8002a54:	f002 feb0 	bl	80057b8 <HAL_SUBGHZ_Init>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8002a5e:	f7ff fe61 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	200004c4 	.word	0x200004c4

08002a6c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8002a74:	2001      	movs	r0, #1
 8002a76:	f7ff ffcf 	bl	8002a18 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	2032      	movs	r0, #50	; 0x32
 8002a80:	f000 fda3 	bl	80035ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002a84:	2032      	movs	r0, #50	; 0x32
 8002a86:	f000 fdba 	bl	80035fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8002a92:	b480      	push	{r7}
 8002a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 8002a96:	bf00      	nop
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr
	...

08002aa0 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002aaa:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <HAL_GetTick+0x24>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d002      	beq.n	8002ab8 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8002ab2:	f000 f908 	bl	8002cc6 <TIMER_IF_GetTimerValue>
 8002ab6:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002ab8:	687b      	ldr	r3, [r7, #4]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	200004d0 	.word	0x200004d0

08002ac8 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 f925 	bl	8002d22 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ae8:	4a14      	ldr	r2, [pc, #80]	; (8002b3c <_sbrk+0x5c>)
 8002aea:	4b15      	ldr	r3, [pc, #84]	; (8002b40 <_sbrk+0x60>)
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002af4:	4b13      	ldr	r3, [pc, #76]	; (8002b44 <_sbrk+0x64>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d102      	bne.n	8002b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002afc:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <_sbrk+0x64>)
 8002afe:	4a12      	ldr	r2, [pc, #72]	; (8002b48 <_sbrk+0x68>)
 8002b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b02:	4b10      	ldr	r3, [pc, #64]	; (8002b44 <_sbrk+0x64>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4413      	add	r3, r2
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d207      	bcs.n	8002b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b10:	f008 fff8 	bl	800bb04 <__errno>
 8002b14:	4603      	mov	r3, r0
 8002b16:	220c      	movs	r2, #12
 8002b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b1e:	e009      	b.n	8002b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b20:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <_sbrk+0x64>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b26:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <_sbrk+0x64>)
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	4a05      	ldr	r2, [pc, #20]	; (8002b44 <_sbrk+0x64>)
 8002b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b32:	68fb      	ldr	r3, [r7, #12]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20010000 	.word	0x20010000
 8002b40:	00000400 	.word	0x00000400
 8002b44:	200004d4 	.word	0x200004d4
 8002b48:	20000b70 	.word	0x20000b70

08002b4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002b50:	bf00      	nop
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <LL_APB1_GRP1_EnableClock>:
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
}
 8002b7e:	bf00      	nop
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr

08002b88 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b8e:	f107 0310 	add.w	r3, r7, #16
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	605a      	str	r2, [r3, #4]
 8002b98:	609a      	str	r2, [r3, #8]
 8002b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b9c:	1d3b      	adds	r3, r7, #4
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	605a      	str	r2, [r3, #4]
 8002ba4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ba6:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <MX_TIM2_Init+0x94>)
 8002ba8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8002bae:	4b1b      	ldr	r3, [pc, #108]	; (8002c1c <MX_TIM2_Init+0x94>)
 8002bb0:	222f      	movs	r2, #47	; 0x2f
 8002bb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb4:	4b19      	ldr	r3, [pc, #100]	; (8002c1c <MX_TIM2_Init+0x94>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000001-1;
 8002bba:	4b18      	ldr	r3, [pc, #96]	; (8002c1c <MX_TIM2_Init+0x94>)
 8002bbc:	4a18      	ldr	r2, [pc, #96]	; (8002c20 <MX_TIM2_Init+0x98>)
 8002bbe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bc0:	4b16      	ldr	r3, [pc, #88]	; (8002c1c <MX_TIM2_Init+0x94>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bc6:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <MX_TIM2_Init+0x94>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002bcc:	4813      	ldr	r0, [pc, #76]	; (8002c1c <MX_TIM2_Init+0x94>)
 8002bce:	f003 fa13 	bl	8005ff8 <HAL_TIM_Base_Init>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002bd8:	f7ff fda4 	bl	8002724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002be0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002be2:	f107 0310 	add.w	r3, r7, #16
 8002be6:	4619      	mov	r1, r3
 8002be8:	480c      	ldr	r0, [pc, #48]	; (8002c1c <MX_TIM2_Init+0x94>)
 8002bea:	f003 faa1 	bl	8006130 <HAL_TIM_ConfigClockSource>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002bf4:	f7ff fd96 	bl	8002724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c00:	1d3b      	adds	r3, r7, #4
 8002c02:	4619      	mov	r1, r3
 8002c04:	4805      	ldr	r0, [pc, #20]	; (8002c1c <MX_TIM2_Init+0x94>)
 8002c06:	f003 fc57 	bl	80064b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002c10:	f7ff fd88 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c14:	bf00      	nop
 8002c16:	3720      	adds	r7, #32
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	200004d8 	.word	0x200004d8
 8002c20:	000f4240 	.word	0x000f4240

08002c24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c34:	d102      	bne.n	8002c3c <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c36:	2001      	movs	r0, #1
 8002c38:	f7ff ff8e 	bl	8002b58 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002c3c:	bf00      	nop
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr

08002c5a <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b085      	sub	sp, #20
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr

08002c72 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8002c8c:	4b02      	ldr	r3, [pc, #8]	; (8002c98 <TIMER_IF_SetTimerContext+0x10>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr
 8002c98:	20000524 	.word	0x20000524

08002c9c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8002ca0:	4b02      	ldr	r3, [pc, #8]	; (8002cac <TIMER_IF_GetTimerContext+0x10>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr
 8002cac:	20000524 	.word	0x20000524

08002cb0 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8002cba:	687b      	ldr	r3, [r7, #4]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr

08002cc6 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8002cd0:	687b      	ldr	r3, [r7, #4]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 8002ce6:	687b      	ldr	r3, [r7, #4]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr

08002cf2 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b085      	sub	sp, #20
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr

08002d0a <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b085      	sub	sp, #20
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 8002d16:	68fb      	ldr	r3, [r7, #12]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr

08002d22 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr

08002d34 <LL_AHB2_GRP1_EnableClock>:
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4013      	ands	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d58:	68fb      	ldr	r3, [r7, #12]
}
 8002d5a:	bf00      	nop
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr

08002d64 <LL_APB1_GRP1_EnableClock>:
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4013      	ands	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d88:	68fb      	ldr	r3, [r7, #12]
}
 8002d8a:	bf00      	nop
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <LL_APB1_GRP2_EnableClock>:
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002da2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4013      	ands	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002db8:	68fb      	ldr	r3, [r7, #12]
}
 8002dba:	bf00      	nop
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr

08002dc4 <LL_APB2_GRP1_EnableClock>:
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4013      	ands	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002de8:	68fb      	ldr	r3, [r7, #12]
}
 8002dea:	bf00      	nop
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002df8:	4b22      	ldr	r3, [pc, #136]	; (8002e84 <MX_LPUART1_UART_Init+0x90>)
 8002dfa:	4a23      	ldr	r2, [pc, #140]	; (8002e88 <MX_LPUART1_UART_Init+0x94>)
 8002dfc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8002dfe:	4b21      	ldr	r3, [pc, #132]	; (8002e84 <MX_LPUART1_UART_Init+0x90>)
 8002e00:	4a22      	ldr	r2, [pc, #136]	; (8002e8c <MX_LPUART1_UART_Init+0x98>)
 8002e02:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e04:	4b1f      	ldr	r3, [pc, #124]	; (8002e84 <MX_LPUART1_UART_Init+0x90>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002e0a:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <MX_LPUART1_UART_Init+0x90>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002e10:	4b1c      	ldr	r3, [pc, #112]	; (8002e84 <MX_LPUART1_UART_Init+0x90>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002e16:	4b1b      	ldr	r3, [pc, #108]	; (8002e84 <MX_LPUART1_UART_Init+0x90>)
 8002e18:	220c      	movs	r2, #12
 8002e1a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e1c:	4b19      	ldr	r3, [pc, #100]	; (8002e84 <MX_LPUART1_UART_Init+0x90>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e22:	4b18      	ldr	r3, [pc, #96]	; (8002e84 <MX_LPUART1_UART_Init+0x90>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e28:	4b16      	ldr	r3, [pc, #88]	; (8002e84 <MX_LPUART1_UART_Init+0x90>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e2e:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <MX_LPUART1_UART_Init+0x90>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002e34:	4b13      	ldr	r3, [pc, #76]	; (8002e84 <MX_LPUART1_UART_Init+0x90>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002e3a:	4812      	ldr	r0, [pc, #72]	; (8002e84 <MX_LPUART1_UART_Init+0x90>)
 8002e3c:	f003 fbbb 	bl	80065b6 <HAL_UART_Init>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8002e46:	f7ff fc6d 	bl	8002724 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	480d      	ldr	r0, [pc, #52]	; (8002e84 <MX_LPUART1_UART_Init+0x90>)
 8002e4e:	f004 ffe3 	bl	8007e18 <HAL_UARTEx_SetTxFifoThreshold>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8002e58:	f7ff fc64 	bl	8002724 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4809      	ldr	r0, [pc, #36]	; (8002e84 <MX_LPUART1_UART_Init+0x90>)
 8002e60:	f005 f818 	bl	8007e94 <HAL_UARTEx_SetRxFifoThreshold>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8002e6a:	f7ff fc5b 	bl	8002724 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002e6e:	4805      	ldr	r0, [pc, #20]	; (8002e84 <MX_LPUART1_UART_Init+0x90>)
 8002e70:	f004 ff9a 	bl	8007da8 <HAL_UARTEx_DisableFifoMode>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8002e7a:	f7ff fc53 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20000528 	.word	0x20000528
 8002e88:	40008000 	.word	0x40008000
 8002e8c:	00033324 	.word	0x00033324

08002e90 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e94:	4b22      	ldr	r3, [pc, #136]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002e96:	4a23      	ldr	r2, [pc, #140]	; (8002f24 <MX_USART1_UART_Init+0x94>)
 8002e98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e9a:	4b21      	ldr	r3, [pc, #132]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002e9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ea0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ea2:	4b1f      	ldr	r3, [pc, #124]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ea8:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002eae:	4b1c      	ldr	r3, [pc, #112]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002eb4:	4b1a      	ldr	r3, [pc, #104]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002eb6:	220c      	movs	r2, #12
 8002eb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eba:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ec0:	4b17      	ldr	r3, [pc, #92]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ec6:	4b16      	ldr	r3, [pc, #88]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ecc:	4b14      	ldr	r3, [pc, #80]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ed2:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ed8:	4811      	ldr	r0, [pc, #68]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002eda:	f003 fb6c 	bl	80065b6 <HAL_UART_Init>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002ee4:	f7ff fc1e 	bl	8002724 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ee8:	2100      	movs	r1, #0
 8002eea:	480d      	ldr	r0, [pc, #52]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002eec:	f004 ff94 	bl	8007e18 <HAL_UARTEx_SetTxFifoThreshold>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002ef6:	f7ff fc15 	bl	8002724 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002efa:	2100      	movs	r1, #0
 8002efc:	4808      	ldr	r0, [pc, #32]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002efe:	f004 ffc9 	bl	8007e94 <HAL_UARTEx_SetRxFifoThreshold>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002f08:	f7ff fc0c 	bl	8002724 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002f0c:	4804      	ldr	r0, [pc, #16]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002f0e:	f004 ff4b 	bl	8007da8 <HAL_UARTEx_DisableFifoMode>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002f18:	f7ff fc04 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f1c:	bf00      	nop
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	200005bc 	.word	0x200005bc
 8002f24:	40013800 	.word	0x40013800

08002f28 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f2c:	4b22      	ldr	r3, [pc, #136]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f2e:	4a23      	ldr	r2, [pc, #140]	; (8002fbc <MX_USART2_UART_Init+0x94>)
 8002f30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f32:	4b21      	ldr	r3, [pc, #132]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f3a:	4b1f      	ldr	r3, [pc, #124]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f40:	4b1d      	ldr	r3, [pc, #116]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f46:	4b1c      	ldr	r3, [pc, #112]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f4c:	4b1a      	ldr	r3, [pc, #104]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f4e:	220c      	movs	r2, #12
 8002f50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f52:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f58:	4b17      	ldr	r3, [pc, #92]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f5e:	4b16      	ldr	r3, [pc, #88]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f64:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f6a:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f70:	4811      	ldr	r0, [pc, #68]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f72:	f003 fb20 	bl	80065b6 <HAL_UART_Init>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002f7c:	f7ff fbd2 	bl	8002724 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f80:	2100      	movs	r1, #0
 8002f82:	480d      	ldr	r0, [pc, #52]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f84:	f004 ff48 	bl	8007e18 <HAL_UARTEx_SetTxFifoThreshold>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002f8e:	f7ff fbc9 	bl	8002724 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f92:	2100      	movs	r1, #0
 8002f94:	4808      	ldr	r0, [pc, #32]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f96:	f004 ff7d 	bl	8007e94 <HAL_UARTEx_SetRxFifoThreshold>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002fa0:	f7ff fbc0 	bl	8002724 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002fa4:	4804      	ldr	r0, [pc, #16]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002fa6:	f004 feff 	bl	8007da8 <HAL_UARTEx_DisableFifoMode>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002fb0:	f7ff fbb8 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fb4:	bf00      	nop
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	20000650 	.word	0x20000650
 8002fbc:	40004400 	.word	0x40004400

08002fc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b096      	sub	sp, #88	; 0x58
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	605a      	str	r2, [r3, #4]
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	60da      	str	r2, [r3, #12]
 8002fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fd8:	f107 030c 	add.w	r3, r7, #12
 8002fdc:	2238      	movs	r2, #56	; 0x38
 8002fde:	2100      	movs	r1, #0
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f008 fd87 	bl	800baf4 <memset>
  if(uartHandle->Instance==LPUART1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a66      	ldr	r2, [pc, #408]	; (8003184 <HAL_UART_MspInit+0x1c4>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	f040 8092 	bne.w	8003116 <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002ff2:	2320      	movs	r3, #32
 8002ff4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ffa:	f107 030c 	add.w	r3, r7, #12
 8002ffe:	4618      	mov	r0, r3
 8003000:	f002 fa26 	bl	8005450 <HAL_RCCEx_PeriphCLKConfig>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800300a:	f7ff fb8b 	bl	8002724 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800300e:	2001      	movs	r0, #1
 8003010:	f7ff fec0 	bl	8002d94 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003014:	2004      	movs	r0, #4
 8003016:	f7ff fe8d 	bl	8002d34 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    PC0     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800301a:	2303      	movs	r3, #3
 800301c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301e:	2302      	movs	r3, #2
 8003020:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003022:	2300      	movs	r3, #0
 8003024:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003026:	2300      	movs	r3, #0
 8003028:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800302a:	2308      	movs	r3, #8
 800302c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800302e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003032:	4619      	mov	r1, r3
 8003034:	4854      	ldr	r0, [pc, #336]	; (8003188 <HAL_UART_MspInit+0x1c8>)
 8003036:	f000 fe7f 	bl	8003d38 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 800303a:	4b54      	ldr	r3, [pc, #336]	; (800318c <HAL_UART_MspInit+0x1cc>)
 800303c:	4a54      	ldr	r2, [pc, #336]	; (8003190 <HAL_UART_MspInit+0x1d0>)
 800303e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8003040:	4b52      	ldr	r3, [pc, #328]	; (800318c <HAL_UART_MspInit+0x1cc>)
 8003042:	2215      	movs	r2, #21
 8003044:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003046:	4b51      	ldr	r3, [pc, #324]	; (800318c <HAL_UART_MspInit+0x1cc>)
 8003048:	2200      	movs	r2, #0
 800304a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800304c:	4b4f      	ldr	r3, [pc, #316]	; (800318c <HAL_UART_MspInit+0x1cc>)
 800304e:	2200      	movs	r2, #0
 8003050:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003052:	4b4e      	ldr	r3, [pc, #312]	; (800318c <HAL_UART_MspInit+0x1cc>)
 8003054:	2280      	movs	r2, #128	; 0x80
 8003056:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003058:	4b4c      	ldr	r3, [pc, #304]	; (800318c <HAL_UART_MspInit+0x1cc>)
 800305a:	2200      	movs	r2, #0
 800305c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800305e:	4b4b      	ldr	r3, [pc, #300]	; (800318c <HAL_UART_MspInit+0x1cc>)
 8003060:	2200      	movs	r2, #0
 8003062:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8003064:	4b49      	ldr	r3, [pc, #292]	; (800318c <HAL_UART_MspInit+0x1cc>)
 8003066:	2200      	movs	r2, #0
 8003068:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800306a:	4b48      	ldr	r3, [pc, #288]	; (800318c <HAL_UART_MspInit+0x1cc>)
 800306c:	2200      	movs	r2, #0
 800306e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8003070:	4846      	ldr	r0, [pc, #280]	; (800318c <HAL_UART_MspInit+0x1cc>)
 8003072:	f000 fadf 	bl	8003634 <HAL_DMA_Init>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 800307c:	f7ff fb52 	bl	8002724 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8003080:	2110      	movs	r1, #16
 8003082:	4842      	ldr	r0, [pc, #264]	; (800318c <HAL_UART_MspInit+0x1cc>)
 8003084:	f000 fd80 	bl	8003b88 <HAL_DMA_ConfigChannelAttributes>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 800308e:	f7ff fb49 	bl	8002724 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a3d      	ldr	r2, [pc, #244]	; (800318c <HAL_UART_MspInit+0x1cc>)
 8003096:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800309a:	4a3c      	ldr	r2, [pc, #240]	; (800318c <HAL_UART_MspInit+0x1cc>)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 80030a0:	4b3c      	ldr	r3, [pc, #240]	; (8003194 <HAL_UART_MspInit+0x1d4>)
 80030a2:	4a3d      	ldr	r2, [pc, #244]	; (8003198 <HAL_UART_MspInit+0x1d8>)
 80030a4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80030a6:	4b3b      	ldr	r3, [pc, #236]	; (8003194 <HAL_UART_MspInit+0x1d4>)
 80030a8:	2216      	movs	r2, #22
 80030aa:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030ac:	4b39      	ldr	r3, [pc, #228]	; (8003194 <HAL_UART_MspInit+0x1d4>)
 80030ae:	2210      	movs	r2, #16
 80030b0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030b2:	4b38      	ldr	r3, [pc, #224]	; (8003194 <HAL_UART_MspInit+0x1d4>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030b8:	4b36      	ldr	r3, [pc, #216]	; (8003194 <HAL_UART_MspInit+0x1d4>)
 80030ba:	2280      	movs	r2, #128	; 0x80
 80030bc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030be:	4b35      	ldr	r3, [pc, #212]	; (8003194 <HAL_UART_MspInit+0x1d4>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030c4:	4b33      	ldr	r3, [pc, #204]	; (8003194 <HAL_UART_MspInit+0x1d4>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80030ca:	4b32      	ldr	r3, [pc, #200]	; (8003194 <HAL_UART_MspInit+0x1d4>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030d0:	4b30      	ldr	r3, [pc, #192]	; (8003194 <HAL_UART_MspInit+0x1d4>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80030d6:	482f      	ldr	r0, [pc, #188]	; (8003194 <HAL_UART_MspInit+0x1d4>)
 80030d8:	f000 faac 	bl	8003634 <HAL_DMA_Init>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_UART_MspInit+0x126>
    {
      Error_Handler();
 80030e2:	f7ff fb1f 	bl	8002724 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80030e6:	2110      	movs	r1, #16
 80030e8:	482a      	ldr	r0, [pc, #168]	; (8003194 <HAL_UART_MspInit+0x1d4>)
 80030ea:	f000 fd4d 	bl	8003b88 <HAL_DMA_ConfigChannelAttributes>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 80030f4:	f7ff fb16 	bl	8002724 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a26      	ldr	r2, [pc, #152]	; (8003194 <HAL_UART_MspInit+0x1d4>)
 80030fc:	67da      	str	r2, [r3, #124]	; 0x7c
 80030fe:	4a25      	ldr	r2, [pc, #148]	; (8003194 <HAL_UART_MspInit+0x1d4>)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003104:	2200      	movs	r2, #0
 8003106:	2100      	movs	r1, #0
 8003108:	2026      	movs	r0, #38	; 0x26
 800310a:	f000 fa5e 	bl	80035ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800310e:	2026      	movs	r0, #38	; 0x26
 8003110:	f000 fa75 	bl	80035fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003114:	e0de      	b.n	80032d4 <HAL_UART_MspInit+0x314>
  else if(uartHandle->Instance==USART1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a20      	ldr	r2, [pc, #128]	; (800319c <HAL_UART_MspInit+0x1dc>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d13f      	bne.n	80031a0 <HAL_UART_MspInit+0x1e0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003120:	2301      	movs	r3, #1
 8003122:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003124:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003128:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800312a:	f107 030c 	add.w	r3, r7, #12
 800312e:	4618      	mov	r0, r3
 8003130:	f002 f98e 	bl	8005450 <HAL_RCCEx_PeriphCLKConfig>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_UART_MspInit+0x17e>
      Error_Handler();
 800313a:	f7ff faf3 	bl	8002724 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800313e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003142:	f7ff fe3f 	bl	8002dc4 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003146:	2001      	movs	r0, #1
 8003148:	f7ff fdf4 	bl	8002d34 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800314c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003150:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003152:	2302      	movs	r3, #2
 8003154:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003156:	2300      	movs	r3, #0
 8003158:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315a:	2300      	movs	r3, #0
 800315c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800315e:	2307      	movs	r3, #7
 8003160:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003162:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003166:	4619      	mov	r1, r3
 8003168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800316c:	f000 fde4 	bl	8003d38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003170:	2200      	movs	r2, #0
 8003172:	2100      	movs	r1, #0
 8003174:	2024      	movs	r0, #36	; 0x24
 8003176:	f000 fa28 	bl	80035ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800317a:	2024      	movs	r0, #36	; 0x24
 800317c:	f000 fa3f 	bl	80035fe <HAL_NVIC_EnableIRQ>
}
 8003180:	e0a8      	b.n	80032d4 <HAL_UART_MspInit+0x314>
 8003182:	bf00      	nop
 8003184:	40008000 	.word	0x40008000
 8003188:	48000800 	.word	0x48000800
 800318c:	200006e4 	.word	0x200006e4
 8003190:	40020008 	.word	0x40020008
 8003194:	20000744 	.word	0x20000744
 8003198:	4002001c 	.word	0x4002001c
 800319c:	40013800 	.word	0x40013800
  else if(uartHandle->Instance==USART2)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a4d      	ldr	r2, [pc, #308]	; (80032dc <HAL_UART_MspInit+0x31c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	f040 8094 	bne.w	80032d4 <HAL_UART_MspInit+0x314>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80031ac:	2302      	movs	r3, #2
 80031ae:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80031b0:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80031b4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031b6:	f107 030c 	add.w	r3, r7, #12
 80031ba:	4618      	mov	r0, r3
 80031bc:	f002 f948 	bl	8005450 <HAL_RCCEx_PeriphCLKConfig>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_UART_MspInit+0x20a>
      Error_Handler();
 80031c6:	f7ff faad 	bl	8002724 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80031ca:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80031ce:	f7ff fdc9 	bl	8002d64 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031d2:	2001      	movs	r0, #1
 80031d4:	f7ff fdae 	bl	8002d34 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 80031d8:	230c      	movs	r3, #12
 80031da:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031dc:	2302      	movs	r3, #2
 80031de:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e0:	2300      	movs	r3, #0
 80031e2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e4:	2300      	movs	r3, #0
 80031e6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031e8:	2307      	movs	r3, #7
 80031ea:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80031f0:	4619      	mov	r1, r3
 80031f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031f6:	f000 fd9f 	bl	8003d38 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 80031fa:	4b39      	ldr	r3, [pc, #228]	; (80032e0 <HAL_UART_MspInit+0x320>)
 80031fc:	4a39      	ldr	r2, [pc, #228]	; (80032e4 <HAL_UART_MspInit+0x324>)
 80031fe:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003200:	4b37      	ldr	r3, [pc, #220]	; (80032e0 <HAL_UART_MspInit+0x320>)
 8003202:	2213      	movs	r2, #19
 8003204:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003206:	4b36      	ldr	r3, [pc, #216]	; (80032e0 <HAL_UART_MspInit+0x320>)
 8003208:	2200      	movs	r2, #0
 800320a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800320c:	4b34      	ldr	r3, [pc, #208]	; (80032e0 <HAL_UART_MspInit+0x320>)
 800320e:	2200      	movs	r2, #0
 8003210:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003212:	4b33      	ldr	r3, [pc, #204]	; (80032e0 <HAL_UART_MspInit+0x320>)
 8003214:	2280      	movs	r2, #128	; 0x80
 8003216:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003218:	4b31      	ldr	r3, [pc, #196]	; (80032e0 <HAL_UART_MspInit+0x320>)
 800321a:	2200      	movs	r2, #0
 800321c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800321e:	4b30      	ldr	r3, [pc, #192]	; (80032e0 <HAL_UART_MspInit+0x320>)
 8003220:	2200      	movs	r2, #0
 8003222:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003224:	4b2e      	ldr	r3, [pc, #184]	; (80032e0 <HAL_UART_MspInit+0x320>)
 8003226:	2200      	movs	r2, #0
 8003228:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800322a:	4b2d      	ldr	r3, [pc, #180]	; (80032e0 <HAL_UART_MspInit+0x320>)
 800322c:	2200      	movs	r2, #0
 800322e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003230:	482b      	ldr	r0, [pc, #172]	; (80032e0 <HAL_UART_MspInit+0x320>)
 8003232:	f000 f9ff 	bl	8003634 <HAL_DMA_Init>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <HAL_UART_MspInit+0x280>
      Error_Handler();
 800323c:	f7ff fa72 	bl	8002724 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8003240:	2110      	movs	r1, #16
 8003242:	4827      	ldr	r0, [pc, #156]	; (80032e0 <HAL_UART_MspInit+0x320>)
 8003244:	f000 fca0 	bl	8003b88 <HAL_DMA_ConfigChannelAttributes>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <HAL_UART_MspInit+0x292>
      Error_Handler();
 800324e:	f7ff fa69 	bl	8002724 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a22      	ldr	r2, [pc, #136]	; (80032e0 <HAL_UART_MspInit+0x320>)
 8003256:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800325a:	4a21      	ldr	r2, [pc, #132]	; (80032e0 <HAL_UART_MspInit+0x320>)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8003260:	4b21      	ldr	r3, [pc, #132]	; (80032e8 <HAL_UART_MspInit+0x328>)
 8003262:	4a22      	ldr	r2, [pc, #136]	; (80032ec <HAL_UART_MspInit+0x32c>)
 8003264:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003266:	4b20      	ldr	r3, [pc, #128]	; (80032e8 <HAL_UART_MspInit+0x328>)
 8003268:	2214      	movs	r2, #20
 800326a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800326c:	4b1e      	ldr	r3, [pc, #120]	; (80032e8 <HAL_UART_MspInit+0x328>)
 800326e:	2210      	movs	r2, #16
 8003270:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003272:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <HAL_UART_MspInit+0x328>)
 8003274:	2200      	movs	r2, #0
 8003276:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003278:	4b1b      	ldr	r3, [pc, #108]	; (80032e8 <HAL_UART_MspInit+0x328>)
 800327a:	2280      	movs	r2, #128	; 0x80
 800327c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800327e:	4b1a      	ldr	r3, [pc, #104]	; (80032e8 <HAL_UART_MspInit+0x328>)
 8003280:	2200      	movs	r2, #0
 8003282:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003284:	4b18      	ldr	r3, [pc, #96]	; (80032e8 <HAL_UART_MspInit+0x328>)
 8003286:	2200      	movs	r2, #0
 8003288:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800328a:	4b17      	ldr	r3, [pc, #92]	; (80032e8 <HAL_UART_MspInit+0x328>)
 800328c:	2200      	movs	r2, #0
 800328e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003290:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <HAL_UART_MspInit+0x328>)
 8003292:	2200      	movs	r2, #0
 8003294:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003296:	4814      	ldr	r0, [pc, #80]	; (80032e8 <HAL_UART_MspInit+0x328>)
 8003298:	f000 f9cc 	bl	8003634 <HAL_DMA_Init>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_UART_MspInit+0x2e6>
      Error_Handler();
 80032a2:	f7ff fa3f 	bl	8002724 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80032a6:	2110      	movs	r1, #16
 80032a8:	480f      	ldr	r0, [pc, #60]	; (80032e8 <HAL_UART_MspInit+0x328>)
 80032aa:	f000 fc6d 	bl	8003b88 <HAL_DMA_ConfigChannelAttributes>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <HAL_UART_MspInit+0x2f8>
      Error_Handler();
 80032b4:	f7ff fa36 	bl	8002724 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a0b      	ldr	r2, [pc, #44]	; (80032e8 <HAL_UART_MspInit+0x328>)
 80032bc:	67da      	str	r2, [r3, #124]	; 0x7c
 80032be:	4a0a      	ldr	r2, [pc, #40]	; (80032e8 <HAL_UART_MspInit+0x328>)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80032c4:	2200      	movs	r2, #0
 80032c6:	2100      	movs	r1, #0
 80032c8:	2025      	movs	r0, #37	; 0x25
 80032ca:	f000 f97e 	bl	80035ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80032ce:	2025      	movs	r0, #37	; 0x25
 80032d0:	f000 f995 	bl	80035fe <HAL_NVIC_EnableIRQ>
}
 80032d4:	bf00      	nop
 80032d6:	3758      	adds	r7, #88	; 0x58
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40004400 	.word	0x40004400
 80032e0:	200007a4 	.word	0x200007a4
 80032e4:	40020030 	.word	0x40020030
 80032e8:	20000804 	.word	0x20000804
 80032ec:	40020044 	.word	0x40020044

080032f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80032f0:	480d      	ldr	r0, [pc, #52]	; (8003328 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80032f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80032f4:	f7ff fc2a 	bl	8002b4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032f8:	480c      	ldr	r0, [pc, #48]	; (800332c <LoopForever+0x6>)
  ldr r1, =_edata
 80032fa:	490d      	ldr	r1, [pc, #52]	; (8003330 <LoopForever+0xa>)
  ldr r2, =_sidata
 80032fc:	4a0d      	ldr	r2, [pc, #52]	; (8003334 <LoopForever+0xe>)
  movs r3, #0
 80032fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003300:	e002      	b.n	8003308 <LoopCopyDataInit>

08003302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003306:	3304      	adds	r3, #4

08003308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800330a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800330c:	d3f9      	bcc.n	8003302 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800330e:	4a0a      	ldr	r2, [pc, #40]	; (8003338 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003310:	4c0a      	ldr	r4, [pc, #40]	; (800333c <LoopForever+0x16>)
  movs r3, #0
 8003312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003314:	e001      	b.n	800331a <LoopFillZerobss>

08003316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003318:	3204      	adds	r2, #4

0800331a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800331a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800331c:	d3fb      	bcc.n	8003316 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800331e:	f008 fbf7 	bl	800bb10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003322:	f7fd fcf7 	bl	8000d14 <main>

08003326 <LoopForever>:

LoopForever:
    b LoopForever
 8003326:	e7fe      	b.n	8003326 <LoopForever>
  ldr   r0, =_estack
 8003328:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800332c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003330:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8003334:	0800ce9c 	.word	0x0800ce9c
  ldr r2, =_sbss
 8003338:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800333c:	20000b70 	.word	0x20000b70

08003340 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003340:	e7fe      	b.n	8003340 <ADC_IRQHandler>
	...

08003344 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800334e:	2003      	movs	r0, #3
 8003350:	f000 f930 	bl	80035b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003354:	f001 fe9e 	bl	8005094 <HAL_RCC_GetHCLKFreq>
 8003358:	4603      	mov	r3, r0
 800335a:	4a09      	ldr	r2, [pc, #36]	; (8003380 <HAL_Init+0x3c>)
 800335c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800335e:	2000      	movs	r0, #0
 8003360:	f000 f810 	bl	8003384 <HAL_InitTick>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	71fb      	strb	r3, [r7, #7]
 800336e:	e001      	b.n	8003374 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003370:	f7ff fad4 	bl	800291c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003374:	79fb      	ldrb	r3, [r7, #7]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	2000000c 	.word	0x2000000c

08003384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003390:	4b17      	ldr	r3, [pc, #92]	; (80033f0 <HAL_InitTick+0x6c>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d024      	beq.n	80033e2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003398:	f001 fe7c 	bl	8005094 <HAL_RCC_GetHCLKFreq>
 800339c:	4602      	mov	r2, r0
 800339e:	4b14      	ldr	r3, [pc, #80]	; (80033f0 <HAL_InitTick+0x6c>)
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	4619      	mov	r1, r3
 80033a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80033ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 f932 	bl	800361a <HAL_SYSTICK_Config>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10f      	bne.n	80033dc <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b0f      	cmp	r3, #15
 80033c0:	d809      	bhi.n	80033d6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033c2:	2200      	movs	r2, #0
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033ca:	f000 f8fe 	bl	80035ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033ce:	4a09      	ldr	r2, [pc, #36]	; (80033f4 <HAL_InitTick+0x70>)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6013      	str	r3, [r2, #0]
 80033d4:	e007      	b.n	80033e6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	73fb      	strb	r3, [r7, #15]
 80033da:	e004      	b.n	80033e6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]
 80033e0:	e001      	b.n	80033e6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	20000014 	.word	0x20000014
 80033f4:	20000010 	.word	0x20000010

080033f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033fc:	4b05      	ldr	r3, [pc, #20]	; (8003414 <HAL_IncTick+0x1c>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	461a      	mov	r2, r3
 8003402:	4b05      	ldr	r3, [pc, #20]	; (8003418 <HAL_IncTick+0x20>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4413      	add	r3, r2
 8003408:	4a03      	ldr	r2, [pc, #12]	; (8003418 <HAL_IncTick+0x20>)
 800340a:	6013      	str	r3, [r2, #0]
}
 800340c:	bf00      	nop
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr
 8003414:	20000014 	.word	0x20000014
 8003418:	20000864 	.word	0x20000864

0800341c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800342c:	4b0c      	ldr	r3, [pc, #48]	; (8003460 <__NVIC_SetPriorityGrouping+0x44>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003438:	4013      	ands	r3, r2
 800343a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003444:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800344c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800344e:	4a04      	ldr	r2, [pc, #16]	; (8003460 <__NVIC_SetPriorityGrouping+0x44>)
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	60d3      	str	r3, [r2, #12]
}
 8003454:	bf00      	nop
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	bc80      	pop	{r7}
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	e000ed00 	.word	0xe000ed00

08003464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003468:	4b04      	ldr	r3, [pc, #16]	; (800347c <__NVIC_GetPriorityGrouping+0x18>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	0a1b      	lsrs	r3, r3, #8
 800346e:	f003 0307 	and.w	r3, r3, #7
}
 8003472:	4618      	mov	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	bc80      	pop	{r7}
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	e000ed00 	.word	0xe000ed00

08003480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800348a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348e:	2b00      	cmp	r3, #0
 8003490:	db0b      	blt.n	80034aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	f003 021f 	and.w	r2, r3, #31
 8003498:	4906      	ldr	r1, [pc, #24]	; (80034b4 <__NVIC_EnableIRQ+0x34>)
 800349a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	2001      	movs	r0, #1
 80034a2:	fa00 f202 	lsl.w	r2, r0, r2
 80034a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr
 80034b4:	e000e100 	.word	0xe000e100

080034b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	6039      	str	r1, [r7, #0]
 80034c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	db0a      	blt.n	80034e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	490c      	ldr	r1, [pc, #48]	; (8003504 <__NVIC_SetPriority+0x4c>)
 80034d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d6:	0112      	lsls	r2, r2, #4
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	440b      	add	r3, r1
 80034dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034e0:	e00a      	b.n	80034f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	4908      	ldr	r1, [pc, #32]	; (8003508 <__NVIC_SetPriority+0x50>)
 80034e8:	79fb      	ldrb	r3, [r7, #7]
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	3b04      	subs	r3, #4
 80034f0:	0112      	lsls	r2, r2, #4
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	440b      	add	r3, r1
 80034f6:	761a      	strb	r2, [r3, #24]
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc80      	pop	{r7}
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	e000e100 	.word	0xe000e100
 8003508:	e000ed00 	.word	0xe000ed00

0800350c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800350c:	b480      	push	{r7}
 800350e:	b089      	sub	sp, #36	; 0x24
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f1c3 0307 	rsb	r3, r3, #7
 8003526:	2b04      	cmp	r3, #4
 8003528:	bf28      	it	cs
 800352a:	2304      	movcs	r3, #4
 800352c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	3304      	adds	r3, #4
 8003532:	2b06      	cmp	r3, #6
 8003534:	d902      	bls.n	800353c <NVIC_EncodePriority+0x30>
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	3b03      	subs	r3, #3
 800353a:	e000      	b.n	800353e <NVIC_EncodePriority+0x32>
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003540:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	43da      	mvns	r2, r3
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	401a      	ands	r2, r3
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003554:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	fa01 f303 	lsl.w	r3, r1, r3
 800355e:	43d9      	mvns	r1, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003564:	4313      	orrs	r3, r2
         );
}
 8003566:	4618      	mov	r0, r3
 8003568:	3724      	adds	r7, #36	; 0x24
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr

08003570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3b01      	subs	r3, #1
 800357c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003580:	d301      	bcc.n	8003586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003582:	2301      	movs	r3, #1
 8003584:	e00f      	b.n	80035a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003586:	4a0a      	ldr	r2, [pc, #40]	; (80035b0 <SysTick_Config+0x40>)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3b01      	subs	r3, #1
 800358c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800358e:	210f      	movs	r1, #15
 8003590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003594:	f7ff ff90 	bl	80034b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <SysTick_Config+0x40>)
 800359a:	2200      	movs	r2, #0
 800359c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800359e:	4b04      	ldr	r3, [pc, #16]	; (80035b0 <SysTick_Config+0x40>)
 80035a0:	2207      	movs	r2, #7
 80035a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	e000e010 	.word	0xe000e010

080035b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7ff ff2d 	bl	800341c <__NVIC_SetPriorityGrouping>
}
 80035c2:	bf00      	nop
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b086      	sub	sp, #24
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	4603      	mov	r3, r0
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	607a      	str	r2, [r7, #4]
 80035d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035d8:	f7ff ff44 	bl	8003464 <__NVIC_GetPriorityGrouping>
 80035dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	68b9      	ldr	r1, [r7, #8]
 80035e2:	6978      	ldr	r0, [r7, #20]
 80035e4:	f7ff ff92 	bl	800350c <NVIC_EncodePriority>
 80035e8:	4602      	mov	r2, r0
 80035ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ee:	4611      	mov	r1, r2
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff ff61 	bl	80034b8 <__NVIC_SetPriority>
}
 80035f6:	bf00      	nop
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b082      	sub	sp, #8
 8003602:	af00      	add	r7, sp, #0
 8003604:	4603      	mov	r3, r0
 8003606:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff ff37 	bl	8003480 <__NVIC_EnableIRQ>
}
 8003612:	bf00      	nop
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b082      	sub	sp, #8
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7ff ffa4 	bl	8003570 <SysTick_Config>
 8003628:	4603      	mov	r3, r0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
	...

08003634 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e08e      	b.n	8003764 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	461a      	mov	r2, r3
 800364c:	4b47      	ldr	r3, [pc, #284]	; (800376c <HAL_DMA_Init+0x138>)
 800364e:	429a      	cmp	r2, r3
 8003650:	d80f      	bhi.n	8003672 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	4b45      	ldr	r3, [pc, #276]	; (8003770 <HAL_DMA_Init+0x13c>)
 800365a:	4413      	add	r3, r2
 800365c:	4a45      	ldr	r2, [pc, #276]	; (8003774 <HAL_DMA_Init+0x140>)
 800365e:	fba2 2303 	umull	r2, r3, r2, r3
 8003662:	091b      	lsrs	r3, r3, #4
 8003664:	009a      	lsls	r2, r3, #2
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a42      	ldr	r2, [pc, #264]	; (8003778 <HAL_DMA_Init+0x144>)
 800366e:	641a      	str	r2, [r3, #64]	; 0x40
 8003670:	e00e      	b.n	8003690 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	461a      	mov	r2, r3
 8003678:	4b40      	ldr	r3, [pc, #256]	; (800377c <HAL_DMA_Init+0x148>)
 800367a:	4413      	add	r3, r2
 800367c:	4a3d      	ldr	r2, [pc, #244]	; (8003774 <HAL_DMA_Init+0x140>)
 800367e:	fba2 2303 	umull	r2, r3, r2, r3
 8003682:	091b      	lsrs	r3, r3, #4
 8003684:	009a      	lsls	r2, r3, #2
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a3c      	ldr	r2, [pc, #240]	; (8003780 <HAL_DMA_Init+0x14c>)
 800368e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6812      	ldr	r2, [r2, #0]
 80036a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80036a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036aa:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6819      	ldr	r1, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	431a      	orrs	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	431a      	orrs	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	431a      	orrs	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fabc 	bl	8003c60 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036f0:	d102      	bne.n	80036f8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003700:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003704:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800370e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d010      	beq.n	800373a <HAL_DMA_Init+0x106>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b04      	cmp	r3, #4
 800371e:	d80c      	bhi.n	800373a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 fae5 	bl	8003cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003736:	605a      	str	r2, [r3, #4]
 8003738:	e008      	b.n	800374c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40020407 	.word	0x40020407
 8003770:	bffdfff8 	.word	0xbffdfff8
 8003774:	cccccccd 	.word	0xcccccccd
 8003778:	40020000 	.word	0x40020000
 800377c:	bffdfbf8 	.word	0xbffdfbf8
 8003780:	40020400 	.word	0x40020400

08003784 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_DMA_Start_IT+0x20>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e069      	b.n	8003878 <HAL_DMA_Start_IT+0xf4>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d155      	bne.n	8003864 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0201 	bic.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	68b9      	ldr	r1, [r7, #8]
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 fa02 	bl	8003be6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d008      	beq.n	80037fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f042 020e 	orr.w	r2, r2, #14
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	e00f      	b.n	800381c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0204 	bic.w	r2, r2, #4
 800380a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 020a 	orr.w	r2, r2, #10
 800381a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d007      	beq.n	800383a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003834:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003838:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383e:	2b00      	cmp	r3, #0
 8003840:	d007      	beq.n	8003852 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003850:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f042 0201 	orr.w	r2, r2, #1
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	e008      	b.n	8003876 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2280      	movs	r2, #128	; 0x80
 8003868:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003876:	7dfb      	ldrb	r3, [r7, #23]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e04f      	b.n	8003932 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d008      	beq.n	80038b0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2204      	movs	r2, #4
 80038a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e040      	b.n	8003932 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 020e 	bic.w	r2, r2, #14
 80038be:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0201 	bic.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e4:	f003 021c 	and.w	r2, r3, #28
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ec:	2101      	movs	r1, #1
 80038ee:	fa01 f202 	lsl.w	r2, r1, r2
 80038f2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00c      	beq.n	8003920 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003910:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003914:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800391e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	bc80      	pop	{r7}
 800393a:	4770      	bx	lr

0800393c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003944:	2300      	movs	r3, #0
 8003946:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d005      	beq.n	8003960 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2204      	movs	r2, #4
 8003958:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	73fb      	strb	r3, [r7, #15]
 800395e:	e047      	b.n	80039f0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 020e 	bic.w	r2, r2, #14
 800396e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0201 	bic.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800398a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800398e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003994:	f003 021c 	and.w	r2, r3, #28
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	2101      	movs	r1, #1
 800399e:	fa01 f202 	lsl.w	r2, r1, r2
 80039a2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00c      	beq.n	80039d0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80039ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	4798      	blx	r3
    }
  }
  return status;
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a18:	f003 031c 	and.w	r3, r3, #28
 8003a1c:	2204      	movs	r2, #4
 8003a1e:	409a      	lsls	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4013      	ands	r3, r2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d027      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x7c>
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d022      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0320 	and.w	r3, r3, #32
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d107      	bne.n	8003a50 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0204 	bic.w	r2, r2, #4
 8003a4e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a54:	f003 021c 	and.w	r2, r3, #28
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	2104      	movs	r1, #4
 8003a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a62:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 8081 	beq.w	8003b70 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003a76:	e07b      	b.n	8003b70 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7c:	f003 031c 	and.w	r3, r3, #28
 8003a80:	2202      	movs	r2, #2
 8003a82:	409a      	lsls	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4013      	ands	r3, r2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d03d      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x10c>
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d038      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0320 	and.w	r3, r3, #32
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10b      	bne.n	8003abc <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 020a 	bic.w	r2, r2, #10
 8003ab2:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4b2e      	ldr	r3, [pc, #184]	; (8003b7c <HAL_DMA_IRQHandler+0x180>)
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d909      	bls.n	8003adc <HAL_DMA_IRQHandler+0xe0>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003acc:	f003 031c 	and.w	r3, r3, #28
 8003ad0:	4a2b      	ldr	r2, [pc, #172]	; (8003b80 <HAL_DMA_IRQHandler+0x184>)
 8003ad2:	2102      	movs	r1, #2
 8003ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad8:	6053      	str	r3, [r2, #4]
 8003ada:	e008      	b.n	8003aee <HAL_DMA_IRQHandler+0xf2>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae0:	f003 031c 	and.w	r3, r3, #28
 8003ae4:	4a27      	ldr	r2, [pc, #156]	; (8003b84 <HAL_DMA_IRQHandler+0x188>)
 8003ae6:	2102      	movs	r1, #2
 8003ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8003aec:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d038      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003b06:	e033      	b.n	8003b70 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0c:	f003 031c 	and.w	r3, r3, #28
 8003b10:	2208      	movs	r2, #8
 8003b12:	409a      	lsls	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4013      	ands	r3, r2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d02a      	beq.n	8003b72 <HAL_DMA_IRQHandler+0x176>
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d025      	beq.n	8003b72 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 020e 	bic.w	r2, r2, #14
 8003b34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3a:	f003 021c 	and.w	r2, r3, #28
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	2101      	movs	r1, #1
 8003b44:	fa01 f202 	lsl.w	r2, r1, r2
 8003b48:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d004      	beq.n	8003b72 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b70:	bf00      	nop
 8003b72:	bf00      	nop
}
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40020080 	.word	0x40020080
 8003b80:	40020400 	.word	0x40020400
 8003b84:	40020000 	.word	0x40020000

08003b88 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d103      	bne.n	8003ba4 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	72fb      	strb	r3, [r7, #11]
    return status;
 8003ba0:	7afb      	ldrb	r3, [r7, #11]
 8003ba2:	e01b      	b.n	8003bdc <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	f003 0310 	and.w	r3, r3, #16
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00d      	beq.n	8003bd2 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d004      	beq.n	8003bca <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	e003      	b.n	8003bd2 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003bd0:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	601a      	str	r2, [r3, #0]

  return status;
 8003bda:	7afb      	ldrb	r3, [r7, #11]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bc80      	pop	{r7}
 8003be4:	4770      	bx	lr

08003be6 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b085      	sub	sp, #20
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	60f8      	str	r0, [r7, #12]
 8003bee:	60b9      	str	r1, [r7, #8]
 8003bf0:	607a      	str	r2, [r7, #4]
 8003bf2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003bfc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d004      	beq.n	8003c10 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c0e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c14:	f003 021c 	and.w	r2, r3, #28
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c22:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	2b10      	cmp	r3, #16
 8003c32:	d108      	bne.n	8003c46 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c44:	e007      	b.n	8003c56 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	60da      	str	r2, [r3, #12]
}
 8003c56:	bf00      	nop
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr

08003c60 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4b1c      	ldr	r3, [pc, #112]	; (8003ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d813      	bhi.n	8003c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c78:	089b      	lsrs	r3, r3, #2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c80:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	3b08      	subs	r3, #8
 8003c90:	4a14      	ldr	r2, [pc, #80]	; (8003ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003c92:	fba2 2303 	umull	r2, r3, r2, r3
 8003c96:	091b      	lsrs	r3, r3, #4
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	e011      	b.n	8003cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca0:	089b      	lsrs	r3, r3, #2
 8003ca2:	009a      	lsls	r2, r3, #2
 8003ca4:	4b10      	ldr	r3, [pc, #64]	; (8003ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8003ca6:	4413      	add	r3, r2
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	3b08      	subs	r3, #8
 8003cb4:	4a0b      	ldr	r2, [pc, #44]	; (8003ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cba:	091b      	lsrs	r3, r3, #4
 8003cbc:	3307      	adds	r3, #7
 8003cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a0a      	ldr	r2, [pc, #40]	; (8003cec <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8003cc4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f003 031f 	and.w	r3, r3, #31
 8003ccc:	2201      	movs	r2, #1
 8003cce:	409a      	lsls	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003cd4:	bf00      	nop
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bc80      	pop	{r7}
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	40020407 	.word	0x40020407
 8003ce4:	cccccccd 	.word	0xcccccccd
 8003ce8:	4002081c 	.word	0x4002081c
 8003cec:	40020880 	.word	0x40020880

08003cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d00:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4b0a      	ldr	r3, [pc, #40]	; (8003d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003d06:	4413      	add	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a08      	ldr	r2, [pc, #32]	; (8003d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003d14:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	2201      	movs	r2, #1
 8003d20:	409a      	lsls	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003d26:	bf00      	nop
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr
 8003d30:	1000823f 	.word	0x1000823f
 8003d34:	40020940 	.word	0x40020940

08003d38 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d46:	e140      	b.n	8003fca <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	fa01 f303 	lsl.w	r3, r1, r3
 8003d54:	4013      	ands	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 8132 	beq.w	8003fc4 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f003 0303 	and.w	r3, r3, #3
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d005      	beq.n	8003d78 <HAL_GPIO_Init+0x40>
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f003 0303 	and.w	r3, r3, #3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d130      	bne.n	8003dda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	2203      	movs	r2, #3
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	68da      	ldr	r2, [r3, #12]
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dae:	2201      	movs	r2, #1
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	43db      	mvns	r3, r3
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	091b      	lsrs	r3, r3, #4
 8003dc4:	f003 0201 	and.w	r2, r3, #1
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	fa02 f303 	lsl.w	r3, r2, r3
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f003 0303 	and.w	r3, r3, #3
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	d017      	beq.n	8003e16 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	2203      	movs	r2, #3
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	43db      	mvns	r3, r3
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f003 0303 	and.w	r3, r3, #3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d123      	bne.n	8003e6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	08da      	lsrs	r2, r3, #3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	3208      	adds	r2, #8
 8003e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	220f      	movs	r2, #15
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	4013      	ands	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	691a      	ldr	r2, [r3, #16]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	08da      	lsrs	r2, r3, #3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3208      	adds	r2, #8
 8003e64:	6939      	ldr	r1, [r7, #16]
 8003e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	2203      	movs	r2, #3
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	43db      	mvns	r3, r3
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f003 0203 	and.w	r2, r3, #3
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 808c 	beq.w	8003fc4 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003eac:	4a4e      	ldr	r2, [pc, #312]	; (8003fe8 <HAL_GPIO_Init+0x2b0>)
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	089b      	lsrs	r3, r3, #2
 8003eb2:	3302      	adds	r3, #2
 8003eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f003 0303 	and.w	r3, r3, #3
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	2207      	movs	r2, #7
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ed6:	d00d      	beq.n	8003ef4 <HAL_GPIO_Init+0x1bc>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a44      	ldr	r2, [pc, #272]	; (8003fec <HAL_GPIO_Init+0x2b4>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d007      	beq.n	8003ef0 <HAL_GPIO_Init+0x1b8>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a43      	ldr	r2, [pc, #268]	; (8003ff0 <HAL_GPIO_Init+0x2b8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d101      	bne.n	8003eec <HAL_GPIO_Init+0x1b4>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	e004      	b.n	8003ef6 <HAL_GPIO_Init+0x1be>
 8003eec:	2307      	movs	r3, #7
 8003eee:	e002      	b.n	8003ef6 <HAL_GPIO_Init+0x1be>
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e000      	b.n	8003ef6 <HAL_GPIO_Init+0x1be>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	f002 0203 	and.w	r2, r2, #3
 8003efc:	0092      	lsls	r2, r2, #2
 8003efe:	4093      	lsls	r3, r2
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f06:	4938      	ldr	r1, [pc, #224]	; (8003fe8 <HAL_GPIO_Init+0x2b0>)
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	089b      	lsrs	r3, r3, #2
 8003f0c:	3302      	adds	r3, #2
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f14:	4b37      	ldr	r3, [pc, #220]	; (8003ff4 <HAL_GPIO_Init+0x2bc>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4013      	ands	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f38:	4a2e      	ldr	r2, [pc, #184]	; (8003ff4 <HAL_GPIO_Init+0x2bc>)
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003f3e:	4b2d      	ldr	r3, [pc, #180]	; (8003ff4 <HAL_GPIO_Init+0x2bc>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	43db      	mvns	r3, r3
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f62:	4a24      	ldr	r2, [pc, #144]	; (8003ff4 <HAL_GPIO_Init+0x2bc>)
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003f68:	4b22      	ldr	r3, [pc, #136]	; (8003ff4 <HAL_GPIO_Init+0x2bc>)
 8003f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f6e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	43db      	mvns	r3, r3
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	4013      	ands	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003f8e:	4a19      	ldr	r2, [pc, #100]	; (8003ff4 <HAL_GPIO_Init+0x2bc>)
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003f96:	4b17      	ldr	r3, [pc, #92]	; (8003ff4 <HAL_GPIO_Init+0x2bc>)
 8003f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f9c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003fbc:	4a0d      	ldr	r2, [pc, #52]	; (8003ff4 <HAL_GPIO_Init+0x2bc>)
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f47f aeb7 	bne.w	8003d48 <HAL_GPIO_Init+0x10>
  }
}
 8003fda:	bf00      	nop
 8003fdc:	bf00      	nop
 8003fde:	371c      	adds	r7, #28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bc80      	pop	{r7}
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	40010000 	.word	0x40010000
 8003fec:	48000400 	.word	0x48000400
 8003ff0:	48000800 	.word	0x48000800
 8003ff4:	58000800 	.word	0x58000800

08003ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	460b      	mov	r3, r1
 8004002:	807b      	strh	r3, [r7, #2]
 8004004:	4613      	mov	r3, r2
 8004006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004008:	787b      	ldrb	r3, [r7, #1]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800400e:	887a      	ldrh	r2, [r7, #2]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004014:	e002      	b.n	800401c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004016:	887a      	ldrh	r2, [r7, #2]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	bc80      	pop	{r7}
 8004024:	4770      	bx	lr
	...

08004028 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800402c:	4b04      	ldr	r3, [pc, #16]	; (8004040 <HAL_PWR_EnableBkUpAccess+0x18>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a03      	ldr	r2, [pc, #12]	; (8004040 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004036:	6013      	str	r3, [r2, #0]
}
 8004038:	bf00      	nop
 800403a:	46bd      	mov	sp, r7
 800403c:	bc80      	pop	{r7}
 800403e:	4770      	bx	lr
 8004040:	58000400 	.word	0x58000400

08004044 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004048:	4b03      	ldr	r3, [pc, #12]	; (8004058 <HAL_PWREx_GetVoltageRange+0x14>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004050:	4618      	mov	r0, r3
 8004052:	46bd      	mov	sp, r7
 8004054:	bc80      	pop	{r7}
 8004056:	4770      	bx	lr
 8004058:	58000400 	.word	0x58000400

0800405c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8004060:	4b06      	ldr	r3, [pc, #24]	; (800407c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004068:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800406c:	d101      	bne.n	8004072 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800406e:	2301      	movs	r3, #1
 8004070:	e000      	b.n	8004074 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	bc80      	pop	{r7}
 800407a:	4770      	bx	lr
 800407c:	58000400 	.word	0x58000400

08004080 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800408e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004092:	6013      	str	r3, [r2, #0]
}
 8004094:	bf00      	nop
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr

0800409c <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80040a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040ae:	6013      	str	r3, [r2, #0]
}
 80040b0:	bf00      	nop
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr

080040b8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80040bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040ca:	d101      	bne.n	80040d0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80040cc:	2301      	movs	r3, #1
 80040ce:	e000      	b.n	80040d2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bc80      	pop	{r7}
 80040d8:	4770      	bx	lr

080040da <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80040da:	b480      	push	{r7}
 80040dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80040de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ec:	6013      	str	r3, [r2, #0]
}
 80040ee:	bf00      	nop
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc80      	pop	{r7}
 80040f4:	4770      	bx	lr

080040f6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80040f6:	b480      	push	{r7}
 80040f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80040fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004108:	6013      	str	r3, [r2, #0]
}
 800410a:	bf00      	nop
 800410c:	46bd      	mov	sp, r7
 800410e:	bc80      	pop	{r7}
 8004110:	4770      	bx	lr

08004112 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8004112:	b480      	push	{r7}
 8004114:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004120:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004124:	d101      	bne.n	800412a <LL_RCC_HSE_IsReady+0x18>
 8004126:	2301      	movs	r3, #1
 8004128:	e000      	b.n	800412c <LL_RCC_HSE_IsReady+0x1a>
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	46bd      	mov	sp, r7
 8004130:	bc80      	pop	{r7}
 8004132:	4770      	bx	lr

08004134 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004146:	6013      	str	r3, [r2, #0]
}
 8004148:	bf00      	nop
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr

08004150 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800415e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004162:	6013      	str	r3, [r2, #0]
}
 8004164:	bf00      	nop
 8004166:	46bd      	mov	sp, r7
 8004168:	bc80      	pop	{r7}
 800416a:	4770      	bx	lr

0800416c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800417a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800417e:	d101      	bne.n	8004184 <LL_RCC_HSI_IsReady+0x18>
 8004180:	2301      	movs	r3, #1
 8004182:	e000      	b.n	8004186 <LL_RCC_HSI_IsReady+0x1a>
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	46bd      	mov	sp, r7
 800418a:	bc80      	pop	{r7}
 800418c:	4770      	bx	lr

0800418e <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	061b      	lsls	r3, r3, #24
 80041a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041a8:	4313      	orrs	r3, r2
 80041aa:	604b      	str	r3, [r1, #4]
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bc80      	pop	{r7}
 80041b4:	4770      	bx	lr

080041b6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80041b6:	b480      	push	{r7}
 80041b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80041ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d101      	bne.n	80041ce <LL_RCC_LSE_IsReady+0x18>
 80041ca:	2301      	movs	r3, #1
 80041cc:	e000      	b.n	80041d0 <LL_RCC_LSE_IsReady+0x1a>
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bc80      	pop	{r7}
 80041d6:	4770      	bx	lr

080041d8 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80041dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041e8:	f043 0301 	orr.w	r3, r3, #1
 80041ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80041f0:	bf00      	nop
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr

080041f8 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80041fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004204:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004208:	f023 0301 	bic.w	r3, r3, #1
 800420c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004210:	bf00      	nop
 8004212:	46bd      	mov	sp, r7
 8004214:	bc80      	pop	{r7}
 8004216:	4770      	bx	lr

08004218 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800421c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004220:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b02      	cmp	r3, #2
 800422a:	d101      	bne.n	8004230 <LL_RCC_LSI_IsReady+0x18>
 800422c:	2301      	movs	r3, #1
 800422e:	e000      	b.n	8004232 <LL_RCC_LSI_IsReady+0x1a>
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	46bd      	mov	sp, r7
 8004236:	bc80      	pop	{r7}
 8004238:	4770      	bx	lr

0800423a <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800423a:	b480      	push	{r7}
 800423c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800423e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004248:	f043 0301 	orr.w	r3, r3, #1
 800424c:	6013      	str	r3, [r2, #0]
}
 800424e:	bf00      	nop
 8004250:	46bd      	mov	sp, r7
 8004252:	bc80      	pop	{r7}
 8004254:	4770      	bx	lr

08004256 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8004256:	b480      	push	{r7}
 8004258:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800425a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004264:	f023 0301 	bic.w	r3, r3, #1
 8004268:	6013      	str	r3, [r2, #0]
}
 800426a:	bf00      	nop
 800426c:	46bd      	mov	sp, r7
 800426e:	bc80      	pop	{r7}
 8004270:	4770      	bx	lr

08004272 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8004272:	b480      	push	{r7}
 8004274:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b02      	cmp	r3, #2
 8004282:	d101      	bne.n	8004288 <LL_RCC_MSI_IsReady+0x16>
 8004284:	2301      	movs	r3, #1
 8004286:	e000      	b.n	800428a <LL_RCC_MSI_IsReady+0x18>
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	46bd      	mov	sp, r7
 800428e:	bc80      	pop	{r7}
 8004290:	4770      	bx	lr

08004292 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8004292:	b480      	push	{r7}
 8004294:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d101      	bne.n	80042a8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80042a4:	2301      	movs	r3, #1
 80042a6:	e000      	b.n	80042aa <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bc80      	pop	{r7}
 80042b0:	4770      	bx	lr

080042b2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80042b2:	b480      	push	{r7}
 80042b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80042b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bc80      	pop	{r7}
 80042c6:	4770      	bx	lr

080042c8 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80042cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80042d8:	4618      	mov	r0, r3
 80042da:	46bd      	mov	sp, r7
 80042dc:	bc80      	pop	{r7}
 80042de:	4770      	bx	lr

080042e0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80042e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	021b      	lsls	r3, r3, #8
 80042f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042fa:	4313      	orrs	r3, r2
 80042fc:	604b      	str	r3, [r1, #4]
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	bc80      	pop	{r7}
 8004306:	4770      	bx	lr

08004308 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f023 0203 	bic.w	r2, r3, #3
 800431a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4313      	orrs	r3, r2
 8004322:	608b      	str	r3, [r1, #8]
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	bc80      	pop	{r7}
 800432c:	4770      	bx	lr

0800432e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800432e:	b480      	push	{r7}
 8004330:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f003 030c 	and.w	r3, r3, #12
}
 800433c:	4618      	mov	r0, r3
 800433e:	46bd      	mov	sp, r7
 8004340:	bc80      	pop	{r7}
 8004342:	4770      	bx	lr

08004344 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800434c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004356:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4313      	orrs	r3, r2
 800435e:	608b      	str	r3, [r1, #8]
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	bc80      	pop	{r7}
 8004368:	4770      	bx	lr

0800436a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004376:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800437a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800437e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4313      	orrs	r3, r2
 8004386:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	bc80      	pop	{r7}
 8004392:	4770      	bx	lr

08004394 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800439c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80043a4:	f023 020f 	bic.w	r2, r3, #15
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	091b      	lsrs	r3, r3, #4
 80043ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043b0:	4313      	orrs	r3, r2
 80043b2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr

080043c0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80043c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4313      	orrs	r3, r2
 80043da:	608b      	str	r3, [r1, #8]
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bc80      	pop	{r7}
 80043e4:	4770      	bx	lr

080043e6 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b083      	sub	sp, #12
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80043ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4313      	orrs	r3, r2
 8004400:	608b      	str	r3, [r1, #8]
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr

0800440c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800441a:	4618      	mov	r0, r3
 800441c:	46bd      	mov	sp, r7
 800441e:	bc80      	pop	{r7}
 8004420:	4770      	bx	lr

08004422 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8004422:	b480      	push	{r7}
 8004424:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800442a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800442e:	011b      	lsls	r3, r3, #4
 8004430:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004434:	4618      	mov	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	bc80      	pop	{r7}
 800443a:	4770      	bx	lr

0800443c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800444a:	4618      	mov	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	bc80      	pop	{r7}
 8004450:	4770      	bx	lr

08004452 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004452:	b480      	push	{r7}
 8004454:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004460:	4618      	mov	r0, r3
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr

08004468 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800446c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004476:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800447a:	6013      	str	r3, [r2, #0]
}
 800447c:	bf00      	nop
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr

08004484 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004492:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004496:	6013      	str	r3, [r2, #0]
}
 8004498:	bf00      	nop
 800449a:	46bd      	mov	sp, r7
 800449c:	bc80      	pop	{r7}
 800449e:	4770      	bx	lr

080044a0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80044a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044b2:	d101      	bne.n	80044b8 <LL_RCC_PLL_IsReady+0x18>
 80044b4:	2301      	movs	r3, #1
 80044b6:	e000      	b.n	80044ba <LL_RCC_PLL_IsReady+0x1a>
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	46bd      	mov	sp, r7
 80044be:	bc80      	pop	{r7}
 80044c0:	4770      	bx	lr

080044c2 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80044c2:	b480      	push	{r7}
 80044c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80044c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	0a1b      	lsrs	r3, r3, #8
 80044ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bc80      	pop	{r7}
 80044d8:	4770      	bx	lr

080044da <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80044da:	b480      	push	{r7}
 80044dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80044de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bc80      	pop	{r7}
 80044ee:	4770      	bx	lr

080044f0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80044f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80044fe:	4618      	mov	r0, r3
 8004500:	46bd      	mov	sp, r7
 8004502:	bc80      	pop	{r7}
 8004504:	4770      	bx	lr

08004506 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004506:	b480      	push	{r7}
 8004508:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800450a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 0303 	and.w	r3, r3, #3
}
 8004514:	4618      	mov	r0, r3
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr

0800451c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800452a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800452e:	d101      	bne.n	8004534 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004530:	2301      	movs	r3, #1
 8004532:	e000      	b.n	8004536 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	46bd      	mov	sp, r7
 800453a:	bc80      	pop	{r7}
 800453c:	4770      	bx	lr

0800453e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800453e:	b480      	push	{r7}
 8004540:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004546:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800454a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004552:	d101      	bne.n	8004558 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004554:	2301      	movs	r3, #1
 8004556:	e000      	b.n	800455a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	46bd      	mov	sp, r7
 800455e:	bc80      	pop	{r7}
 8004560:	4770      	bx	lr

08004562 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004562:	b480      	push	{r7}
 8004564:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800456a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800456e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004576:	d101      	bne.n	800457c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004578:	2301      	movs	r3, #1
 800457a:	e000      	b.n	800457e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	46bd      	mov	sp, r7
 8004582:	bc80      	pop	{r7}
 8004584:	4770      	bx	lr

08004586 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004586:	b480      	push	{r7}
 8004588:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800458a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004594:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004598:	d101      	bne.n	800459e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bc80      	pop	{r7}
 80045a6:	4770      	bx	lr

080045a8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80045a8:	b480      	push	{r7}
 80045aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80045ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045ba:	d101      	bne.n	80045c0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80045bc:	2301      	movs	r3, #1
 80045be:	e000      	b.n	80045c2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bc80      	pop	{r7}
 80045c8:	4770      	bx	lr
	...

080045cc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b088      	sub	sp, #32
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e36f      	b.n	8004cbe <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045de:	f7ff fea6 	bl	800432e <LL_RCC_GetSysClkSource>
 80045e2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045e4:	f7ff ff8f 	bl	8004506 <LL_RCC_PLL_GetMainSource>
 80045e8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0320 	and.w	r3, r3, #32
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 80c4 	beq.w	8004780 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d005      	beq.n	800460a <HAL_RCC_OscConfig+0x3e>
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	2b0c      	cmp	r3, #12
 8004602:	d176      	bne.n	80046f2 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d173      	bne.n	80046f2 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e353      	b.n	8004cbe <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800461a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0308 	and.w	r3, r3, #8
 8004624:	2b00      	cmp	r3, #0
 8004626:	d005      	beq.n	8004634 <HAL_RCC_OscConfig+0x68>
 8004628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004632:	e006      	b.n	8004642 <HAL_RCC_OscConfig+0x76>
 8004634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800463c:	091b      	lsrs	r3, r3, #4
 800463e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004642:	4293      	cmp	r3, r2
 8004644:	d222      	bcs.n	800468c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464a:	4618      	mov	r0, r3
 800464c:	f000 fd5a 	bl	8005104 <RCC_SetFlashLatencyFromMSIRange>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e331      	b.n	8004cbe <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800465a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004664:	f043 0308 	orr.w	r3, r3, #8
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004678:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800467c:	4313      	orrs	r3, r2
 800467e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff fe2b 	bl	80042e0 <LL_RCC_MSI_SetCalibTrimming>
 800468a:	e021      	b.n	80046d0 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800468c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004696:	f043 0308 	orr.w	r3, r3, #8
 800469a:	6013      	str	r3, [r2, #0]
 800469c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046ae:	4313      	orrs	r3, r2
 80046b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff fe12 	bl	80042e0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 fd1f 	bl	8005104 <RCC_SetFlashLatencyFromMSIRange>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e2f6      	b.n	8004cbe <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80046d0:	f000 fce0 	bl	8005094 <HAL_RCC_GetHCLKFreq>
 80046d4:	4603      	mov	r3, r0
 80046d6:	4aa7      	ldr	r2, [pc, #668]	; (8004974 <HAL_RCC_OscConfig+0x3a8>)
 80046d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80046da:	4ba7      	ldr	r3, [pc, #668]	; (8004978 <HAL_RCC_OscConfig+0x3ac>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fe fe50 	bl	8003384 <HAL_InitTick>
 80046e4:	4603      	mov	r3, r0
 80046e6:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80046e8:	7cfb      	ldrb	r3, [r7, #19]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d047      	beq.n	800477e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80046ee:	7cfb      	ldrb	r3, [r7, #19]
 80046f0:	e2e5      	b.n	8004cbe <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d02c      	beq.n	8004754 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80046fa:	f7ff fd9e 	bl	800423a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046fe:	f7fe f9cf 	bl	8002aa0 <HAL_GetTick>
 8004702:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004704:	e008      	b.n	8004718 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004706:	f7fe f9cb 	bl	8002aa0 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e2d2      	b.n	8004cbe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004718:	f7ff fdab 	bl	8004272 <LL_RCC_MSI_IsReady>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0f1      	beq.n	8004706 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800472c:	f043 0308 	orr.w	r3, r3, #8
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004740:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004744:	4313      	orrs	r3, r2
 8004746:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff fdc7 	bl	80042e0 <LL_RCC_MSI_SetCalibTrimming>
 8004752:	e015      	b.n	8004780 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004754:	f7ff fd7f 	bl	8004256 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004758:	f7fe f9a2 	bl	8002aa0 <HAL_GetTick>
 800475c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004760:	f7fe f99e 	bl	8002aa0 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e2a5      	b.n	8004cbe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004772:	f7ff fd7e 	bl	8004272 <LL_RCC_MSI_IsReady>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1f1      	bne.n	8004760 <HAL_RCC_OscConfig+0x194>
 800477c:	e000      	b.n	8004780 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800477e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	d058      	beq.n	800483e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	2b08      	cmp	r3, #8
 8004790:	d005      	beq.n	800479e <HAL_RCC_OscConfig+0x1d2>
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	2b0c      	cmp	r3, #12
 8004796:	d108      	bne.n	80047aa <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	2b03      	cmp	r3, #3
 800479c:	d105      	bne.n	80047aa <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d14b      	bne.n	800483e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e289      	b.n	8004cbe <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80047aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047bc:	4313      	orrs	r3, r2
 80047be:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c8:	d102      	bne.n	80047d0 <HAL_RCC_OscConfig+0x204>
 80047ca:	f7ff fc86 	bl	80040da <LL_RCC_HSE_Enable>
 80047ce:	e00d      	b.n	80047ec <HAL_RCC_OscConfig+0x220>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80047d8:	d104      	bne.n	80047e4 <HAL_RCC_OscConfig+0x218>
 80047da:	f7ff fc51 	bl	8004080 <LL_RCC_HSE_EnableTcxo>
 80047de:	f7ff fc7c 	bl	80040da <LL_RCC_HSE_Enable>
 80047e2:	e003      	b.n	80047ec <HAL_RCC_OscConfig+0x220>
 80047e4:	f7ff fc87 	bl	80040f6 <LL_RCC_HSE_Disable>
 80047e8:	f7ff fc58 	bl	800409c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d012      	beq.n	800481a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f4:	f7fe f954 	bl	8002aa0 <HAL_GetTick>
 80047f8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047fc:	f7fe f950 	bl	8002aa0 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b64      	cmp	r3, #100	; 0x64
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e257      	b.n	8004cbe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800480e:	f7ff fc80 	bl	8004112 <LL_RCC_HSE_IsReady>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0f1      	beq.n	80047fc <HAL_RCC_OscConfig+0x230>
 8004818:	e011      	b.n	800483e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800481a:	f7fe f941 	bl	8002aa0 <HAL_GetTick>
 800481e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004820:	e008      	b.n	8004834 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004822:	f7fe f93d 	bl	8002aa0 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b64      	cmp	r3, #100	; 0x64
 800482e:	d901      	bls.n	8004834 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e244      	b.n	8004cbe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004834:	f7ff fc6d 	bl	8004112 <LL_RCC_HSE_IsReady>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1f1      	bne.n	8004822 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d046      	beq.n	80048d8 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	2b04      	cmp	r3, #4
 800484e:	d005      	beq.n	800485c <HAL_RCC_OscConfig+0x290>
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	2b0c      	cmp	r3, #12
 8004854:	d10e      	bne.n	8004874 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	2b02      	cmp	r3, #2
 800485a:	d10b      	bne.n	8004874 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e22a      	b.n	8004cbe <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	4618      	mov	r0, r3
 800486e:	f7ff fc8e 	bl	800418e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004872:	e031      	b.n	80048d8 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d019      	beq.n	80048b0 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800487c:	f7ff fc5a 	bl	8004134 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004880:	f7fe f90e 	bl	8002aa0 <HAL_GetTick>
 8004884:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004888:	f7fe f90a 	bl	8002aa0 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e211      	b.n	8004cbe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800489a:	f7ff fc67 	bl	800416c <LL_RCC_HSI_IsReady>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d0f1      	beq.n	8004888 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7ff fc70 	bl	800418e <LL_RCC_HSI_SetCalibTrimming>
 80048ae:	e013      	b.n	80048d8 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048b0:	f7ff fc4e 	bl	8004150 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b4:	f7fe f8f4 	bl	8002aa0 <HAL_GetTick>
 80048b8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048bc:	f7fe f8f0 	bl	8002aa0 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e1f7      	b.n	8004cbe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80048ce:	f7ff fc4d 	bl	800416c <LL_RCC_HSI_IsReady>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1f1      	bne.n	80048bc <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d06e      	beq.n	80049c2 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d056      	beq.n	800499a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80048ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048f4:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69da      	ldr	r2, [r3, #28]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f003 0310 	and.w	r3, r3, #16
 8004900:	429a      	cmp	r2, r3
 8004902:	d031      	beq.n	8004968 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d006      	beq.n	800491c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e1d0      	b.n	8004cbe <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d013      	beq.n	800494e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8004926:	f7ff fc67 	bl	80041f8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800492a:	f7fe f8b9 	bl	8002aa0 <HAL_GetTick>
 800492e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8004930:	e008      	b.n	8004944 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004932:	f7fe f8b5 	bl	8002aa0 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b11      	cmp	r3, #17
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e1bc      	b.n	8004cbe <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8004944:	f7ff fc68 	bl	8004218 <LL_RCC_LSI_IsReady>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1f1      	bne.n	8004932 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800494e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004952:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004956:	f023 0210 	bic.w	r2, r3, #16
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004962:	4313      	orrs	r3, r2
 8004964:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004968:	f7ff fc36 	bl	80041d8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800496c:	f7fe f898 	bl	8002aa0 <HAL_GetTick>
 8004970:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8004972:	e00c      	b.n	800498e <HAL_RCC_OscConfig+0x3c2>
 8004974:	2000000c 	.word	0x2000000c
 8004978:	20000010 	.word	0x20000010
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800497c:	f7fe f890 	bl	8002aa0 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b11      	cmp	r3, #17
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e197      	b.n	8004cbe <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800498e:	f7ff fc43 	bl	8004218 <LL_RCC_LSI_IsReady>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d0f1      	beq.n	800497c <HAL_RCC_OscConfig+0x3b0>
 8004998:	e013      	b.n	80049c2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800499a:	f7ff fc2d 	bl	80041f8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800499e:	f7fe f87f 	bl	8002aa0 <HAL_GetTick>
 80049a2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80049a4:	e008      	b.n	80049b8 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049a6:	f7fe f87b 	bl	8002aa0 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b11      	cmp	r3, #17
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e182      	b.n	8004cbe <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80049b8:	f7ff fc2e 	bl	8004218 <LL_RCC_LSI_IsReady>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1f1      	bne.n	80049a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0304 	and.w	r3, r3, #4
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f000 80d8 	beq.w	8004b80 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80049d0:	f7ff fb44 	bl	800405c <LL_PWR_IsEnabledBkUpAccess>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d113      	bne.n	8004a02 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80049da:	f7ff fb25 	bl	8004028 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049de:	f7fe f85f 	bl	8002aa0 <HAL_GetTick>
 80049e2:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80049e4:	e008      	b.n	80049f8 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049e6:	f7fe f85b 	bl	8002aa0 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e162      	b.n	8004cbe <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80049f8:	f7ff fb30 	bl	800405c <LL_PWR_IsEnabledBkUpAccess>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0f1      	beq.n	80049e6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d07b      	beq.n	8004b02 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	2b85      	cmp	r3, #133	; 0x85
 8004a10:	d003      	beq.n	8004a1a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	2b05      	cmp	r3, #5
 8004a18:	d109      	bne.n	8004a2e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a26:	f043 0304 	orr.w	r3, r3, #4
 8004a2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a2e:	f7fe f837 	bl	8002aa0 <HAL_GetTick>
 8004a32:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a40:	f043 0301 	orr.w	r3, r3, #1
 8004a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004a48:	e00a      	b.n	8004a60 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a4a:	f7fe f829 	bl	8002aa0 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e12e      	b.n	8004cbe <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004a60:	f7ff fba9 	bl	80041b6 <LL_RCC_LSE_IsReady>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0ef      	beq.n	8004a4a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	2b81      	cmp	r3, #129	; 0x81
 8004a70:	d003      	beq.n	8004a7a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	2b85      	cmp	r3, #133	; 0x85
 8004a78:	d121      	bne.n	8004abe <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7a:	f7fe f811 	bl	8002aa0 <HAL_GetTick>
 8004a7e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004a94:	e00a      	b.n	8004aac <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a96:	f7fe f803 	bl	8002aa0 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e108      	b.n	8004cbe <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0ec      	beq.n	8004a96 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004abc:	e060      	b.n	8004b80 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004abe:	f7fd ffef 	bl	8002aa0 <HAL_GetTick>
 8004ac2:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004acc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ad0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004ad8:	e00a      	b.n	8004af0 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ada:	f7fd ffe1 	bl	8002aa0 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e0e6      	b.n	8004cbe <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1ec      	bne.n	8004ada <HAL_RCC_OscConfig+0x50e>
 8004b00:	e03e      	b.n	8004b80 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b02:	f7fd ffcd 	bl	8002aa0 <HAL_GetTick>
 8004b06:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004b1c:	e00a      	b.n	8004b34 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b1e:	f7fd ffbf 	bl	8002aa0 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d901      	bls.n	8004b34 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e0c4      	b.n	8004cbe <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1ec      	bne.n	8004b1e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b44:	f7fd ffac 	bl	8002aa0 <HAL_GetTick>
 8004b48:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b56:	f023 0301 	bic.w	r3, r3, #1
 8004b5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004b5e:	e00a      	b.n	8004b76 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b60:	f7fd ff9e 	bl	8002aa0 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e0a3      	b.n	8004cbe <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004b76:	f7ff fb1e 	bl	80041b6 <LL_RCC_LSE_IsReady>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1ef      	bne.n	8004b60 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 8099 	beq.w	8004cbc <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	2b0c      	cmp	r3, #12
 8004b8e:	d06c      	beq.n	8004c6a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d14b      	bne.n	8004c30 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b98:	f7ff fc74 	bl	8004484 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9c:	f7fd ff80 	bl	8002aa0 <HAL_GetTick>
 8004ba0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ba4:	f7fd ff7c 	bl	8002aa0 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b0a      	cmp	r3, #10
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e083      	b.n	8004cbe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004bb6:	f7ff fc73 	bl	80044a0 <LL_RCC_PLL_IsReady>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1f1      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bc4:	68da      	ldr	r2, [r3, #12]
 8004bc6:	4b40      	ldr	r3, [pc, #256]	; (8004cc8 <HAL_RCC_OscConfig+0x6fc>)
 8004bc8:	4013      	ands	r3, r2
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004bd2:	4311      	orrs	r1, r2
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bd8:	0212      	lsls	r2, r2, #8
 8004bda:	4311      	orrs	r1, r2
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004be0:	4311      	orrs	r1, r2
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004be6:	4311      	orrs	r1, r2
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004bec:	430a      	orrs	r2, r1
 8004bee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bf6:	f7ff fc37 	bl	8004468 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c08:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c0a:	f7fd ff49 	bl	8002aa0 <HAL_GetTick>
 8004c0e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8004c10:	e008      	b.n	8004c24 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c12:	f7fd ff45 	bl	8002aa0 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b0a      	cmp	r3, #10
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e04c      	b.n	8004cbe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8004c24:	f7ff fc3c 	bl	80044a0 <LL_RCC_PLL_IsReady>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0f1      	beq.n	8004c12 <HAL_RCC_OscConfig+0x646>
 8004c2e:	e045      	b.n	8004cbc <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c30:	f7ff fc28 	bl	8004484 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c34:	f7fd ff34 	bl	8002aa0 <HAL_GetTick>
 8004c38:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c3c:	f7fd ff30 	bl	8002aa0 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b0a      	cmp	r3, #10
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e037      	b.n	8004cbe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004c4e:	f7ff fc27 	bl	80044a0 <LL_RCC_PLL_IsReady>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1f1      	bne.n	8004c3c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c62:	4b1a      	ldr	r3, [pc, #104]	; (8004ccc <HAL_RCC_OscConfig+0x700>)
 8004c64:	4013      	ands	r3, r2
 8004c66:	60cb      	str	r3, [r1, #12]
 8004c68:	e028      	b.n	8004cbc <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d101      	bne.n	8004c76 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e023      	b.n	8004cbe <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	f003 0203 	and.w	r2, r3, #3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d115      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d10e      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca4:	021b      	lsls	r3, r3, #8
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d106      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d001      	beq.n	8004cbc <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e000      	b.n	8004cbe <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3720      	adds	r7, #32
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	11c1808c 	.word	0x11c1808c
 8004ccc:	eefefffc 	.word	0xeefefffc

08004cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e12c      	b.n	8004f3e <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ce4:	4b98      	ldr	r3, [pc, #608]	; (8004f48 <HAL_RCC_ClockConfig+0x278>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d91b      	bls.n	8004d2a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cf2:	4b95      	ldr	r3, [pc, #596]	; (8004f48 <HAL_RCC_ClockConfig+0x278>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f023 0207 	bic.w	r2, r3, #7
 8004cfa:	4993      	ldr	r1, [pc, #588]	; (8004f48 <HAL_RCC_ClockConfig+0x278>)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d02:	f7fd fecd 	bl	8002aa0 <HAL_GetTick>
 8004d06:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d08:	e008      	b.n	8004d1c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004d0a:	f7fd fec9 	bl	8002aa0 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e110      	b.n	8004f3e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d1c:	4b8a      	ldr	r3, [pc, #552]	; (8004f48 <HAL_RCC_ClockConfig+0x278>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0307 	and.w	r3, r3, #7
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d1ef      	bne.n	8004d0a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d016      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7ff fb02 	bl	8004344 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d40:	f7fd feae 	bl	8002aa0 <HAL_GetTick>
 8004d44:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d48:	f7fd feaa 	bl	8002aa0 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e0f1      	b.n	8004f3e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004d5a:	f7ff fbdf 	bl	800451c <LL_RCC_IsActiveFlag_HPRE>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d0f1      	beq.n	8004d48 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0320 	and.w	r3, r3, #32
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d016      	beq.n	8004d9e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7ff faf8 	bl	800436a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d7a:	f7fd fe91 	bl	8002aa0 <HAL_GetTick>
 8004d7e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d82:	f7fd fe8d 	bl	8002aa0 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e0d4      	b.n	8004f3e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004d94:	f7ff fbd3 	bl	800453e <LL_RCC_IsActiveFlag_C2HPRE>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0f1      	beq.n	8004d82 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d016      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff faf0 	bl	8004394 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004db4:	f7fd fe74 	bl	8002aa0 <HAL_GetTick>
 8004db8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004dba:	e008      	b.n	8004dce <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004dbc:	f7fd fe70 	bl	8002aa0 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e0b7      	b.n	8004f3e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004dce:	f7ff fbc8 	bl	8004562 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0f1      	beq.n	8004dbc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d016      	beq.n	8004e12 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff fae9 	bl	80043c0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004dee:	f7fd fe57 	bl	8002aa0 <HAL_GetTick>
 8004df2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004df4:	e008      	b.n	8004e08 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004df6:	f7fd fe53 	bl	8002aa0 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e09a      	b.n	8004f3e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004e08:	f7ff fbbd 	bl	8004586 <LL_RCC_IsActiveFlag_PPRE1>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0f1      	beq.n	8004df6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0308 	and.w	r3, r3, #8
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d017      	beq.n	8004e4e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7ff fade 	bl	80043e6 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004e2a:	f7fd fe39 	bl	8002aa0 <HAL_GetTick>
 8004e2e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004e30:	e008      	b.n	8004e44 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004e32:	f7fd fe35 	bl	8002aa0 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e07c      	b.n	8004f3e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004e44:	f7ff fbb0 	bl	80045a8 <LL_RCC_IsActiveFlag_PPRE2>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0f1      	beq.n	8004e32 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d043      	beq.n	8004ee2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d106      	bne.n	8004e70 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004e62:	f7ff f956 	bl	8004112 <LL_RCC_HSE_IsReady>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d11e      	bne.n	8004eaa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e066      	b.n	8004f3e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	d106      	bne.n	8004e86 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004e78:	f7ff fb12 	bl	80044a0 <LL_RCC_PLL_IsReady>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d113      	bne.n	8004eaa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e05b      	b.n	8004f3e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d106      	bne.n	8004e9c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004e8e:	f7ff f9f0 	bl	8004272 <LL_RCC_MSI_IsReady>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d108      	bne.n	8004eaa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e050      	b.n	8004f3e <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004e9c:	f7ff f966 	bl	800416c <LL_RCC_HSI_IsReady>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e049      	b.n	8004f3e <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7ff fa2a 	bl	8004308 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004eb4:	f7fd fdf4 	bl	8002aa0 <HAL_GetTick>
 8004eb8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eba:	e00a      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ebc:	f7fd fdf0 	bl	8002aa0 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e035      	b.n	8004f3e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ed2:	f7ff fa2c 	bl	800432e <LL_RCC_GetSysClkSource>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d1ec      	bne.n	8004ebc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ee2:	4b19      	ldr	r3, [pc, #100]	; (8004f48 <HAL_RCC_ClockConfig+0x278>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0307 	and.w	r3, r3, #7
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d21b      	bcs.n	8004f28 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ef0:	4b15      	ldr	r3, [pc, #84]	; (8004f48 <HAL_RCC_ClockConfig+0x278>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f023 0207 	bic.w	r2, r3, #7
 8004ef8:	4913      	ldr	r1, [pc, #76]	; (8004f48 <HAL_RCC_ClockConfig+0x278>)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f00:	f7fd fdce 	bl	8002aa0 <HAL_GetTick>
 8004f04:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004f08:	f7fd fdca 	bl	8002aa0 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e011      	b.n	8004f3e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f1a:	4b0b      	ldr	r3, [pc, #44]	; (8004f48 <HAL_RCC_ClockConfig+0x278>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0307 	and.w	r3, r3, #7
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d1ef      	bne.n	8004f08 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004f28:	f000 f8b4 	bl	8005094 <HAL_RCC_GetHCLKFreq>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	4a07      	ldr	r2, [pc, #28]	; (8004f4c <HAL_RCC_ClockConfig+0x27c>)
 8004f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8004f32:	4b07      	ldr	r3, [pc, #28]	; (8004f50 <HAL_RCC_ClockConfig+0x280>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7fe fa24 	bl	8003384 <HAL_InitTick>
 8004f3c:	4603      	mov	r3, r0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	58004000 	.word	0x58004000
 8004f4c:	2000000c 	.word	0x2000000c
 8004f50:	20000010 	.word	0x20000010

08004f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f54:	b590      	push	{r4, r7, lr}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f62:	f7ff f9e4 	bl	800432e <LL_RCC_GetSysClkSource>
 8004f66:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f68:	f7ff facd 	bl	8004506 <LL_RCC_PLL_GetMainSource>
 8004f6c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <HAL_RCC_GetSysClockFreq+0x2c>
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	2b0c      	cmp	r3, #12
 8004f78:	d139      	bne.n	8004fee <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d136      	bne.n	8004fee <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004f80:	f7ff f987 	bl	8004292 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d115      	bne.n	8004fb6 <HAL_RCC_GetSysClockFreq+0x62>
 8004f8a:	f7ff f982 	bl	8004292 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d106      	bne.n	8004fa2 <HAL_RCC_GetSysClockFreq+0x4e>
 8004f94:	f7ff f98d 	bl	80042b2 <LL_RCC_MSI_GetRange>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	0a1b      	lsrs	r3, r3, #8
 8004f9c:	f003 030f 	and.w	r3, r3, #15
 8004fa0:	e005      	b.n	8004fae <HAL_RCC_GetSysClockFreq+0x5a>
 8004fa2:	f7ff f991 	bl	80042c8 <LL_RCC_MSI_GetRangeAfterStandby>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	0a1b      	lsrs	r3, r3, #8
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	4a36      	ldr	r2, [pc, #216]	; (8005088 <HAL_RCC_GetSysClockFreq+0x134>)
 8004fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fb4:	e014      	b.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x8c>
 8004fb6:	f7ff f96c 	bl	8004292 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d106      	bne.n	8004fce <HAL_RCC_GetSysClockFreq+0x7a>
 8004fc0:	f7ff f977 	bl	80042b2 <LL_RCC_MSI_GetRange>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	091b      	lsrs	r3, r3, #4
 8004fc8:	f003 030f 	and.w	r3, r3, #15
 8004fcc:	e005      	b.n	8004fda <HAL_RCC_GetSysClockFreq+0x86>
 8004fce:	f7ff f97b 	bl	80042c8 <LL_RCC_MSI_GetRangeAfterStandby>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	091b      	lsrs	r3, r3, #4
 8004fd6:	f003 030f 	and.w	r3, r3, #15
 8004fda:	4a2b      	ldr	r2, [pc, #172]	; (8005088 <HAL_RCC_GetSysClockFreq+0x134>)
 8004fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fe0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d115      	bne.n	8005014 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004fec:	e012      	b.n	8005014 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	2b04      	cmp	r3, #4
 8004ff2:	d102      	bne.n	8004ffa <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ff4:	4b25      	ldr	r3, [pc, #148]	; (800508c <HAL_RCC_GetSysClockFreq+0x138>)
 8004ff6:	617b      	str	r3, [r7, #20]
 8004ff8:	e00c      	b.n	8005014 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d109      	bne.n	8005014 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005000:	f7ff f85a 	bl	80040b8 <LL_RCC_HSE_IsEnabledDiv2>
 8005004:	4603      	mov	r3, r0
 8005006:	2b01      	cmp	r3, #1
 8005008:	d102      	bne.n	8005010 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800500a:	4b20      	ldr	r3, [pc, #128]	; (800508c <HAL_RCC_GetSysClockFreq+0x138>)
 800500c:	617b      	str	r3, [r7, #20]
 800500e:	e001      	b.n	8005014 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005010:	4b1f      	ldr	r3, [pc, #124]	; (8005090 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005012:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005014:	f7ff f98b 	bl	800432e <LL_RCC_GetSysClkSource>
 8005018:	4603      	mov	r3, r0
 800501a:	2b0c      	cmp	r3, #12
 800501c:	d12f      	bne.n	800507e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800501e:	f7ff fa72 	bl	8004506 <LL_RCC_PLL_GetMainSource>
 8005022:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b02      	cmp	r3, #2
 8005028:	d003      	beq.n	8005032 <HAL_RCC_GetSysClockFreq+0xde>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b03      	cmp	r3, #3
 800502e:	d003      	beq.n	8005038 <HAL_RCC_GetSysClockFreq+0xe4>
 8005030:	e00d      	b.n	800504e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005032:	4b16      	ldr	r3, [pc, #88]	; (800508c <HAL_RCC_GetSysClockFreq+0x138>)
 8005034:	60fb      	str	r3, [r7, #12]
        break;
 8005036:	e00d      	b.n	8005054 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005038:	f7ff f83e 	bl	80040b8 <LL_RCC_HSE_IsEnabledDiv2>
 800503c:	4603      	mov	r3, r0
 800503e:	2b01      	cmp	r3, #1
 8005040:	d102      	bne.n	8005048 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005042:	4b12      	ldr	r3, [pc, #72]	; (800508c <HAL_RCC_GetSysClockFreq+0x138>)
 8005044:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005046:	e005      	b.n	8005054 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005048:	4b11      	ldr	r3, [pc, #68]	; (8005090 <HAL_RCC_GetSysClockFreq+0x13c>)
 800504a:	60fb      	str	r3, [r7, #12]
        break;
 800504c:	e002      	b.n	8005054 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	60fb      	str	r3, [r7, #12]
        break;
 8005052:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005054:	f7ff fa35 	bl	80044c2 <LL_RCC_PLL_GetN>
 8005058:	4602      	mov	r2, r0
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	fb03 f402 	mul.w	r4, r3, r2
 8005060:	f7ff fa46 	bl	80044f0 <LL_RCC_PLL_GetDivider>
 8005064:	4603      	mov	r3, r0
 8005066:	091b      	lsrs	r3, r3, #4
 8005068:	3301      	adds	r3, #1
 800506a:	fbb4 f4f3 	udiv	r4, r4, r3
 800506e:	f7ff fa34 	bl	80044da <LL_RCC_PLL_GetR>
 8005072:	4603      	mov	r3, r0
 8005074:	0f5b      	lsrs	r3, r3, #29
 8005076:	3301      	adds	r3, #1
 8005078:	fbb4 f3f3 	udiv	r3, r4, r3
 800507c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800507e:	697b      	ldr	r3, [r7, #20]
}
 8005080:	4618      	mov	r0, r3
 8005082:	371c      	adds	r7, #28
 8005084:	46bd      	mov	sp, r7
 8005086:	bd90      	pop	{r4, r7, pc}
 8005088:	0800cc84 	.word	0x0800cc84
 800508c:	00f42400 	.word	0x00f42400
 8005090:	01e84800 	.word	0x01e84800

08005094 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005094:	b598      	push	{r3, r4, r7, lr}
 8005096:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005098:	f7ff ff5c 	bl	8004f54 <HAL_RCC_GetSysClockFreq>
 800509c:	4604      	mov	r4, r0
 800509e:	f7ff f9b5 	bl	800440c <LL_RCC_GetAHBPrescaler>
 80050a2:	4603      	mov	r3, r0
 80050a4:	091b      	lsrs	r3, r3, #4
 80050a6:	f003 030f 	and.w	r3, r3, #15
 80050aa:	4a03      	ldr	r2, [pc, #12]	; (80050b8 <HAL_RCC_GetHCLKFreq+0x24>)
 80050ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050b0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	bd98      	pop	{r3, r4, r7, pc}
 80050b8:	0800cc24 	.word	0x0800cc24

080050bc <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050bc:	b598      	push	{r3, r4, r7, lr}
 80050be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80050c0:	f7ff ffe8 	bl	8005094 <HAL_RCC_GetHCLKFreq>
 80050c4:	4604      	mov	r4, r0
 80050c6:	f7ff f9b9 	bl	800443c <LL_RCC_GetAPB1Prescaler>
 80050ca:	4603      	mov	r3, r0
 80050cc:	0a1b      	lsrs	r3, r3, #8
 80050ce:	4a03      	ldr	r2, [pc, #12]	; (80050dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80050d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050d4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80050d8:	4618      	mov	r0, r3
 80050da:	bd98      	pop	{r3, r4, r7, pc}
 80050dc:	0800cc64 	.word	0x0800cc64

080050e0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050e0:	b598      	push	{r3, r4, r7, lr}
 80050e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80050e4:	f7ff ffd6 	bl	8005094 <HAL_RCC_GetHCLKFreq>
 80050e8:	4604      	mov	r4, r0
 80050ea:	f7ff f9b2 	bl	8004452 <LL_RCC_GetAPB2Prescaler>
 80050ee:	4603      	mov	r3, r0
 80050f0:	0adb      	lsrs	r3, r3, #11
 80050f2:	4a03      	ldr	r2, [pc, #12]	; (8005100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050f8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	bd98      	pop	{r3, r4, r7, pc}
 8005100:	0800cc64 	.word	0x0800cc64

08005104 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005104:	b590      	push	{r4, r7, lr}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	091b      	lsrs	r3, r3, #4
 8005110:	f003 030f 	and.w	r3, r3, #15
 8005114:	4a10      	ldr	r2, [pc, #64]	; (8005158 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8005116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800511a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800511c:	f7ff f981 	bl	8004422 <LL_RCC_GetAHB3Prescaler>
 8005120:	4603      	mov	r3, r0
 8005122:	091b      	lsrs	r3, r3, #4
 8005124:	f003 030f 	and.w	r3, r3, #15
 8005128:	4a0c      	ldr	r2, [pc, #48]	; (800515c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800512a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	fbb2 f3f3 	udiv	r3, r2, r3
 8005134:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	4a09      	ldr	r2, [pc, #36]	; (8005160 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800513a:	fba2 2303 	umull	r2, r3, r2, r3
 800513e:	0c9c      	lsrs	r4, r3, #18
 8005140:	f7fe ff80 	bl	8004044 <HAL_PWREx_GetVoltageRange>
 8005144:	4603      	mov	r3, r0
 8005146:	4619      	mov	r1, r3
 8005148:	4620      	mov	r0, r4
 800514a:	f000 f80b 	bl	8005164 <RCC_SetFlashLatency>
 800514e:	4603      	mov	r3, r0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	bd90      	pop	{r4, r7, pc}
 8005158:	0800cc84 	.word	0x0800cc84
 800515c:	0800cc24 	.word	0x0800cc24
 8005160:	431bde83 	.word	0x431bde83

08005164 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b08e      	sub	sp, #56	; 0x38
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800516e:	4a3a      	ldr	r2, [pc, #232]	; (8005258 <RCC_SetFlashLatency+0xf4>)
 8005170:	f107 0320 	add.w	r3, r7, #32
 8005174:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005178:	6018      	str	r0, [r3, #0]
 800517a:	3304      	adds	r3, #4
 800517c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800517e:	4a37      	ldr	r2, [pc, #220]	; (800525c <RCC_SetFlashLatency+0xf8>)
 8005180:	f107 0318 	add.w	r3, r7, #24
 8005184:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005188:	6018      	str	r0, [r3, #0]
 800518a:	3304      	adds	r3, #4
 800518c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800518e:	4a34      	ldr	r2, [pc, #208]	; (8005260 <RCC_SetFlashLatency+0xfc>)
 8005190:	f107 030c 	add.w	r3, r7, #12
 8005194:	ca07      	ldmia	r2, {r0, r1, r2}
 8005196:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800519a:	2300      	movs	r3, #0
 800519c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051a4:	d11b      	bne.n	80051de <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80051a6:	2300      	movs	r3, #0
 80051a8:	633b      	str	r3, [r7, #48]	; 0x30
 80051aa:	e014      	b.n	80051d6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80051ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ae:	005b      	lsls	r3, r3, #1
 80051b0:	3338      	adds	r3, #56	; 0x38
 80051b2:	443b      	add	r3, r7
 80051b4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80051b8:	461a      	mov	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4293      	cmp	r3, r2
 80051be:	d807      	bhi.n	80051d0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80051c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	3338      	adds	r3, #56	; 0x38
 80051c6:	443b      	add	r3, r7
 80051c8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80051cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051ce:	e021      	b.n	8005214 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80051d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d2:	3301      	adds	r3, #1
 80051d4:	633b      	str	r3, [r7, #48]	; 0x30
 80051d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d9e7      	bls.n	80051ac <RCC_SetFlashLatency+0x48>
 80051dc:	e01a      	b.n	8005214 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80051de:	2300      	movs	r3, #0
 80051e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051e2:	e014      	b.n	800520e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80051e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	3338      	adds	r3, #56	; 0x38
 80051ea:	443b      	add	r3, r7
 80051ec:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80051f0:	461a      	mov	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d807      	bhi.n	8005208 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80051f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	3338      	adds	r3, #56	; 0x38
 80051fe:	443b      	add	r3, r7
 8005200:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005204:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005206:	e005      	b.n	8005214 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520a:	3301      	adds	r3, #1
 800520c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800520e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005210:	2b02      	cmp	r3, #2
 8005212:	d9e7      	bls.n	80051e4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005214:	4b13      	ldr	r3, [pc, #76]	; (8005264 <RCC_SetFlashLatency+0x100>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f023 0207 	bic.w	r2, r3, #7
 800521c:	4911      	ldr	r1, [pc, #68]	; (8005264 <RCC_SetFlashLatency+0x100>)
 800521e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005220:	4313      	orrs	r3, r2
 8005222:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005224:	f7fd fc3c 	bl	8002aa0 <HAL_GetTick>
 8005228:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800522a:	e008      	b.n	800523e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800522c:	f7fd fc38 	bl	8002aa0 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d901      	bls.n	800523e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e007      	b.n	800524e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800523e:	4b09      	ldr	r3, [pc, #36]	; (8005264 <RCC_SetFlashLatency+0x100>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005248:	429a      	cmp	r2, r3
 800524a:	d1ef      	bne.n	800522c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3738      	adds	r7, #56	; 0x38
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	0800cbe4 	.word	0x0800cbe4
 800525c:	0800cbec 	.word	0x0800cbec
 8005260:	0800cbf4 	.word	0x0800cbf4
 8005264:	58004000 	.word	0x58004000

08005268 <LL_RCC_LSE_IsReady>:
{
 8005268:	b480      	push	{r7}
 800526a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800526c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b02      	cmp	r3, #2
 800527a:	d101      	bne.n	8005280 <LL_RCC_LSE_IsReady+0x18>
 800527c:	2301      	movs	r3, #1
 800527e:	e000      	b.n	8005282 <LL_RCC_LSE_IsReady+0x1a>
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	46bd      	mov	sp, r7
 8005286:	bc80      	pop	{r7}
 8005288:	4770      	bx	lr

0800528a <LL_RCC_SetUSARTClockSource>:
{
 800528a:	b480      	push	{r7}
 800528c:	b083      	sub	sp, #12
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8005292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005296:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	0c1b      	lsrs	r3, r3, #16
 800529e:	43db      	mvns	r3, r3
 80052a0:	401a      	ands	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052aa:	4313      	orrs	r3, r2
 80052ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bc80      	pop	{r7}
 80052b8:	4770      	bx	lr

080052ba <LL_RCC_SetI2SClockSource>:
{
 80052ba:	b480      	push	{r7}
 80052bc:	b083      	sub	sp, #12
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80052c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80052da:	bf00      	nop
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	bc80      	pop	{r7}
 80052e2:	4770      	bx	lr

080052e4 <LL_RCC_SetLPUARTClockSource>:
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80052ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4313      	orrs	r3, r2
 8005300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	bc80      	pop	{r7}
 800530c:	4770      	bx	lr

0800530e <LL_RCC_SetI2CClockSource>:
{
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800531a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	091b      	lsrs	r3, r3, #4
 8005322:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005326:	43db      	mvns	r3, r3
 8005328:	401a      	ands	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005332:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005336:	4313      	orrs	r3, r2
 8005338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	bc80      	pop	{r7}
 8005344:	4770      	bx	lr

08005346 <LL_RCC_SetLPTIMClockSource>:
{
 8005346:	b480      	push	{r7}
 8005348:	b083      	sub	sp, #12
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800534e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005352:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	0c1b      	lsrs	r3, r3, #16
 800535a:	041b      	lsls	r3, r3, #16
 800535c:	43db      	mvns	r3, r3
 800535e:	401a      	ands	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	041b      	lsls	r3, r3, #16
 8005364:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005368:	4313      	orrs	r3, r2
 800536a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800536e:	bf00      	nop
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	bc80      	pop	{r7}
 8005376:	4770      	bx	lr

08005378 <LL_RCC_SetRNGClockSource>:
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005388:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800538c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4313      	orrs	r3, r2
 8005394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	bc80      	pop	{r7}
 80053a0:	4770      	bx	lr

080053a2 <LL_RCC_SetADCClockSource>:
{
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80053aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4313      	orrs	r3, r2
 80053be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80053c2:	bf00      	nop
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bc80      	pop	{r7}
 80053ca:	4770      	bx	lr

080053cc <LL_RCC_SetRTCClockSource>:
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80053d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bc80      	pop	{r7}
 80053f4:	4770      	bx	lr

080053f6 <LL_RCC_GetRTCClockSource>:
{
 80053f6:	b480      	push	{r7}
 80053f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80053fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005402:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005406:	4618      	mov	r0, r3
 8005408:	46bd      	mov	sp, r7
 800540a:	bc80      	pop	{r7}
 800540c:	4770      	bx	lr

0800540e <LL_RCC_ForceBackupDomainReset>:
{
 800540e:	b480      	push	{r7}
 8005410:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800541e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005422:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005426:	bf00      	nop
 8005428:	46bd      	mov	sp, r7
 800542a:	bc80      	pop	{r7}
 800542c:	4770      	bx	lr

0800542e <LL_RCC_ReleaseBackupDomainReset>:
{
 800542e:	b480      	push	{r7}
 8005430:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800543a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800543e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005442:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005446:	bf00      	nop
 8005448:	46bd      	mov	sp, r7
 800544a:	bc80      	pop	{r7}
 800544c:	4770      	bx	lr
	...

08005450 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8005458:	2300      	movs	r3, #0
 800545a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800545c:	2300      	movs	r3, #0
 800545e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005460:	2300      	movs	r3, #0
 8005462:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d058      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8005470:	f7fe fdda 	bl	8004028 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005474:	f7fd fb14 	bl	8002aa0 <HAL_GetTick>
 8005478:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800547a:	e009      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800547c:	f7fd fb10 	bl	8002aa0 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d902      	bls.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	74fb      	strb	r3, [r7, #19]
        break;
 800548e:	e006      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005490:	4b7b      	ldr	r3, [pc, #492]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800549c:	d1ee      	bne.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800549e:	7cfb      	ldrb	r3, [r7, #19]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d13c      	bne.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80054a4:	f7ff ffa7 	bl	80053f6 <LL_RCC_GetRTCClockSource>
 80054a8:	4602      	mov	r2, r0
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d00f      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054be:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054c0:	f7ff ffa5 	bl	800540e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054c4:	f7ff ffb3 	bl	800542e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d014      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054dc:	f7fd fae0 	bl	8002aa0 <HAL_GetTick>
 80054e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80054e2:	e00b      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054e4:	f7fd fadc 	bl	8002aa0 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d902      	bls.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	74fb      	strb	r3, [r7, #19]
            break;
 80054fa:	e004      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80054fc:	f7ff feb4 	bl	8005268 <LL_RCC_LSE_IsReady>
 8005500:	4603      	mov	r3, r0
 8005502:	2b01      	cmp	r3, #1
 8005504:	d1ee      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8005506:	7cfb      	ldrb	r3, [r7, #19]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d105      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005510:	4618      	mov	r0, r3
 8005512:	f7ff ff5b 	bl	80053cc <LL_RCC_SetRTCClockSource>
 8005516:	e004      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005518:	7cfb      	ldrb	r3, [r7, #19]
 800551a:	74bb      	strb	r3, [r7, #18]
 800551c:	e001      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800551e:	7cfb      	ldrb	r3, [r7, #19]
 8005520:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d004      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	4618      	mov	r0, r3
 8005534:	f7ff fea9 	bl	800528a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d004      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	4618      	mov	r0, r3
 800554a:	f7ff fe9e 	bl	800528a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b00      	cmp	r3, #0
 8005558:	d004      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	4618      	mov	r0, r3
 8005560:	f7ff fec0 	bl	80052e4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800556c:	2b00      	cmp	r3, #0
 800556e:	d004      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff fee6 	bl	8005346 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005582:	2b00      	cmp	r3, #0
 8005584:	d004      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	4618      	mov	r0, r3
 800558c:	f7ff fedb 	bl	8005346 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005598:	2b00      	cmp	r3, #0
 800559a:	d004      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7ff fed0 	bl	8005346 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d004      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7ff fea9 	bl	800530e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d004      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7ff fe9e 	bl	800530e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d004      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7ff fe93 	bl	800530e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0310 	and.w	r3, r3, #16
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d011      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7ff fe5e 	bl	80052ba <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005606:	d107      	bne.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8005608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005616:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d010      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff fea5 	bl	8005378 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005632:	2b00      	cmp	r3, #0
 8005634:	d107      	bne.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005640:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005644:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d011      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005656:	4618      	mov	r0, r3
 8005658:	f7ff fea3 	bl	80053a2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005664:	d107      	bne.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005674:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8005676:	7cbb      	ldrb	r3, [r7, #18]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3718      	adds	r7, #24
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	58000400 	.word	0x58000400

08005684 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800568c:	4b06      	ldr	r3, [pc, #24]	; (80056a8 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005694:	4904      	ldr	r1, [pc, #16]	; (80056a8 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4313      	orrs	r3, r2
 800569a:	608b      	str	r3, [r1, #8]
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bc80      	pop	{r7}
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	58000400 	.word	0x58000400

080056ac <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80056b0:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80056b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b6:	4a04      	ldr	r2, [pc, #16]	; (80056c8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80056b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80056c0:	bf00      	nop
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bc80      	pop	{r7}
 80056c6:	4770      	bx	lr
 80056c8:	58000400 	.word	0x58000400

080056cc <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80056d0:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80056d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d6:	4a04      	ldr	r2, [pc, #16]	; (80056e8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80056d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80056e0:	bf00      	nop
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bc80      	pop	{r7}
 80056e6:	4770      	bx	lr
 80056e8:	58000400 	.word	0x58000400

080056ec <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80056f0:	4b03      	ldr	r3, [pc, #12]	; (8005700 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80056f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056f6:	619a      	str	r2, [r3, #24]
}
 80056f8:	bf00      	nop
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bc80      	pop	{r7}
 80056fe:	4770      	bx	lr
 8005700:	58000400 	.word	0x58000400

08005704 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8005704:	b480      	push	{r7}
 8005706:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8005708:	4b06      	ldr	r3, [pc, #24]	; (8005724 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b02      	cmp	r3, #2
 8005712:	d101      	bne.n	8005718 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8005714:	2301      	movs	r3, #1
 8005716:	e000      	b.n	800571a <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	46bd      	mov	sp, r7
 800571e:	bc80      	pop	{r7}
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	58000400 	.word	0x58000400

08005728 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8005728:	b480      	push	{r7}
 800572a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800572c:	4b06      	ldr	r3, [pc, #24]	; (8005748 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	f003 0304 	and.w	r3, r3, #4
 8005734:	2b04      	cmp	r3, #4
 8005736:	d101      	bne.n	800573c <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8005738:	2301      	movs	r3, #1
 800573a:	e000      	b.n	800573e <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	46bd      	mov	sp, r7
 8005742:	bc80      	pop	{r7}
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	58000400 	.word	0x58000400

0800574c <LL_RCC_RF_DisableReset>:
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8005750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005754:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005758:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800575c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005760:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005764:	bf00      	nop
 8005766:	46bd      	mov	sp, r7
 8005768:	bc80      	pop	{r7}
 800576a:	4770      	bx	lr

0800576c <LL_RCC_IsRFUnderReset>:
{
 800576c:	b480      	push	{r7}
 800576e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8005770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005774:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005778:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800577c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005780:	d101      	bne.n	8005786 <LL_RCC_IsRFUnderReset+0x1a>
 8005782:	2301      	movs	r3, #1
 8005784:	e000      	b.n	8005788 <LL_RCC_IsRFUnderReset+0x1c>
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	46bd      	mov	sp, r7
 800578c:	bc80      	pop	{r7}
 800578e:	4770      	bx	lr

08005790 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005798:	4b06      	ldr	r3, [pc, #24]	; (80057b4 <LL_EXTI_EnableIT_32_63+0x24>)
 800579a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800579e:	4905      	ldr	r1, [pc, #20]	; (80057b4 <LL_EXTI_EnableIT_32_63+0x24>)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bc80      	pop	{r7}
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	58000800 	.word	0x58000800

080057b8 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d103      	bne.n	80057ce <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	73fb      	strb	r3, [r7, #15]
    return status;
 80057ca:	7bfb      	ldrb	r3, [r7, #15]
 80057cc:	e052      	b.n	8005874 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80057ce:	2300      	movs	r3, #0
 80057d0:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	799b      	ldrb	r3, [r3, #6]
 80057d6:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80057d8:	7bbb      	ldrb	r3, [r7, #14]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d002      	beq.n	80057e4 <HAL_SUBGHZ_Init+0x2c>
 80057de:	7bbb      	ldrb	r3, [r7, #14]
 80057e0:	2b03      	cmp	r3, #3
 80057e2:	d109      	bne.n	80057f8 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7fd f93e 	bl	8002a6c <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80057f0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80057f4:	f7ff ffcc 	bl	8005790 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80057f8:	7bbb      	ldrb	r3, [r7, #14]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d126      	bne.n	800584c <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2202      	movs	r2, #2
 8005802:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8005804:	f7ff ffa2 	bl	800574c <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005808:	4b1c      	ldr	r3, [pc, #112]	; (800587c <HAL_SUBGHZ_Init+0xc4>)
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	4613      	mov	r3, r2
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	1a9b      	subs	r3, r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	0cdb      	lsrs	r3, r3, #19
 8005816:	2264      	movs	r2, #100	; 0x64
 8005818:	fb02 f303 	mul.w	r3, r2, r3
 800581c:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d105      	bne.n	8005830 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	609a      	str	r2, [r3, #8]
        break;
 800582e:	e007      	b.n	8005840 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	3b01      	subs	r3, #1
 8005834:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8005836:	f7ff ff99 	bl	800576c <LL_RCC_IsRFUnderReset>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1ee      	bne.n	800581e <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005840:	f7ff ff34 	bl	80056ac <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8005844:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005848:	f7ff ff1c 	bl	8005684 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800584c:	f7ff ff4e 	bl	80056ec <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8005850:	7bfb      	ldrb	r3, [r7, #15]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10a      	bne.n	800586c <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4618      	mov	r0, r3
 800585c:	f000 faac 	bl	8005db8 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	719a      	strb	r2, [r3, #6]

  return status;
 8005872:	7bfb      	ldrb	r3, [r7, #15]
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	2000000c 	.word	0x2000000c

08005880 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	607a      	str	r2, [r7, #4]
 800588a:	461a      	mov	r2, r3
 800588c:	460b      	mov	r3, r1
 800588e:	817b      	strh	r3, [r7, #10]
 8005890:	4613      	mov	r3, r2
 8005892:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	799b      	ldrb	r3, [r3, #6]
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b01      	cmp	r3, #1
 800589c:	d14a      	bne.n	8005934 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	795b      	ldrb	r3, [r3, #5]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d101      	bne.n	80058aa <HAL_SUBGHZ_WriteRegisters+0x2a>
 80058a6:	2302      	movs	r3, #2
 80058a8:	e045      	b.n	8005936 <HAL_SUBGHZ_WriteRegisters+0xb6>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2201      	movs	r2, #1
 80058ae:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2202      	movs	r2, #2
 80058b4:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f000 fb4c 	bl	8005f54 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80058bc:	f7ff ff06 	bl	80056cc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80058c0:	210d      	movs	r1, #13
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f000 fa98 	bl	8005df8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80058c8:	897b      	ldrh	r3, [r7, #10]
 80058ca:	0a1b      	lsrs	r3, r3, #8
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	4619      	mov	r1, r3
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f000 fa90 	bl	8005df8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80058d8:	897b      	ldrh	r3, [r7, #10]
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	4619      	mov	r1, r3
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 fa8a 	bl	8005df8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80058e4:	2300      	movs	r3, #0
 80058e6:	82bb      	strh	r3, [r7, #20]
 80058e8:	e00a      	b.n	8005900 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80058ea:	8abb      	ldrh	r3, [r7, #20]
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	4413      	add	r3, r2
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	4619      	mov	r1, r3
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 fa7f 	bl	8005df8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80058fa:	8abb      	ldrh	r3, [r7, #20]
 80058fc:	3301      	adds	r3, #1
 80058fe:	82bb      	strh	r3, [r7, #20]
 8005900:	8aba      	ldrh	r2, [r7, #20]
 8005902:	893b      	ldrh	r3, [r7, #8]
 8005904:	429a      	cmp	r2, r3
 8005906:	d3f0      	bcc.n	80058ea <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005908:	f7ff fed0 	bl	80056ac <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f000 fb45 	bl	8005f9c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d002      	beq.n	8005920 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	75fb      	strb	r3, [r7, #23]
 800591e:	e001      	b.n	8005924 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8005920:	2300      	movs	r3, #0
 8005922:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2201      	movs	r2, #1
 8005928:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	715a      	strb	r2, [r3, #5]

    return status;
 8005930:	7dfb      	ldrb	r3, [r7, #23]
 8005932:	e000      	b.n	8005936 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8005934:	2302      	movs	r3, #2
  }
}
 8005936:	4618      	mov	r0, r3
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b088      	sub	sp, #32
 8005942:	af00      	add	r7, sp, #0
 8005944:	60f8      	str	r0, [r7, #12]
 8005946:	607a      	str	r2, [r7, #4]
 8005948:	461a      	mov	r2, r3
 800594a:	460b      	mov	r3, r1
 800594c:	817b      	strh	r3, [r7, #10]
 800594e:	4613      	mov	r3, r2
 8005950:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	799b      	ldrb	r3, [r3, #6]
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b01      	cmp	r3, #1
 800595e:	d14a      	bne.n	80059f6 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	795b      	ldrb	r3, [r3, #5]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d101      	bne.n	800596c <HAL_SUBGHZ_ReadRegisters+0x2e>
 8005968:	2302      	movs	r3, #2
 800596a:	e045      	b.n	80059f8 <HAL_SUBGHZ_ReadRegisters+0xba>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2201      	movs	r2, #1
 8005970:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f000 faee 	bl	8005f54 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005978:	f7ff fea8 	bl	80056cc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800597c:	211d      	movs	r1, #29
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 fa3a 	bl	8005df8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005984:	897b      	ldrh	r3, [r7, #10]
 8005986:	0a1b      	lsrs	r3, r3, #8
 8005988:	b29b      	uxth	r3, r3
 800598a:	b2db      	uxtb	r3, r3
 800598c:	4619      	mov	r1, r3
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f000 fa32 	bl	8005df8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005994:	897b      	ldrh	r3, [r7, #10]
 8005996:	b2db      	uxtb	r3, r3
 8005998:	4619      	mov	r1, r3
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f000 fa2c 	bl	8005df8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80059a0:	2100      	movs	r1, #0
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f000 fa28 	bl	8005df8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80059a8:	2300      	movs	r3, #0
 80059aa:	82fb      	strh	r3, [r7, #22]
 80059ac:	e009      	b.n	80059c2 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80059ae:	69b9      	ldr	r1, [r7, #24]
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f000 fa77 	bl	8005ea4 <SUBGHZSPI_Receive>
      pData++;
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	3301      	adds	r3, #1
 80059ba:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80059bc:	8afb      	ldrh	r3, [r7, #22]
 80059be:	3301      	adds	r3, #1
 80059c0:	82fb      	strh	r3, [r7, #22]
 80059c2:	8afa      	ldrh	r2, [r7, #22]
 80059c4:	893b      	ldrh	r3, [r7, #8]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d3f1      	bcc.n	80059ae <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80059ca:	f7ff fe6f 	bl	80056ac <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f000 fae4 	bl	8005f9c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	77fb      	strb	r3, [r7, #31]
 80059e0:	e001      	b.n	80059e6 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80059e2:	2300      	movs	r3, #0
 80059e4:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2201      	movs	r2, #1
 80059ea:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	715a      	strb	r2, [r3, #5]

    return status;
 80059f2:	7ffb      	ldrb	r3, [r7, #31]
 80059f4:	e000      	b.n	80059f8 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80059f6:	2302      	movs	r3, #2
  }
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3720      	adds	r7, #32
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	607a      	str	r2, [r7, #4]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	72fb      	strb	r3, [r7, #11]
 8005a10:	4613      	mov	r3, r2
 8005a12:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	799b      	ldrb	r3, [r3, #6]
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d14a      	bne.n	8005ab4 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	795b      	ldrb	r3, [r3, #5]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d101      	bne.n	8005a2a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8005a26:	2302      	movs	r3, #2
 8005a28:	e045      	b.n	8005ab6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 fa8f 	bl	8005f54 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8005a36:	7afb      	ldrb	r3, [r7, #11]
 8005a38:	2b84      	cmp	r3, #132	; 0x84
 8005a3a:	d002      	beq.n	8005a42 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8005a3c:	7afb      	ldrb	r3, [r7, #11]
 8005a3e:	2b94      	cmp	r3, #148	; 0x94
 8005a40:	d103      	bne.n	8005a4a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2201      	movs	r2, #1
 8005a46:	711a      	strb	r2, [r3, #4]
 8005a48:	e002      	b.n	8005a50 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005a50:	f7ff fe3c 	bl	80056cc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005a54:	7afb      	ldrb	r3, [r7, #11]
 8005a56:	4619      	mov	r1, r3
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f000 f9cd 	bl	8005df8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005a5e:	2300      	movs	r3, #0
 8005a60:	82bb      	strh	r3, [r7, #20]
 8005a62:	e00a      	b.n	8005a7a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005a64:	8abb      	ldrh	r3, [r7, #20]
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	4413      	add	r3, r2
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f000 f9c2 	bl	8005df8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005a74:	8abb      	ldrh	r3, [r7, #20]
 8005a76:	3301      	adds	r3, #1
 8005a78:	82bb      	strh	r3, [r7, #20]
 8005a7a:	8aba      	ldrh	r2, [r7, #20]
 8005a7c:	893b      	ldrh	r3, [r7, #8]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d3f0      	bcc.n	8005a64 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005a82:	f7ff fe13 	bl	80056ac <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8005a86:	7afb      	ldrb	r3, [r7, #11]
 8005a88:	2b84      	cmp	r3, #132	; 0x84
 8005a8a:	d002      	beq.n	8005a92 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f000 fa85 	bl	8005f9c <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d002      	beq.n	8005aa0 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	75fb      	strb	r3, [r7, #23]
 8005a9e:	e001      	b.n	8005aa4 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	715a      	strb	r2, [r3, #5]

    return status;
 8005ab0:	7dfb      	ldrb	r3, [r7, #23]
 8005ab2:	e000      	b.n	8005ab6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8005ab4:	2302      	movs	r3, #2
  }
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3718      	adds	r7, #24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b088      	sub	sp, #32
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	60f8      	str	r0, [r7, #12]
 8005ac6:	607a      	str	r2, [r7, #4]
 8005ac8:	461a      	mov	r2, r3
 8005aca:	460b      	mov	r3, r1
 8005acc:	72fb      	strb	r3, [r7, #11]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	799b      	ldrb	r3, [r3, #6]
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d13d      	bne.n	8005b5c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	795b      	ldrb	r3, [r3, #5]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d101      	bne.n	8005aec <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	e038      	b.n	8005b5e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2201      	movs	r2, #1
 8005af0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 fa2e 	bl	8005f54 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005af8:	f7ff fde8 	bl	80056cc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005afc:	7afb      	ldrb	r3, [r7, #11]
 8005afe:	4619      	mov	r1, r3
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 f979 	bl	8005df8 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005b06:	2100      	movs	r1, #0
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 f975 	bl	8005df8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005b0e:	2300      	movs	r3, #0
 8005b10:	82fb      	strh	r3, [r7, #22]
 8005b12:	e009      	b.n	8005b28 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005b14:	69b9      	ldr	r1, [r7, #24]
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 f9c4 	bl	8005ea4 <SUBGHZSPI_Receive>
      pData++;
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005b22:	8afb      	ldrh	r3, [r7, #22]
 8005b24:	3301      	adds	r3, #1
 8005b26:	82fb      	strh	r3, [r7, #22]
 8005b28:	8afa      	ldrh	r2, [r7, #22]
 8005b2a:	893b      	ldrh	r3, [r7, #8]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d3f1      	bcc.n	8005b14 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005b30:	f7ff fdbc 	bl	80056ac <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 fa31 	bl	8005f9c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	77fb      	strb	r3, [r7, #31]
 8005b46:	e001      	b.n	8005b4c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	715a      	strb	r2, [r3, #5]

    return status;
 8005b58:	7ffb      	ldrb	r3, [r7, #31]
 8005b5a:	e000      	b.n	8005b5e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005b5c:	2302      	movs	r3, #2
  }
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3720      	adds	r7, #32
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b086      	sub	sp, #24
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	60f8      	str	r0, [r7, #12]
 8005b6e:	607a      	str	r2, [r7, #4]
 8005b70:	461a      	mov	r2, r3
 8005b72:	460b      	mov	r3, r1
 8005b74:	72fb      	strb	r3, [r7, #11]
 8005b76:	4613      	mov	r3, r2
 8005b78:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	799b      	ldrb	r3, [r3, #6]
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d13e      	bne.n	8005c02 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	795b      	ldrb	r3, [r3, #5]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d101      	bne.n	8005b90 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	e039      	b.n	8005c04 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2201      	movs	r2, #1
 8005b94:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 f9dc 	bl	8005f54 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005b9c:	f7ff fd96 	bl	80056cc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8005ba0:	210e      	movs	r1, #14
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 f928 	bl	8005df8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005ba8:	7afb      	ldrb	r3, [r7, #11]
 8005baa:	4619      	mov	r1, r3
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 f923 	bl	8005df8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	82bb      	strh	r3, [r7, #20]
 8005bb6:	e00a      	b.n	8005bce <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005bb8:	8abb      	ldrh	r3, [r7, #20]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 f918 	bl	8005df8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005bc8:	8abb      	ldrh	r3, [r7, #20]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	82bb      	strh	r3, [r7, #20]
 8005bce:	8aba      	ldrh	r2, [r7, #20]
 8005bd0:	893b      	ldrh	r3, [r7, #8]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d3f0      	bcc.n	8005bb8 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005bd6:	f7ff fd69 	bl	80056ac <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f000 f9de 	bl	8005f9c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d002      	beq.n	8005bee <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	75fb      	strb	r3, [r7, #23]
 8005bec:	e001      	b.n	8005bf2 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	715a      	strb	r2, [r3, #5]

    return status;
 8005bfe:	7dfb      	ldrb	r3, [r7, #23]
 8005c00:	e000      	b.n	8005c04 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005c02:	2302      	movs	r3, #2
  }
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3718      	adds	r7, #24
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b088      	sub	sp, #32
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	607a      	str	r2, [r7, #4]
 8005c16:	461a      	mov	r2, r3
 8005c18:	460b      	mov	r3, r1
 8005c1a:	72fb      	strb	r3, [r7, #11]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	799b      	ldrb	r3, [r3, #6]
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d141      	bne.n	8005cb2 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	795b      	ldrb	r3, [r3, #5]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d101      	bne.n	8005c3a <HAL_SUBGHZ_ReadBuffer+0x2e>
 8005c36:	2302      	movs	r3, #2
 8005c38:	e03c      	b.n	8005cb4 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 f987 	bl	8005f54 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005c46:	f7ff fd41 	bl	80056cc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8005c4a:	211e      	movs	r1, #30
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 f8d3 	bl	8005df8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005c52:	7afb      	ldrb	r3, [r7, #11]
 8005c54:	4619      	mov	r1, r3
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f000 f8ce 	bl	8005df8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 f8ca 	bl	8005df8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005c64:	2300      	movs	r3, #0
 8005c66:	82fb      	strh	r3, [r7, #22]
 8005c68:	e009      	b.n	8005c7e <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005c6a:	69b9      	ldr	r1, [r7, #24]
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 f919 	bl	8005ea4 <SUBGHZSPI_Receive>
      pData++;
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	3301      	adds	r3, #1
 8005c76:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005c78:	8afb      	ldrh	r3, [r7, #22]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	82fb      	strh	r3, [r7, #22]
 8005c7e:	8afa      	ldrh	r2, [r7, #22]
 8005c80:	893b      	ldrh	r3, [r7, #8]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d3f1      	bcc.n	8005c6a <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005c86:	f7ff fd11 	bl	80056ac <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 f986 	bl	8005f9c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d002      	beq.n	8005c9e <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	77fb      	strb	r3, [r7, #31]
 8005c9c:	e001      	b.n	8005ca2 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	715a      	strb	r2, [r3, #5]

    return status;
 8005cae:	7ffb      	ldrb	r3, [r7, #31]
 8005cb0:	e000      	b.n	8005cb4 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005cb2:	2302      	movs	r3, #2
  }
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3720      	adds	r7, #32
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8005cc8:	f107 020c 	add.w	r2, r7, #12
 8005ccc:	2302      	movs	r3, #2
 8005cce:	2112      	movs	r1, #18
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7ff fef4 	bl	8005abe <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8005cd6:	7b3b      	ldrb	r3, [r7, #12]
 8005cd8:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8005cda:	89fb      	ldrh	r3, [r7, #14]
 8005cdc:	021b      	lsls	r3, r3, #8
 8005cde:	b21a      	sxth	r2, r3
 8005ce0:	7b7b      	ldrb	r3, [r7, #13]
 8005ce2:	b21b      	sxth	r3, r3
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	b21b      	sxth	r3, r3
 8005ce8:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8005cea:	f107 020c 	add.w	r2, r7, #12
 8005cee:	2302      	movs	r3, #2
 8005cf0:	2102      	movs	r1, #2
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7ff fe84 	bl	8005a00 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8005cf8:	89fb      	ldrh	r3, [r7, #14]
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d002      	beq.n	8005d08 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f005 f95c 	bl	800afc0 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8005d08:	89fb      	ldrh	r3, [r7, #14]
 8005d0a:	f003 0302 	and.w	r3, r3, #2
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d002      	beq.n	8005d18 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f005 f962 	bl	800afdc <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8005d18:	89fb      	ldrh	r3, [r7, #14]
 8005d1a:	f003 0304 	and.w	r3, r3, #4
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d002      	beq.n	8005d28 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f005 f9b2 	bl	800b08c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8005d28:	89fb      	ldrh	r3, [r7, #14]
 8005d2a:	f003 0308 	and.w	r3, r3, #8
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d002      	beq.n	8005d38 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f005 f9b8 	bl	800b0a8 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8005d38:	89fb      	ldrh	r3, [r7, #14]
 8005d3a:	f003 0310 	and.w	r3, r3, #16
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f005 f9be 	bl	800b0c4 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8005d48:	89fb      	ldrh	r3, [r7, #14]
 8005d4a:	f003 0320 	and.w	r3, r3, #32
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d002      	beq.n	8005d58 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f005 f98c 	bl	800b070 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8005d58:	89fb      	ldrh	r3, [r7, #14]
 8005d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f005 f948 	bl	800aff8 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8005d68:	89fb      	ldrh	r3, [r7, #14]
 8005d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00d      	beq.n	8005d8e <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8005d72:	89fb      	ldrh	r3, [r7, #14]
 8005d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d004      	beq.n	8005d86 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f005 f948 	bl	800b014 <HAL_SUBGHZ_CADStatusCallback>
 8005d84:	e003      	b.n	8005d8e <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8005d86:	2100      	movs	r1, #0
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f005 f943 	bl	800b014 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8005d8e:	89fb      	ldrh	r3, [r7, #14]
 8005d90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f005 f959 	bl	800b050 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8005d9e:	89fb      	ldrh	r3, [r7, #14]
 8005da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d002      	beq.n	8005dae <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f005 f999 	bl	800b0e0 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8005dae:	bf00      	nop
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
	...

08005db8 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005dc0:	4b0c      	ldr	r3, [pc, #48]	; (8005df4 <SUBGHZSPI_Init+0x3c>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a0b      	ldr	r2, [pc, #44]	; (8005df4 <SUBGHZSPI_Init+0x3c>)
 8005dc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dca:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8005dcc:	4a09      	ldr	r2, [pc, #36]	; (8005df4 <SUBGHZSPI_Init+0x3c>)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8005dd4:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8005dd6:	4b07      	ldr	r3, [pc, #28]	; (8005df4 <SUBGHZSPI_Init+0x3c>)
 8005dd8:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8005ddc:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005dde:	4b05      	ldr	r3, [pc, #20]	; (8005df4 <SUBGHZSPI_Init+0x3c>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a04      	ldr	r2, [pc, #16]	; (8005df4 <SUBGHZSPI_Init+0x3c>)
 8005de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005de8:	6013      	str	r3, [r2, #0]
}
 8005dea:	bf00      	nop
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bc80      	pop	{r7}
 8005df2:	4770      	bx	lr
 8005df4:	58010000 	.word	0x58010000

08005df8 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b087      	sub	sp, #28
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	460b      	mov	r3, r1
 8005e02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005e04:	2300      	movs	r3, #0
 8005e06:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005e08:	4b23      	ldr	r3, [pc, #140]	; (8005e98 <SUBGHZSPI_Transmit+0xa0>)
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	00db      	lsls	r3, r3, #3
 8005e10:	1a9b      	subs	r3, r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	0cdb      	lsrs	r3, r3, #19
 8005e16:	2264      	movs	r2, #100	; 0x64
 8005e18:	fb02 f303 	mul.w	r3, r2, r3
 8005e1c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d105      	bne.n	8005e30 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	609a      	str	r2, [r3, #8]
      break;
 8005e2e:	e008      	b.n	8005e42 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	3b01      	subs	r3, #1
 8005e34:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005e36:	4b19      	ldr	r3, [pc, #100]	; (8005e9c <SUBGHZSPI_Transmit+0xa4>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d1ed      	bne.n	8005e1e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8005e42:	4b17      	ldr	r3, [pc, #92]	; (8005ea0 <SUBGHZSPI_Transmit+0xa8>)
 8005e44:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	78fa      	ldrb	r2, [r7, #3]
 8005e4a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005e4c:	4b12      	ldr	r3, [pc, #72]	; (8005e98 <SUBGHZSPI_Transmit+0xa0>)
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	4613      	mov	r3, r2
 8005e52:	00db      	lsls	r3, r3, #3
 8005e54:	1a9b      	subs	r3, r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	0cdb      	lsrs	r3, r3, #19
 8005e5a:	2264      	movs	r2, #100	; 0x64
 8005e5c:	fb02 f303 	mul.w	r3, r2, r3
 8005e60:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d105      	bne.n	8005e74 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	609a      	str	r2, [r3, #8]
      break;
 8005e72:	e008      	b.n	8005e86 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	3b01      	subs	r3, #1
 8005e78:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005e7a:	4b08      	ldr	r3, [pc, #32]	; (8005e9c <SUBGHZSPI_Transmit+0xa4>)
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d1ed      	bne.n	8005e62 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8005e86:	4b05      	ldr	r3, [pc, #20]	; (8005e9c <SUBGHZSPI_Transmit+0xa4>)
 8005e88:	68db      	ldr	r3, [r3, #12]

  return status;
 8005e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	371c      	adds	r7, #28
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bc80      	pop	{r7}
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	2000000c 	.word	0x2000000c
 8005e9c:	58010000 	.word	0x58010000
 8005ea0:	5801000c 	.word	0x5801000c

08005ea4 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b087      	sub	sp, #28
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005eb2:	4b25      	ldr	r3, [pc, #148]	; (8005f48 <SUBGHZSPI_Receive+0xa4>)
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	00db      	lsls	r3, r3, #3
 8005eba:	1a9b      	subs	r3, r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	0cdb      	lsrs	r3, r3, #19
 8005ec0:	2264      	movs	r2, #100	; 0x64
 8005ec2:	fb02 f303 	mul.w	r3, r2, r3
 8005ec6:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d105      	bne.n	8005eda <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	609a      	str	r2, [r3, #8]
      break;
 8005ed8:	e008      	b.n	8005eec <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	3b01      	subs	r3, #1
 8005ede:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005ee0:	4b1a      	ldr	r3, [pc, #104]	; (8005f4c <SUBGHZSPI_Receive+0xa8>)
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d1ed      	bne.n	8005ec8 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8005eec:	4b18      	ldr	r3, [pc, #96]	; (8005f50 <SUBGHZSPI_Receive+0xac>)
 8005eee:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	22ff      	movs	r2, #255	; 0xff
 8005ef4:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005ef6:	4b14      	ldr	r3, [pc, #80]	; (8005f48 <SUBGHZSPI_Receive+0xa4>)
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	4613      	mov	r3, r2
 8005efc:	00db      	lsls	r3, r3, #3
 8005efe:	1a9b      	subs	r3, r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	0cdb      	lsrs	r3, r3, #19
 8005f04:	2264      	movs	r2, #100	; 0x64
 8005f06:	fb02 f303 	mul.w	r3, r2, r3
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d105      	bne.n	8005f1e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	609a      	str	r2, [r3, #8]
      break;
 8005f1c:	e008      	b.n	8005f30 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	3b01      	subs	r3, #1
 8005f22:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005f24:	4b09      	ldr	r3, [pc, #36]	; (8005f4c <SUBGHZSPI_Receive+0xa8>)
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d1ed      	bne.n	8005f0c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8005f30:	4b06      	ldr	r3, [pc, #24]	; (8005f4c <SUBGHZSPI_Receive+0xa8>)
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	701a      	strb	r2, [r3, #0]

  return status;
 8005f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	371c      	adds	r7, #28
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bc80      	pop	{r7}
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	2000000c 	.word	0x2000000c
 8005f4c:	58010000 	.word	0x58010000
 8005f50:	5801000c 	.word	0x5801000c

08005f54 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	791b      	ldrb	r3, [r3, #4]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d111      	bne.n	8005f88 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8005f64:	4b0c      	ldr	r3, [pc, #48]	; (8005f98 <SUBGHZ_CheckDeviceReady+0x44>)
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	4613      	mov	r3, r2
 8005f6a:	005b      	lsls	r3, r3, #1
 8005f6c:	4413      	add	r3, r2
 8005f6e:	00db      	lsls	r3, r3, #3
 8005f70:	0c1b      	lsrs	r3, r3, #16
 8005f72:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005f74:	f7ff fbaa 	bl	80056cc <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1f9      	bne.n	8005f78 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005f84:	f7ff fb92 	bl	80056ac <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 f807 	bl	8005f9c <SUBGHZ_WaitOnBusy>
 8005f8e:	4603      	mov	r3, r0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	2000000c 	.word	0x2000000c

08005f9c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8005fa8:	4b12      	ldr	r3, [pc, #72]	; (8005ff4 <SUBGHZ_WaitOnBusy+0x58>)
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	4613      	mov	r3, r2
 8005fae:	005b      	lsls	r3, r3, #1
 8005fb0:	4413      	add	r3, r2
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	0d1b      	lsrs	r3, r3, #20
 8005fb6:	2264      	movs	r2, #100	; 0x64
 8005fb8:	fb02 f303 	mul.w	r3, r2, r3
 8005fbc:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8005fbe:	f7ff fbb3 	bl	8005728 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8005fc2:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d105      	bne.n	8005fd6 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	609a      	str	r2, [r3, #8]
      break;
 8005fd4:	e009      	b.n	8005fea <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8005fdc:	f7ff fb92 	bl	8005704 <LL_PWR_IsActiveFlag_RFBUSYS>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d0e9      	beq.n	8005fbe <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8005fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3718      	adds	r7, #24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	2000000c 	.word	0x2000000c

08005ff8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e049      	b.n	800609e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d106      	bne.n	8006024 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f7fc fe00 	bl	8002c24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	3304      	adds	r3, #4
 8006034:	4619      	mov	r1, r3
 8006036:	4610      	mov	r0, r2
 8006038:	f000 f944 	bl	80062c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3708      	adds	r7, #8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
	...

080060a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d001      	beq.n	80060c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e02e      	b.n	800611e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2202      	movs	r2, #2
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a16      	ldr	r2, [pc, #88]	; (8006128 <HAL_TIM_Base_Start+0x80>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d004      	beq.n	80060dc <HAL_TIM_Base_Start+0x34>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060da:	d115      	bne.n	8006108 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	689a      	ldr	r2, [r3, #8]
 80060e2:	4b12      	ldr	r3, [pc, #72]	; (800612c <HAL_TIM_Base_Start+0x84>)
 80060e4:	4013      	ands	r3, r2
 80060e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2b06      	cmp	r3, #6
 80060ec:	d015      	beq.n	800611a <HAL_TIM_Base_Start+0x72>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060f4:	d011      	beq.n	800611a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f042 0201 	orr.w	r2, r2, #1
 8006104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006106:	e008      	b.n	800611a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f042 0201 	orr.w	r2, r2, #1
 8006116:	601a      	str	r2, [r3, #0]
 8006118:	e000      	b.n	800611c <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800611a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	bc80      	pop	{r7}
 8006126:	4770      	bx	lr
 8006128:	40012c00 	.word	0x40012c00
 800612c:	00010007 	.word	0x00010007

08006130 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006144:	2b01      	cmp	r3, #1
 8006146:	d101      	bne.n	800614c <HAL_TIM_ConfigClockSource+0x1c>
 8006148:	2302      	movs	r3, #2
 800614a:	e0b6      	b.n	80062ba <HAL_TIM_ConfigClockSource+0x18a>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800616a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800616e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006176:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006188:	d03e      	beq.n	8006208 <HAL_TIM_ConfigClockSource+0xd8>
 800618a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800618e:	f200 8087 	bhi.w	80062a0 <HAL_TIM_ConfigClockSource+0x170>
 8006192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006196:	f000 8086 	beq.w	80062a6 <HAL_TIM_ConfigClockSource+0x176>
 800619a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800619e:	d87f      	bhi.n	80062a0 <HAL_TIM_ConfigClockSource+0x170>
 80061a0:	2b70      	cmp	r3, #112	; 0x70
 80061a2:	d01a      	beq.n	80061da <HAL_TIM_ConfigClockSource+0xaa>
 80061a4:	2b70      	cmp	r3, #112	; 0x70
 80061a6:	d87b      	bhi.n	80062a0 <HAL_TIM_ConfigClockSource+0x170>
 80061a8:	2b60      	cmp	r3, #96	; 0x60
 80061aa:	d050      	beq.n	800624e <HAL_TIM_ConfigClockSource+0x11e>
 80061ac:	2b60      	cmp	r3, #96	; 0x60
 80061ae:	d877      	bhi.n	80062a0 <HAL_TIM_ConfigClockSource+0x170>
 80061b0:	2b50      	cmp	r3, #80	; 0x50
 80061b2:	d03c      	beq.n	800622e <HAL_TIM_ConfigClockSource+0xfe>
 80061b4:	2b50      	cmp	r3, #80	; 0x50
 80061b6:	d873      	bhi.n	80062a0 <HAL_TIM_ConfigClockSource+0x170>
 80061b8:	2b40      	cmp	r3, #64	; 0x40
 80061ba:	d058      	beq.n	800626e <HAL_TIM_ConfigClockSource+0x13e>
 80061bc:	2b40      	cmp	r3, #64	; 0x40
 80061be:	d86f      	bhi.n	80062a0 <HAL_TIM_ConfigClockSource+0x170>
 80061c0:	2b30      	cmp	r3, #48	; 0x30
 80061c2:	d064      	beq.n	800628e <HAL_TIM_ConfigClockSource+0x15e>
 80061c4:	2b30      	cmp	r3, #48	; 0x30
 80061c6:	d86b      	bhi.n	80062a0 <HAL_TIM_ConfigClockSource+0x170>
 80061c8:	2b20      	cmp	r3, #32
 80061ca:	d060      	beq.n	800628e <HAL_TIM_ConfigClockSource+0x15e>
 80061cc:	2b20      	cmp	r3, #32
 80061ce:	d867      	bhi.n	80062a0 <HAL_TIM_ConfigClockSource+0x170>
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d05c      	beq.n	800628e <HAL_TIM_ConfigClockSource+0x15e>
 80061d4:	2b10      	cmp	r3, #16
 80061d6:	d05a      	beq.n	800628e <HAL_TIM_ConfigClockSource+0x15e>
 80061d8:	e062      	b.n	80062a0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061ea:	f000 f946 	bl	800647a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80061fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	609a      	str	r2, [r3, #8]
      break;
 8006206:	e04f      	b.n	80062a8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006218:	f000 f92f 	bl	800647a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689a      	ldr	r2, [r3, #8]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800622a:	609a      	str	r2, [r3, #8]
      break;
 800622c:	e03c      	b.n	80062a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800623a:	461a      	mov	r2, r3
 800623c:	f000 f8a4 	bl	8006388 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2150      	movs	r1, #80	; 0x50
 8006246:	4618      	mov	r0, r3
 8006248:	f000 f8fb 	bl	8006442 <TIM_ITRx_SetConfig>
      break;
 800624c:	e02c      	b.n	80062a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800625a:	461a      	mov	r2, r3
 800625c:	f000 f8c2 	bl	80063e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2160      	movs	r1, #96	; 0x60
 8006266:	4618      	mov	r0, r3
 8006268:	f000 f8eb 	bl	8006442 <TIM_ITRx_SetConfig>
      break;
 800626c:	e01c      	b.n	80062a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800627a:	461a      	mov	r2, r3
 800627c:	f000 f884 	bl	8006388 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2140      	movs	r1, #64	; 0x40
 8006286:	4618      	mov	r0, r3
 8006288:	f000 f8db 	bl	8006442 <TIM_ITRx_SetConfig>
      break;
 800628c:	e00c      	b.n	80062a8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4619      	mov	r1, r3
 8006298:	4610      	mov	r0, r2
 800629a:	f000 f8d2 	bl	8006442 <TIM_ITRx_SetConfig>
      break;
 800629e:	e003      	b.n	80062a8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	73fb      	strb	r3, [r7, #15]
      break;
 80062a4:	e000      	b.n	80062a8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80062a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
	...

080062c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a29      	ldr	r2, [pc, #164]	; (800637c <TIM_Base_SetConfig+0xb8>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d003      	beq.n	80062e4 <TIM_Base_SetConfig+0x20>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062e2:	d108      	bne.n	80062f6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a20      	ldr	r2, [pc, #128]	; (800637c <TIM_Base_SetConfig+0xb8>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d00b      	beq.n	8006316 <TIM_Base_SetConfig+0x52>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006304:	d007      	beq.n	8006316 <TIM_Base_SetConfig+0x52>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a1d      	ldr	r2, [pc, #116]	; (8006380 <TIM_Base_SetConfig+0xbc>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d003      	beq.n	8006316 <TIM_Base_SetConfig+0x52>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a1c      	ldr	r2, [pc, #112]	; (8006384 <TIM_Base_SetConfig+0xc0>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d108      	bne.n	8006328 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800631c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	4313      	orrs	r3, r2
 8006326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	4313      	orrs	r3, r2
 8006334:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	689a      	ldr	r2, [r3, #8]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a0b      	ldr	r2, [pc, #44]	; (800637c <TIM_Base_SetConfig+0xb8>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d007      	beq.n	8006364 <TIM_Base_SetConfig+0xa0>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a0a      	ldr	r2, [pc, #40]	; (8006380 <TIM_Base_SetConfig+0xbc>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d003      	beq.n	8006364 <TIM_Base_SetConfig+0xa0>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a09      	ldr	r2, [pc, #36]	; (8006384 <TIM_Base_SetConfig+0xc0>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d103      	bne.n	800636c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	691a      	ldr	r2, [r3, #16]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	615a      	str	r2, [r3, #20]
}
 8006372:	bf00      	nop
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	bc80      	pop	{r7}
 800637a:	4770      	bx	lr
 800637c:	40012c00 	.word	0x40012c00
 8006380:	40014400 	.word	0x40014400
 8006384:	40014800 	.word	0x40014800

08006388 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006388:	b480      	push	{r7}
 800638a:	b087      	sub	sp, #28
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	f023 0201 	bic.w	r2, r3, #1
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	011b      	lsls	r3, r3, #4
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f023 030a 	bic.w	r3, r3, #10
 80063c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	621a      	str	r2, [r3, #32]
}
 80063da:	bf00      	nop
 80063dc:	371c      	adds	r7, #28
 80063de:	46bd      	mov	sp, r7
 80063e0:	bc80      	pop	{r7}
 80063e2:	4770      	bx	lr

080063e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b087      	sub	sp, #28
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6a1b      	ldr	r3, [r3, #32]
 80063f4:	f023 0210 	bic.w	r2, r3, #16
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800640e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	031b      	lsls	r3, r3, #12
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	4313      	orrs	r3, r2
 8006418:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006420:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	011b      	lsls	r3, r3, #4
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	4313      	orrs	r3, r2
 800642a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	621a      	str	r2, [r3, #32]
}
 8006438:	bf00      	nop
 800643a:	371c      	adds	r7, #28
 800643c:	46bd      	mov	sp, r7
 800643e:	bc80      	pop	{r7}
 8006440:	4770      	bx	lr

08006442 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006442:	b480      	push	{r7}
 8006444:	b085      	sub	sp, #20
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	4313      	orrs	r3, r2
 8006464:	f043 0307 	orr.w	r3, r3, #7
 8006468:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	609a      	str	r2, [r3, #8]
}
 8006470:	bf00      	nop
 8006472:	3714      	adds	r7, #20
 8006474:	46bd      	mov	sp, r7
 8006476:	bc80      	pop	{r7}
 8006478:	4770      	bx	lr

0800647a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800647a:	b480      	push	{r7}
 800647c:	b087      	sub	sp, #28
 800647e:	af00      	add	r7, sp, #0
 8006480:	60f8      	str	r0, [r7, #12]
 8006482:	60b9      	str	r1, [r7, #8]
 8006484:	607a      	str	r2, [r7, #4]
 8006486:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006494:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	021a      	lsls	r2, r3, #8
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	431a      	orrs	r2, r3
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	609a      	str	r2, [r3, #8]
}
 80064ae:	bf00      	nop
 80064b0:	371c      	adds	r7, #28
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bc80      	pop	{r7}
 80064b6:	4770      	bx	lr

080064b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d101      	bne.n	80064d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064cc:	2302      	movs	r3, #2
 80064ce:	e04a      	b.n	8006566 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2202      	movs	r2, #2
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a1e      	ldr	r2, [pc, #120]	; (8006570 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d108      	bne.n	800650c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006500:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	4313      	orrs	r3, r2
 800650a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006512:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	4313      	orrs	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a11      	ldr	r2, [pc, #68]	; (8006570 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d004      	beq.n	800653a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006538:	d10c      	bne.n	8006554 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006540:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	4313      	orrs	r3, r2
 800654a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	bc80      	pop	{r7}
 800656e:	4770      	bx	lr
 8006570:	40012c00 	.word	0x40012c00

08006574 <LL_RCC_GetUSARTClockSource>:
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800657c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006580:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	401a      	ands	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	041b      	lsls	r3, r3, #16
 800658c:	4313      	orrs	r3, r2
}
 800658e:	4618      	mov	r0, r3
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	bc80      	pop	{r7}
 8006596:	4770      	bx	lr

08006598 <LL_RCC_GetLPUARTClockSource>:
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80065a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4013      	ands	r3, r2
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bc80      	pop	{r7}
 80065b4:	4770      	bx	lr

080065b6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b082      	sub	sp, #8
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e042      	b.n	800664e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d106      	bne.n	80065e0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7fc fcf0 	bl	8002fc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2224      	movs	r2, #36	; 0x24
 80065e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 0201 	bic.w	r2, r2, #1
 80065f6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 fd0d 	bl	8007018 <UART_SetConfig>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b01      	cmp	r3, #1
 8006602:	d101      	bne.n	8006608 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e022      	b.n	800664e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660c:	2b00      	cmp	r3, #0
 800660e:	d002      	beq.n	8006616 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 ff75 	bl	8007500 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006624:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	689a      	ldr	r2, [r3, #8]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006634:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f042 0201 	orr.w	r2, r2, #1
 8006644:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fffb 	bl	8007642 <UART_CheckIdleState>
 800664c:	4603      	mov	r3, r0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3708      	adds	r7, #8
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006656:	b580      	push	{r7, lr}
 8006658:	b08a      	sub	sp, #40	; 0x28
 800665a:	af02      	add	r7, sp, #8
 800665c:	60f8      	str	r0, [r7, #12]
 800665e:	60b9      	str	r1, [r7, #8]
 8006660:	603b      	str	r3, [r7, #0]
 8006662:	4613      	mov	r3, r2
 8006664:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800666c:	2b20      	cmp	r3, #32
 800666e:	d173      	bne.n	8006758 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d002      	beq.n	800667c <HAL_UART_Transmit+0x26>
 8006676:	88fb      	ldrh	r3, [r7, #6]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e06c      	b.n	800675a <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2221      	movs	r2, #33	; 0x21
 800668c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006690:	f7fc fa06 	bl	8002aa0 <HAL_GetTick>
 8006694:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	88fa      	ldrh	r2, [r7, #6]
 800669a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	88fa      	ldrh	r2, [r7, #6]
 80066a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ae:	d108      	bne.n	80066c2 <HAL_UART_Transmit+0x6c>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d104      	bne.n	80066c2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80066b8:	2300      	movs	r3, #0
 80066ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	61bb      	str	r3, [r7, #24]
 80066c0:	e003      	b.n	80066ca <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066c6:	2300      	movs	r3, #0
 80066c8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80066ca:	e02c      	b.n	8006726 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	2200      	movs	r2, #0
 80066d4:	2180      	movs	r1, #128	; 0x80
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f001 f801 	bl	80076de <UART_WaitOnFlagUntilTimeout>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e039      	b.n	800675a <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10b      	bne.n	8006704 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	461a      	mov	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	3302      	adds	r3, #2
 8006700:	61bb      	str	r3, [r7, #24]
 8006702:	e007      	b.n	8006714 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	781a      	ldrb	r2, [r3, #0]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	3301      	adds	r3, #1
 8006712:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800671a:	b29b      	uxth	r3, r3
 800671c:	3b01      	subs	r3, #1
 800671e:	b29a      	uxth	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800672c:	b29b      	uxth	r3, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1cc      	bne.n	80066cc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	2200      	movs	r2, #0
 800673a:	2140      	movs	r1, #64	; 0x40
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f000 ffce 	bl	80076de <UART_WaitOnFlagUntilTimeout>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d001      	beq.n	800674c <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e006      	b.n	800675a <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2220      	movs	r2, #32
 8006750:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006754:	2300      	movs	r3, #0
 8006756:	e000      	b.n	800675a <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8006758:	2302      	movs	r3, #2
  }
}
 800675a:	4618      	mov	r0, r3
 800675c:	3720      	adds	r7, #32
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b08a      	sub	sp, #40	; 0x28
 8006766:	af02      	add	r7, sp, #8
 8006768:	60f8      	str	r0, [r7, #12]
 800676a:	60b9      	str	r1, [r7, #8]
 800676c:	603b      	str	r3, [r7, #0]
 800676e:	4613      	mov	r3, r2
 8006770:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006778:	2b20      	cmp	r3, #32
 800677a:	f040 80b1 	bne.w	80068e0 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d002      	beq.n	800678a <HAL_UART_Receive+0x28>
 8006784:	88fb      	ldrh	r3, [r7, #6]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d101      	bne.n	800678e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e0a9      	b.n	80068e2 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2222      	movs	r2, #34	; 0x22
 800679a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067a4:	f7fc f97c 	bl	8002aa0 <HAL_GetTick>
 80067a8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	88fa      	ldrh	r2, [r7, #6]
 80067ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	88fa      	ldrh	r2, [r7, #6]
 80067b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067c2:	d10e      	bne.n	80067e2 <HAL_UART_Receive+0x80>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d105      	bne.n	80067d8 <HAL_UART_Receive+0x76>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80067d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067d6:	e02d      	b.n	8006834 <HAL_UART_Receive+0xd2>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	22ff      	movs	r2, #255	; 0xff
 80067dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067e0:	e028      	b.n	8006834 <HAL_UART_Receive+0xd2>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10d      	bne.n	8006806 <HAL_UART_Receive+0xa4>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d104      	bne.n	80067fc <HAL_UART_Receive+0x9a>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	22ff      	movs	r2, #255	; 0xff
 80067f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067fa:	e01b      	b.n	8006834 <HAL_UART_Receive+0xd2>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	227f      	movs	r2, #127	; 0x7f
 8006800:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006804:	e016      	b.n	8006834 <HAL_UART_Receive+0xd2>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800680e:	d10d      	bne.n	800682c <HAL_UART_Receive+0xca>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d104      	bne.n	8006822 <HAL_UART_Receive+0xc0>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	227f      	movs	r2, #127	; 0x7f
 800681c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006820:	e008      	b.n	8006834 <HAL_UART_Receive+0xd2>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	223f      	movs	r2, #63	; 0x3f
 8006826:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800682a:	e003      	b.n	8006834 <HAL_UART_Receive+0xd2>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800683a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006844:	d108      	bne.n	8006858 <HAL_UART_Receive+0xf6>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d104      	bne.n	8006858 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800684e:	2300      	movs	r3, #0
 8006850:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	61bb      	str	r3, [r7, #24]
 8006856:	e003      	b.n	8006860 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800685c:	2300      	movs	r3, #0
 800685e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006860:	e032      	b.n	80068c8 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2200      	movs	r2, #0
 800686a:	2120      	movs	r1, #32
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f000 ff36 	bl	80076de <UART_WaitOnFlagUntilTimeout>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d001      	beq.n	800687c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e032      	b.n	80068e2 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10c      	bne.n	800689c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006888:	b29a      	uxth	r2, r3
 800688a:	8a7b      	ldrh	r3, [r7, #18]
 800688c:	4013      	ands	r3, r2
 800688e:	b29a      	uxth	r2, r3
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	3302      	adds	r3, #2
 8006898:	61bb      	str	r3, [r7, #24]
 800689a:	e00c      	b.n	80068b6 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	8a7b      	ldrh	r3, [r7, #18]
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	4013      	ands	r3, r2
 80068aa:	b2da      	uxtb	r2, r3
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	3301      	adds	r3, #1
 80068b4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068bc:	b29b      	uxth	r3, r3
 80068be:	3b01      	subs	r3, #1
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1c6      	bne.n	8006862 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80068dc:	2300      	movs	r3, #0
 80068de:	e000      	b.n	80068e2 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80068e0:	2302      	movs	r3, #2
  }
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3720      	adds	r7, #32
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
	...

080068ec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b08a      	sub	sp, #40	; 0x28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	4613      	mov	r3, r2
 80068f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006900:	2b20      	cmp	r3, #32
 8006902:	d137      	bne.n	8006974 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d002      	beq.n	8006910 <HAL_UART_Receive_DMA+0x24>
 800690a:	88fb      	ldrh	r3, [r7, #6]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e030      	b.n	8006976 <HAL_UART_Receive_DMA+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a18      	ldr	r2, [pc, #96]	; (8006980 <HAL_UART_Receive_DMA+0x94>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d01f      	beq.n	8006964 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d018      	beq.n	8006964 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	e853 3f00 	ldrex	r3, [r3]
 800693e:	613b      	str	r3, [r7, #16]
   return(result);
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006946:	627b      	str	r3, [r7, #36]	; 0x24
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	461a      	mov	r2, r3
 800694e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006950:	623b      	str	r3, [r7, #32]
 8006952:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006954:	69f9      	ldr	r1, [r7, #28]
 8006956:	6a3a      	ldr	r2, [r7, #32]
 8006958:	e841 2300 	strex	r3, r2, [r1]
 800695c:	61bb      	str	r3, [r7, #24]
   return(result);
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1e6      	bne.n	8006932 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006964:	88fb      	ldrh	r3, [r7, #6]
 8006966:	461a      	mov	r2, r3
 8006968:	68b9      	ldr	r1, [r7, #8]
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 ff80 	bl	8007870 <UART_Start_Receive_DMA>
 8006970:	4603      	mov	r3, r0
 8006972:	e000      	b.n	8006976 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006974:	2302      	movs	r3, #2
  }
}
 8006976:	4618      	mov	r0, r3
 8006978:	3728      	adds	r7, #40	; 0x28
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	40008000 	.word	0x40008000

08006984 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b0ba      	sub	sp, #232	; 0xe8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	69db      	ldr	r3, [r3, #28]
 8006992:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80069aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80069ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80069b2:	4013      	ands	r3, r2
 80069b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80069b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d11b      	bne.n	80069f8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80069c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069c4:	f003 0320 	and.w	r3, r3, #32
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d015      	beq.n	80069f8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80069cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069d0:	f003 0320 	and.w	r3, r3, #32
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d105      	bne.n	80069e4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80069d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d009      	beq.n	80069f8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f000 82e3 	beq.w	8006fb4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	4798      	blx	r3
      }
      return;
 80069f6:	e2dd      	b.n	8006fb4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80069f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 8123 	beq.w	8006c48 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006a02:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006a06:	4b8d      	ldr	r3, [pc, #564]	; (8006c3c <HAL_UART_IRQHandler+0x2b8>)
 8006a08:	4013      	ands	r3, r2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d106      	bne.n	8006a1c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006a0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006a12:	4b8b      	ldr	r3, [pc, #556]	; (8006c40 <HAL_UART_IRQHandler+0x2bc>)
 8006a14:	4013      	ands	r3, r2
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f000 8116 	beq.w	8006c48 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a20:	f003 0301 	and.w	r3, r3, #1
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d011      	beq.n	8006a4c <HAL_UART_IRQHandler+0xc8>
 8006a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00b      	beq.n	8006a4c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a42:	f043 0201 	orr.w	r2, r3, #1
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a50:	f003 0302 	and.w	r3, r3, #2
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d011      	beq.n	8006a7c <HAL_UART_IRQHandler+0xf8>
 8006a58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a5c:	f003 0301 	and.w	r3, r3, #1
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00b      	beq.n	8006a7c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2202      	movs	r2, #2
 8006a6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a72:	f043 0204 	orr.w	r2, r3, #4
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a80:	f003 0304 	and.w	r3, r3, #4
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d011      	beq.n	8006aac <HAL_UART_IRQHandler+0x128>
 8006a88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00b      	beq.n	8006aac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2204      	movs	r2, #4
 8006a9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aa2:	f043 0202 	orr.w	r2, r3, #2
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ab0:	f003 0308 	and.w	r3, r3, #8
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d017      	beq.n	8006ae8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006abc:	f003 0320 	and.w	r3, r3, #32
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d105      	bne.n	8006ad0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006ac4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006ac8:	4b5c      	ldr	r3, [pc, #368]	; (8006c3c <HAL_UART_IRQHandler+0x2b8>)
 8006aca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00b      	beq.n	8006ae8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2208      	movs	r2, #8
 8006ad6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ade:	f043 0208 	orr.w	r2, r3, #8
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d012      	beq.n	8006b1a <HAL_UART_IRQHandler+0x196>
 8006af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006af8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00c      	beq.n	8006b1a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b10:	f043 0220 	orr.w	r2, r3, #32
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 8249 	beq.w	8006fb8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b2a:	f003 0320 	and.w	r3, r3, #32
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d013      	beq.n	8006b5a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b36:	f003 0320 	and.w	r3, r3, #32
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d105      	bne.n	8006b4a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d007      	beq.n	8006b5a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b6e:	2b40      	cmp	r3, #64	; 0x40
 8006b70:	d005      	beq.n	8006b7e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006b72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b76:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d054      	beq.n	8006c28 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 ff5c 	bl	8007a3c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8e:	2b40      	cmp	r3, #64	; 0x40
 8006b90:	d146      	bne.n	8006c20 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	3308      	adds	r3, #8
 8006b98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ba0:	e853 3f00 	ldrex	r3, [r3]
 8006ba4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006ba8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	3308      	adds	r3, #8
 8006bba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006bbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006bca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006bce:	e841 2300 	strex	r3, r2, [r1]
 8006bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006bd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1d9      	bne.n	8006b92 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d017      	beq.n	8006c18 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bee:	4a15      	ldr	r2, [pc, #84]	; (8006c44 <HAL_UART_IRQHandler+0x2c0>)
 8006bf0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7fc fe9f 	bl	800393c <HAL_DMA_Abort_IT>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d019      	beq.n	8006c38 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006c12:	4610      	mov	r0, r2
 8006c14:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c16:	e00f      	b.n	8006c38 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f9e9 	bl	8006ff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c1e:	e00b      	b.n	8006c38 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f9e5 	bl	8006ff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c26:	e007      	b.n	8006c38 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f9e1 	bl	8006ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006c36:	e1bf      	b.n	8006fb8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c38:	bf00      	nop
    return;
 8006c3a:	e1bd      	b.n	8006fb8 <HAL_UART_IRQHandler+0x634>
 8006c3c:	10000001 	.word	0x10000001
 8006c40:	04000120 	.word	0x04000120
 8006c44:	08007cf1 	.word	0x08007cf1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	f040 8153 	bne.w	8006ef8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c56:	f003 0310 	and.w	r3, r3, #16
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	f000 814c 	beq.w	8006ef8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c64:	f003 0310 	and.w	r3, r3, #16
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f000 8145 	beq.w	8006ef8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2210      	movs	r2, #16
 8006c74:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c80:	2b40      	cmp	r3, #64	; 0x40
 8006c82:	f040 80bb 	bne.w	8006dfc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 818f 	beq.w	8006fbc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ca4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	f080 8187 	bcs.w	8006fbc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006cb4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0320 	and.w	r3, r3, #32
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f040 8087 	bne.w	8006dda <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cd8:	e853 3f00 	ldrex	r3, [r3]
 8006cdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ce0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006cf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006cfa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d06:	e841 2300 	strex	r3, r2, [r1]
 8006d0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1da      	bne.n	8006ccc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	3308      	adds	r3, #8
 8006d1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d20:	e853 3f00 	ldrex	r3, [r3]
 8006d24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d28:	f023 0301 	bic.w	r3, r3, #1
 8006d2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	3308      	adds	r3, #8
 8006d36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006d3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d46:	e841 2300 	strex	r3, r2, [r1]
 8006d4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1e1      	bne.n	8006d16 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	3308      	adds	r3, #8
 8006d58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d5c:	e853 3f00 	ldrex	r3, [r3]
 8006d60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	3308      	adds	r3, #8
 8006d72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006d76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d7e:	e841 2300 	strex	r3, r2, [r1]
 8006d82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1e3      	bne.n	8006d52 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2220      	movs	r2, #32
 8006d8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006da0:	e853 3f00 	ldrex	r3, [r3]
 8006da4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006da8:	f023 0310 	bic.w	r3, r3, #16
 8006dac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	461a      	mov	r2, r3
 8006db6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006dba:	65bb      	str	r3, [r7, #88]	; 0x58
 8006dbc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006dc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006dc2:	e841 2300 	strex	r3, r2, [r1]
 8006dc6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1e4      	bne.n	8006d98 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7fc fd53 	bl	8003880 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2202      	movs	r2, #2
 8006dde:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	4619      	mov	r1, r3
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 f904 	bl	8007002 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006dfa:	e0df      	b.n	8006fbc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f000 80d1 	beq.w	8006fc0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006e1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f000 80cc 	beq.w	8006fc0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e30:	e853 3f00 	ldrex	r3, [r3]
 8006e34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	461a      	mov	r2, r3
 8006e46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e4a:	647b      	str	r3, [r7, #68]	; 0x44
 8006e4c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e52:	e841 2300 	strex	r3, r2, [r1]
 8006e56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1e4      	bne.n	8006e28 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	3308      	adds	r3, #8
 8006e64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e68:	e853 3f00 	ldrex	r3, [r3]
 8006e6c:	623b      	str	r3, [r7, #32]
   return(result);
 8006e6e:	6a3b      	ldr	r3, [r7, #32]
 8006e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e74:	f023 0301 	bic.w	r3, r3, #1
 8006e78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3308      	adds	r3, #8
 8006e82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006e86:	633a      	str	r2, [r7, #48]	; 0x30
 8006e88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e8e:	e841 2300 	strex	r3, r2, [r1]
 8006e92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1e1      	bne.n	8006e5e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2220      	movs	r2, #32
 8006e9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	e853 3f00 	ldrex	r3, [r3]
 8006eba:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f023 0310 	bic.w	r3, r3, #16
 8006ec2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006ed0:	61fb      	str	r3, [r7, #28]
 8006ed2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed4:	69b9      	ldr	r1, [r7, #24]
 8006ed6:	69fa      	ldr	r2, [r7, #28]
 8006ed8:	e841 2300 	strex	r3, r2, [r1]
 8006edc:	617b      	str	r3, [r7, #20]
   return(result);
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1e4      	bne.n	8006eae <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006eea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006eee:	4619      	mov	r1, r3
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f886 	bl	8007002 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ef6:	e063      	b.n	8006fc0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006efc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00e      	beq.n	8006f22 <HAL_UART_IRQHandler+0x59e>
 8006f04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d008      	beq.n	8006f22 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006f18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 ff29 	bl	8007d72 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f20:	e051      	b.n	8006fc6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d014      	beq.n	8006f58 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d105      	bne.n	8006f46 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d008      	beq.n	8006f58 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d03a      	beq.n	8006fc4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	4798      	blx	r3
    }
    return;
 8006f56:	e035      	b.n	8006fc4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d009      	beq.n	8006f78 <HAL_UART_IRQHandler+0x5f4>
 8006f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d003      	beq.n	8006f78 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 fed3 	bl	8007d1c <UART_EndTransmit_IT>
    return;
 8006f76:	e026      	b.n	8006fc6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d009      	beq.n	8006f98 <HAL_UART_IRQHandler+0x614>
 8006f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d003      	beq.n	8006f98 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 ff00 	bl	8007d96 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f96:	e016      	b.n	8006fc6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d010      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x642>
 8006fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	da0c      	bge.n	8006fc6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 fee9 	bl	8007d84 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006fb2:	e008      	b.n	8006fc6 <HAL_UART_IRQHandler+0x642>
      return;
 8006fb4:	bf00      	nop
 8006fb6:	e006      	b.n	8006fc6 <HAL_UART_IRQHandler+0x642>
    return;
 8006fb8:	bf00      	nop
 8006fba:	e004      	b.n	8006fc6 <HAL_UART_IRQHandler+0x642>
      return;
 8006fbc:	bf00      	nop
 8006fbe:	e002      	b.n	8006fc6 <HAL_UART_IRQHandler+0x642>
      return;
 8006fc0:	bf00      	nop
 8006fc2:	e000      	b.n	8006fc6 <HAL_UART_IRQHandler+0x642>
    return;
 8006fc4:	bf00      	nop
  }
}
 8006fc6:	37e8      	adds	r7, #232	; 0xe8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006fd4:	bf00      	nop
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bc80      	pop	{r7}
 8006fdc:	4770      	bx	lr

08006fde <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006fde:	b480      	push	{r7}
 8006fe0:	b083      	sub	sp, #12
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006fe6:	bf00      	nop
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bc80      	pop	{r7}
 8006fee:	4770      	bx	lr

08006ff0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bc80      	pop	{r7}
 8007000:	4770      	bx	lr

08007002 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007002:	b480      	push	{r7}
 8007004:	b083      	sub	sp, #12
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
 800700a:	460b      	mov	r3, r1
 800700c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800700e:	bf00      	nop
 8007010:	370c      	adds	r7, #12
 8007012:	46bd      	mov	sp, r7
 8007014:	bc80      	pop	{r7}
 8007016:	4770      	bx	lr

08007018 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800701c:	b08c      	sub	sp, #48	; 0x30
 800701e:	af00      	add	r7, sp, #0
 8007020:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	689a      	ldr	r2, [r3, #8]
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	431a      	orrs	r2, r3
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	431a      	orrs	r2, r3
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	69db      	ldr	r3, [r3, #28]
 800703c:	4313      	orrs	r3, r2
 800703e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	4b94      	ldr	r3, [pc, #592]	; (8007298 <UART_SetConfig+0x280>)
 8007048:	4013      	ands	r3, r2
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	6812      	ldr	r2, [r2, #0]
 800704e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007050:	430b      	orrs	r3, r1
 8007052:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	68da      	ldr	r2, [r3, #12]
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	430a      	orrs	r2, r1
 8007068:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a89      	ldr	r2, [pc, #548]	; (800729c <UART_SetConfig+0x284>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d004      	beq.n	8007084 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007080:	4313      	orrs	r3, r2
 8007082:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800708e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007092:	697a      	ldr	r2, [r7, #20]
 8007094:	6812      	ldr	r2, [r2, #0]
 8007096:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007098:	430b      	orrs	r3, r1
 800709a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a2:	f023 010f 	bic.w	r1, r3, #15
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	430a      	orrs	r2, r1
 80070b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a7a      	ldr	r2, [pc, #488]	; (80072a0 <UART_SetConfig+0x288>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d127      	bne.n	800710c <UART_SetConfig+0xf4>
 80070bc:	2003      	movs	r0, #3
 80070be:	f7ff fa59 	bl	8006574 <LL_RCC_GetUSARTClockSource>
 80070c2:	4603      	mov	r3, r0
 80070c4:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80070c8:	2b03      	cmp	r3, #3
 80070ca:	d81b      	bhi.n	8007104 <UART_SetConfig+0xec>
 80070cc:	a201      	add	r2, pc, #4	; (adr r2, 80070d4 <UART_SetConfig+0xbc>)
 80070ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d2:	bf00      	nop
 80070d4:	080070e5 	.word	0x080070e5
 80070d8:	080070f5 	.word	0x080070f5
 80070dc:	080070ed 	.word	0x080070ed
 80070e0:	080070fd 	.word	0x080070fd
 80070e4:	2301      	movs	r3, #1
 80070e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ea:	e080      	b.n	80071ee <UART_SetConfig+0x1d6>
 80070ec:	2302      	movs	r3, #2
 80070ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070f2:	e07c      	b.n	80071ee <UART_SetConfig+0x1d6>
 80070f4:	2304      	movs	r3, #4
 80070f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070fa:	e078      	b.n	80071ee <UART_SetConfig+0x1d6>
 80070fc:	2308      	movs	r3, #8
 80070fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007102:	e074      	b.n	80071ee <UART_SetConfig+0x1d6>
 8007104:	2310      	movs	r3, #16
 8007106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800710a:	e070      	b.n	80071ee <UART_SetConfig+0x1d6>
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a64      	ldr	r2, [pc, #400]	; (80072a4 <UART_SetConfig+0x28c>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d138      	bne.n	8007188 <UART_SetConfig+0x170>
 8007116:	200c      	movs	r0, #12
 8007118:	f7ff fa2c 	bl	8006574 <LL_RCC_GetUSARTClockSource>
 800711c:	4603      	mov	r3, r0
 800711e:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8007122:	2b0c      	cmp	r3, #12
 8007124:	d82c      	bhi.n	8007180 <UART_SetConfig+0x168>
 8007126:	a201      	add	r2, pc, #4	; (adr r2, 800712c <UART_SetConfig+0x114>)
 8007128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712c:	08007161 	.word	0x08007161
 8007130:	08007181 	.word	0x08007181
 8007134:	08007181 	.word	0x08007181
 8007138:	08007181 	.word	0x08007181
 800713c:	08007171 	.word	0x08007171
 8007140:	08007181 	.word	0x08007181
 8007144:	08007181 	.word	0x08007181
 8007148:	08007181 	.word	0x08007181
 800714c:	08007169 	.word	0x08007169
 8007150:	08007181 	.word	0x08007181
 8007154:	08007181 	.word	0x08007181
 8007158:	08007181 	.word	0x08007181
 800715c:	08007179 	.word	0x08007179
 8007160:	2300      	movs	r3, #0
 8007162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007166:	e042      	b.n	80071ee <UART_SetConfig+0x1d6>
 8007168:	2302      	movs	r3, #2
 800716a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800716e:	e03e      	b.n	80071ee <UART_SetConfig+0x1d6>
 8007170:	2304      	movs	r3, #4
 8007172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007176:	e03a      	b.n	80071ee <UART_SetConfig+0x1d6>
 8007178:	2308      	movs	r3, #8
 800717a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800717e:	e036      	b.n	80071ee <UART_SetConfig+0x1d6>
 8007180:	2310      	movs	r3, #16
 8007182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007186:	e032      	b.n	80071ee <UART_SetConfig+0x1d6>
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a43      	ldr	r2, [pc, #268]	; (800729c <UART_SetConfig+0x284>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d12a      	bne.n	80071e8 <UART_SetConfig+0x1d0>
 8007192:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007196:	f7ff f9ff 	bl	8006598 <LL_RCC_GetLPUARTClockSource>
 800719a:	4603      	mov	r3, r0
 800719c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071a0:	d01a      	beq.n	80071d8 <UART_SetConfig+0x1c0>
 80071a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071a6:	d81b      	bhi.n	80071e0 <UART_SetConfig+0x1c8>
 80071a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071ac:	d00c      	beq.n	80071c8 <UART_SetConfig+0x1b0>
 80071ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071b2:	d815      	bhi.n	80071e0 <UART_SetConfig+0x1c8>
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d003      	beq.n	80071c0 <UART_SetConfig+0x1a8>
 80071b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071bc:	d008      	beq.n	80071d0 <UART_SetConfig+0x1b8>
 80071be:	e00f      	b.n	80071e0 <UART_SetConfig+0x1c8>
 80071c0:	2300      	movs	r3, #0
 80071c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071c6:	e012      	b.n	80071ee <UART_SetConfig+0x1d6>
 80071c8:	2302      	movs	r3, #2
 80071ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071ce:	e00e      	b.n	80071ee <UART_SetConfig+0x1d6>
 80071d0:	2304      	movs	r3, #4
 80071d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071d6:	e00a      	b.n	80071ee <UART_SetConfig+0x1d6>
 80071d8:	2308      	movs	r3, #8
 80071da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071de:	e006      	b.n	80071ee <UART_SetConfig+0x1d6>
 80071e0:	2310      	movs	r3, #16
 80071e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071e6:	e002      	b.n	80071ee <UART_SetConfig+0x1d6>
 80071e8:	2310      	movs	r3, #16
 80071ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a2a      	ldr	r2, [pc, #168]	; (800729c <UART_SetConfig+0x284>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	f040 80a4 	bne.w	8007342 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80071fe:	2b08      	cmp	r3, #8
 8007200:	d823      	bhi.n	800724a <UART_SetConfig+0x232>
 8007202:	a201      	add	r2, pc, #4	; (adr r2, 8007208 <UART_SetConfig+0x1f0>)
 8007204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007208:	0800722d 	.word	0x0800722d
 800720c:	0800724b 	.word	0x0800724b
 8007210:	08007235 	.word	0x08007235
 8007214:	0800724b 	.word	0x0800724b
 8007218:	0800723b 	.word	0x0800723b
 800721c:	0800724b 	.word	0x0800724b
 8007220:	0800724b 	.word	0x0800724b
 8007224:	0800724b 	.word	0x0800724b
 8007228:	08007243 	.word	0x08007243
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800722c:	f7fd ff46 	bl	80050bc <HAL_RCC_GetPCLK1Freq>
 8007230:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007232:	e010      	b.n	8007256 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007234:	4b1c      	ldr	r3, [pc, #112]	; (80072a8 <UART_SetConfig+0x290>)
 8007236:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007238:	e00d      	b.n	8007256 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800723a:	f7fd fe8b 	bl	8004f54 <HAL_RCC_GetSysClockFreq>
 800723e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007240:	e009      	b.n	8007256 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007246:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007248:	e005      	b.n	8007256 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800724a:	2300      	movs	r3, #0
 800724c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007254:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007258:	2b00      	cmp	r3, #0
 800725a:	f000 8137 	beq.w	80074cc <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007262:	4a12      	ldr	r2, [pc, #72]	; (80072ac <UART_SetConfig+0x294>)
 8007264:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007268:	461a      	mov	r2, r3
 800726a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007270:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	685a      	ldr	r2, [r3, #4]
 8007276:	4613      	mov	r3, r2
 8007278:	005b      	lsls	r3, r3, #1
 800727a:	4413      	add	r3, r2
 800727c:	69ba      	ldr	r2, [r7, #24]
 800727e:	429a      	cmp	r2, r3
 8007280:	d305      	bcc.n	800728e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007288:	69ba      	ldr	r2, [r7, #24]
 800728a:	429a      	cmp	r2, r3
 800728c:	d910      	bls.n	80072b0 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007294:	e11a      	b.n	80074cc <UART_SetConfig+0x4b4>
 8007296:	bf00      	nop
 8007298:	cfff69f3 	.word	0xcfff69f3
 800729c:	40008000 	.word	0x40008000
 80072a0:	40013800 	.word	0x40013800
 80072a4:	40004400 	.word	0x40004400
 80072a8:	00f42400 	.word	0x00f42400
 80072ac:	0800ccf0 	.word	0x0800ccf0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b2:	2200      	movs	r2, #0
 80072b4:	60bb      	str	r3, [r7, #8]
 80072b6:	60fa      	str	r2, [r7, #12]
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072bc:	4a8e      	ldr	r2, [pc, #568]	; (80074f8 <UART_SetConfig+0x4e0>)
 80072be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	2200      	movs	r2, #0
 80072c6:	603b      	str	r3, [r7, #0]
 80072c8:	607a      	str	r2, [r7, #4]
 80072ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80072d2:	f7f8 ffa5 	bl	8000220 <__aeabi_uldivmod>
 80072d6:	4602      	mov	r2, r0
 80072d8:	460b      	mov	r3, r1
 80072da:	4610      	mov	r0, r2
 80072dc:	4619      	mov	r1, r3
 80072de:	f04f 0200 	mov.w	r2, #0
 80072e2:	f04f 0300 	mov.w	r3, #0
 80072e6:	020b      	lsls	r3, r1, #8
 80072e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80072ec:	0202      	lsls	r2, r0, #8
 80072ee:	6979      	ldr	r1, [r7, #20]
 80072f0:	6849      	ldr	r1, [r1, #4]
 80072f2:	0849      	lsrs	r1, r1, #1
 80072f4:	2000      	movs	r0, #0
 80072f6:	460c      	mov	r4, r1
 80072f8:	4605      	mov	r5, r0
 80072fa:	eb12 0804 	adds.w	r8, r2, r4
 80072fe:	eb43 0905 	adc.w	r9, r3, r5
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	469a      	mov	sl, r3
 800730a:	4693      	mov	fp, r2
 800730c:	4652      	mov	r2, sl
 800730e:	465b      	mov	r3, fp
 8007310:	4640      	mov	r0, r8
 8007312:	4649      	mov	r1, r9
 8007314:	f7f8 ff84 	bl	8000220 <__aeabi_uldivmod>
 8007318:	4602      	mov	r2, r0
 800731a:	460b      	mov	r3, r1
 800731c:	4613      	mov	r3, r2
 800731e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007326:	d308      	bcc.n	800733a <UART_SetConfig+0x322>
 8007328:	6a3b      	ldr	r3, [r7, #32]
 800732a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800732e:	d204      	bcs.n	800733a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	6a3a      	ldr	r2, [r7, #32]
 8007336:	60da      	str	r2, [r3, #12]
 8007338:	e0c8      	b.n	80074cc <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007340:	e0c4      	b.n	80074cc <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	69db      	ldr	r3, [r3, #28]
 8007346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800734a:	d167      	bne.n	800741c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800734c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007350:	2b08      	cmp	r3, #8
 8007352:	d828      	bhi.n	80073a6 <UART_SetConfig+0x38e>
 8007354:	a201      	add	r2, pc, #4	; (adr r2, 800735c <UART_SetConfig+0x344>)
 8007356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735a:	bf00      	nop
 800735c:	08007381 	.word	0x08007381
 8007360:	08007389 	.word	0x08007389
 8007364:	08007391 	.word	0x08007391
 8007368:	080073a7 	.word	0x080073a7
 800736c:	08007397 	.word	0x08007397
 8007370:	080073a7 	.word	0x080073a7
 8007374:	080073a7 	.word	0x080073a7
 8007378:	080073a7 	.word	0x080073a7
 800737c:	0800739f 	.word	0x0800739f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007380:	f7fd fe9c 	bl	80050bc <HAL_RCC_GetPCLK1Freq>
 8007384:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007386:	e014      	b.n	80073b2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007388:	f7fd feaa 	bl	80050e0 <HAL_RCC_GetPCLK2Freq>
 800738c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800738e:	e010      	b.n	80073b2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007390:	4b5a      	ldr	r3, [pc, #360]	; (80074fc <UART_SetConfig+0x4e4>)
 8007392:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007394:	e00d      	b.n	80073b2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007396:	f7fd fddd 	bl	8004f54 <HAL_RCC_GetSysClockFreq>
 800739a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800739c:	e009      	b.n	80073b2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800739e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80073a4:	e005      	b.n	80073b2 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80073a6:	2300      	movs	r3, #0
 80073a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80073b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 8089 	beq.w	80074cc <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073be:	4a4e      	ldr	r2, [pc, #312]	; (80074f8 <UART_SetConfig+0x4e0>)
 80073c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073c4:	461a      	mov	r2, r3
 80073c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80073cc:	005a      	lsls	r2, r3, #1
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	085b      	lsrs	r3, r3, #1
 80073d4:	441a      	add	r2, r3
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	fbb2 f3f3 	udiv	r3, r2, r3
 80073de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073e0:	6a3b      	ldr	r3, [r7, #32]
 80073e2:	2b0f      	cmp	r3, #15
 80073e4:	d916      	bls.n	8007414 <UART_SetConfig+0x3fc>
 80073e6:	6a3b      	ldr	r3, [r7, #32]
 80073e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073ec:	d212      	bcs.n	8007414 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073ee:	6a3b      	ldr	r3, [r7, #32]
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	f023 030f 	bic.w	r3, r3, #15
 80073f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073f8:	6a3b      	ldr	r3, [r7, #32]
 80073fa:	085b      	lsrs	r3, r3, #1
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	f003 0307 	and.w	r3, r3, #7
 8007402:	b29a      	uxth	r2, r3
 8007404:	8bfb      	ldrh	r3, [r7, #30]
 8007406:	4313      	orrs	r3, r2
 8007408:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	8bfa      	ldrh	r2, [r7, #30]
 8007410:	60da      	str	r2, [r3, #12]
 8007412:	e05b      	b.n	80074cc <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800741a:	e057      	b.n	80074cc <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800741c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007420:	2b08      	cmp	r3, #8
 8007422:	d828      	bhi.n	8007476 <UART_SetConfig+0x45e>
 8007424:	a201      	add	r2, pc, #4	; (adr r2, 800742c <UART_SetConfig+0x414>)
 8007426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742a:	bf00      	nop
 800742c:	08007451 	.word	0x08007451
 8007430:	08007459 	.word	0x08007459
 8007434:	08007461 	.word	0x08007461
 8007438:	08007477 	.word	0x08007477
 800743c:	08007467 	.word	0x08007467
 8007440:	08007477 	.word	0x08007477
 8007444:	08007477 	.word	0x08007477
 8007448:	08007477 	.word	0x08007477
 800744c:	0800746f 	.word	0x0800746f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007450:	f7fd fe34 	bl	80050bc <HAL_RCC_GetPCLK1Freq>
 8007454:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007456:	e014      	b.n	8007482 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007458:	f7fd fe42 	bl	80050e0 <HAL_RCC_GetPCLK2Freq>
 800745c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800745e:	e010      	b.n	8007482 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007460:	4b26      	ldr	r3, [pc, #152]	; (80074fc <UART_SetConfig+0x4e4>)
 8007462:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007464:	e00d      	b.n	8007482 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007466:	f7fd fd75 	bl	8004f54 <HAL_RCC_GetSysClockFreq>
 800746a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800746c:	e009      	b.n	8007482 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800746e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007472:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007474:	e005      	b.n	8007482 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8007476:	2300      	movs	r3, #0
 8007478:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007480:	bf00      	nop
    }

    if (pclk != 0U)
 8007482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007484:	2b00      	cmp	r3, #0
 8007486:	d021      	beq.n	80074cc <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748c:	4a1a      	ldr	r2, [pc, #104]	; (80074f8 <UART_SetConfig+0x4e0>)
 800748e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007492:	461a      	mov	r2, r3
 8007494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007496:	fbb3 f2f2 	udiv	r2, r3, r2
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	085b      	lsrs	r3, r3, #1
 80074a0:	441a      	add	r2, r3
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074ac:	6a3b      	ldr	r3, [r7, #32]
 80074ae:	2b0f      	cmp	r3, #15
 80074b0:	d909      	bls.n	80074c6 <UART_SetConfig+0x4ae>
 80074b2:	6a3b      	ldr	r3, [r7, #32]
 80074b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074b8:	d205      	bcs.n	80074c6 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	b29a      	uxth	r2, r3
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	60da      	str	r2, [r3, #12]
 80074c4:	e002      	b.n	80074cc <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	2200      	movs	r2, #0
 80074e0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	2200      	movs	r2, #0
 80074e6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80074e8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3730      	adds	r7, #48	; 0x30
 80074f0:	46bd      	mov	sp, r7
 80074f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074f6:	bf00      	nop
 80074f8:	0800ccf0 	.word	0x0800ccf0
 80074fc:	00f42400 	.word	0x00f42400

08007500 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00a      	beq.n	800752a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	430a      	orrs	r2, r1
 8007528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752e:	f003 0302 	and.w	r3, r3, #2
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00a      	beq.n	800754c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	430a      	orrs	r2, r1
 800754a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007550:	f003 0304 	and.w	r3, r3, #4
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00a      	beq.n	800756e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	430a      	orrs	r2, r1
 800756c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007572:	f003 0308 	and.w	r3, r3, #8
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00a      	beq.n	8007590 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	430a      	orrs	r2, r1
 800758e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007594:	f003 0310 	and.w	r3, r3, #16
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00a      	beq.n	80075b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	430a      	orrs	r2, r1
 80075b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b6:	f003 0320 	and.w	r3, r3, #32
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00a      	beq.n	80075d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	430a      	orrs	r2, r1
 80075d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d01a      	beq.n	8007616 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	430a      	orrs	r2, r1
 80075f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075fe:	d10a      	bne.n	8007616 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	430a      	orrs	r2, r1
 8007614:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00a      	beq.n	8007638 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	430a      	orrs	r2, r1
 8007636:	605a      	str	r2, [r3, #4]
  }
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	bc80      	pop	{r7}
 8007640:	4770      	bx	lr

08007642 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b086      	sub	sp, #24
 8007646:	af02      	add	r7, sp, #8
 8007648:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007652:	f7fb fa25 	bl	8002aa0 <HAL_GetTick>
 8007656:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0308 	and.w	r3, r3, #8
 8007662:	2b08      	cmp	r3, #8
 8007664:	d10e      	bne.n	8007684 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007666:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f832 	bl	80076de <UART_WaitOnFlagUntilTimeout>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d001      	beq.n	8007684 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007680:	2303      	movs	r3, #3
 8007682:	e028      	b.n	80076d6 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 0304 	and.w	r3, r3, #4
 800768e:	2b04      	cmp	r3, #4
 8007690:	d10e      	bne.n	80076b0 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007692:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 f81c 	bl	80076de <UART_WaitOnFlagUntilTimeout>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d001      	beq.n	80076b0 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076ac:	2303      	movs	r3, #3
 80076ae:	e012      	b.n	80076d6 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2220      	movs	r2, #32
 80076b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2220      	movs	r2, #32
 80076bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b09c      	sub	sp, #112	; 0x70
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	60f8      	str	r0, [r7, #12]
 80076e6:	60b9      	str	r1, [r7, #8]
 80076e8:	603b      	str	r3, [r7, #0]
 80076ea:	4613      	mov	r3, r2
 80076ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076ee:	e0a9      	b.n	8007844 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076f6:	f000 80a5 	beq.w	8007844 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076fa:	f7fb f9d1 	bl	8002aa0 <HAL_GetTick>
 80076fe:	4602      	mov	r2, r0
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007706:	429a      	cmp	r2, r3
 8007708:	d302      	bcc.n	8007710 <UART_WaitOnFlagUntilTimeout+0x32>
 800770a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800770c:	2b00      	cmp	r3, #0
 800770e:	d140      	bne.n	8007792 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007718:	e853 3f00 	ldrex	r3, [r3]
 800771c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800771e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007720:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007724:	667b      	str	r3, [r7, #100]	; 0x64
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	461a      	mov	r2, r3
 800772c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800772e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007730:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007732:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007734:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007736:	e841 2300 	strex	r3, r2, [r1]
 800773a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800773c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1e6      	bne.n	8007710 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	3308      	adds	r3, #8
 8007748:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800774c:	e853 3f00 	ldrex	r3, [r3]
 8007750:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007754:	f023 0301 	bic.w	r3, r3, #1
 8007758:	663b      	str	r3, [r7, #96]	; 0x60
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	3308      	adds	r3, #8
 8007760:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007762:	64ba      	str	r2, [r7, #72]	; 0x48
 8007764:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007766:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007768:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800776a:	e841 2300 	strex	r3, r2, [r1]
 800776e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1e5      	bne.n	8007742 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2220      	movs	r2, #32
 800777a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2220      	movs	r2, #32
 8007782:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e069      	b.n	8007866 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 0304 	and.w	r3, r3, #4
 800779c:	2b00      	cmp	r3, #0
 800779e:	d051      	beq.n	8007844 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	69db      	ldr	r3, [r3, #28]
 80077a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077ae:	d149      	bne.n	8007844 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c2:	e853 3f00 	ldrex	r3, [r3]
 80077c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	461a      	mov	r2, r3
 80077d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077d8:	637b      	str	r3, [r7, #52]	; 0x34
 80077da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077e0:	e841 2300 	strex	r3, r2, [r1]
 80077e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80077e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1e6      	bne.n	80077ba <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	3308      	adds	r3, #8
 80077f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	e853 3f00 	ldrex	r3, [r3]
 80077fa:	613b      	str	r3, [r7, #16]
   return(result);
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	f023 0301 	bic.w	r3, r3, #1
 8007802:	66bb      	str	r3, [r7, #104]	; 0x68
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	3308      	adds	r3, #8
 800780a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800780c:	623a      	str	r2, [r7, #32]
 800780e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007810:	69f9      	ldr	r1, [r7, #28]
 8007812:	6a3a      	ldr	r2, [r7, #32]
 8007814:	e841 2300 	strex	r3, r2, [r1]
 8007818:	61bb      	str	r3, [r7, #24]
   return(result);
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1e5      	bne.n	80077ec <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2220      	movs	r2, #32
 8007824:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2220      	movs	r2, #32
 800782c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2220      	movs	r2, #32
 8007834:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007840:	2303      	movs	r3, #3
 8007842:	e010      	b.n	8007866 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	69da      	ldr	r2, [r3, #28]
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	4013      	ands	r3, r2
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	429a      	cmp	r2, r3
 8007852:	bf0c      	ite	eq
 8007854:	2301      	moveq	r3, #1
 8007856:	2300      	movne	r3, #0
 8007858:	b2db      	uxtb	r3, r3
 800785a:	461a      	mov	r2, r3
 800785c:	79fb      	ldrb	r3, [r7, #7]
 800785e:	429a      	cmp	r2, r3
 8007860:	f43f af46 	beq.w	80076f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3770      	adds	r7, #112	; 0x70
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
	...

08007870 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b096      	sub	sp, #88	; 0x58
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	4613      	mov	r3, r2
 800787c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	68ba      	ldr	r2, [r7, #8]
 8007882:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	88fa      	ldrh	r2, [r7, #6]
 8007888:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2222      	movs	r2, #34	; 0x22
 8007898:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d02d      	beq.n	8007902 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078ac:	4a40      	ldr	r2, [pc, #256]	; (80079b0 <UART_Start_Receive_DMA+0x140>)
 80078ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078b6:	4a3f      	ldr	r2, [pc, #252]	; (80079b4 <UART_Start_Receive_DMA+0x144>)
 80078b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078c0:	4a3d      	ldr	r2, [pc, #244]	; (80079b8 <UART_Start_Receive_DMA+0x148>)
 80078c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078ca:	2200      	movs	r2, #0
 80078cc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3324      	adds	r3, #36	; 0x24
 80078da:	4619      	mov	r1, r3
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078e0:	461a      	mov	r2, r3
 80078e2:	88fb      	ldrh	r3, [r7, #6]
 80078e4:	f7fb ff4e 	bl	8003784 <HAL_DMA_Start_IT>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d009      	beq.n	8007902 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2210      	movs	r2, #16
 80078f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2220      	movs	r2, #32
 80078fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e051      	b.n	80079a6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d018      	beq.n	800793c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007912:	e853 3f00 	ldrex	r3, [r3]
 8007916:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800791e:	657b      	str	r3, [r7, #84]	; 0x54
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	461a      	mov	r2, r3
 8007926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007928:	64bb      	str	r3, [r7, #72]	; 0x48
 800792a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800792e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007930:	e841 2300 	strex	r3, r2, [r1]
 8007934:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1e6      	bne.n	800790a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	3308      	adds	r3, #8
 8007942:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007946:	e853 3f00 	ldrex	r3, [r3]
 800794a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800794c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794e:	f043 0301 	orr.w	r3, r3, #1
 8007952:	653b      	str	r3, [r7, #80]	; 0x50
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	3308      	adds	r3, #8
 800795a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800795c:	637a      	str	r2, [r7, #52]	; 0x34
 800795e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007960:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007962:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007964:	e841 2300 	strex	r3, r2, [r1]
 8007968:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800796a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1e5      	bne.n	800793c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3308      	adds	r3, #8
 8007976:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	e853 3f00 	ldrex	r3, [r3]
 800797e:	613b      	str	r3, [r7, #16]
   return(result);
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	3308      	adds	r3, #8
 800798e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007990:	623a      	str	r2, [r7, #32]
 8007992:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007994:	69f9      	ldr	r1, [r7, #28]
 8007996:	6a3a      	ldr	r2, [r7, #32]
 8007998:	e841 2300 	strex	r3, r2, [r1]
 800799c:	61bb      	str	r3, [r7, #24]
   return(result);
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1e5      	bne.n	8007970 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3758      	adds	r7, #88	; 0x58
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	08007b07 	.word	0x08007b07
 80079b4:	08007c33 	.word	0x08007c33
 80079b8:	08007c71 	.word	0x08007c71

080079bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80079bc:	b480      	push	{r7}
 80079be:	b08f      	sub	sp, #60	; 0x3c
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ca:	6a3b      	ldr	r3, [r7, #32]
 80079cc:	e853 3f00 	ldrex	r3, [r3]
 80079d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80079d8:	637b      	str	r3, [r7, #52]	; 0x34
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	461a      	mov	r2, r3
 80079e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079e4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079ea:	e841 2300 	strex	r3, r2, [r1]
 80079ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1e6      	bne.n	80079c4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	3308      	adds	r3, #8
 80079fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	e853 3f00 	ldrex	r3, [r3]
 8007a04:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007a0c:	633b      	str	r3, [r7, #48]	; 0x30
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	3308      	adds	r3, #8
 8007a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a16:	61ba      	str	r2, [r7, #24]
 8007a18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1a:	6979      	ldr	r1, [r7, #20]
 8007a1c:	69ba      	ldr	r2, [r7, #24]
 8007a1e:	e841 2300 	strex	r3, r2, [r1]
 8007a22:	613b      	str	r3, [r7, #16]
   return(result);
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1e5      	bne.n	80079f6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2220      	movs	r2, #32
 8007a2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8007a32:	bf00      	nop
 8007a34:	373c      	adds	r7, #60	; 0x3c
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bc80      	pop	{r7}
 8007a3a:	4770      	bx	lr

08007a3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b095      	sub	sp, #84	; 0x54
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a4c:	e853 3f00 	ldrex	r3, [r3]
 8007a50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	461a      	mov	r2, r3
 8007a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a62:	643b      	str	r3, [r7, #64]	; 0x40
 8007a64:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a6a:	e841 2300 	strex	r3, r2, [r1]
 8007a6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1e6      	bne.n	8007a44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	3308      	adds	r3, #8
 8007a7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7e:	6a3b      	ldr	r3, [r7, #32]
 8007a80:	e853 3f00 	ldrex	r3, [r3]
 8007a84:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a8c:	f023 0301 	bic.w	r3, r3, #1
 8007a90:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	3308      	adds	r3, #8
 8007a98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007aa2:	e841 2300 	strex	r3, r2, [r1]
 8007aa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1e3      	bne.n	8007a76 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d118      	bne.n	8007ae8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	e853 3f00 	ldrex	r3, [r3]
 8007ac2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	f023 0310 	bic.w	r3, r3, #16
 8007aca:	647b      	str	r3, [r7, #68]	; 0x44
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ad4:	61bb      	str	r3, [r7, #24]
 8007ad6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad8:	6979      	ldr	r1, [r7, #20]
 8007ada:	69ba      	ldr	r2, [r7, #24]
 8007adc:	e841 2300 	strex	r3, r2, [r1]
 8007ae0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1e6      	bne.n	8007ab6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2220      	movs	r2, #32
 8007aec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007afc:	bf00      	nop
 8007afe:	3754      	adds	r7, #84	; 0x54
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bc80      	pop	{r7}
 8007b04:	4770      	bx	lr

08007b06 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b09c      	sub	sp, #112	; 0x70
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b12:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 0320 	and.w	r3, r3, #32
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d171      	bne.n	8007c06 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b24:	2200      	movs	r2, #0
 8007b26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b32:	e853 3f00 	ldrex	r3, [r3]
 8007b36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	461a      	mov	r2, r3
 8007b46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b48:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b4a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b50:	e841 2300 	strex	r3, r2, [r1]
 8007b54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1e6      	bne.n	8007b2a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	3308      	adds	r3, #8
 8007b62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b66:	e853 3f00 	ldrex	r3, [r3]
 8007b6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b6e:	f023 0301 	bic.w	r3, r3, #1
 8007b72:	667b      	str	r3, [r7, #100]	; 0x64
 8007b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	3308      	adds	r3, #8
 8007b7a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b7c:	647a      	str	r2, [r7, #68]	; 0x44
 8007b7e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b84:	e841 2300 	strex	r3, r2, [r1]
 8007b88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1e5      	bne.n	8007b5c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3308      	adds	r3, #8
 8007b96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	e853 3f00 	ldrex	r3, [r3]
 8007b9e:	623b      	str	r3, [r7, #32]
   return(result);
 8007ba0:	6a3b      	ldr	r3, [r7, #32]
 8007ba2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ba6:	663b      	str	r3, [r7, #96]	; 0x60
 8007ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3308      	adds	r3, #8
 8007bae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007bb0:	633a      	str	r2, [r7, #48]	; 0x30
 8007bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bb8:	e841 2300 	strex	r3, r2, [r1]
 8007bbc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1e5      	bne.n	8007b90 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bc6:	2220      	movs	r2, #32
 8007bc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d118      	bne.n	8007c06 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	e853 3f00 	ldrex	r3, [r3]
 8007be0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f023 0310 	bic.w	r3, r3, #16
 8007be8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bf2:	61fb      	str	r3, [r7, #28]
 8007bf4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf6:	69b9      	ldr	r1, [r7, #24]
 8007bf8:	69fa      	ldr	r2, [r7, #28]
 8007bfa:	e841 2300 	strex	r3, r2, [r1]
 8007bfe:	617b      	str	r3, [r7, #20]
   return(result);
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1e6      	bne.n	8007bd4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c08:	2200      	movs	r2, #0
 8007c0a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d107      	bne.n	8007c24 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007c1e:	f7ff f9f0 	bl	8007002 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c22:	e002      	b.n	8007c2a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007c24:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007c26:	f7f9 fb2b 	bl	8001280 <HAL_UART_RxCpltCallback>
}
 8007c2a:	bf00      	nop
 8007c2c:	3770      	adds	r7, #112	; 0x70
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b084      	sub	sp, #16
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c3e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2201      	movs	r2, #1
 8007c44:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d109      	bne.n	8007c62 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c54:	085b      	lsrs	r3, r3, #1
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	4619      	mov	r1, r3
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f7ff f9d1 	bl	8007002 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c60:	e002      	b.n	8007c68 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f7ff f9bb 	bl	8006fde <HAL_UART_RxHalfCpltCallback>
}
 8007c68:	bf00      	nop
 8007c6a:	3710      	adds	r7, #16
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b086      	sub	sp, #24
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c84:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c8c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c98:	2b80      	cmp	r3, #128	; 0x80
 8007c9a:	d109      	bne.n	8007cb0 <UART_DMAError+0x40>
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	2b21      	cmp	r3, #33	; 0x21
 8007ca0:	d106      	bne.n	8007cb0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007caa:	6978      	ldr	r0, [r7, #20]
 8007cac:	f7ff fe86 	bl	80079bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cba:	2b40      	cmp	r3, #64	; 0x40
 8007cbc:	d109      	bne.n	8007cd2 <UART_DMAError+0x62>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2b22      	cmp	r3, #34	; 0x22
 8007cc2:	d106      	bne.n	8007cd2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007ccc:	6978      	ldr	r0, [r7, #20]
 8007cce:	f7ff feb5 	bl	8007a3c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cd8:	f043 0210 	orr.w	r2, r3, #16
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ce2:	6978      	ldr	r0, [r7, #20]
 8007ce4:	f7ff f984 	bl	8006ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ce8:	bf00      	nop
 8007cea:	3718      	adds	r7, #24
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f7ff f96e 	bl	8006ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d14:	bf00      	nop
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b088      	sub	sp, #32
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	e853 3f00 	ldrex	r3, [r3]
 8007d30:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d38:	61fb      	str	r3, [r7, #28]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	61bb      	str	r3, [r7, #24]
 8007d44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d46:	6979      	ldr	r1, [r7, #20]
 8007d48:	69ba      	ldr	r2, [r7, #24]
 8007d4a:	e841 2300 	strex	r3, r2, [r1]
 8007d4e:	613b      	str	r3, [r7, #16]
   return(result);
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1e6      	bne.n	8007d24 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2220      	movs	r2, #32
 8007d5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f7ff f931 	bl	8006fcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d6a:	bf00      	nop
 8007d6c:	3720      	adds	r7, #32
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007d72:	b480      	push	{r7}
 8007d74:	b083      	sub	sp, #12
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007d7a:	bf00      	nop
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bc80      	pop	{r7}
 8007d82:	4770      	bx	lr

08007d84 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007d8c:	bf00      	nop
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bc80      	pop	{r7}
 8007d94:	4770      	bx	lr

08007d96 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007d96:	b480      	push	{r7}
 8007d98:	b083      	sub	sp, #12
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007d9e:	bf00      	nop
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bc80      	pop	{r7}
 8007da6:	4770      	bx	lr

08007da8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d101      	bne.n	8007dbe <HAL_UARTEx_DisableFifoMode+0x16>
 8007dba:	2302      	movs	r3, #2
 8007dbc:	e027      	b.n	8007e0e <HAL_UARTEx_DisableFifoMode+0x66>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2224      	movs	r2, #36	; 0x24
 8007dca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f022 0201 	bic.w	r2, r2, #1
 8007de4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007dec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2220      	movs	r2, #32
 8007e00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3714      	adds	r7, #20
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bc80      	pop	{r7}
 8007e16:	4770      	bx	lr

08007e18 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d101      	bne.n	8007e30 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007e2c:	2302      	movs	r3, #2
 8007e2e:	e02d      	b.n	8007e8c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2224      	movs	r2, #36	; 0x24
 8007e3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f022 0201 	bic.w	r2, r2, #1
 8007e56:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	683a      	ldr	r2, [r7, #0]
 8007e68:	430a      	orrs	r2, r1
 8007e6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 f84f 	bl	8007f10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2220      	movs	r2, #32
 8007e7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d101      	bne.n	8007eac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ea8:	2302      	movs	r3, #2
 8007eaa:	e02d      	b.n	8007f08 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2224      	movs	r2, #36	; 0x24
 8007eb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f022 0201 	bic.w	r2, r2, #1
 8007ed2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	683a      	ldr	r2, [r7, #0]
 8007ee4:	430a      	orrs	r2, r1
 8007ee6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 f811 	bl	8007f10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2220      	movs	r2, #32
 8007efa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d108      	bne.n	8007f32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007f30:	e031      	b.n	8007f96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007f32:	2308      	movs	r3, #8
 8007f34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007f36:	2308      	movs	r3, #8
 8007f38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	0e5b      	lsrs	r3, r3, #25
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	f003 0307 	and.w	r3, r3, #7
 8007f48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	0f5b      	lsrs	r3, r3, #29
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	f003 0307 	and.w	r3, r3, #7
 8007f58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f5a:	7bbb      	ldrb	r3, [r7, #14]
 8007f5c:	7b3a      	ldrb	r2, [r7, #12]
 8007f5e:	4910      	ldr	r1, [pc, #64]	; (8007fa0 <UARTEx_SetNbDataToProcess+0x90>)
 8007f60:	5c8a      	ldrb	r2, [r1, r2]
 8007f62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007f66:	7b3a      	ldrb	r2, [r7, #12]
 8007f68:	490e      	ldr	r1, [pc, #56]	; (8007fa4 <UARTEx_SetNbDataToProcess+0x94>)
 8007f6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f78:	7bfb      	ldrb	r3, [r7, #15]
 8007f7a:	7b7a      	ldrb	r2, [r7, #13]
 8007f7c:	4908      	ldr	r1, [pc, #32]	; (8007fa0 <UARTEx_SetNbDataToProcess+0x90>)
 8007f7e:	5c8a      	ldrb	r2, [r1, r2]
 8007f80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007f84:	7b7a      	ldrb	r2, [r7, #13]
 8007f86:	4907      	ldr	r1, [pc, #28]	; (8007fa4 <UARTEx_SetNbDataToProcess+0x94>)
 8007f88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007f96:	bf00      	nop
 8007f98:	3714      	adds	r7, #20
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bc80      	pop	{r7}
 8007f9e:	4770      	bx	lr
 8007fa0:	0800cd08 	.word	0x0800cd08
 8007fa4:	0800cd10 	.word	0x0800cd10

08007fa8 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af02      	add	r7, sp, #8
 8007fae:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8007fb0:	4a24      	ldr	r2, [pc, #144]	; (8008044 <RadioInit+0x9c>)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8007fb6:	4b24      	ldr	r3, [pc, #144]	; (8008048 <RadioInit+0xa0>)
 8007fb8:	2200      	movs	r2, #0
 8007fba:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8007fbc:	4b22      	ldr	r3, [pc, #136]	; (8008048 <RadioInit+0xa0>)
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8007fc2:	4b21      	ldr	r3, [pc, #132]	; (8008048 <RadioInit+0xa0>)
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007fc8:	4b1f      	ldr	r3, [pc, #124]	; (8008048 <RadioInit+0xa0>)
 8007fca:	2200      	movs	r2, #0
 8007fcc:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8007fce:	481f      	ldr	r0, [pc, #124]	; (800804c <RadioInit+0xa4>)
 8007fd0:	f001 ff88 	bl	8009ee4 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8007fd4:	4b1c      	ldr	r3, [pc, #112]	; (8008048 <RadioInit+0xa0>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8007fda:	4b1b      	ldr	r3, [pc, #108]	; (8008048 <RadioInit+0xa0>)
 8007fdc:	2200      	movs	r2, #0
 8007fde:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8007fe0:	f002 fa1c 	bl	800a41c <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	2000      	movs	r0, #0
 8007fe8:	f002 fde8 	bl	800abbc <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8007fec:	2204      	movs	r2, #4
 8007fee:	2100      	movs	r1, #0
 8007ff0:	2001      	movs	r0, #1
 8007ff2:	f002 fba5 	bl	800a740 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007ffe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008002:	f002 fad5 	bl	800a5b0 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8008006:	f000 fe91 	bl	8008d2c <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800800a:	2300      	movs	r3, #0
 800800c:	9300      	str	r3, [sp, #0]
 800800e:	4b10      	ldr	r3, [pc, #64]	; (8008050 <RadioInit+0xa8>)
 8008010:	2200      	movs	r2, #0
 8008012:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008016:	480f      	ldr	r0, [pc, #60]	; (8008054 <RadioInit+0xac>)
 8008018:	f003 fb32 	bl	800b680 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800801c:	2300      	movs	r3, #0
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	4b0d      	ldr	r3, [pc, #52]	; (8008058 <RadioInit+0xb0>)
 8008022:	2200      	movs	r2, #0
 8008024:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008028:	480c      	ldr	r0, [pc, #48]	; (800805c <RadioInit+0xb4>)
 800802a:	f003 fb29 	bl	800b680 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800802e:	4809      	ldr	r0, [pc, #36]	; (8008054 <RadioInit+0xac>)
 8008030:	f003 fbca 	bl	800b7c8 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8008034:	4809      	ldr	r0, [pc, #36]	; (800805c <RadioInit+0xb4>)
 8008036:	f003 fbc7 	bl	800b7c8 <UTIL_TIMER_Stop>
}
 800803a:	bf00      	nop
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	20000968 	.word	0x20000968
 8008048:	2000096c 	.word	0x2000096c
 800804c:	08009125 	.word	0x08009125
 8008050:	080090ad 	.word	0x080090ad
 8008054:	200009c8 	.word	0x200009c8
 8008058:	080090c1 	.word	0x080090c1
 800805c:	200009e0 	.word	0x200009e0

08008060 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8008060:	b580      	push	{r7, lr}
 8008062:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8008064:	f001 ff86 	bl	8009f74 <SUBGRF_GetOperatingMode>
 8008068:	4603      	mov	r3, r0
 800806a:	2b07      	cmp	r3, #7
 800806c:	d00a      	beq.n	8008084 <RadioGetStatus+0x24>
 800806e:	2b07      	cmp	r3, #7
 8008070:	dc0a      	bgt.n	8008088 <RadioGetStatus+0x28>
 8008072:	2b04      	cmp	r3, #4
 8008074:	d002      	beq.n	800807c <RadioGetStatus+0x1c>
 8008076:	2b05      	cmp	r3, #5
 8008078:	d002      	beq.n	8008080 <RadioGetStatus+0x20>
 800807a:	e005      	b.n	8008088 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 800807c:	2302      	movs	r3, #2
 800807e:	e004      	b.n	800808a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8008080:	2301      	movs	r3, #1
 8008082:	e002      	b.n	800808a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8008084:	2303      	movs	r3, #3
 8008086:	e000      	b.n	800808a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8008088:	2300      	movs	r3, #0
    }
}
 800808a:	4618      	mov	r0, r3
 800808c:	bd80      	pop	{r7, pc}
	...

08008090 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	4603      	mov	r3, r0
 8008098:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 800809a:	4a2a      	ldr	r2, [pc, #168]	; (8008144 <RadioSetModem+0xb4>)
 800809c:	79fb      	ldrb	r3, [r7, #7]
 800809e:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 80080a0:	79fb      	ldrb	r3, [r7, #7]
 80080a2:	4618      	mov	r0, r3
 80080a4:	f003 f95d 	bl	800b362 <RFW_SetRadioModem>
    switch( modem )
 80080a8:	79fb      	ldrb	r3, [r7, #7]
 80080aa:	2b05      	cmp	r3, #5
 80080ac:	d80e      	bhi.n	80080cc <RadioSetModem+0x3c>
 80080ae:	a201      	add	r2, pc, #4	; (adr r2, 80080b4 <RadioSetModem+0x24>)
 80080b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b4:	080080db 	.word	0x080080db
 80080b8:	080080e9 	.word	0x080080e9
 80080bc:	080080cd 	.word	0x080080cd
 80080c0:	0800810f 	.word	0x0800810f
 80080c4:	0800811d 	.word	0x0800811d
 80080c8:	0800812b 	.word	0x0800812b
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 80080cc:	2003      	movs	r0, #3
 80080ce:	f002 fb11 	bl	800a6f4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80080d2:	4b1c      	ldr	r3, [pc, #112]	; (8008144 <RadioSetModem+0xb4>)
 80080d4:	2200      	movs	r2, #0
 80080d6:	735a      	strb	r2, [r3, #13]
        break;
 80080d8:	e02f      	b.n	800813a <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80080da:	2000      	movs	r0, #0
 80080dc:	f002 fb0a 	bl	800a6f4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80080e0:	4b18      	ldr	r3, [pc, #96]	; (8008144 <RadioSetModem+0xb4>)
 80080e2:	2200      	movs	r2, #0
 80080e4:	735a      	strb	r2, [r3, #13]
        break;
 80080e6:	e028      	b.n	800813a <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80080e8:	2001      	movs	r0, #1
 80080ea:	f002 fb03 	bl	800a6f4 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80080ee:	4b15      	ldr	r3, [pc, #84]	; (8008144 <RadioSetModem+0xb4>)
 80080f0:	7b5a      	ldrb	r2, [r3, #13]
 80080f2:	4b14      	ldr	r3, [pc, #80]	; (8008144 <RadioSetModem+0xb4>)
 80080f4:	7b1b      	ldrb	r3, [r3, #12]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d01e      	beq.n	8008138 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80080fa:	4b12      	ldr	r3, [pc, #72]	; (8008144 <RadioSetModem+0xb4>)
 80080fc:	7b1a      	ldrb	r2, [r3, #12]
 80080fe:	4b11      	ldr	r3, [pc, #68]	; (8008144 <RadioSetModem+0xb4>)
 8008100:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8008102:	4b10      	ldr	r3, [pc, #64]	; (8008144 <RadioSetModem+0xb4>)
 8008104:	7b5b      	ldrb	r3, [r3, #13]
 8008106:	4618      	mov	r0, r3
 8008108:	f000 ff9a 	bl	8009040 <RadioSetPublicNetwork>
        }
        break;
 800810c:	e014      	b.n	8008138 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800810e:	2002      	movs	r0, #2
 8008110:	f002 faf0 	bl	800a6f4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008114:	4b0b      	ldr	r3, [pc, #44]	; (8008144 <RadioSetModem+0xb4>)
 8008116:	2200      	movs	r2, #0
 8008118:	735a      	strb	r2, [r3, #13]
        break;
 800811a:	e00e      	b.n	800813a <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800811c:	2002      	movs	r0, #2
 800811e:	f002 fae9 	bl	800a6f4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008122:	4b08      	ldr	r3, [pc, #32]	; (8008144 <RadioSetModem+0xb4>)
 8008124:	2200      	movs	r2, #0
 8008126:	735a      	strb	r2, [r3, #13]
        break;
 8008128:	e007      	b.n	800813a <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800812a:	2000      	movs	r0, #0
 800812c:	f002 fae2 	bl	800a6f4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008130:	4b04      	ldr	r3, [pc, #16]	; (8008144 <RadioSetModem+0xb4>)
 8008132:	2200      	movs	r2, #0
 8008134:	735a      	strb	r2, [r3, #13]
        break;
 8008136:	e000      	b.n	800813a <RadioSetModem+0xaa>
        break;
 8008138:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 800813a:	bf00      	nop
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	2000096c 	.word	0x2000096c

08008148 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f002 fa89 	bl	800a668 <SUBGRF_SetRfFrequency>
}
 8008156:	bf00      	nop
 8008158:	3708      	adds	r7, #8
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b090      	sub	sp, #64	; 0x40
 8008162:	af0a      	add	r7, sp, #40	; 0x28
 8008164:	60f8      	str	r0, [r7, #12]
 8008166:	60b9      	str	r1, [r7, #8]
 8008168:	603b      	str	r3, [r7, #0]
 800816a:	4613      	mov	r3, r2
 800816c:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 800816e:	2301      	movs	r3, #1
 8008170:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8008172:	2300      	movs	r3, #0
 8008174:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8008176:	2300      	movs	r3, #0
 8008178:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 800817a:	f000 fdea 	bl	8008d52 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 800817e:	2000      	movs	r0, #0
 8008180:	f7ff ff86 	bl	8008090 <RadioSetModem>

    RadioSetChannel( freq );
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f7ff ffdf 	bl	8008148 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800818a:	2301      	movs	r3, #1
 800818c:	9309      	str	r3, [sp, #36]	; 0x24
 800818e:	2300      	movs	r3, #0
 8008190:	9308      	str	r3, [sp, #32]
 8008192:	2300      	movs	r3, #0
 8008194:	9307      	str	r3, [sp, #28]
 8008196:	2300      	movs	r3, #0
 8008198:	9306      	str	r3, [sp, #24]
 800819a:	2300      	movs	r3, #0
 800819c:	9305      	str	r3, [sp, #20]
 800819e:	2300      	movs	r3, #0
 80081a0:	9304      	str	r3, [sp, #16]
 80081a2:	2300      	movs	r3, #0
 80081a4:	9303      	str	r3, [sp, #12]
 80081a6:	2300      	movs	r3, #0
 80081a8:	9302      	str	r3, [sp, #8]
 80081aa:	2303      	movs	r3, #3
 80081ac:	9301      	str	r3, [sp, #4]
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	2300      	movs	r3, #0
 80081b4:	f44f 7216 	mov.w	r2, #600	; 0x258
 80081b8:	68b9      	ldr	r1, [r7, #8]
 80081ba:	2000      	movs	r0, #0
 80081bc:	f000 f83c 	bl	8008238 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80081c0:	2000      	movs	r0, #0
 80081c2:	f000 fdcd 	bl	8008d60 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80081c6:	f000 ff69 	bl	800909c <RadioGetWakeupTime>
 80081ca:	4603      	mov	r3, r0
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7fa fc7b 	bl	8002ac8 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80081d2:	f003 fb93 	bl	800b8fc <UTIL_TIMER_GetCurrentTime>
 80081d6:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80081d8:	e00d      	b.n	80081f6 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80081da:	2000      	movs	r0, #0
 80081dc:	f000 feae 	bl	8008f3c <RadioRssi>
 80081e0:	4603      	mov	r3, r0
 80081e2:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80081e4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80081e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	dd02      	ble.n	80081f6 <RadioIsChannelFree+0x98>
        {
            status = false;
 80081f0:	2300      	movs	r3, #0
 80081f2:	75fb      	strb	r3, [r7, #23]
            break;
 80081f4:	e006      	b.n	8008204 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80081f6:	6938      	ldr	r0, [r7, #16]
 80081f8:	f003 fb92 	bl	800b920 <UTIL_TIMER_GetElapsedTime>
 80081fc:	4602      	mov	r2, r0
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	4293      	cmp	r3, r2
 8008202:	d8ea      	bhi.n	80081da <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8008204:	f000 fda5 	bl	8008d52 <RadioStandby>

    return status;
 8008208:	7dfb      	ldrb	r3, [r7, #23]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3718      	adds	r7, #24
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b082      	sub	sp, #8
 8008216:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8008218:	2300      	movs	r3, #0
 800821a:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800821c:	2300      	movs	r3, #0
 800821e:	2200      	movs	r2, #0
 8008220:	2100      	movs	r1, #0
 8008222:	2000      	movs	r0, #0
 8008224:	f002 f9c4 	bl	800a5b0 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8008228:	f001 ff75 	bl	800a116 <SUBGRF_GetRandom>
 800822c:	6078      	str	r0, [r7, #4]

    return rnd;
 800822e:	687b      	ldr	r3, [r7, #4]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b08a      	sub	sp, #40	; 0x28
 800823c:	af00      	add	r7, sp, #0
 800823e:	60b9      	str	r1, [r7, #8]
 8008240:	607a      	str	r2, [r7, #4]
 8008242:	461a      	mov	r2, r3
 8008244:	4603      	mov	r3, r0
 8008246:	73fb      	strb	r3, [r7, #15]
 8008248:	4613      	mov	r3, r2
 800824a:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 800824c:	4ab9      	ldr	r2, [pc, #740]	; (8008534 <RadioSetRxConfig+0x2fc>)
 800824e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8008252:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8008254:	f003 f843 	bl	800b2de <RFW_DeInit>
    if( rxContinuous == true )
 8008258:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800825c:	2b00      	cmp	r3, #0
 800825e:	d001      	beq.n	8008264 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8008260:	2300      	movs	r3, #0
 8008262:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8008264:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008268:	2b00      	cmp	r3, #0
 800826a:	d004      	beq.n	8008276 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 800826c:	4ab2      	ldr	r2, [pc, #712]	; (8008538 <RadioSetRxConfig+0x300>)
 800826e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8008272:	7013      	strb	r3, [r2, #0]
 8008274:	e002      	b.n	800827c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8008276:	4bb0      	ldr	r3, [pc, #704]	; (8008538 <RadioSetRxConfig+0x300>)
 8008278:	22ff      	movs	r2, #255	; 0xff
 800827a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 800827c:	7bfb      	ldrb	r3, [r7, #15]
 800827e:	2b05      	cmp	r3, #5
 8008280:	d009      	beq.n	8008296 <RadioSetRxConfig+0x5e>
 8008282:	2b05      	cmp	r3, #5
 8008284:	f300 81d7 	bgt.w	8008636 <RadioSetRxConfig+0x3fe>
 8008288:	2b00      	cmp	r3, #0
 800828a:	f000 80bf 	beq.w	800840c <RadioSetRxConfig+0x1d4>
 800828e:	2b01      	cmp	r3, #1
 8008290:	f000 8124 	beq.w	80084dc <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8008294:	e1cf      	b.n	8008636 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8008296:	2001      	movs	r0, #1
 8008298:	f002 f882 	bl	800a3a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800829c:	4ba5      	ldr	r3, [pc, #660]	; (8008534 <RadioSetRxConfig+0x2fc>)
 800829e:	2200      	movs	r2, #0
 80082a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80082a4:	4aa3      	ldr	r2, [pc, #652]	; (8008534 <RadioSetRxConfig+0x2fc>)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80082aa:	4ba2      	ldr	r3, [pc, #648]	; (8008534 <RadioSetRxConfig+0x2fc>)
 80082ac:	2209      	movs	r2, #9
 80082ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80082b2:	4ba0      	ldr	r3, [pc, #640]	; (8008534 <RadioSetRxConfig+0x2fc>)
 80082b4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80082b8:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80082ba:	68b8      	ldr	r0, [r7, #8]
 80082bc:	f002 ff42 	bl	800b144 <SUBGRF_GetFskBandwidthRegValue>
 80082c0:	4603      	mov	r3, r0
 80082c2:	461a      	mov	r2, r3
 80082c4:	4b9b      	ldr	r3, [pc, #620]	; (8008534 <RadioSetRxConfig+0x2fc>)
 80082c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80082ca:	4b9a      	ldr	r3, [pc, #616]	; (8008534 <RadioSetRxConfig+0x2fc>)
 80082cc:	2200      	movs	r2, #0
 80082ce:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80082d0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80082d2:	00db      	lsls	r3, r3, #3
 80082d4:	b29a      	uxth	r2, r3
 80082d6:	4b97      	ldr	r3, [pc, #604]	; (8008534 <RadioSetRxConfig+0x2fc>)
 80082d8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80082da:	4b96      	ldr	r3, [pc, #600]	; (8008534 <RadioSetRxConfig+0x2fc>)
 80082dc:	2200      	movs	r2, #0
 80082de:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80082e0:	4b94      	ldr	r3, [pc, #592]	; (8008534 <RadioSetRxConfig+0x2fc>)
 80082e2:	2210      	movs	r2, #16
 80082e4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80082e6:	4b93      	ldr	r3, [pc, #588]	; (8008534 <RadioSetRxConfig+0x2fc>)
 80082e8:	2200      	movs	r2, #0
 80082ea:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80082ec:	4b91      	ldr	r3, [pc, #580]	; (8008534 <RadioSetRxConfig+0x2fc>)
 80082ee:	2200      	movs	r2, #0
 80082f0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80082f2:	4b91      	ldr	r3, [pc, #580]	; (8008538 <RadioSetRxConfig+0x300>)
 80082f4:	781a      	ldrb	r2, [r3, #0]
 80082f6:	4b8f      	ldr	r3, [pc, #572]	; (8008534 <RadioSetRxConfig+0x2fc>)
 80082f8:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80082fa:	4b8e      	ldr	r3, [pc, #568]	; (8008534 <RadioSetRxConfig+0x2fc>)
 80082fc:	2201      	movs	r2, #1
 80082fe:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8008300:	4b8c      	ldr	r3, [pc, #560]	; (8008534 <RadioSetRxConfig+0x2fc>)
 8008302:	2200      	movs	r2, #0
 8008304:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8008306:	2005      	movs	r0, #5
 8008308:	f7ff fec2 	bl	8008090 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800830c:	488b      	ldr	r0, [pc, #556]	; (800853c <RadioSetRxConfig+0x304>)
 800830e:	f002 fae5 	bl	800a8dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008312:	488b      	ldr	r0, [pc, #556]	; (8008540 <RadioSetRxConfig+0x308>)
 8008314:	f002 fbb4 	bl	800aa80 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8008318:	4a8a      	ldr	r2, [pc, #552]	; (8008544 <RadioSetRxConfig+0x30c>)
 800831a:	f107 031c 	add.w	r3, r7, #28
 800831e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008322:	e883 0003 	stmia.w	r3, {r0, r1}
 8008326:	f107 031c 	add.w	r3, r7, #28
 800832a:	4618      	mov	r0, r3
 800832c:	f001 fe71 	bl	800a012 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8008330:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008334:	f001 febc 	bl	800a0b0 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8008338:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800833c:	f000 fe1d 	bl	8008f7a <RadioRead>
 8008340:	4603      	mov	r3, r0
 8008342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8008346:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800834a:	f023 0310 	bic.w	r3, r3, #16
 800834e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8008352:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008356:	4619      	mov	r1, r3
 8008358:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800835c:	f000 fdfb 	bl	8008f56 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8008360:	2104      	movs	r1, #4
 8008362:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8008366:	f000 fdf6 	bl	8008f56 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 800836a:	f640 009b 	movw	r0, #2203	; 0x89b
 800836e:	f000 fe04 	bl	8008f7a <RadioRead>
 8008372:	4603      	mov	r3, r0
 8008374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8008378:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800837c:	f023 031c 	bic.w	r3, r3, #28
 8008380:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8008384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008388:	f043 0308 	orr.w	r3, r3, #8
 800838c:	b2db      	uxtb	r3, r3
 800838e:	4619      	mov	r1, r3
 8008390:	f640 009b 	movw	r0, #2203	; 0x89b
 8008394:	f000 fddf 	bl	8008f56 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8008398:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800839c:	f000 fded 	bl	8008f7a <RadioRead>
 80083a0:	4603      	mov	r3, r0
 80083a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80083a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083aa:	f023 0318 	bic.w	r3, r3, #24
 80083ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 80083b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083b6:	f043 0318 	orr.w	r3, r3, #24
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	4619      	mov	r1, r3
 80083be:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80083c2:	f000 fdc8 	bl	8008f56 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 80083c6:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80083ca:	f000 fdd6 	bl	8008f7a <RadioRead>
 80083ce:	4603      	mov	r3, r0
 80083d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80083d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 80083e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083e4:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	4619      	mov	r1, r3
 80083ec:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80083f0:	f000 fdb1 	bl	8008f56 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80083f4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80083f6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80083fa:	fb02 f303 	mul.w	r3, r2, r3
 80083fe:	461a      	mov	r2, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	fbb2 f3f3 	udiv	r3, r2, r3
 8008406:	4a4b      	ldr	r2, [pc, #300]	; (8008534 <RadioSetRxConfig+0x2fc>)
 8008408:	6093      	str	r3, [r2, #8]
            break;
 800840a:	e115      	b.n	8008638 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800840c:	2000      	movs	r0, #0
 800840e:	f001 ffc7 	bl	800a3a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008412:	4b48      	ldr	r3, [pc, #288]	; (8008534 <RadioSetRxConfig+0x2fc>)
 8008414:	2200      	movs	r2, #0
 8008416:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800841a:	4a46      	ldr	r2, [pc, #280]	; (8008534 <RadioSetRxConfig+0x2fc>)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8008420:	4b44      	ldr	r3, [pc, #272]	; (8008534 <RadioSetRxConfig+0x2fc>)
 8008422:	220b      	movs	r2, #11
 8008424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8008428:	68b8      	ldr	r0, [r7, #8]
 800842a:	f002 fe8b 	bl	800b144 <SUBGRF_GetFskBandwidthRegValue>
 800842e:	4603      	mov	r3, r0
 8008430:	461a      	mov	r2, r3
 8008432:	4b40      	ldr	r3, [pc, #256]	; (8008534 <RadioSetRxConfig+0x2fc>)
 8008434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008438:	4b3e      	ldr	r3, [pc, #248]	; (8008534 <RadioSetRxConfig+0x2fc>)
 800843a:	2200      	movs	r2, #0
 800843c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800843e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008440:	00db      	lsls	r3, r3, #3
 8008442:	b29a      	uxth	r2, r3
 8008444:	4b3b      	ldr	r3, [pc, #236]	; (8008534 <RadioSetRxConfig+0x2fc>)
 8008446:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8008448:	4b3a      	ldr	r3, [pc, #232]	; (8008534 <RadioSetRxConfig+0x2fc>)
 800844a:	2204      	movs	r2, #4
 800844c:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800844e:	4b39      	ldr	r3, [pc, #228]	; (8008534 <RadioSetRxConfig+0x2fc>)
 8008450:	2218      	movs	r2, #24
 8008452:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8008454:	4b37      	ldr	r3, [pc, #220]	; (8008534 <RadioSetRxConfig+0x2fc>)
 8008456:	2200      	movs	r2, #0
 8008458:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800845a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800845e:	f083 0301 	eor.w	r3, r3, #1
 8008462:	b2db      	uxtb	r3, r3
 8008464:	461a      	mov	r2, r3
 8008466:	4b33      	ldr	r3, [pc, #204]	; (8008534 <RadioSetRxConfig+0x2fc>)
 8008468:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800846a:	4b33      	ldr	r3, [pc, #204]	; (8008538 <RadioSetRxConfig+0x300>)
 800846c:	781a      	ldrb	r2, [r3, #0]
 800846e:	4b31      	ldr	r3, [pc, #196]	; (8008534 <RadioSetRxConfig+0x2fc>)
 8008470:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8008472:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8008476:	2b00      	cmp	r3, #0
 8008478:	d003      	beq.n	8008482 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800847a:	4b2e      	ldr	r3, [pc, #184]	; (8008534 <RadioSetRxConfig+0x2fc>)
 800847c:	22f2      	movs	r2, #242	; 0xf2
 800847e:	75da      	strb	r2, [r3, #23]
 8008480:	e002      	b.n	8008488 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8008482:	4b2c      	ldr	r3, [pc, #176]	; (8008534 <RadioSetRxConfig+0x2fc>)
 8008484:	2201      	movs	r2, #1
 8008486:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8008488:	4b2a      	ldr	r3, [pc, #168]	; (8008534 <RadioSetRxConfig+0x2fc>)
 800848a:	2201      	movs	r2, #1
 800848c:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800848e:	f000 fc60 	bl	8008d52 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8008492:	2000      	movs	r0, #0
 8008494:	f7ff fdfc 	bl	8008090 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008498:	4828      	ldr	r0, [pc, #160]	; (800853c <RadioSetRxConfig+0x304>)
 800849a:	f002 fa1f 	bl	800a8dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800849e:	4828      	ldr	r0, [pc, #160]	; (8008540 <RadioSetRxConfig+0x308>)
 80084a0:	f002 faee 	bl	800aa80 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80084a4:	4a28      	ldr	r2, [pc, #160]	; (8008548 <RadioSetRxConfig+0x310>)
 80084a6:	f107 0314 	add.w	r3, r7, #20
 80084aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80084ae:	e883 0003 	stmia.w	r3, {r0, r1}
 80084b2:	f107 0314 	add.w	r3, r7, #20
 80084b6:	4618      	mov	r0, r3
 80084b8:	f001 fdab 	bl	800a012 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80084bc:	f240 10ff 	movw	r0, #511	; 0x1ff
 80084c0:	f001 fdf6 	bl	800a0b0 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80084c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80084c6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80084ca:	fb02 f303 	mul.w	r3, r2, r3
 80084ce:	461a      	mov	r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80084d6:	4a17      	ldr	r2, [pc, #92]	; (8008534 <RadioSetRxConfig+0x2fc>)
 80084d8:	6093      	str	r3, [r2, #8]
            break;
 80084da:	e0ad      	b.n	8008638 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80084dc:	2000      	movs	r0, #0
 80084de:	f001 ff5f 	bl	800a3a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80084e2:	4b14      	ldr	r3, [pc, #80]	; (8008534 <RadioSetRxConfig+0x2fc>)
 80084e4:	2201      	movs	r2, #1
 80084e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	b2da      	uxtb	r2, r3
 80084ee:	4b11      	ldr	r3, [pc, #68]	; (8008534 <RadioSetRxConfig+0x2fc>)
 80084f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80084f4:	4a15      	ldr	r2, [pc, #84]	; (800854c <RadioSetRxConfig+0x314>)
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	4413      	add	r3, r2
 80084fa:	781a      	ldrb	r2, [r3, #0]
 80084fc:	4b0d      	ldr	r3, [pc, #52]	; (8008534 <RadioSetRxConfig+0x2fc>)
 80084fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8008502:	4a0c      	ldr	r2, [pc, #48]	; (8008534 <RadioSetRxConfig+0x2fc>)
 8008504:	7bbb      	ldrb	r3, [r7, #14]
 8008506:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d105      	bne.n	800851c <RadioSetRxConfig+0x2e4>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2b0b      	cmp	r3, #11
 8008514:	d008      	beq.n	8008528 <RadioSetRxConfig+0x2f0>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2b0c      	cmp	r3, #12
 800851a:	d005      	beq.n	8008528 <RadioSetRxConfig+0x2f0>
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	2b01      	cmp	r3, #1
 8008520:	d116      	bne.n	8008550 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2b0c      	cmp	r3, #12
 8008526:	d113      	bne.n	8008550 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8008528:	4b02      	ldr	r3, [pc, #8]	; (8008534 <RadioSetRxConfig+0x2fc>)
 800852a:	2201      	movs	r2, #1
 800852c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8008530:	e012      	b.n	8008558 <RadioSetRxConfig+0x320>
 8008532:	bf00      	nop
 8008534:	2000096c 	.word	0x2000096c
 8008538:	20000015 	.word	0x20000015
 800853c:	200009a4 	.word	0x200009a4
 8008540:	2000097a 	.word	0x2000097a
 8008544:	0800cc00 	.word	0x0800cc00
 8008548:	0800cc08 	.word	0x0800cc08
 800854c:	0800cda4 	.word	0x0800cda4
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8008550:	4b3b      	ldr	r3, [pc, #236]	; (8008640 <RadioSetRxConfig+0x408>)
 8008552:	2200      	movs	r2, #0
 8008554:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008558:	4b39      	ldr	r3, [pc, #228]	; (8008640 <RadioSetRxConfig+0x408>)
 800855a:	2201      	movs	r2, #1
 800855c:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800855e:	4b38      	ldr	r3, [pc, #224]	; (8008640 <RadioSetRxConfig+0x408>)
 8008560:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008564:	2b05      	cmp	r3, #5
 8008566:	d004      	beq.n	8008572 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8008568:	4b35      	ldr	r3, [pc, #212]	; (8008640 <RadioSetRxConfig+0x408>)
 800856a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800856e:	2b06      	cmp	r3, #6
 8008570:	d10a      	bne.n	8008588 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8008572:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008574:	2b0b      	cmp	r3, #11
 8008576:	d803      	bhi.n	8008580 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8008578:	4b31      	ldr	r3, [pc, #196]	; (8008640 <RadioSetRxConfig+0x408>)
 800857a:	220c      	movs	r2, #12
 800857c:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800857e:	e006      	b.n	800858e <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008580:	4a2f      	ldr	r2, [pc, #188]	; (8008640 <RadioSetRxConfig+0x408>)
 8008582:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008584:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8008586:	e002      	b.n	800858e <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008588:	4a2d      	ldr	r2, [pc, #180]	; (8008640 <RadioSetRxConfig+0x408>)
 800858a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800858c:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800858e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8008592:	4b2b      	ldr	r3, [pc, #172]	; (8008640 <RadioSetRxConfig+0x408>)
 8008594:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8008596:	4b2b      	ldr	r3, [pc, #172]	; (8008644 <RadioSetRxConfig+0x40c>)
 8008598:	781a      	ldrb	r2, [r3, #0]
 800859a:	4b29      	ldr	r3, [pc, #164]	; (8008640 <RadioSetRxConfig+0x408>)
 800859c:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800859e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80085a2:	4b27      	ldr	r3, [pc, #156]	; (8008640 <RadioSetRxConfig+0x408>)
 80085a4:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80085a8:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80085ac:	4b24      	ldr	r3, [pc, #144]	; (8008640 <RadioSetRxConfig+0x408>)
 80085ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80085b2:	f000 fbce 	bl	8008d52 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80085b6:	2001      	movs	r0, #1
 80085b8:	f7ff fd6a 	bl	8008090 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80085bc:	4822      	ldr	r0, [pc, #136]	; (8008648 <RadioSetRxConfig+0x410>)
 80085be:	f002 f98d 	bl	800a8dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80085c2:	4822      	ldr	r0, [pc, #136]	; (800864c <RadioSetRxConfig+0x414>)
 80085c4:	f002 fa5c 	bl	800aa80 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80085c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	4618      	mov	r0, r3
 80085ce:	f001 fef6 	bl	800a3be <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 80085d2:	f640 00a3 	movw	r0, #2211	; 0x8a3
 80085d6:	f002 fbaf 	bl	800ad38 <SUBGRF_ReadRegister>
 80085da:	4603      	mov	r3, r0
 80085dc:	f003 0301 	and.w	r3, r3, #1
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	4619      	mov	r1, r3
 80085e4:	f640 00a3 	movw	r0, #2211	; 0x8a3
 80085e8:	f002 fb92 	bl	800ad10 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80085ec:	4b14      	ldr	r3, [pc, #80]	; (8008640 <RadioSetRxConfig+0x408>)
 80085ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d10d      	bne.n	8008612 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80085f6:	f240 7036 	movw	r0, #1846	; 0x736
 80085fa:	f002 fb9d 	bl	800ad38 <SUBGRF_ReadRegister>
 80085fe:	4603      	mov	r3, r0
 8008600:	f023 0304 	bic.w	r3, r3, #4
 8008604:	b2db      	uxtb	r3, r3
 8008606:	4619      	mov	r1, r3
 8008608:	f240 7036 	movw	r0, #1846	; 0x736
 800860c:	f002 fb80 	bl	800ad10 <SUBGRF_WriteRegister>
 8008610:	e00c      	b.n	800862c <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8008612:	f240 7036 	movw	r0, #1846	; 0x736
 8008616:	f002 fb8f 	bl	800ad38 <SUBGRF_ReadRegister>
 800861a:	4603      	mov	r3, r0
 800861c:	f043 0304 	orr.w	r3, r3, #4
 8008620:	b2db      	uxtb	r3, r3
 8008622:	4619      	mov	r1, r3
 8008624:	f240 7036 	movw	r0, #1846	; 0x736
 8008628:	f002 fb72 	bl	800ad10 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800862c:	4b04      	ldr	r3, [pc, #16]	; (8008640 <RadioSetRxConfig+0x408>)
 800862e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008632:	609a      	str	r2, [r3, #8]
            break;
 8008634:	e000      	b.n	8008638 <RadioSetRxConfig+0x400>
            break;
 8008636:	bf00      	nop
    }
}
 8008638:	bf00      	nop
 800863a:	3728      	adds	r7, #40	; 0x28
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	2000096c 	.word	0x2000096c
 8008644:	20000015 	.word	0x20000015
 8008648:	200009a4 	.word	0x200009a4
 800864c:	2000097a 	.word	0x2000097a

08008650 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af00      	add	r7, sp, #0
 8008656:	60ba      	str	r2, [r7, #8]
 8008658:	607b      	str	r3, [r7, #4]
 800865a:	4603      	mov	r3, r0
 800865c:	73fb      	strb	r3, [r7, #15]
 800865e:	460b      	mov	r3, r1
 8008660:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8008662:	f002 fe3c 	bl	800b2de <RFW_DeInit>
    switch( modem )
 8008666:	7bfb      	ldrb	r3, [r7, #15]
 8008668:	2b04      	cmp	r3, #4
 800866a:	f000 80c7 	beq.w	80087fc <RadioSetTxConfig+0x1ac>
 800866e:	2b04      	cmp	r3, #4
 8008670:	f300 80d6 	bgt.w	8008820 <RadioSetTxConfig+0x1d0>
 8008674:	2b00      	cmp	r3, #0
 8008676:	d002      	beq.n	800867e <RadioSetTxConfig+0x2e>
 8008678:	2b01      	cmp	r3, #1
 800867a:	d059      	beq.n	8008730 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 800867c:	e0d0      	b.n	8008820 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800867e:	4b77      	ldr	r3, [pc, #476]	; (800885c <RadioSetTxConfig+0x20c>)
 8008680:	2200      	movs	r2, #0
 8008682:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8008686:	4a75      	ldr	r2, [pc, #468]	; (800885c <RadioSetTxConfig+0x20c>)
 8008688:	6a3b      	ldr	r3, [r7, #32]
 800868a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800868c:	4b73      	ldr	r3, [pc, #460]	; (800885c <RadioSetTxConfig+0x20c>)
 800868e:	220b      	movs	r2, #11
 8008690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f002 fd55 	bl	800b144 <SUBGRF_GetFskBandwidthRegValue>
 800869a:	4603      	mov	r3, r0
 800869c:	461a      	mov	r2, r3
 800869e:	4b6f      	ldr	r3, [pc, #444]	; (800885c <RadioSetTxConfig+0x20c>)
 80086a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80086a4:	4a6d      	ldr	r2, [pc, #436]	; (800885c <RadioSetTxConfig+0x20c>)
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80086aa:	4b6c      	ldr	r3, [pc, #432]	; (800885c <RadioSetTxConfig+0x20c>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80086b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086b2:	00db      	lsls	r3, r3, #3
 80086b4:	b29a      	uxth	r2, r3
 80086b6:	4b69      	ldr	r3, [pc, #420]	; (800885c <RadioSetTxConfig+0x20c>)
 80086b8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80086ba:	4b68      	ldr	r3, [pc, #416]	; (800885c <RadioSetTxConfig+0x20c>)
 80086bc:	2204      	movs	r2, #4
 80086be:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80086c0:	4b66      	ldr	r3, [pc, #408]	; (800885c <RadioSetTxConfig+0x20c>)
 80086c2:	2218      	movs	r2, #24
 80086c4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80086c6:	4b65      	ldr	r3, [pc, #404]	; (800885c <RadioSetTxConfig+0x20c>)
 80086c8:	2200      	movs	r2, #0
 80086ca:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80086cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80086d0:	f083 0301 	eor.w	r3, r3, #1
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	461a      	mov	r2, r3
 80086d8:	4b60      	ldr	r3, [pc, #384]	; (800885c <RadioSetTxConfig+0x20c>)
 80086da:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80086dc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d003      	beq.n	80086ec <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80086e4:	4b5d      	ldr	r3, [pc, #372]	; (800885c <RadioSetTxConfig+0x20c>)
 80086e6:	22f2      	movs	r2, #242	; 0xf2
 80086e8:	75da      	strb	r2, [r3, #23]
 80086ea:	e002      	b.n	80086f2 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80086ec:	4b5b      	ldr	r3, [pc, #364]	; (800885c <RadioSetTxConfig+0x20c>)
 80086ee:	2201      	movs	r2, #1
 80086f0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80086f2:	4b5a      	ldr	r3, [pc, #360]	; (800885c <RadioSetTxConfig+0x20c>)
 80086f4:	2201      	movs	r2, #1
 80086f6:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80086f8:	f000 fb2b 	bl	8008d52 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80086fc:	2000      	movs	r0, #0
 80086fe:	f7ff fcc7 	bl	8008090 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008702:	4857      	ldr	r0, [pc, #348]	; (8008860 <RadioSetTxConfig+0x210>)
 8008704:	f002 f8ea 	bl	800a8dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008708:	4856      	ldr	r0, [pc, #344]	; (8008864 <RadioSetTxConfig+0x214>)
 800870a:	f002 f9b9 	bl	800aa80 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800870e:	4a56      	ldr	r2, [pc, #344]	; (8008868 <RadioSetTxConfig+0x218>)
 8008710:	f107 0310 	add.w	r3, r7, #16
 8008714:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008718:	e883 0003 	stmia.w	r3, {r0, r1}
 800871c:	f107 0310 	add.w	r3, r7, #16
 8008720:	4618      	mov	r0, r3
 8008722:	f001 fc76 	bl	800a012 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8008726:	f240 10ff 	movw	r0, #511	; 0x1ff
 800872a:	f001 fcc1 	bl	800a0b0 <SUBGRF_SetWhiteningSeed>
            break;
 800872e:	e078      	b.n	8008822 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008730:	4b4a      	ldr	r3, [pc, #296]	; (800885c <RadioSetTxConfig+0x20c>)
 8008732:	2201      	movs	r2, #1
 8008734:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8008738:	6a3b      	ldr	r3, [r7, #32]
 800873a:	b2da      	uxtb	r2, r3
 800873c:	4b47      	ldr	r3, [pc, #284]	; (800885c <RadioSetTxConfig+0x20c>)
 800873e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8008742:	4a4a      	ldr	r2, [pc, #296]	; (800886c <RadioSetTxConfig+0x21c>)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4413      	add	r3, r2
 8008748:	781a      	ldrb	r2, [r3, #0]
 800874a:	4b44      	ldr	r3, [pc, #272]	; (800885c <RadioSetTxConfig+0x20c>)
 800874c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8008750:	4a42      	ldr	r2, [pc, #264]	; (800885c <RadioSetTxConfig+0x20c>)
 8008752:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008756:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d105      	bne.n	800876c <RadioSetTxConfig+0x11c>
 8008760:	6a3b      	ldr	r3, [r7, #32]
 8008762:	2b0b      	cmp	r3, #11
 8008764:	d008      	beq.n	8008778 <RadioSetTxConfig+0x128>
 8008766:	6a3b      	ldr	r3, [r7, #32]
 8008768:	2b0c      	cmp	r3, #12
 800876a:	d005      	beq.n	8008778 <RadioSetTxConfig+0x128>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2b01      	cmp	r3, #1
 8008770:	d107      	bne.n	8008782 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8008772:	6a3b      	ldr	r3, [r7, #32]
 8008774:	2b0c      	cmp	r3, #12
 8008776:	d104      	bne.n	8008782 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8008778:	4b38      	ldr	r3, [pc, #224]	; (800885c <RadioSetTxConfig+0x20c>)
 800877a:	2201      	movs	r2, #1
 800877c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8008780:	e003      	b.n	800878a <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8008782:	4b36      	ldr	r3, [pc, #216]	; (800885c <RadioSetTxConfig+0x20c>)
 8008784:	2200      	movs	r2, #0
 8008786:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800878a:	4b34      	ldr	r3, [pc, #208]	; (800885c <RadioSetTxConfig+0x20c>)
 800878c:	2201      	movs	r2, #1
 800878e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008790:	4b32      	ldr	r3, [pc, #200]	; (800885c <RadioSetTxConfig+0x20c>)
 8008792:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008796:	2b05      	cmp	r3, #5
 8008798:	d004      	beq.n	80087a4 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800879a:	4b30      	ldr	r3, [pc, #192]	; (800885c <RadioSetTxConfig+0x20c>)
 800879c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80087a0:	2b06      	cmp	r3, #6
 80087a2:	d10a      	bne.n	80087ba <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 80087a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087a6:	2b0b      	cmp	r3, #11
 80087a8:	d803      	bhi.n	80087b2 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80087aa:	4b2c      	ldr	r3, [pc, #176]	; (800885c <RadioSetTxConfig+0x20c>)
 80087ac:	220c      	movs	r2, #12
 80087ae:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80087b0:	e006      	b.n	80087c0 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80087b2:	4a2a      	ldr	r2, [pc, #168]	; (800885c <RadioSetTxConfig+0x20c>)
 80087b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087b6:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80087b8:	e002      	b.n	80087c0 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80087ba:	4a28      	ldr	r2, [pc, #160]	; (800885c <RadioSetTxConfig+0x20c>)
 80087bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087be:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80087c0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80087c4:	4b25      	ldr	r3, [pc, #148]	; (800885c <RadioSetTxConfig+0x20c>)
 80087c6:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80087c8:	4b29      	ldr	r3, [pc, #164]	; (8008870 <RadioSetTxConfig+0x220>)
 80087ca:	781a      	ldrb	r2, [r3, #0]
 80087cc:	4b23      	ldr	r3, [pc, #140]	; (800885c <RadioSetTxConfig+0x20c>)
 80087ce:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80087d0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80087d4:	4b21      	ldr	r3, [pc, #132]	; (800885c <RadioSetTxConfig+0x20c>)
 80087d6:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80087da:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80087de:	4b1f      	ldr	r3, [pc, #124]	; (800885c <RadioSetTxConfig+0x20c>)
 80087e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80087e4:	f000 fab5 	bl	8008d52 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80087e8:	2001      	movs	r0, #1
 80087ea:	f7ff fc51 	bl	8008090 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80087ee:	481c      	ldr	r0, [pc, #112]	; (8008860 <RadioSetTxConfig+0x210>)
 80087f0:	f002 f874 	bl	800a8dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80087f4:	481b      	ldr	r0, [pc, #108]	; (8008864 <RadioSetTxConfig+0x214>)
 80087f6:	f002 f943 	bl	800aa80 <SUBGRF_SetPacketParams>
            break;
 80087fa:	e012      	b.n	8008822 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80087fc:	2004      	movs	r0, #4
 80087fe:	f7ff fc47 	bl	8008090 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8008802:	4b16      	ldr	r3, [pc, #88]	; (800885c <RadioSetTxConfig+0x20c>)
 8008804:	2202      	movs	r2, #2
 8008806:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800880a:	4a14      	ldr	r2, [pc, #80]	; (800885c <RadioSetTxConfig+0x20c>)
 800880c:	6a3b      	ldr	r3, [r7, #32]
 800880e:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8008810:	4b12      	ldr	r3, [pc, #72]	; (800885c <RadioSetTxConfig+0x20c>)
 8008812:	2216      	movs	r2, #22
 8008814:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008818:	4811      	ldr	r0, [pc, #68]	; (8008860 <RadioSetTxConfig+0x210>)
 800881a:	f002 f85f 	bl	800a8dc <SUBGRF_SetModulationParams>
            break;
 800881e:	e000      	b.n	8008822 <RadioSetTxConfig+0x1d2>
            break;
 8008820:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8008822:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008826:	4618      	mov	r0, r3
 8008828:	f002 fb8e 	bl	800af48 <SUBGRF_SetRfTxPower>
 800882c:	4603      	mov	r3, r0
 800882e:	461a      	mov	r2, r3
 8008830:	4b0a      	ldr	r3, [pc, #40]	; (800885c <RadioSetTxConfig+0x20c>)
 8008832:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008836:	210e      	movs	r1, #14
 8008838:	f640 101f 	movw	r0, #2335	; 0x91f
 800883c:	f002 fa68 	bl	800ad10 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8008840:	4b06      	ldr	r3, [pc, #24]	; (800885c <RadioSetTxConfig+0x20c>)
 8008842:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008846:	4618      	mov	r0, r3
 8008848:	f002 fd5d 	bl	800b306 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800884c:	4a03      	ldr	r2, [pc, #12]	; (800885c <RadioSetTxConfig+0x20c>)
 800884e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008850:	6053      	str	r3, [r2, #4]
}
 8008852:	bf00      	nop
 8008854:	3718      	adds	r7, #24
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	2000096c 	.word	0x2000096c
 8008860:	200009a4 	.word	0x200009a4
 8008864:	2000097a 	.word	0x2000097a
 8008868:	0800cc08 	.word	0x0800cc08
 800886c:	0800cda4 	.word	0x0800cda4
 8008870:	20000015 	.word	0x20000015

08008874 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
    return true;
 800887c:	2301      	movs	r3, #1
}
 800887e:	4618      	mov	r0, r3
 8008880:	370c      	adds	r7, #12
 8008882:	46bd      	mov	sp, r7
 8008884:	bc80      	pop	{r7}
 8008886:	4770      	bx	lr

08008888 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	4603      	mov	r3, r0
 8008890:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8008892:	2300      	movs	r3, #0
 8008894:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8008896:	79fb      	ldrb	r3, [r7, #7]
 8008898:	2b0a      	cmp	r3, #10
 800889a:	d83e      	bhi.n	800891a <RadioGetLoRaBandwidthInHz+0x92>
 800889c:	a201      	add	r2, pc, #4	; (adr r2, 80088a4 <RadioGetLoRaBandwidthInHz+0x1c>)
 800889e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a2:	bf00      	nop
 80088a4:	080088d1 	.word	0x080088d1
 80088a8:	080088e1 	.word	0x080088e1
 80088ac:	080088f1 	.word	0x080088f1
 80088b0:	08008901 	.word	0x08008901
 80088b4:	08008909 	.word	0x08008909
 80088b8:	0800890f 	.word	0x0800890f
 80088bc:	08008915 	.word	0x08008915
 80088c0:	0800891b 	.word	0x0800891b
 80088c4:	080088d9 	.word	0x080088d9
 80088c8:	080088e9 	.word	0x080088e9
 80088cc:	080088f9 	.word	0x080088f9
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80088d0:	f641 6384 	movw	r3, #7812	; 0x1e84
 80088d4:	60fb      	str	r3, [r7, #12]
        break;
 80088d6:	e020      	b.n	800891a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80088d8:	f642 03b1 	movw	r3, #10417	; 0x28b1
 80088dc:	60fb      	str	r3, [r7, #12]
        break;
 80088de:	e01c      	b.n	800891a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80088e0:	f643 5309 	movw	r3, #15625	; 0x3d09
 80088e4:	60fb      	str	r3, [r7, #12]
        break;
 80088e6:	e018      	b.n	800891a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80088e8:	f245 1361 	movw	r3, #20833	; 0x5161
 80088ec:	60fb      	str	r3, [r7, #12]
        break;
 80088ee:	e014      	b.n	800891a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80088f0:	f647 2312 	movw	r3, #31250	; 0x7a12
 80088f4:	60fb      	str	r3, [r7, #12]
        break;
 80088f6:	e010      	b.n	800891a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80088f8:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 80088fc:	60fb      	str	r3, [r7, #12]
        break;
 80088fe:	e00c      	b.n	800891a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8008900:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008904:	60fb      	str	r3, [r7, #12]
        break;
 8008906:	e008      	b.n	800891a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8008908:	4b07      	ldr	r3, [pc, #28]	; (8008928 <RadioGetLoRaBandwidthInHz+0xa0>)
 800890a:	60fb      	str	r3, [r7, #12]
        break;
 800890c:	e005      	b.n	800891a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800890e:	4b07      	ldr	r3, [pc, #28]	; (800892c <RadioGetLoRaBandwidthInHz+0xa4>)
 8008910:	60fb      	str	r3, [r7, #12]
        break;
 8008912:	e002      	b.n	800891a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8008914:	4b06      	ldr	r3, [pc, #24]	; (8008930 <RadioGetLoRaBandwidthInHz+0xa8>)
 8008916:	60fb      	str	r3, [r7, #12]
        break;
 8008918:	bf00      	nop
    }

    return bandwidthInHz;
 800891a:	68fb      	ldr	r3, [r7, #12]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3714      	adds	r7, #20
 8008920:	46bd      	mov	sp, r7
 8008922:	bc80      	pop	{r7}
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop
 8008928:	0001e848 	.word	0x0001e848
 800892c:	0003d090 	.word	0x0003d090
 8008930:	0007a120 	.word	0x0007a120

08008934 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	4608      	mov	r0, r1
 800893e:	4611      	mov	r1, r2
 8008940:	461a      	mov	r2, r3
 8008942:	4603      	mov	r3, r0
 8008944:	70fb      	strb	r3, [r7, #3]
 8008946:	460b      	mov	r3, r1
 8008948:	803b      	strh	r3, [r7, #0]
 800894a:	4613      	mov	r3, r2
 800894c:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 800894e:	883b      	ldrh	r3, [r7, #0]
 8008950:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008952:	78ba      	ldrb	r2, [r7, #2]
 8008954:	f082 0201 	eor.w	r2, r2, #1
 8008958:	b2d2      	uxtb	r2, r2
 800895a:	2a00      	cmp	r2, #0
 800895c:	d001      	beq.n	8008962 <RadioGetGfskTimeOnAirNumerator+0x2e>
 800895e:	2208      	movs	r2, #8
 8008960:	e000      	b.n	8008964 <RadioGetGfskTimeOnAirNumerator+0x30>
 8008962:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8008964:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008966:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800896a:	7c3b      	ldrb	r3, [r7, #16]
 800896c:	7d39      	ldrb	r1, [r7, #20]
 800896e:	2900      	cmp	r1, #0
 8008970:	d001      	beq.n	8008976 <RadioGetGfskTimeOnAirNumerator+0x42>
 8008972:	2102      	movs	r1, #2
 8008974:	e000      	b.n	8008978 <RadioGetGfskTimeOnAirNumerator+0x44>
 8008976:	2100      	movs	r1, #0
 8008978:	440b      	add	r3, r1
 800897a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800897c:	4413      	add	r3, r2
}
 800897e:	4618      	mov	r0, r3
 8008980:	370c      	adds	r7, #12
 8008982:	46bd      	mov	sp, r7
 8008984:	bc80      	pop	{r7}
 8008986:	4770      	bx	lr

08008988 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8008988:	b480      	push	{r7}
 800898a:	b08b      	sub	sp, #44	; 0x2c
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	4611      	mov	r1, r2
 8008994:	461a      	mov	r2, r3
 8008996:	460b      	mov	r3, r1
 8008998:	71fb      	strb	r3, [r7, #7]
 800899a:	4613      	mov	r3, r2
 800899c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 800899e:	79fb      	ldrb	r3, [r7, #7]
 80089a0:	3304      	adds	r3, #4
 80089a2:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80089a4:	2300      	movs	r3, #0
 80089a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	2b05      	cmp	r3, #5
 80089ae:	d002      	beq.n	80089b6 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	2b06      	cmp	r3, #6
 80089b4:	d104      	bne.n	80089c0 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80089b6:	88bb      	ldrh	r3, [r7, #4]
 80089b8:	2b0b      	cmp	r3, #11
 80089ba:	d801      	bhi.n	80089c0 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80089bc:	230c      	movs	r3, #12
 80089be:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d105      	bne.n	80089d2 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	2b0b      	cmp	r3, #11
 80089ca:	d008      	beq.n	80089de <RadioGetLoRaTimeOnAirNumerator+0x56>
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	2b0c      	cmp	r3, #12
 80089d0:	d005      	beq.n	80089de <RadioGetLoRaTimeOnAirNumerator+0x56>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d105      	bne.n	80089e4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	2b0c      	cmp	r3, #12
 80089dc:	d102      	bne.n	80089e4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80089de:	2301      	movs	r3, #1
 80089e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80089e4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80089e8:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 80089ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80089ee:	2a00      	cmp	r2, #0
 80089f0:	d001      	beq.n	80089f6 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80089f2:	2210      	movs	r2, #16
 80089f4:	e000      	b.n	80089f8 <RadioGetLoRaTimeOnAirNumerator+0x70>
 80089f6:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80089f8:	4413      	add	r3, r2
 80089fa:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8008a00:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8008a02:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8008a06:	2a00      	cmp	r2, #0
 8008a08:	d001      	beq.n	8008a0e <RadioGetLoRaTimeOnAirNumerator+0x86>
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	e000      	b.n	8008a10 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8008a0e:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8008a10:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008a12:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	2b06      	cmp	r3, #6
 8008a18:	d803      	bhi.n	8008a22 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	623b      	str	r3, [r7, #32]
 8008a20:	e00e      	b.n	8008a40 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	3308      	adds	r3, #8
 8008a26:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8008a28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d004      	beq.n	8008a3a <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	3b02      	subs	r3, #2
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	623b      	str	r3, [r7, #32]
 8008a38:	e002      	b.n	8008a40 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	da01      	bge.n	8008a4a <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8008a46:	2300      	movs	r3, #0
 8008a48:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8008a4a:	69fa      	ldr	r2, [r7, #28]
 8008a4c:	6a3b      	ldr	r3, [r7, #32]
 8008a4e:	4413      	add	r3, r2
 8008a50:	1e5a      	subs	r2, r3, #1
 8008a52:	6a3b      	ldr	r3, [r7, #32]
 8008a54:	fb92 f3f3 	sdiv	r3, r2, r3
 8008a58:	697a      	ldr	r2, [r7, #20]
 8008a5a:	fb03 f202 	mul.w	r2, r3, r2
 8008a5e:	88bb      	ldrh	r3, [r7, #4]
 8008a60:	4413      	add	r3, r2
    int32_t intermediate =
 8008a62:	330c      	adds	r3, #12
 8008a64:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	2b06      	cmp	r3, #6
 8008a6a:	d802      	bhi.n	8008a72 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8008a6c:	69bb      	ldr	r3, [r7, #24]
 8008a6e:	3302      	adds	r3, #2
 8008a70:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	1c5a      	adds	r2, r3, #1
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	3b02      	subs	r3, #2
 8008a7c:	fa02 f303 	lsl.w	r3, r2, r3
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	372c      	adds	r7, #44	; 0x2c
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bc80      	pop	{r7}
 8008a88:	4770      	bx	lr
	...

08008a8c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b08a      	sub	sp, #40	; 0x28
 8008a90:	af04      	add	r7, sp, #16
 8008a92:	60b9      	str	r1, [r7, #8]
 8008a94:	607a      	str	r2, [r7, #4]
 8008a96:	461a      	mov	r2, r3
 8008a98:	4603      	mov	r3, r0
 8008a9a:	73fb      	strb	r3, [r7, #15]
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	613b      	str	r3, [r7, #16]

    switch( modem )
 8008aa8:	7bfb      	ldrb	r3, [r7, #15]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d002      	beq.n	8008ab4 <RadioTimeOnAir+0x28>
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d017      	beq.n	8008ae2 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8008ab2:	e035      	b.n	8008b20 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8008ab4:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8008ab8:	8c3a      	ldrh	r2, [r7, #32]
 8008aba:	7bb9      	ldrb	r1, [r7, #14]
 8008abc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008ac0:	9301      	str	r3, [sp, #4]
 8008ac2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008ac6:	9300      	str	r3, [sp, #0]
 8008ac8:	4603      	mov	r3, r0
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f7ff ff32 	bl	8008934 <RadioGetGfskTimeOnAirNumerator>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008ad6:	fb02 f303 	mul.w	r3, r2, r3
 8008ada:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	613b      	str	r3, [r7, #16]
        break;
 8008ae0:	e01e      	b.n	8008b20 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8008ae2:	8c39      	ldrh	r1, [r7, #32]
 8008ae4:	7bba      	ldrb	r2, [r7, #14]
 8008ae6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008aea:	9302      	str	r3, [sp, #8]
 8008aec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008af0:	9301      	str	r3, [sp, #4]
 8008af2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008af6:	9300      	str	r3, [sp, #0]
 8008af8:	460b      	mov	r3, r1
 8008afa:	6879      	ldr	r1, [r7, #4]
 8008afc:	68b8      	ldr	r0, [r7, #8]
 8008afe:	f7ff ff43 	bl	8008988 <RadioGetLoRaTimeOnAirNumerator>
 8008b02:	4603      	mov	r3, r0
 8008b04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008b08:	fb02 f303 	mul.w	r3, r2, r3
 8008b0c:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8008b0e:	4a0a      	ldr	r2, [pc, #40]	; (8008b38 <RadioTimeOnAir+0xac>)
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	4413      	add	r3, r2
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7ff feb6 	bl	8008888 <RadioGetLoRaBandwidthInHz>
 8008b1c:	6138      	str	r0, [r7, #16]
        break;
 8008b1e:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8008b20:	697a      	ldr	r2, [r7, #20]
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	4413      	add	r3, r2
 8008b26:	1e5a      	subs	r2, r3, #1
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3718      	adds	r7, #24
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	0800cda4 	.word	0x0800cda4

08008b3c <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	460b      	mov	r3, r1
 8008b46:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8008b48:	2300      	movs	r3, #0
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f240 2101 	movw	r1, #513	; 0x201
 8008b50:	f240 2001 	movw	r0, #513	; 0x201
 8008b54:	f001 fd2c 	bl	800a5b0 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8008b58:	4b70      	ldr	r3, [pc, #448]	; (8008d1c <RadioSend+0x1e0>)
 8008b5a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008b5e:	2101      	movs	r1, #1
 8008b60:	4618      	mov	r0, r3
 8008b62:	f002 f9c9 	bl	800aef8 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8008b66:	4b6d      	ldr	r3, [pc, #436]	; (8008d1c <RadioSend+0x1e0>)
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d112      	bne.n	8008b94 <RadioSend+0x58>
 8008b6e:	4b6b      	ldr	r3, [pc, #428]	; (8008d1c <RadioSend+0x1e0>)
 8008b70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b74:	2b06      	cmp	r3, #6
 8008b76:	d10d      	bne.n	8008b94 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8008b78:	f640 0089 	movw	r0, #2185	; 0x889
 8008b7c:	f002 f8dc 	bl	800ad38 <SUBGRF_ReadRegister>
 8008b80:	4603      	mov	r3, r0
 8008b82:	f023 0304 	bic.w	r3, r3, #4
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	4619      	mov	r1, r3
 8008b8a:	f640 0089 	movw	r0, #2185	; 0x889
 8008b8e:	f002 f8bf 	bl	800ad10 <SUBGRF_WriteRegister>
 8008b92:	e00c      	b.n	8008bae <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8008b94:	f640 0089 	movw	r0, #2185	; 0x889
 8008b98:	f002 f8ce 	bl	800ad38 <SUBGRF_ReadRegister>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	f043 0304 	orr.w	r3, r3, #4
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	f640 0089 	movw	r0, #2185	; 0x889
 8008baa:	f002 f8b1 	bl	800ad10 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8008bae:	4b5b      	ldr	r3, [pc, #364]	; (8008d1c <RadioSend+0x1e0>)
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	2b04      	cmp	r3, #4
 8008bb4:	f200 80a2 	bhi.w	8008cfc <RadioSend+0x1c0>
 8008bb8:	a201      	add	r2, pc, #4	; (adr r2, 8008bc0 <RadioSend+0x84>)
 8008bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bbe:	bf00      	nop
 8008bc0:	08008bef 	.word	0x08008bef
 8008bc4:	08008bd5 	.word	0x08008bd5
 8008bc8:	08008bef 	.word	0x08008bef
 8008bcc:	08008c45 	.word	0x08008c45
 8008bd0:	08008c65 	.word	0x08008c65
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8008bd4:	4a51      	ldr	r2, [pc, #324]	; (8008d1c <RadioSend+0x1e0>)
 8008bd6:	78fb      	ldrb	r3, [r7, #3]
 8008bd8:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008bda:	4851      	ldr	r0, [pc, #324]	; (8008d20 <RadioSend+0x1e4>)
 8008bdc:	f001 ff50 	bl	800aa80 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8008be0:	78fb      	ldrb	r3, [r7, #3]
 8008be2:	2200      	movs	r2, #0
 8008be4:	4619      	mov	r1, r3
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f001 fa00 	bl	8009fec <SUBGRF_SendPayload>
            break;
 8008bec:	e087      	b.n	8008cfe <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8008bee:	f002 fb7c 	bl	800b2ea <RFW_Is_Init>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d118      	bne.n	8008c2a <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8008bf8:	f107 020d 	add.w	r2, r7, #13
 8008bfc:	78fb      	ldrb	r3, [r7, #3]
 8008bfe:	4619      	mov	r1, r3
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f002 fb8a 	bl	800b31a <RFW_TransmitInit>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d10c      	bne.n	8008c26 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8008c0c:	7b7a      	ldrb	r2, [r7, #13]
 8008c0e:	4b43      	ldr	r3, [pc, #268]	; (8008d1c <RadioSend+0x1e0>)
 8008c10:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008c12:	4843      	ldr	r0, [pc, #268]	; (8008d20 <RadioSend+0x1e4>)
 8008c14:	f001 ff34 	bl	800aa80 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8008c18:	7b7b      	ldrb	r3, [r7, #13]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f001 f9e4 	bl	8009fec <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8008c24:	e06b      	b.n	8008cfe <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 8008c26:	2303      	movs	r3, #3
 8008c28:	e073      	b.n	8008d12 <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8008c2a:	4a3c      	ldr	r2, [pc, #240]	; (8008d1c <RadioSend+0x1e0>)
 8008c2c:	78fb      	ldrb	r3, [r7, #3]
 8008c2e:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008c30:	483b      	ldr	r0, [pc, #236]	; (8008d20 <RadioSend+0x1e4>)
 8008c32:	f001 ff25 	bl	800aa80 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8008c36:	78fb      	ldrb	r3, [r7, #3]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f001 f9d5 	bl	8009fec <SUBGRF_SendPayload>
            break;
 8008c42:	e05c      	b.n	8008cfe <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8008c44:	4b35      	ldr	r3, [pc, #212]	; (8008d1c <RadioSend+0x1e0>)
 8008c46:	2202      	movs	r2, #2
 8008c48:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8008c4a:	4a34      	ldr	r2, [pc, #208]	; (8008d1c <RadioSend+0x1e0>)
 8008c4c:	78fb      	ldrb	r3, [r7, #3]
 8008c4e:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008c50:	4833      	ldr	r0, [pc, #204]	; (8008d20 <RadioSend+0x1e4>)
 8008c52:	f001 ff15 	bl	800aa80 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8008c56:	78fb      	ldrb	r3, [r7, #3]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f001 f9c5 	bl	8009fec <SUBGRF_SendPayload>
            break;
 8008c62:	e04c      	b.n	8008cfe <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8008c64:	78fb      	ldrb	r3, [r7, #3]
 8008c66:	461a      	mov	r2, r3
 8008c68:	6879      	ldr	r1, [r7, #4]
 8008c6a:	482e      	ldr	r0, [pc, #184]	; (8008d24 <RadioSend+0x1e8>)
 8008c6c:	f000 fc98 	bl	80095a0 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8008c70:	4b2a      	ldr	r3, [pc, #168]	; (8008d1c <RadioSend+0x1e0>)
 8008c72:	2202      	movs	r2, #2
 8008c74:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8008c76:	78fb      	ldrb	r3, [r7, #3]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	b2da      	uxtb	r2, r3
 8008c7c:	4b27      	ldr	r3, [pc, #156]	; (8008d1c <RadioSend+0x1e0>)
 8008c7e:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008c80:	4827      	ldr	r0, [pc, #156]	; (8008d20 <RadioSend+0x1e4>)
 8008c82:	f001 fefd 	bl	800aa80 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8008c86:	2100      	movs	r1, #0
 8008c88:	20f1      	movs	r0, #241	; 0xf1
 8008c8a:	f000 f964 	bl	8008f56 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8008c8e:	2100      	movs	r1, #0
 8008c90:	20f0      	movs	r0, #240	; 0xf0
 8008c92:	f000 f960 	bl	8008f56 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8008c96:	4b21      	ldr	r3, [pc, #132]	; (8008d1c <RadioSend+0x1e0>)
 8008c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c9a:	2b64      	cmp	r3, #100	; 0x64
 8008c9c:	d108      	bne.n	8008cb0 <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8008c9e:	2170      	movs	r1, #112	; 0x70
 8008ca0:	20f3      	movs	r0, #243	; 0xf3
 8008ca2:	f000 f958 	bl	8008f56 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8008ca6:	211d      	movs	r1, #29
 8008ca8:	20f2      	movs	r0, #242	; 0xf2
 8008caa:	f000 f954 	bl	8008f56 <RadioWrite>
 8008cae:	e007      	b.n	8008cc0 <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8008cb0:	21e1      	movs	r1, #225	; 0xe1
 8008cb2:	20f3      	movs	r0, #243	; 0xf3
 8008cb4:	f000 f94f 	bl	8008f56 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8008cb8:	2104      	movs	r1, #4
 8008cba:	20f2      	movs	r0, #242	; 0xf2
 8008cbc:	f000 f94b 	bl	8008f56 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8008cc0:	78fb      	ldrb	r3, [r7, #3]
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	00db      	lsls	r3, r3, #3
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	3302      	adds	r3, #2
 8008cca:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8008ccc:	89fb      	ldrh	r3, [r7, #14]
 8008cce:	0a1b      	lsrs	r3, r3, #8
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	20f4      	movs	r0, #244	; 0xf4
 8008cd8:	f000 f93d 	bl	8008f56 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8008cdc:	89fb      	ldrh	r3, [r7, #14]
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	20f5      	movs	r0, #245	; 0xf5
 8008ce4:	f000 f937 	bl	8008f56 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8008ce8:	78fb      	ldrb	r3, [r7, #3]
 8008cea:	3301      	adds	r3, #1
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	480b      	ldr	r0, [pc, #44]	; (8008d24 <RadioSend+0x1e8>)
 8008cf6:	f001 f979 	bl	8009fec <SUBGRF_SendPayload>
            break;
 8008cfa:	e000      	b.n	8008cfe <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8008cfc:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8008cfe:	4b07      	ldr	r3, [pc, #28]	; (8008d1c <RadioSend+0x1e0>)
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	4619      	mov	r1, r3
 8008d04:	4808      	ldr	r0, [pc, #32]	; (8008d28 <RadioSend+0x1ec>)
 8008d06:	f002 fdcf 	bl	800b8a8 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8008d0a:	4807      	ldr	r0, [pc, #28]	; (8008d28 <RadioSend+0x1ec>)
 8008d0c:	f002 fcee 	bl	800b6ec <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	2000096c 	.word	0x2000096c
 8008d20:	2000097a 	.word	0x2000097a
 8008d24:	20000868 	.word	0x20000868
 8008d28:	200009c8 	.word	0x200009c8

08008d2c <RadioSleep>:

static void RadioSleep( void )
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8008d32:	2300      	movs	r3, #0
 8008d34:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8008d36:	793b      	ldrb	r3, [r7, #4]
 8008d38:	f043 0304 	orr.w	r3, r3, #4
 8008d3c:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8008d3e:	7938      	ldrb	r0, [r7, #4]
 8008d40:	f001 fa30 	bl	800a1a4 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8008d44:	2002      	movs	r0, #2
 8008d46:	f7f9 febf 	bl	8002ac8 <HAL_Delay>
}
 8008d4a:	bf00      	nop
 8008d4c:	3708      	adds	r7, #8
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <RadioStandby>:

static void RadioStandby( void )
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8008d56:	2000      	movs	r0, #0
 8008d58:	f001 fa56 	bl	800a208 <SUBGRF_SetStandby>
}
 8008d5c:	bf00      	nop
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8008d68:	f002 fabf 	bl	800b2ea <RFW_Is_Init>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d102      	bne.n	8008d78 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8008d72:	f002 fae2 	bl	800b33a <RFW_ReceiveInit>
 8008d76:	e007      	b.n	8008d88 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008d78:	2300      	movs	r3, #0
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f240 2162 	movw	r1, #610	; 0x262
 8008d80:	f240 2062 	movw	r0, #610	; 0x262
 8008d84:	f001 fc14 	bl	800a5b0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d006      	beq.n	8008d9c <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008d8e:	6879      	ldr	r1, [r7, #4]
 8008d90:	4811      	ldr	r0, [pc, #68]	; (8008dd8 <RadioRx+0x78>)
 8008d92:	f002 fd89 	bl	800b8a8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008d96:	4810      	ldr	r0, [pc, #64]	; (8008dd8 <RadioRx+0x78>)
 8008d98:	f002 fca8 	bl	800b6ec <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008d9c:	4b0f      	ldr	r3, [pc, #60]	; (8008ddc <RadioRx+0x7c>)
 8008d9e:	2200      	movs	r2, #0
 8008da0:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008da2:	4b0e      	ldr	r3, [pc, #56]	; (8008ddc <RadioRx+0x7c>)
 8008da4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008da8:	2100      	movs	r1, #0
 8008daa:	4618      	mov	r0, r3
 8008dac:	f002 f8a4 	bl	800aef8 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8008db0:	4b0a      	ldr	r3, [pc, #40]	; (8008ddc <RadioRx+0x7c>)
 8008db2:	785b      	ldrb	r3, [r3, #1]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d004      	beq.n	8008dc2 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8008db8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008dbc:	f001 fa60 	bl	800a280 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8008dc0:	e005      	b.n	8008dce <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8008dc2:	4b06      	ldr	r3, [pc, #24]	; (8008ddc <RadioRx+0x7c>)
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	019b      	lsls	r3, r3, #6
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f001 fa59 	bl	800a280 <SUBGRF_SetRx>
}
 8008dce:	bf00      	nop
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	200009e0 	.word	0x200009e0
 8008ddc:	2000096c 	.word	0x2000096c

08008de0 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8008de8:	f002 fa7f 	bl	800b2ea <RFW_Is_Init>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d102      	bne.n	8008df8 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8008df2:	f002 faa2 	bl	800b33a <RFW_ReceiveInit>
 8008df6:	e007      	b.n	8008e08 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008df8:	2300      	movs	r3, #0
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f240 2162 	movw	r1, #610	; 0x262
 8008e00:	f240 2062 	movw	r0, #610	; 0x262
 8008e04:	f001 fbd4 	bl	800a5b0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d006      	beq.n	8008e1c <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008e0e:	6879      	ldr	r1, [r7, #4]
 8008e10:	4811      	ldr	r0, [pc, #68]	; (8008e58 <RadioRxBoosted+0x78>)
 8008e12:	f002 fd49 	bl	800b8a8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008e16:	4810      	ldr	r0, [pc, #64]	; (8008e58 <RadioRxBoosted+0x78>)
 8008e18:	f002 fc68 	bl	800b6ec <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008e1c:	4b0f      	ldr	r3, [pc, #60]	; (8008e5c <RadioRxBoosted+0x7c>)
 8008e1e:	2200      	movs	r2, #0
 8008e20:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008e22:	4b0e      	ldr	r3, [pc, #56]	; (8008e5c <RadioRxBoosted+0x7c>)
 8008e24:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008e28:	2100      	movs	r1, #0
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f002 f864 	bl	800aef8 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8008e30:	4b0a      	ldr	r3, [pc, #40]	; (8008e5c <RadioRxBoosted+0x7c>)
 8008e32:	785b      	ldrb	r3, [r3, #1]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d004      	beq.n	8008e42 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8008e38:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008e3c:	f001 fa40 	bl	800a2c0 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8008e40:	e005      	b.n	8008e4e <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8008e42:	4b06      	ldr	r3, [pc, #24]	; (8008e5c <RadioRxBoosted+0x7c>)
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	019b      	lsls	r3, r3, #6
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f001 fa39 	bl	800a2c0 <SUBGRF_SetRxBoosted>
}
 8008e4e:	bf00      	nop
 8008e50:	3708      	adds	r7, #8
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	200009e0 	.word	0x200009e0
 8008e5c:	2000096c 	.word	0x2000096c

08008e60 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	005a      	lsls	r2, r3, #1
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	4413      	add	r3, r2
 8008e72:	4a0c      	ldr	r2, [pc, #48]	; (8008ea4 <RadioSetRxDutyCycle+0x44>)
 8008e74:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008e76:	2300      	movs	r3, #0
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008e7e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008e82:	f001 fb95 	bl	800a5b0 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008e86:	4b07      	ldr	r3, [pc, #28]	; (8008ea4 <RadioSetRxDutyCycle+0x44>)
 8008e88:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f002 f832 	bl	800aef8 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8008e94:	6839      	ldr	r1, [r7, #0]
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f001 fa36 	bl	800a308 <SUBGRF_SetRxDutyCycle>
}
 8008e9c:	bf00      	nop
 8008e9e:	3708      	adds	r7, #8
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	2000096c 	.word	0x2000096c

08008ea8 <RadioStartCad>:

static void RadioStartCad( void )
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008eac:	4b09      	ldr	r3, [pc, #36]	; (8008ed4 <RadioStartCad+0x2c>)
 8008eae:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f002 f81f 	bl	800aef8 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8008eba:	2300      	movs	r3, #0
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8008ec2:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8008ec6:	f001 fb73 	bl	800a5b0 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8008eca:	f001 fa49 	bl	800a360 <SUBGRF_SetCad>
}
 8008ece:	bf00      	nop
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	2000096c 	.word	0x2000096c

08008ed8 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	70fb      	strb	r3, [r7, #3]
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8008ee8:	883b      	ldrh	r3, [r7, #0]
 8008eea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008eee:	fb02 f303 	mul.w	r3, r2, r3
 8008ef2:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f001 fbb7 	bl	800a668 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8008efa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008efe:	4618      	mov	r0, r3
 8008f00:	f002 f822 	bl	800af48 <SUBGRF_SetRfTxPower>
 8008f04:	4603      	mov	r3, r0
 8008f06:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008f08:	210e      	movs	r1, #14
 8008f0a:	f640 101f 	movw	r0, #2335	; 0x91f
 8008f0e:	f001 feff 	bl	800ad10 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8008f12:	7afb      	ldrb	r3, [r7, #11]
 8008f14:	2101      	movs	r1, #1
 8008f16:	4618      	mov	r0, r3
 8008f18:	f001 ffee 	bl	800aef8 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8008f1c:	f001 fa2e 	bl	800a37c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8008f20:	68f9      	ldr	r1, [r7, #12]
 8008f22:	4805      	ldr	r0, [pc, #20]	; (8008f38 <RadioSetTxContinuousWave+0x60>)
 8008f24:	f002 fcc0 	bl	800b8a8 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8008f28:	4803      	ldr	r0, [pc, #12]	; (8008f38 <RadioSetTxContinuousWave+0x60>)
 8008f2a:	f002 fbdf 	bl	800b6ec <UTIL_TIMER_Start>
}
 8008f2e:	bf00      	nop
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	200009c8 	.word	0x200009c8

08008f3c <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	4603      	mov	r3, r0
 8008f44:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8008f46:	f001 fe50 	bl	800abea <SUBGRF_GetRssiInst>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	b21b      	sxth	r3, r3
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3708      	adds	r7, #8
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b082      	sub	sp, #8
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	460a      	mov	r2, r1
 8008f60:	80fb      	strh	r3, [r7, #6]
 8008f62:	4613      	mov	r3, r2
 8008f64:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8008f66:	797a      	ldrb	r2, [r7, #5]
 8008f68:	88fb      	ldrh	r3, [r7, #6]
 8008f6a:	4611      	mov	r1, r2
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f001 fecf 	bl	800ad10 <SUBGRF_WriteRegister>
}
 8008f72:	bf00      	nop
 8008f74:	3708      	adds	r7, #8
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b082      	sub	sp, #8
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	4603      	mov	r3, r0
 8008f82:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8008f84:	88fb      	ldrh	r3, [r7, #6]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f001 fed6 	bl	800ad38 <SUBGRF_ReadRegister>
 8008f8c:	4603      	mov	r3, r0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b082      	sub	sp, #8
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	6039      	str	r1, [r7, #0]
 8008fa0:	80fb      	strh	r3, [r7, #6]
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8008fa6:	797b      	ldrb	r3, [r7, #5]
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	88fb      	ldrh	r3, [r7, #6]
 8008fac:	6839      	ldr	r1, [r7, #0]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f001 fed6 	bl	800ad60 <SUBGRF_WriteRegisters>
}
 8008fb4:	bf00      	nop
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	6039      	str	r1, [r7, #0]
 8008fc6:	80fb      	strh	r3, [r7, #6]
 8008fc8:	4613      	mov	r3, r2
 8008fca:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8008fcc:	797b      	ldrb	r3, [r7, #5]
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	88fb      	ldrh	r3, [r7, #6]
 8008fd2:	6839      	ldr	r1, [r7, #0]
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f001 fee5 	bl	800ada4 <SUBGRF_ReadRegisters>
}
 8008fda:	bf00      	nop
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
	...

08008fe4 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	4603      	mov	r3, r0
 8008fec:	460a      	mov	r2, r1
 8008fee:	71fb      	strb	r3, [r7, #7]
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8008ff4:	79fb      	ldrb	r3, [r7, #7]
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d10a      	bne.n	8009010 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8008ffa:	4a0e      	ldr	r2, [pc, #56]	; (8009034 <RadioSetMaxPayloadLength+0x50>)
 8008ffc:	79bb      	ldrb	r3, [r7, #6]
 8008ffe:	7013      	strb	r3, [r2, #0]
 8009000:	4b0c      	ldr	r3, [pc, #48]	; (8009034 <RadioSetMaxPayloadLength+0x50>)
 8009002:	781a      	ldrb	r2, [r3, #0]
 8009004:	4b0c      	ldr	r3, [pc, #48]	; (8009038 <RadioSetMaxPayloadLength+0x54>)
 8009006:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009008:	480c      	ldr	r0, [pc, #48]	; (800903c <RadioSetMaxPayloadLength+0x58>)
 800900a:	f001 fd39 	bl	800aa80 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800900e:	e00d      	b.n	800902c <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8009010:	4b09      	ldr	r3, [pc, #36]	; (8009038 <RadioSetMaxPayloadLength+0x54>)
 8009012:	7d5b      	ldrb	r3, [r3, #21]
 8009014:	2b01      	cmp	r3, #1
 8009016:	d109      	bne.n	800902c <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8009018:	4a06      	ldr	r2, [pc, #24]	; (8009034 <RadioSetMaxPayloadLength+0x50>)
 800901a:	79bb      	ldrb	r3, [r7, #6]
 800901c:	7013      	strb	r3, [r2, #0]
 800901e:	4b05      	ldr	r3, [pc, #20]	; (8009034 <RadioSetMaxPayloadLength+0x50>)
 8009020:	781a      	ldrb	r2, [r3, #0]
 8009022:	4b05      	ldr	r3, [pc, #20]	; (8009038 <RadioSetMaxPayloadLength+0x54>)
 8009024:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009026:	4805      	ldr	r0, [pc, #20]	; (800903c <RadioSetMaxPayloadLength+0x58>)
 8009028:	f001 fd2a 	bl	800aa80 <SUBGRF_SetPacketParams>
}
 800902c:	bf00      	nop
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	20000015 	.word	0x20000015
 8009038:	2000096c 	.word	0x2000096c
 800903c:	2000097a 	.word	0x2000097a

08009040 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	4603      	mov	r3, r0
 8009048:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800904a:	4a13      	ldr	r2, [pc, #76]	; (8009098 <RadioSetPublicNetwork+0x58>)
 800904c:	79fb      	ldrb	r3, [r7, #7]
 800904e:	7313      	strb	r3, [r2, #12]
 8009050:	4b11      	ldr	r3, [pc, #68]	; (8009098 <RadioSetPublicNetwork+0x58>)
 8009052:	7b1a      	ldrb	r2, [r3, #12]
 8009054:	4b10      	ldr	r3, [pc, #64]	; (8009098 <RadioSetPublicNetwork+0x58>)
 8009056:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8009058:	2001      	movs	r0, #1
 800905a:	f7ff f819 	bl	8008090 <RadioSetModem>
    if( enable == true )
 800905e:	79fb      	ldrb	r3, [r7, #7]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d00a      	beq.n	800907a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8009064:	2134      	movs	r1, #52	; 0x34
 8009066:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800906a:	f001 fe51 	bl	800ad10 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800906e:	2144      	movs	r1, #68	; 0x44
 8009070:	f240 7041 	movw	r0, #1857	; 0x741
 8009074:	f001 fe4c 	bl	800ad10 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8009078:	e009      	b.n	800908e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800907a:	2114      	movs	r1, #20
 800907c:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8009080:	f001 fe46 	bl	800ad10 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8009084:	2124      	movs	r1, #36	; 0x24
 8009086:	f240 7041 	movw	r0, #1857	; 0x741
 800908a:	f001 fe41 	bl	800ad10 <SUBGRF_WriteRegister>
}
 800908e:	bf00      	nop
 8009090:	3708      	adds	r7, #8
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	2000096c 	.word	0x2000096c

0800909c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 800909c:	b580      	push	{r7, lr}
 800909e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80090a0:	f001 ff86 	bl	800afb0 <SUBGRF_GetRadioWakeUpTime>
 80090a4:	4603      	mov	r3, r0
 80090a6:	3303      	adds	r3, #3
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	bd80      	pop	{r7, pc}

080090ac <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 80090b4:	f000 f80e 	bl	80090d4 <RadioOnTxTimeoutProcess>
}
 80090b8:	bf00      	nop
 80090ba:	3708      	adds	r7, #8
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 80090c8:	f000 f818 	bl	80090fc <RadioOnRxTimeoutProcess>
}
 80090cc:	bf00      	nop
 80090ce:	3708      	adds	r7, #8
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80090d8:	4b07      	ldr	r3, [pc, #28]	; (80090f8 <RadioOnTxTimeoutProcess+0x24>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d008      	beq.n	80090f2 <RadioOnTxTimeoutProcess+0x1e>
 80090e0:	4b05      	ldr	r3, [pc, #20]	; (80090f8 <RadioOnTxTimeoutProcess+0x24>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d003      	beq.n	80090f2 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 80090ea:	4b03      	ldr	r3, [pc, #12]	; (80090f8 <RadioOnTxTimeoutProcess+0x24>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	4798      	blx	r3
    }
}
 80090f2:	bf00      	nop
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	20000968 	.word	0x20000968

080090fc <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009100:	4b07      	ldr	r3, [pc, #28]	; (8009120 <RadioOnRxTimeoutProcess+0x24>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d008      	beq.n	800911a <RadioOnRxTimeoutProcess+0x1e>
 8009108:	4b05      	ldr	r3, [pc, #20]	; (8009120 <RadioOnRxTimeoutProcess+0x24>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d003      	beq.n	800911a <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8009112:	4b03      	ldr	r3, [pc, #12]	; (8009120 <RadioOnRxTimeoutProcess+0x24>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	4798      	blx	r3
    }
}
 800911a:	bf00      	nop
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	20000968 	.word	0x20000968

08009124 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	4603      	mov	r3, r0
 800912c:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 800912e:	4a05      	ldr	r2, [pc, #20]	; (8009144 <RadioOnDioIrq+0x20>)
 8009130:	88fb      	ldrh	r3, [r7, #6]
 8009132:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8009136:	f000 f807 	bl	8009148 <RadioIrqProcess>
}
 800913a:	bf00      	nop
 800913c:	3708      	adds	r7, #8
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	2000096c 	.word	0x2000096c

08009148 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8009148:	b5b0      	push	{r4, r5, r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800914e:	2300      	movs	r3, #0
 8009150:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8009152:	2300      	movs	r3, #0
 8009154:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8009156:	4ba5      	ldr	r3, [pc, #660]	; (80093ec <RadioIrqProcess+0x2a4>)
 8009158:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800915c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009160:	f000 810d 	beq.w	800937e <RadioIrqProcess+0x236>
 8009164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009168:	f300 81c0 	bgt.w	80094ec <RadioIrqProcess+0x3a4>
 800916c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009170:	f000 80f1 	beq.w	8009356 <RadioIrqProcess+0x20e>
 8009174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009178:	f300 81b8 	bgt.w	80094ec <RadioIrqProcess+0x3a4>
 800917c:	2b80      	cmp	r3, #128	; 0x80
 800917e:	f000 80d6 	beq.w	800932e <RadioIrqProcess+0x1e6>
 8009182:	2b80      	cmp	r3, #128	; 0x80
 8009184:	f300 81b2 	bgt.w	80094ec <RadioIrqProcess+0x3a4>
 8009188:	2b20      	cmp	r3, #32
 800918a:	dc49      	bgt.n	8009220 <RadioIrqProcess+0xd8>
 800918c:	2b00      	cmp	r3, #0
 800918e:	f340 81ad 	ble.w	80094ec <RadioIrqProcess+0x3a4>
 8009192:	3b01      	subs	r3, #1
 8009194:	2b1f      	cmp	r3, #31
 8009196:	f200 81a9 	bhi.w	80094ec <RadioIrqProcess+0x3a4>
 800919a:	a201      	add	r2, pc, #4	; (adr r2, 80091a0 <RadioIrqProcess+0x58>)
 800919c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a0:	08009229 	.word	0x08009229
 80091a4:	08009263 	.word	0x08009263
 80091a8:	080094ed 	.word	0x080094ed
 80091ac:	08009409 	.word	0x08009409
 80091b0:	080094ed 	.word	0x080094ed
 80091b4:	080094ed 	.word	0x080094ed
 80091b8:	080094ed 	.word	0x080094ed
 80091bc:	08009477 	.word	0x08009477
 80091c0:	080094ed 	.word	0x080094ed
 80091c4:	080094ed 	.word	0x080094ed
 80091c8:	080094ed 	.word	0x080094ed
 80091cc:	080094ed 	.word	0x080094ed
 80091d0:	080094ed 	.word	0x080094ed
 80091d4:	080094ed 	.word	0x080094ed
 80091d8:	080094ed 	.word	0x080094ed
 80091dc:	080094ed 	.word	0x080094ed
 80091e0:	080094ed 	.word	0x080094ed
 80091e4:	080094ed 	.word	0x080094ed
 80091e8:	080094ed 	.word	0x080094ed
 80091ec:	080094ed 	.word	0x080094ed
 80091f0:	080094ed 	.word	0x080094ed
 80091f4:	080094ed 	.word	0x080094ed
 80091f8:	080094ed 	.word	0x080094ed
 80091fc:	080094ed 	.word	0x080094ed
 8009200:	080094ed 	.word	0x080094ed
 8009204:	080094ed 	.word	0x080094ed
 8009208:	080094ed 	.word	0x080094ed
 800920c:	080094ed 	.word	0x080094ed
 8009210:	080094ed 	.word	0x080094ed
 8009214:	080094ed 	.word	0x080094ed
 8009218:	080094ed 	.word	0x080094ed
 800921c:	08009487 	.word	0x08009487
 8009220:	2b40      	cmp	r3, #64	; 0x40
 8009222:	f000 814b 	beq.w	80094bc <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8009226:	e161      	b.n	80094ec <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 8009228:	4871      	ldr	r0, [pc, #452]	; (80093f0 <RadioIrqProcess+0x2a8>)
 800922a:	f002 facd 	bl	800b7c8 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800922e:	2000      	movs	r0, #0
 8009230:	f000 ffea 	bl	800a208 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8009234:	f002 f860 	bl	800b2f8 <RFW_Is_LongPacketModeEnabled>
 8009238:	4603      	mov	r3, r0
 800923a:	2b01      	cmp	r3, #1
 800923c:	d101      	bne.n	8009242 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 800923e:	f002 f884 	bl	800b34a <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8009242:	4b6c      	ldr	r3, [pc, #432]	; (80093f4 <RadioIrqProcess+0x2ac>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	f000 8152 	beq.w	80094f0 <RadioIrqProcess+0x3a8>
 800924c:	4b69      	ldr	r3, [pc, #420]	; (80093f4 <RadioIrqProcess+0x2ac>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	f000 814c 	beq.w	80094f0 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 8009258:	4b66      	ldr	r3, [pc, #408]	; (80093f4 <RadioIrqProcess+0x2ac>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4798      	blx	r3
        break;
 8009260:	e146      	b.n	80094f0 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 8009262:	4865      	ldr	r0, [pc, #404]	; (80093f8 <RadioIrqProcess+0x2b0>)
 8009264:	f002 fab0 	bl	800b7c8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8009268:	4b60      	ldr	r3, [pc, #384]	; (80093ec <RadioIrqProcess+0x2a4>)
 800926a:	785b      	ldrb	r3, [r3, #1]
 800926c:	f083 0301 	eor.w	r3, r3, #1
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b00      	cmp	r3, #0
 8009274:	d014      	beq.n	80092a0 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8009276:	2000      	movs	r0, #0
 8009278:	f000 ffc6 	bl	800a208 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800927c:	2100      	movs	r1, #0
 800927e:	f640 1002 	movw	r0, #2306	; 0x902
 8009282:	f001 fd45 	bl	800ad10 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8009286:	f640 1044 	movw	r0, #2372	; 0x944
 800928a:	f001 fd55 	bl	800ad38 <SUBGRF_ReadRegister>
 800928e:	4603      	mov	r3, r0
 8009290:	f043 0302 	orr.w	r3, r3, #2
 8009294:	b2db      	uxtb	r3, r3
 8009296:	4619      	mov	r1, r3
 8009298:	f640 1044 	movw	r0, #2372	; 0x944
 800929c:	f001 fd38 	bl	800ad10 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80092a0:	1dfb      	adds	r3, r7, #7
 80092a2:	22ff      	movs	r2, #255	; 0xff
 80092a4:	4619      	mov	r1, r3
 80092a6:	4855      	ldr	r0, [pc, #340]	; (80093fc <RadioIrqProcess+0x2b4>)
 80092a8:	f000 fe7e 	bl	8009fa8 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 80092ac:	4854      	ldr	r0, [pc, #336]	; (8009400 <RadioIrqProcess+0x2b8>)
 80092ae:	f001 fcdd 	bl	800ac6c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80092b2:	4b50      	ldr	r3, [pc, #320]	; (80093f4 <RadioIrqProcess+0x2ac>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	f000 811c 	beq.w	80094f4 <RadioIrqProcess+0x3ac>
 80092bc:	4b4d      	ldr	r3, [pc, #308]	; (80093f4 <RadioIrqProcess+0x2ac>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	f000 8116 	beq.w	80094f4 <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 80092c8:	4b48      	ldr	r3, [pc, #288]	; (80093ec <RadioIrqProcess+0x2a4>)
 80092ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d10e      	bne.n	80092f0 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 80092d2:	4b48      	ldr	r3, [pc, #288]	; (80093f4 <RadioIrqProcess+0x2ac>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	689c      	ldr	r4, [r3, #8]
 80092d8:	79fb      	ldrb	r3, [r7, #7]
 80092da:	b299      	uxth	r1, r3
 80092dc:	4b43      	ldr	r3, [pc, #268]	; (80093ec <RadioIrqProcess+0x2a4>)
 80092de:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 80092e2:	b21a      	sxth	r2, r3
 80092e4:	4b41      	ldr	r3, [pc, #260]	; (80093ec <RadioIrqProcess+0x2a4>)
 80092e6:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 80092ea:	4844      	ldr	r0, [pc, #272]	; (80093fc <RadioIrqProcess+0x2b4>)
 80092ec:	47a0      	blx	r4
                break;
 80092ee:	e01d      	b.n	800932c <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 80092f0:	4b3e      	ldr	r3, [pc, #248]	; (80093ec <RadioIrqProcess+0x2a4>)
 80092f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092f4:	463a      	mov	r2, r7
 80092f6:	4611      	mov	r1, r2
 80092f8:	4618      	mov	r0, r3
 80092fa:	f001 ff4b 	bl	800b194 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 80092fe:	4b3d      	ldr	r3, [pc, #244]	; (80093f4 <RadioIrqProcess+0x2ac>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	689c      	ldr	r4, [r3, #8]
 8009304:	79fb      	ldrb	r3, [r7, #7]
 8009306:	b299      	uxth	r1, r3
 8009308:	4b38      	ldr	r3, [pc, #224]	; (80093ec <RadioIrqProcess+0x2a4>)
 800930a:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800930e:	b218      	sxth	r0, r3
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009316:	4a3b      	ldr	r2, [pc, #236]	; (8009404 <RadioIrqProcess+0x2bc>)
 8009318:	fb82 5203 	smull	r5, r2, r2, r3
 800931c:	1192      	asrs	r2, r2, #6
 800931e:	17db      	asrs	r3, r3, #31
 8009320:	1ad3      	subs	r3, r2, r3
 8009322:	b25b      	sxtb	r3, r3
 8009324:	4602      	mov	r2, r0
 8009326:	4835      	ldr	r0, [pc, #212]	; (80093fc <RadioIrqProcess+0x2b4>)
 8009328:	47a0      	blx	r4
                break;
 800932a:	bf00      	nop
        break;
 800932c:	e0e2      	b.n	80094f4 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 800932e:	2000      	movs	r0, #0
 8009330:	f000 ff6a 	bl	800a208 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8009334:	4b2f      	ldr	r3, [pc, #188]	; (80093f4 <RadioIrqProcess+0x2ac>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	f000 80dd 	beq.w	80094f8 <RadioIrqProcess+0x3b0>
 800933e:	4b2d      	ldr	r3, [pc, #180]	; (80093f4 <RadioIrqProcess+0x2ac>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	699b      	ldr	r3, [r3, #24]
 8009344:	2b00      	cmp	r3, #0
 8009346:	f000 80d7 	beq.w	80094f8 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 800934a:	4b2a      	ldr	r3, [pc, #168]	; (80093f4 <RadioIrqProcess+0x2ac>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	699b      	ldr	r3, [r3, #24]
 8009350:	2000      	movs	r0, #0
 8009352:	4798      	blx	r3
        break;
 8009354:	e0d0      	b.n	80094f8 <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 8009356:	2000      	movs	r0, #0
 8009358:	f000 ff56 	bl	800a208 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800935c:	4b25      	ldr	r3, [pc, #148]	; (80093f4 <RadioIrqProcess+0x2ac>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2b00      	cmp	r3, #0
 8009362:	f000 80cb 	beq.w	80094fc <RadioIrqProcess+0x3b4>
 8009366:	4b23      	ldr	r3, [pc, #140]	; (80093f4 <RadioIrqProcess+0x2ac>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	699b      	ldr	r3, [r3, #24]
 800936c:	2b00      	cmp	r3, #0
 800936e:	f000 80c5 	beq.w	80094fc <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 8009372:	4b20      	ldr	r3, [pc, #128]	; (80093f4 <RadioIrqProcess+0x2ac>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	699b      	ldr	r3, [r3, #24]
 8009378:	2001      	movs	r0, #1
 800937a:	4798      	blx	r3
        break;
 800937c:	e0be      	b.n	80094fc <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800937e:	f000 fdf9 	bl	8009f74 <SUBGRF_GetOperatingMode>
 8009382:	4603      	mov	r3, r0
 8009384:	2b04      	cmp	r3, #4
 8009386:	d115      	bne.n	80093b4 <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 8009388:	4819      	ldr	r0, [pc, #100]	; (80093f0 <RadioIrqProcess+0x2a8>)
 800938a:	f002 fa1d 	bl	800b7c8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800938e:	2000      	movs	r0, #0
 8009390:	f000 ff3a 	bl	800a208 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8009394:	4b17      	ldr	r3, [pc, #92]	; (80093f4 <RadioIrqProcess+0x2ac>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 80b1 	beq.w	8009500 <RadioIrqProcess+0x3b8>
 800939e:	4b15      	ldr	r3, [pc, #84]	; (80093f4 <RadioIrqProcess+0x2ac>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	f000 80ab 	beq.w	8009500 <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 80093aa:	4b12      	ldr	r3, [pc, #72]	; (80093f4 <RadioIrqProcess+0x2ac>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	4798      	blx	r3
        break;
 80093b2:	e0a5      	b.n	8009500 <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80093b4:	f000 fdde 	bl	8009f74 <SUBGRF_GetOperatingMode>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b05      	cmp	r3, #5
 80093bc:	f040 80a0 	bne.w	8009500 <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 80093c0:	480d      	ldr	r0, [pc, #52]	; (80093f8 <RadioIrqProcess+0x2b0>)
 80093c2:	f002 fa01 	bl	800b7c8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80093c6:	2000      	movs	r0, #0
 80093c8:	f000 ff1e 	bl	800a208 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80093cc:	4b09      	ldr	r3, [pc, #36]	; (80093f4 <RadioIrqProcess+0x2ac>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f000 8095 	beq.w	8009500 <RadioIrqProcess+0x3b8>
 80093d6:	4b07      	ldr	r3, [pc, #28]	; (80093f4 <RadioIrqProcess+0x2ac>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f000 808f 	beq.w	8009500 <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 80093e2:	4b04      	ldr	r3, [pc, #16]	; (80093f4 <RadioIrqProcess+0x2ac>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	4798      	blx	r3
        break;
 80093ea:	e089      	b.n	8009500 <RadioIrqProcess+0x3b8>
 80093ec:	2000096c 	.word	0x2000096c
 80093f0:	200009c8 	.word	0x200009c8
 80093f4:	20000968 	.word	0x20000968
 80093f8:	200009e0 	.word	0x200009e0
 80093fc:	20000868 	.word	0x20000868
 8009400:	20000990 	.word	0x20000990
 8009404:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8009408:	4b44      	ldr	r3, [pc, #272]	; (800951c <RadioIrqProcess+0x3d4>)
 800940a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800940c:	2b00      	cmp	r3, #0
 800940e:	d079      	beq.n	8009504 <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8009410:	4a43      	ldr	r2, [pc, #268]	; (8009520 <RadioIrqProcess+0x3d8>)
 8009412:	4b42      	ldr	r3, [pc, #264]	; (800951c <RadioIrqProcess+0x3d4>)
 8009414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009416:	0c1b      	lsrs	r3, r3, #16
 8009418:	b2db      	uxtb	r3, r3
 800941a:	4619      	mov	r1, r3
 800941c:	f640 1003 	movw	r0, #2307	; 0x903
 8009420:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8009422:	4a3f      	ldr	r2, [pc, #252]	; (8009520 <RadioIrqProcess+0x3d8>)
 8009424:	4b3d      	ldr	r3, [pc, #244]	; (800951c <RadioIrqProcess+0x3d4>)
 8009426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009428:	0a1b      	lsrs	r3, r3, #8
 800942a:	b2db      	uxtb	r3, r3
 800942c:	4619      	mov	r1, r3
 800942e:	f640 1004 	movw	r0, #2308	; 0x904
 8009432:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8009434:	4a3a      	ldr	r2, [pc, #232]	; (8009520 <RadioIrqProcess+0x3d8>)
 8009436:	4b39      	ldr	r3, [pc, #228]	; (800951c <RadioIrqProcess+0x3d4>)
 8009438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800943a:	b2db      	uxtb	r3, r3
 800943c:	4619      	mov	r1, r3
 800943e:	f640 1005 	movw	r0, #2309	; 0x905
 8009442:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8009444:	4c36      	ldr	r4, [pc, #216]	; (8009520 <RadioIrqProcess+0x3d8>)
 8009446:	4b37      	ldr	r3, [pc, #220]	; (8009524 <RadioIrqProcess+0x3dc>)
 8009448:	f640 1002 	movw	r0, #2306	; 0x902
 800944c:	4798      	blx	r3
 800944e:	4603      	mov	r3, r0
 8009450:	f043 0301 	orr.w	r3, r3, #1
 8009454:	b2db      	uxtb	r3, r3
 8009456:	4619      	mov	r1, r3
 8009458:	f640 1002 	movw	r0, #2306	; 0x902
 800945c:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 800945e:	4b2f      	ldr	r3, [pc, #188]	; (800951c <RadioIrqProcess+0x3d4>)
 8009460:	2200      	movs	r2, #0
 8009462:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8009464:	2300      	movs	r3, #0
 8009466:	2200      	movs	r2, #0
 8009468:	f240 2162 	movw	r1, #610	; 0x262
 800946c:	f240 2062 	movw	r0, #610	; 0x262
 8009470:	f001 f89e 	bl	800a5b0 <SUBGRF_SetDioIrqParams>
        break;
 8009474:	e046      	b.n	8009504 <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 8009476:	f001 ff38 	bl	800b2ea <RFW_Is_Init>
 800947a:	4603      	mov	r3, r0
 800947c:	2b01      	cmp	r3, #1
 800947e:	d143      	bne.n	8009508 <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 8009480:	f001 ff69 	bl	800b356 <RFW_ReceivePayload>
        break;
 8009484:	e040      	b.n	8009508 <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 8009486:	4828      	ldr	r0, [pc, #160]	; (8009528 <RadioIrqProcess+0x3e0>)
 8009488:	f002 f99e 	bl	800b7c8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800948c:	4b23      	ldr	r3, [pc, #140]	; (800951c <RadioIrqProcess+0x3d4>)
 800948e:	785b      	ldrb	r3, [r3, #1]
 8009490:	f083 0301 	eor.w	r3, r3, #1
 8009494:	b2db      	uxtb	r3, r3
 8009496:	2b00      	cmp	r3, #0
 8009498:	d002      	beq.n	80094a0 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 800949a:	2000      	movs	r0, #0
 800949c:	f000 feb4 	bl	800a208 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80094a0:	4b22      	ldr	r3, [pc, #136]	; (800952c <RadioIrqProcess+0x3e4>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d031      	beq.n	800950c <RadioIrqProcess+0x3c4>
 80094a8:	4b20      	ldr	r3, [pc, #128]	; (800952c <RadioIrqProcess+0x3e4>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d02c      	beq.n	800950c <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 80094b2:	4b1e      	ldr	r3, [pc, #120]	; (800952c <RadioIrqProcess+0x3e4>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	4798      	blx	r3
        break;
 80094ba:	e027      	b.n	800950c <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 80094bc:	4b17      	ldr	r3, [pc, #92]	; (800951c <RadioIrqProcess+0x3d4>)
 80094be:	785b      	ldrb	r3, [r3, #1]
 80094c0:	f083 0301 	eor.w	r3, r3, #1
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d002      	beq.n	80094d0 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 80094ca:	2000      	movs	r0, #0
 80094cc:	f000 fe9c 	bl	800a208 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80094d0:	4b16      	ldr	r3, [pc, #88]	; (800952c <RadioIrqProcess+0x3e4>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d01b      	beq.n	8009510 <RadioIrqProcess+0x3c8>
 80094d8:	4b14      	ldr	r3, [pc, #80]	; (800952c <RadioIrqProcess+0x3e4>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	691b      	ldr	r3, [r3, #16]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d016      	beq.n	8009510 <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 80094e2:	4b12      	ldr	r3, [pc, #72]	; (800952c <RadioIrqProcess+0x3e4>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	691b      	ldr	r3, [r3, #16]
 80094e8:	4798      	blx	r3
        break;
 80094ea:	e011      	b.n	8009510 <RadioIrqProcess+0x3c8>
        break;
 80094ec:	bf00      	nop
 80094ee:	e010      	b.n	8009512 <RadioIrqProcess+0x3ca>
        break;
 80094f0:	bf00      	nop
 80094f2:	e00e      	b.n	8009512 <RadioIrqProcess+0x3ca>
        break;
 80094f4:	bf00      	nop
 80094f6:	e00c      	b.n	8009512 <RadioIrqProcess+0x3ca>
        break;
 80094f8:	bf00      	nop
 80094fa:	e00a      	b.n	8009512 <RadioIrqProcess+0x3ca>
        break;
 80094fc:	bf00      	nop
 80094fe:	e008      	b.n	8009512 <RadioIrqProcess+0x3ca>
        break;
 8009500:	bf00      	nop
 8009502:	e006      	b.n	8009512 <RadioIrqProcess+0x3ca>
        break;
 8009504:	bf00      	nop
 8009506:	e004      	b.n	8009512 <RadioIrqProcess+0x3ca>
        break;
 8009508:	bf00      	nop
 800950a:	e002      	b.n	8009512 <RadioIrqProcess+0x3ca>
        break;
 800950c:	bf00      	nop
 800950e:	e000      	b.n	8009512 <RadioIrqProcess+0x3ca>
        break;
 8009510:	bf00      	nop
    }
}
 8009512:	bf00      	nop
 8009514:	3708      	adds	r7, #8
 8009516:	46bd      	mov	sp, r7
 8009518:	bdb0      	pop	{r4, r5, r7, pc}
 800951a:	bf00      	nop
 800951c:	2000096c 	.word	0x2000096c
 8009520:	08008f57 	.word	0x08008f57
 8009524:	08008f7b 	.word	0x08008f7b
 8009528:	200009e0 	.word	0x200009e0
 800952c:	20000968 	.word	0x20000968

08009530 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8009530:	b580      	push	{r7, lr}
 8009532:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8009534:	4b09      	ldr	r3, [pc, #36]	; (800955c <RadioTxPrbs+0x2c>)
 8009536:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800953a:	2101      	movs	r1, #1
 800953c:	4618      	mov	r0, r3
 800953e:	f001 fcdb 	bl	800aef8 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8009542:	4b07      	ldr	r3, [pc, #28]	; (8009560 <RadioTxPrbs+0x30>)
 8009544:	212d      	movs	r1, #45	; 0x2d
 8009546:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800954a:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 800954c:	f000 ff1f 	bl	800a38e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8009550:	4804      	ldr	r0, [pc, #16]	; (8009564 <RadioTxPrbs+0x34>)
 8009552:	f000 fe75 	bl	800a240 <SUBGRF_SetTx>
}
 8009556:	bf00      	nop
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	2000096c 	.word	0x2000096c
 8009560:	08008f57 	.word	0x08008f57
 8009564:	000fffff 	.word	0x000fffff

08009568 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b084      	sub	sp, #16
 800956c:	af00      	add	r7, sp, #0
 800956e:	4603      	mov	r3, r0
 8009570:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8009572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009576:	4618      	mov	r0, r3
 8009578:	f001 fce6 	bl	800af48 <SUBGRF_SetRfTxPower>
 800957c:	4603      	mov	r3, r0
 800957e:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009580:	210e      	movs	r1, #14
 8009582:	f640 101f 	movw	r0, #2335	; 0x91f
 8009586:	f001 fbc3 	bl	800ad10 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800958a:	7bfb      	ldrb	r3, [r7, #15]
 800958c:	2101      	movs	r1, #1
 800958e:	4618      	mov	r0, r3
 8009590:	f001 fcb2 	bl	800aef8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8009594:	f000 fef2 	bl	800a37c <SUBGRF_SetTxContinuousWave>
}
 8009598:	bf00      	nop
 800959a:	3710      	adds	r7, #16
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 80095a0:	b480      	push	{r7}
 80095a2:	b089      	sub	sp, #36	; 0x24
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	4613      	mov	r3, r2
 80095ac:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 80095ae:	2300      	movs	r3, #0
 80095b0:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 80095b2:	2300      	movs	r3, #0
 80095b4:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 80095b6:	2300      	movs	r3, #0
 80095b8:	61bb      	str	r3, [r7, #24]
 80095ba:	e011      	b.n	80095e0 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80095bc:	69bb      	ldr	r3, [r7, #24]
 80095be:	68ba      	ldr	r2, [r7, #8]
 80095c0:	4413      	add	r3, r2
 80095c2:	781a      	ldrb	r2, [r3, #0]
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	68b9      	ldr	r1, [r7, #8]
 80095c8:	440b      	add	r3, r1
 80095ca:	43d2      	mvns	r2, r2
 80095cc:	b2d2      	uxtb	r2, r2
 80095ce:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 80095d0:	69bb      	ldr	r3, [r7, #24]
 80095d2:	68fa      	ldr	r2, [r7, #12]
 80095d4:	4413      	add	r3, r2
 80095d6:	2200      	movs	r2, #0
 80095d8:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	3301      	adds	r3, #1
 80095de:	61bb      	str	r3, [r7, #24]
 80095e0:	79fb      	ldrb	r3, [r7, #7]
 80095e2:	69ba      	ldr	r2, [r7, #24]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	dbe9      	blt.n	80095bc <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 80095e8:	2300      	movs	r3, #0
 80095ea:	61bb      	str	r3, [r7, #24]
 80095ec:	e049      	b.n	8009682 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	425a      	negs	r2, r3
 80095f2:	f003 0307 	and.w	r3, r3, #7
 80095f6:	f002 0207 	and.w	r2, r2, #7
 80095fa:	bf58      	it	pl
 80095fc:	4253      	negpl	r3, r2
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	f1c3 0307 	rsb	r3, r3, #7
 8009604:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	2b00      	cmp	r3, #0
 800960a:	da00      	bge.n	800960e <payload_integration+0x6e>
 800960c:	3307      	adds	r3, #7
 800960e:	10db      	asrs	r3, r3, #3
 8009610:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	3301      	adds	r3, #1
 8009616:	425a      	negs	r2, r3
 8009618:	f003 0307 	and.w	r3, r3, #7
 800961c:	f002 0207 	and.w	r2, r2, #7
 8009620:	bf58      	it	pl
 8009622:	4253      	negpl	r3, r2
 8009624:	b2db      	uxtb	r3, r3
 8009626:	f1c3 0307 	rsb	r3, r3, #7
 800962a:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 800962c:	69bb      	ldr	r3, [r7, #24]
 800962e:	3301      	adds	r3, #1
 8009630:	2b00      	cmp	r3, #0
 8009632:	da00      	bge.n	8009636 <payload_integration+0x96>
 8009634:	3307      	adds	r3, #7
 8009636:	10db      	asrs	r3, r3, #3
 8009638:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800963a:	7dbb      	ldrb	r3, [r7, #22]
 800963c:	68ba      	ldr	r2, [r7, #8]
 800963e:	4413      	add	r3, r2
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	461a      	mov	r2, r3
 8009644:	7dfb      	ldrb	r3, [r7, #23]
 8009646:	fa42 f303 	asr.w	r3, r2, r3
 800964a:	b2db      	uxtb	r3, r3
 800964c:	f003 0301 	and.w	r3, r3, #1
 8009650:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8009652:	7ffa      	ldrb	r2, [r7, #31]
 8009654:	7cfb      	ldrb	r3, [r7, #19]
 8009656:	4053      	eors	r3, r2
 8009658:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800965a:	7d3b      	ldrb	r3, [r7, #20]
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	4413      	add	r3, r2
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	b25a      	sxtb	r2, r3
 8009664:	7ff9      	ldrb	r1, [r7, #31]
 8009666:	7d7b      	ldrb	r3, [r7, #21]
 8009668:	fa01 f303 	lsl.w	r3, r1, r3
 800966c:	b25b      	sxtb	r3, r3
 800966e:	4313      	orrs	r3, r2
 8009670:	b259      	sxtb	r1, r3
 8009672:	7d3b      	ldrb	r3, [r7, #20]
 8009674:	68fa      	ldr	r2, [r7, #12]
 8009676:	4413      	add	r3, r2
 8009678:	b2ca      	uxtb	r2, r1
 800967a:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	3301      	adds	r3, #1
 8009680:	61bb      	str	r3, [r7, #24]
 8009682:	79fb      	ldrb	r3, [r7, #7]
 8009684:	00db      	lsls	r3, r3, #3
 8009686:	69ba      	ldr	r2, [r7, #24]
 8009688:	429a      	cmp	r2, r3
 800968a:	dbb0      	blt.n	80095ee <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800968c:	7ffb      	ldrb	r3, [r7, #31]
 800968e:	01db      	lsls	r3, r3, #7
 8009690:	b25a      	sxtb	r2, r3
 8009692:	7ffb      	ldrb	r3, [r7, #31]
 8009694:	019b      	lsls	r3, r3, #6
 8009696:	b25b      	sxtb	r3, r3
 8009698:	4313      	orrs	r3, r2
 800969a:	b25b      	sxtb	r3, r3
 800969c:	7ffa      	ldrb	r2, [r7, #31]
 800969e:	2a00      	cmp	r2, #0
 80096a0:	d101      	bne.n	80096a6 <payload_integration+0x106>
 80096a2:	2220      	movs	r2, #32
 80096a4:	e000      	b.n	80096a8 <payload_integration+0x108>
 80096a6:	2200      	movs	r2, #0
 80096a8:	4313      	orrs	r3, r2
 80096aa:	b259      	sxtb	r1, r3
 80096ac:	79fb      	ldrb	r3, [r7, #7]
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	4413      	add	r3, r2
 80096b2:	b2ca      	uxtb	r2, r1
 80096b4:	701a      	strb	r2, [r3, #0]
}
 80096b6:	bf00      	nop
 80096b8:	3724      	adds	r7, #36	; 0x24
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bc80      	pop	{r7}
 80096be:	4770      	bx	lr

080096c0 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b08c      	sub	sp, #48	; 0x30
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60b9      	str	r1, [r7, #8]
 80096c8:	607a      	str	r2, [r7, #4]
 80096ca:	603b      	str	r3, [r7, #0]
 80096cc:	4603      	mov	r3, r0
 80096ce:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 80096d0:	2300      	movs	r3, #0
 80096d2:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 80096d4:	2300      	movs	r3, #0
 80096d6:	623b      	str	r3, [r7, #32]
 80096d8:	2300      	movs	r3, #0
 80096da:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80096dc:	f001 fdff 	bl	800b2de <RFW_DeInit>

    if( rxContinuous != 0 )
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d001      	beq.n	80096ea <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 80096e6:	2300      	movs	r3, #0
 80096e8:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	bf14      	ite	ne
 80096f0:	2301      	movne	r3, #1
 80096f2:	2300      	moveq	r3, #0
 80096f4:	b2da      	uxtb	r2, r3
 80096f6:	4ba3      	ldr	r3, [pc, #652]	; (8009984 <RadioSetRxGenericConfig+0x2c4>)
 80096f8:	705a      	strb	r2, [r3, #1]

    switch( modem )
 80096fa:	7bfb      	ldrb	r3, [r7, #15]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d003      	beq.n	8009708 <RadioSetRxGenericConfig+0x48>
 8009700:	2b01      	cmp	r3, #1
 8009702:	f000 80dc 	beq.w	80098be <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8009706:	e194      	b.n	8009a32 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d003      	beq.n	8009718 <RadioSetRxGenericConfig+0x58>
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d102      	bne.n	800971e <RadioSetRxGenericConfig+0x5e>
            return -1;
 8009718:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800971c:	e18a      	b.n	8009a34 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	7f9b      	ldrb	r3, [r3, #30]
 8009722:	2b08      	cmp	r3, #8
 8009724:	d902      	bls.n	800972c <RadioSetRxGenericConfig+0x6c>
            return -1;
 8009726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800972a:	e183      	b.n	8009a34 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	6919      	ldr	r1, [r3, #16]
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	7f9b      	ldrb	r3, [r3, #30]
 8009734:	b29a      	uxth	r2, r3
 8009736:	f107 0320 	add.w	r3, r7, #32
 800973a:	4618      	mov	r0, r3
 800973c:	f001 ff66 	bl	800b60c <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	bf14      	ite	ne
 8009748:	2301      	movne	r3, #1
 800974a:	2300      	moveq	r3, #0
 800974c:	b2db      	uxtb	r3, r3
 800974e:	4618      	mov	r0, r3
 8009750:	f000 fe26 	bl	800a3a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009754:	4b8b      	ldr	r3, [pc, #556]	; (8009984 <RadioSetRxGenericConfig+0x2c4>)
 8009756:	2200      	movs	r2, #0
 8009758:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	4a88      	ldr	r2, [pc, #544]	; (8009984 <RadioSetRxGenericConfig+0x2c4>)
 8009762:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	f893 2020 	ldrb.w	r2, [r3, #32]
 800976a:	4b86      	ldr	r3, [pc, #536]	; (8009984 <RadioSetRxGenericConfig+0x2c4>)
 800976c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	4618      	mov	r0, r3
 8009776:	f001 fce5 	bl	800b144 <SUBGRF_GetFskBandwidthRegValue>
 800977a:	4603      	mov	r3, r0
 800977c:	461a      	mov	r2, r3
 800977e:	4b81      	ldr	r3, [pc, #516]	; (8009984 <RadioSetRxGenericConfig+0x2c4>)
 8009780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009784:	4b7f      	ldr	r3, [pc, #508]	; (8009984 <RadioSetRxGenericConfig+0x2c4>)
 8009786:	2200      	movs	r2, #0
 8009788:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	68db      	ldr	r3, [r3, #12]
 800978e:	b29b      	uxth	r3, r3
 8009790:	00db      	lsls	r3, r3, #3
 8009792:	b29a      	uxth	r2, r3
 8009794:	4b7b      	ldr	r3, [pc, #492]	; (8009984 <RadioSetRxGenericConfig+0x2c4>)
 8009796:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	7fda      	ldrb	r2, [r3, #31]
 800979c:	4b79      	ldr	r3, [pc, #484]	; (8009984 <RadioSetRxGenericConfig+0x2c4>)
 800979e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	7f9b      	ldrb	r3, [r3, #30]
 80097a4:	00db      	lsls	r3, r3, #3
 80097a6:	b2da      	uxtb	r2, r3
 80097a8:	4b76      	ldr	r3, [pc, #472]	; (8009984 <RadioSetRxGenericConfig+0x2c4>)
 80097aa:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80097b2:	4b74      	ldr	r3, [pc, #464]	; (8009984 <RadioSetRxGenericConfig+0x2c4>)
 80097b4:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d105      	bne.n	80097cc <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	695b      	ldr	r3, [r3, #20]
 80097c4:	b2da      	uxtb	r2, r3
 80097c6:	4b6f      	ldr	r3, [pc, #444]	; (8009984 <RadioSetRxGenericConfig+0x2c4>)
 80097c8:	759a      	strb	r2, [r3, #22]
 80097ca:	e00b      	b.n	80097e4 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80097d2:	2b02      	cmp	r3, #2
 80097d4:	d103      	bne.n	80097de <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80097d6:	4b6b      	ldr	r3, [pc, #428]	; (8009984 <RadioSetRxGenericConfig+0x2c4>)
 80097d8:	22ff      	movs	r2, #255	; 0xff
 80097da:	759a      	strb	r2, [r3, #22]
 80097dc:	e002      	b.n	80097e4 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80097de:	4b69      	ldr	r3, [pc, #420]	; (8009984 <RadioSetRxGenericConfig+0x2c4>)
 80097e0:	22ff      	movs	r2, #255	; 0xff
 80097e2:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80097ea:	2b02      	cmp	r3, #2
 80097ec:	d004      	beq.n	80097f8 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	d12d      	bne.n	8009854 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80097fe:	2bf1      	cmp	r3, #241	; 0xf1
 8009800:	d00c      	beq.n	800981c <RadioSetRxGenericConfig+0x15c>
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009808:	2bf2      	cmp	r3, #242	; 0xf2
 800980a:	d007      	beq.n	800981c <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009812:	2b01      	cmp	r3, #1
 8009814:	d002      	beq.n	800981c <RadioSetRxGenericConfig+0x15c>
                return -1;
 8009816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800981a:	e10b      	b.n	8009a34 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 800981c:	2300      	movs	r3, #0
 800981e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8009824:	4b58      	ldr	r3, [pc, #352]	; (8009988 <RadioSetRxGenericConfig+0x2c8>)
 8009826:	6819      	ldr	r1, [r3, #0]
 8009828:	f107 0314 	add.w	r3, r7, #20
 800982c:	4a57      	ldr	r2, [pc, #348]	; (800998c <RadioSetRxGenericConfig+0x2cc>)
 800982e:	4618      	mov	r0, r3
 8009830:	f001 fd48 	bl	800b2c4 <RFW_Init>
 8009834:	4603      	mov	r3, r0
 8009836:	2b00      	cmp	r3, #0
 8009838:	d002      	beq.n	8009840 <RadioSetRxGenericConfig+0x180>
                return -1;
 800983a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800983e:	e0f9      	b.n	8009a34 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009840:	4b50      	ldr	r3, [pc, #320]	; (8009984 <RadioSetRxGenericConfig+0x2c4>)
 8009842:	2200      	movs	r2, #0
 8009844:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009846:	4b4f      	ldr	r3, [pc, #316]	; (8009984 <RadioSetRxGenericConfig+0x2c4>)
 8009848:	2201      	movs	r2, #1
 800984a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800984c:	4b4d      	ldr	r3, [pc, #308]	; (8009984 <RadioSetRxGenericConfig+0x2c4>)
 800984e:	2200      	movs	r2, #0
 8009850:	755a      	strb	r2, [r3, #21]
        {
 8009852:	e00e      	b.n	8009872 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800985a:	4b4a      	ldr	r3, [pc, #296]	; (8009984 <RadioSetRxGenericConfig+0x2c4>)
 800985c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8009864:	4b47      	ldr	r3, [pc, #284]	; (8009984 <RadioSetRxGenericConfig+0x2c4>)
 8009866:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800986e:	4b45      	ldr	r3, [pc, #276]	; (8009984 <RadioSetRxGenericConfig+0x2c4>)
 8009870:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8009872:	f7ff fa6e 	bl	8008d52 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8009876:	2000      	movs	r0, #0
 8009878:	f7fe fc0a 	bl	8008090 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800987c:	4844      	ldr	r0, [pc, #272]	; (8009990 <RadioSetRxGenericConfig+0x2d0>)
 800987e:	f001 f82d 	bl	800a8dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009882:	4844      	ldr	r0, [pc, #272]	; (8009994 <RadioSetRxGenericConfig+0x2d4>)
 8009884:	f001 f8fc 	bl	800aa80 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009888:	f107 0320 	add.w	r3, r7, #32
 800988c:	4618      	mov	r0, r3
 800988e:	f000 fbc0 	bl	800a012 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	8b9b      	ldrh	r3, [r3, #28]
 8009896:	4618      	mov	r0, r3
 8009898:	f000 fc0a 	bl	800a0b0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	8b1b      	ldrh	r3, [r3, #24]
 80098a0:	4618      	mov	r0, r3
 80098a2:	f000 fbe5 	bl	800a070 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80098ac:	fb03 f202 	mul.w	r2, r3, r2
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80098b8:	4a32      	ldr	r2, [pc, #200]	; (8009984 <RadioSetRxGenericConfig+0x2c4>)
 80098ba:	6093      	str	r3, [r2, #8]
        break;
 80098bc:	e0b9      	b.n	8009a32 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d102      	bne.n	80098cc <RadioSetRxGenericConfig+0x20c>
            return -1;
 80098c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098ca:	e0b3      	b.n	8009a34 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d104      	bne.n	80098e0 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	695b      	ldr	r3, [r3, #20]
 80098da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80098de:	e002      	b.n	80098e6 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 80098e0:	23ff      	movs	r3, #255	; 0xff
 80098e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	bf14      	ite	ne
 80098ee:	2301      	movne	r3, #1
 80098f0:	2300      	moveq	r3, #0
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	4618      	mov	r0, r3
 80098f6:	f000 fd53 	bl	800a3a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	4618      	mov	r0, r3
 8009900:	f000 fd5d 	bl	800a3be <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009904:	4b1f      	ldr	r3, [pc, #124]	; (8009984 <RadioSetRxGenericConfig+0x2c4>)
 8009906:	2201      	movs	r2, #1
 8009908:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8009912:	4b1c      	ldr	r3, [pc, #112]	; (8009984 <RadioSetRxGenericConfig+0x2c4>)
 8009914:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800991e:	4b19      	ldr	r3, [pc, #100]	; (8009984 <RadioSetRxGenericConfig+0x2c4>)
 8009920:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800992a:	4b16      	ldr	r3, [pc, #88]	; (8009984 <RadioSetRxGenericConfig+0x2c4>)
 800992c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009936:	2b02      	cmp	r3, #2
 8009938:	d010      	beq.n	800995c <RadioSetRxGenericConfig+0x29c>
 800993a:	2b02      	cmp	r3, #2
 800993c:	dc2c      	bgt.n	8009998 <RadioSetRxGenericConfig+0x2d8>
 800993e:	2b00      	cmp	r3, #0
 8009940:	d002      	beq.n	8009948 <RadioSetRxGenericConfig+0x288>
 8009942:	2b01      	cmp	r3, #1
 8009944:	d005      	beq.n	8009952 <RadioSetRxGenericConfig+0x292>
            break;
 8009946:	e027      	b.n	8009998 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009948:	4b0e      	ldr	r3, [pc, #56]	; (8009984 <RadioSetRxGenericConfig+0x2c4>)
 800994a:	2200      	movs	r2, #0
 800994c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009950:	e023      	b.n	800999a <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009952:	4b0c      	ldr	r3, [pc, #48]	; (8009984 <RadioSetRxGenericConfig+0x2c4>)
 8009954:	2201      	movs	r2, #1
 8009956:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800995a:	e01e      	b.n	800999a <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009962:	2b0b      	cmp	r3, #11
 8009964:	d004      	beq.n	8009970 <RadioSetRxGenericConfig+0x2b0>
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800996c:	2b0c      	cmp	r3, #12
 800996e:	d104      	bne.n	800997a <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009970:	4b04      	ldr	r3, [pc, #16]	; (8009984 <RadioSetRxGenericConfig+0x2c4>)
 8009972:	2201      	movs	r2, #1
 8009974:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009978:	e00f      	b.n	800999a <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800997a:	4b02      	ldr	r3, [pc, #8]	; (8009984 <RadioSetRxGenericConfig+0x2c4>)
 800997c:	2200      	movs	r2, #0
 800997e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009982:	e00a      	b.n	800999a <RadioSetRxGenericConfig+0x2da>
 8009984:	2000096c 	.word	0x2000096c
 8009988:	20000968 	.word	0x20000968
 800998c:	200009e0 	.word	0x200009e0
 8009990:	200009a4 	.word	0x200009a4
 8009994:	2000097a 	.word	0x2000097a
            break;
 8009998:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800999a:	4b28      	ldr	r3, [pc, #160]	; (8009a3c <RadioSetRxGenericConfig+0x37c>)
 800999c:	2201      	movs	r2, #1
 800999e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80099a4:	4b25      	ldr	r3, [pc, #148]	; (8009a3c <RadioSetRxGenericConfig+0x37c>)
 80099a6:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80099ae:	4b23      	ldr	r3, [pc, #140]	; (8009a3c <RadioSetRxGenericConfig+0x37c>)
 80099b0:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80099b2:	4a22      	ldr	r2, [pc, #136]	; (8009a3c <RadioSetRxGenericConfig+0x37c>)
 80099b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099b8:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80099c0:	4b1e      	ldr	r3, [pc, #120]	; (8009a3c <RadioSetRxGenericConfig+0x37c>)
 80099c2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80099cc:	4b1b      	ldr	r3, [pc, #108]	; (8009a3c <RadioSetRxGenericConfig+0x37c>)
 80099ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 80099d2:	f7ff f9be 	bl	8008d52 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80099d6:	2001      	movs	r0, #1
 80099d8:	f7fe fb5a 	bl	8008090 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80099dc:	4818      	ldr	r0, [pc, #96]	; (8009a40 <RadioSetRxGenericConfig+0x380>)
 80099de:	f000 ff7d 	bl	800a8dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80099e2:	4818      	ldr	r0, [pc, #96]	; (8009a44 <RadioSetRxGenericConfig+0x384>)
 80099e4:	f001 f84c 	bl	800aa80 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80099e8:	4b14      	ldr	r3, [pc, #80]	; (8009a3c <RadioSetRxGenericConfig+0x37c>)
 80099ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d10d      	bne.n	8009a0e <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80099f2:	f240 7036 	movw	r0, #1846	; 0x736
 80099f6:	f001 f99f 	bl	800ad38 <SUBGRF_ReadRegister>
 80099fa:	4603      	mov	r3, r0
 80099fc:	f023 0304 	bic.w	r3, r3, #4
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	4619      	mov	r1, r3
 8009a04:	f240 7036 	movw	r0, #1846	; 0x736
 8009a08:	f001 f982 	bl	800ad10 <SUBGRF_WriteRegister>
 8009a0c:	e00c      	b.n	8009a28 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8009a0e:	f240 7036 	movw	r0, #1846	; 0x736
 8009a12:	f001 f991 	bl	800ad38 <SUBGRF_ReadRegister>
 8009a16:	4603      	mov	r3, r0
 8009a18:	f043 0304 	orr.w	r3, r3, #4
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	4619      	mov	r1, r3
 8009a20:	f240 7036 	movw	r0, #1846	; 0x736
 8009a24:	f001 f974 	bl	800ad10 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8009a28:	4b04      	ldr	r3, [pc, #16]	; (8009a3c <RadioSetRxGenericConfig+0x37c>)
 8009a2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a2e:	609a      	str	r2, [r3, #8]
        break;
 8009a30:	bf00      	nop
    }
    return status;
 8009a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3730      	adds	r7, #48	; 0x30
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	2000096c 	.word	0x2000096c
 8009a40:	200009a4 	.word	0x200009a4
 8009a44:	2000097a 	.word	0x2000097a

08009a48 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b08e      	sub	sp, #56	; 0x38
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	60b9      	str	r1, [r7, #8]
 8009a50:	607b      	str	r3, [r7, #4]
 8009a52:	4603      	mov	r3, r0
 8009a54:	73fb      	strb	r3, [r7, #15]
 8009a56:	4613      	mov	r3, r2
 8009a58:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a5e:	2300      	movs	r3, #0
 8009a60:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8009a62:	f001 fc3c 	bl	800b2de <RFW_DeInit>
    switch( modem )
 8009a66:	7bfb      	ldrb	r3, [r7, #15]
 8009a68:	2b03      	cmp	r3, #3
 8009a6a:	f200 8204 	bhi.w	8009e76 <RadioSetTxGenericConfig+0x42e>
 8009a6e:	a201      	add	r2, pc, #4	; (adr r2, 8009a74 <RadioSetTxGenericConfig+0x2c>)
 8009a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a74:	08009bf9 	.word	0x08009bf9
 8009a78:	08009d41 	.word	0x08009d41
 8009a7c:	08009e39 	.word	0x08009e39
 8009a80:	08009a85 	.word	0x08009a85
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	7c9b      	ldrb	r3, [r3, #18]
 8009a88:	2b08      	cmp	r3, #8
 8009a8a:	d902      	bls.n	8009a92 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8009a8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a90:	e206      	b.n	8009ea0 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	6899      	ldr	r1, [r3, #8]
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	7c9b      	ldrb	r3, [r3, #18]
 8009a9a:	b29a      	uxth	r2, r3
 8009a9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f001 fdb3 	bl	800b60c <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d102      	bne.n	8009ab4 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8009aae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ab2:	e1f5      	b.n	8009ea0 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f242 7210 	movw	r2, #10000	; 0x2710
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d813      	bhi.n	8009ae8 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8009ac0:	2302      	movs	r3, #2
 8009ac2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8009ac6:	4b99      	ldr	r3, [pc, #612]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009ac8:	2203      	movs	r2, #3
 8009aca:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8009acc:	4b97      	ldr	r3, [pc, #604]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009ace:	2203      	movs	r2, #3
 8009ad0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a94      	ldr	r2, [pc, #592]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009ada:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	7cda      	ldrb	r2, [r3, #19]
 8009ae0:	4b92      	ldr	r3, [pc, #584]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ae6:	e017      	b.n	8009b18 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009aee:	4b8f      	ldr	r3, [pc, #572]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009af0:	2200      	movs	r2, #0
 8009af2:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009af4:	4b8d      	ldr	r3, [pc, #564]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009af6:	2200      	movs	r2, #0
 8009af8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a8a      	ldr	r2, [pc, #552]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009b02:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	7cda      	ldrb	r2, [r3, #19]
 8009b08:	4b88      	ldr	r3, [pc, #544]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009b0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	089b      	lsrs	r3, r3, #2
 8009b14:	4a85      	ldr	r2, [pc, #532]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009b16:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	00db      	lsls	r3, r3, #3
 8009b20:	b29a      	uxth	r2, r3
 8009b22:	4b82      	ldr	r3, [pc, #520]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009b24:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8009b26:	4b81      	ldr	r3, [pc, #516]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009b28:	2204      	movs	r2, #4
 8009b2a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	7c9b      	ldrb	r3, [r3, #18]
 8009b30:	00db      	lsls	r3, r3, #3
 8009b32:	b2da      	uxtb	r2, r3
 8009b34:	4b7d      	ldr	r3, [pc, #500]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009b36:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8009b38:	4b7c      	ldr	r3, [pc, #496]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	7d9b      	ldrb	r3, [r3, #22]
 8009b42:	2b02      	cmp	r3, #2
 8009b44:	d003      	beq.n	8009b4e <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	7d1b      	ldrb	r3, [r3, #20]
 8009b4a:	2b02      	cmp	r3, #2
 8009b4c:	d12b      	bne.n	8009ba6 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	7d5b      	ldrb	r3, [r3, #21]
 8009b52:	2bf1      	cmp	r3, #241	; 0xf1
 8009b54:	d00a      	beq.n	8009b6c <RadioSetTxGenericConfig+0x124>
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	7d5b      	ldrb	r3, [r3, #21]
 8009b5a:	2bf2      	cmp	r3, #242	; 0xf2
 8009b5c:	d006      	beq.n	8009b6c <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	7d5b      	ldrb	r3, [r3, #21]
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d002      	beq.n	8009b6c <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8009b66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b6a:	e199      	b.n	8009ea0 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8009b70:	2301      	movs	r3, #1
 8009b72:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8009b76:	4b6e      	ldr	r3, [pc, #440]	; (8009d30 <RadioSetTxGenericConfig+0x2e8>)
 8009b78:	6819      	ldr	r1, [r3, #0]
 8009b7a:	f107 0320 	add.w	r3, r7, #32
 8009b7e:	4a6d      	ldr	r2, [pc, #436]	; (8009d34 <RadioSetTxGenericConfig+0x2ec>)
 8009b80:	4618      	mov	r0, r3
 8009b82:	f001 fb9f 	bl	800b2c4 <RFW_Init>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d002      	beq.n	8009b92 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8009b8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b90:	e186      	b.n	8009ea0 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009b92:	4b66      	ldr	r3, [pc, #408]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009b94:	2200      	movs	r2, #0
 8009b96:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009b98:	4b64      	ldr	r3, [pc, #400]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009b9e:	4b63      	ldr	r3, [pc, #396]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	755a      	strb	r2, [r3, #21]
        {
 8009ba4:	e00b      	b.n	8009bbe <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	7d5a      	ldrb	r2, [r3, #21]
 8009baa:	4b60      	ldr	r3, [pc, #384]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009bac:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	7d9a      	ldrb	r2, [r3, #22]
 8009bb2:	4b5e      	ldr	r3, [pc, #376]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009bb4:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	7d1a      	ldrb	r2, [r3, #20]
 8009bba:	4b5c      	ldr	r3, [pc, #368]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009bbc:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8009bbe:	f7ff f8c8 	bl	8008d52 <RadioStandby>
        RadioSetModem( radio_modem );
 8009bc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f7fe fa62 	bl	8008090 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009bcc:	485a      	ldr	r0, [pc, #360]	; (8009d38 <RadioSetTxGenericConfig+0x2f0>)
 8009bce:	f000 fe85 	bl	800a8dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009bd2:	485a      	ldr	r0, [pc, #360]	; (8009d3c <RadioSetTxGenericConfig+0x2f4>)
 8009bd4:	f000 ff54 	bl	800aa80 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009bd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f000 fa18 	bl	800a012 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	8a1b      	ldrh	r3, [r3, #16]
 8009be6:	4618      	mov	r0, r3
 8009be8:	f000 fa62 	bl	800a0b0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	899b      	ldrh	r3, [r3, #12]
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f000 fa3d 	bl	800a070 <SUBGRF_SetCrcPolynomial>
        break;
 8009bf6:	e13f      	b.n	8009e78 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d102      	bne.n	8009c06 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8009c00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c04:	e14c      	b.n	8009ea0 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	7c9b      	ldrb	r3, [r3, #18]
 8009c0a:	2b08      	cmp	r3, #8
 8009c0c:	d902      	bls.n	8009c14 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8009c0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c12:	e145      	b.n	8009ea0 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	6899      	ldr	r1, [r3, #8]
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	7c9b      	ldrb	r3, [r3, #18]
 8009c1c:	b29a      	uxth	r2, r3
 8009c1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c22:	4618      	mov	r0, r3
 8009c24:	f001 fcf2 	bl	800b60c <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009c28:	4b40      	ldr	r3, [pc, #256]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a3d      	ldr	r2, [pc, #244]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009c36:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	7cda      	ldrb	r2, [r3, #19]
 8009c3c:	4b3b      	ldr	r3, [pc, #236]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009c3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	699b      	ldr	r3, [r3, #24]
 8009c46:	4a39      	ldr	r2, [pc, #228]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009c48:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009c4a:	4b38      	ldr	r3, [pc, #224]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	00db      	lsls	r3, r3, #3
 8009c58:	b29a      	uxth	r2, r3
 8009c5a:	4b34      	ldr	r3, [pc, #208]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009c5c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8009c5e:	4b33      	ldr	r3, [pc, #204]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009c60:	2204      	movs	r2, #4
 8009c62:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	7c9b      	ldrb	r3, [r3, #18]
 8009c68:	00db      	lsls	r3, r3, #3
 8009c6a:	b2da      	uxtb	r2, r3
 8009c6c:	4b2f      	ldr	r3, [pc, #188]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009c6e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8009c70:	4b2e      	ldr	r3, [pc, #184]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009c72:	2200      	movs	r2, #0
 8009c74:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	7d9b      	ldrb	r3, [r3, #22]
 8009c7a:	2b02      	cmp	r3, #2
 8009c7c:	d003      	beq.n	8009c86 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	7d1b      	ldrb	r3, [r3, #20]
 8009c82:	2b02      	cmp	r3, #2
 8009c84:	d12a      	bne.n	8009cdc <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	7d5b      	ldrb	r3, [r3, #21]
 8009c8a:	2bf1      	cmp	r3, #241	; 0xf1
 8009c8c:	d00a      	beq.n	8009ca4 <RadioSetTxGenericConfig+0x25c>
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	7d5b      	ldrb	r3, [r3, #21]
 8009c92:	2bf2      	cmp	r3, #242	; 0xf2
 8009c94:	d006      	beq.n	8009ca4 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	7d5b      	ldrb	r3, [r3, #21]
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d002      	beq.n	8009ca4 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8009c9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ca2:	e0fd      	b.n	8009ea0 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8009cac:	4b20      	ldr	r3, [pc, #128]	; (8009d30 <RadioSetTxGenericConfig+0x2e8>)
 8009cae:	6819      	ldr	r1, [r3, #0]
 8009cb0:	f107 0314 	add.w	r3, r7, #20
 8009cb4:	4a1f      	ldr	r2, [pc, #124]	; (8009d34 <RadioSetTxGenericConfig+0x2ec>)
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f001 fb04 	bl	800b2c4 <RFW_Init>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d002      	beq.n	8009cc8 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 8009cc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cc6:	e0eb      	b.n	8009ea0 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009cc8:	4b18      	ldr	r3, [pc, #96]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009cca:	2200      	movs	r2, #0
 8009ccc:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009cce:	4b17      	ldr	r3, [pc, #92]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009cd4:	4b15      	ldr	r3, [pc, #84]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	755a      	strb	r2, [r3, #21]
        {
 8009cda:	e00b      	b.n	8009cf4 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	7d5a      	ldrb	r2, [r3, #21]
 8009ce0:	4b12      	ldr	r3, [pc, #72]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009ce2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	7d9a      	ldrb	r2, [r3, #22]
 8009ce8:	4b10      	ldr	r3, [pc, #64]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009cea:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	7d1a      	ldrb	r2, [r3, #20]
 8009cf0:	4b0e      	ldr	r3, [pc, #56]	; (8009d2c <RadioSetTxGenericConfig+0x2e4>)
 8009cf2:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8009cf4:	f7ff f82d 	bl	8008d52 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8009cf8:	2000      	movs	r0, #0
 8009cfa:	f7fe f9c9 	bl	8008090 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009cfe:	480e      	ldr	r0, [pc, #56]	; (8009d38 <RadioSetTxGenericConfig+0x2f0>)
 8009d00:	f000 fdec 	bl	800a8dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009d04:	480d      	ldr	r0, [pc, #52]	; (8009d3c <RadioSetTxGenericConfig+0x2f4>)
 8009d06:	f000 febb 	bl	800aa80 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009d0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f000 f97f 	bl	800a012 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	8a1b      	ldrh	r3, [r3, #16]
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f000 f9c9 	bl	800a0b0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	899b      	ldrh	r3, [r3, #12]
 8009d22:	4618      	mov	r0, r3
 8009d24:	f000 f9a4 	bl	800a070 <SUBGRF_SetCrcPolynomial>
        break;
 8009d28:	e0a6      	b.n	8009e78 <RadioSetTxGenericConfig+0x430>
 8009d2a:	bf00      	nop
 8009d2c:	2000096c 	.word	0x2000096c
 8009d30:	20000968 	.word	0x20000968
 8009d34:	200009c8 	.word	0x200009c8
 8009d38:	200009a4 	.word	0x200009a4
 8009d3c:	2000097a 	.word	0x2000097a
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009d40:	4b59      	ldr	r3, [pc, #356]	; (8009ea8 <RadioSetTxGenericConfig+0x460>)
 8009d42:	2201      	movs	r2, #1
 8009d44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	781a      	ldrb	r2, [r3, #0]
 8009d4c:	4b56      	ldr	r3, [pc, #344]	; (8009ea8 <RadioSetTxGenericConfig+0x460>)
 8009d4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	785a      	ldrb	r2, [r3, #1]
 8009d56:	4b54      	ldr	r3, [pc, #336]	; (8009ea8 <RadioSetTxGenericConfig+0x460>)
 8009d58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	789a      	ldrb	r2, [r3, #2]
 8009d60:	4b51      	ldr	r3, [pc, #324]	; (8009ea8 <RadioSetTxGenericConfig+0x460>)
 8009d62:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	78db      	ldrb	r3, [r3, #3]
 8009d6a:	2b02      	cmp	r3, #2
 8009d6c:	d010      	beq.n	8009d90 <RadioSetTxGenericConfig+0x348>
 8009d6e:	2b02      	cmp	r3, #2
 8009d70:	dc20      	bgt.n	8009db4 <RadioSetTxGenericConfig+0x36c>
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d002      	beq.n	8009d7c <RadioSetTxGenericConfig+0x334>
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d005      	beq.n	8009d86 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 8009d7a:	e01b      	b.n	8009db4 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009d7c:	4b4a      	ldr	r3, [pc, #296]	; (8009ea8 <RadioSetTxGenericConfig+0x460>)
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009d84:	e017      	b.n	8009db6 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009d86:	4b48      	ldr	r3, [pc, #288]	; (8009ea8 <RadioSetTxGenericConfig+0x460>)
 8009d88:	2201      	movs	r2, #1
 8009d8a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009d8e:	e012      	b.n	8009db6 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	781b      	ldrb	r3, [r3, #0]
 8009d94:	2b0b      	cmp	r3, #11
 8009d96:	d003      	beq.n	8009da0 <RadioSetTxGenericConfig+0x358>
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	2b0c      	cmp	r3, #12
 8009d9e:	d104      	bne.n	8009daa <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009da0:	4b41      	ldr	r3, [pc, #260]	; (8009ea8 <RadioSetTxGenericConfig+0x460>)
 8009da2:	2201      	movs	r2, #1
 8009da4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009da8:	e005      	b.n	8009db6 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009daa:	4b3f      	ldr	r3, [pc, #252]	; (8009ea8 <RadioSetTxGenericConfig+0x460>)
 8009dac:	2200      	movs	r2, #0
 8009dae:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009db2:	e000      	b.n	8009db6 <RadioSetTxGenericConfig+0x36e>
            break;
 8009db4:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009db6:	4b3c      	ldr	r3, [pc, #240]	; (8009ea8 <RadioSetTxGenericConfig+0x460>)
 8009db8:	2201      	movs	r2, #1
 8009dba:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	889a      	ldrh	r2, [r3, #4]
 8009dc0:	4b39      	ldr	r3, [pc, #228]	; (8009ea8 <RadioSetTxGenericConfig+0x460>)
 8009dc2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	799a      	ldrb	r2, [r3, #6]
 8009dc8:	4b37      	ldr	r3, [pc, #220]	; (8009ea8 <RadioSetTxGenericConfig+0x460>)
 8009dca:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	79da      	ldrb	r2, [r3, #7]
 8009dd0:	4b35      	ldr	r3, [pc, #212]	; (8009ea8 <RadioSetTxGenericConfig+0x460>)
 8009dd2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	7a1a      	ldrb	r2, [r3, #8]
 8009dda:	4b33      	ldr	r3, [pc, #204]	; (8009ea8 <RadioSetTxGenericConfig+0x460>)
 8009ddc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 8009de0:	f7fe ffb7 	bl	8008d52 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8009de4:	2001      	movs	r0, #1
 8009de6:	f7fe f953 	bl	8008090 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009dea:	4830      	ldr	r0, [pc, #192]	; (8009eac <RadioSetTxGenericConfig+0x464>)
 8009dec:	f000 fd76 	bl	800a8dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009df0:	482f      	ldr	r0, [pc, #188]	; (8009eb0 <RadioSetTxGenericConfig+0x468>)
 8009df2:	f000 fe45 	bl	800aa80 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8009df6:	4b2c      	ldr	r3, [pc, #176]	; (8009ea8 <RadioSetTxGenericConfig+0x460>)
 8009df8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009dfc:	2b06      	cmp	r3, #6
 8009dfe:	d10d      	bne.n	8009e1c <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8009e00:	f640 0089 	movw	r0, #2185	; 0x889
 8009e04:	f000 ff98 	bl	800ad38 <SUBGRF_ReadRegister>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	f023 0304 	bic.w	r3, r3, #4
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	4619      	mov	r1, r3
 8009e12:	f640 0089 	movw	r0, #2185	; 0x889
 8009e16:	f000 ff7b 	bl	800ad10 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 8009e1a:	e02d      	b.n	8009e78 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8009e1c:	f640 0089 	movw	r0, #2185	; 0x889
 8009e20:	f000 ff8a 	bl	800ad38 <SUBGRF_ReadRegister>
 8009e24:	4603      	mov	r3, r0
 8009e26:	f043 0304 	orr.w	r3, r3, #4
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	f640 0089 	movw	r0, #2185	; 0x889
 8009e32:	f000 ff6d 	bl	800ad10 <SUBGRF_WriteRegister>
        break;
 8009e36:	e01f      	b.n	8009e78 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d004      	beq.n	8009e4a <RadioSetTxGenericConfig+0x402>
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e48:	d902      	bls.n	8009e50 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8009e4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e4e:	e027      	b.n	8009ea0 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8009e50:	2003      	movs	r0, #3
 8009e52:	f7fe f91d 	bl	8008090 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8009e56:	4b14      	ldr	r3, [pc, #80]	; (8009ea8 <RadioSetTxGenericConfig+0x460>)
 8009e58:	2202      	movs	r2, #2
 8009e5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a11      	ldr	r2, [pc, #68]	; (8009ea8 <RadioSetTxGenericConfig+0x460>)
 8009e64:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8009e66:	4b10      	ldr	r3, [pc, #64]	; (8009ea8 <RadioSetTxGenericConfig+0x460>)
 8009e68:	2216      	movs	r2, #22
 8009e6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009e6e:	480f      	ldr	r0, [pc, #60]	; (8009eac <RadioSetTxGenericConfig+0x464>)
 8009e70:	f000 fd34 	bl	800a8dc <SUBGRF_SetModulationParams>
        break;
 8009e74:	e000      	b.n	8009e78 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8009e76:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8009e78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f001 f863 	bl	800af48 <SUBGRF_SetRfTxPower>
 8009e82:	4603      	mov	r3, r0
 8009e84:	461a      	mov	r2, r3
 8009e86:	4b08      	ldr	r3, [pc, #32]	; (8009ea8 <RadioSetTxGenericConfig+0x460>)
 8009e88:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8009e8c:	4b06      	ldr	r3, [pc, #24]	; (8009ea8 <RadioSetTxGenericConfig+0x460>)
 8009e8e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009e92:	4618      	mov	r0, r3
 8009e94:	f001 fa37 	bl	800b306 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8009e98:	4a03      	ldr	r2, [pc, #12]	; (8009ea8 <RadioSetTxGenericConfig+0x460>)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6053      	str	r3, [r2, #4]
    return 0;
 8009e9e:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3738      	adds	r7, #56	; 0x38
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}
 8009ea8:	2000096c 	.word	0x2000096c
 8009eac:	200009a4 	.word	0x200009a4
 8009eb0:	2000097a 	.word	0x2000097a

08009eb4 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b085      	sub	sp, #20
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8009ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3714      	adds	r7, #20
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bc80      	pop	{r7}
 8009eca:	4770      	bx	lr

08009ecc <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009ed6:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8009ed8:	4618      	mov	r0, r3
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bc80      	pop	{r7}
 8009ee0:	4770      	bx	lr
	...

08009ee4 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d002      	beq.n	8009ef8 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8009ef2:	4a1d      	ldr	r2, [pc, #116]	; (8009f68 <SUBGRF_Init+0x84>)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8009ef8:	f7f8 fda6 	bl	8002a48 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8009efc:	2002      	movs	r0, #2
 8009efe:	f001 f8ff 	bl	800b100 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8009f02:	4b1a      	ldr	r3, [pc, #104]	; (8009f6c <SUBGRF_Init+0x88>)
 8009f04:	2200      	movs	r2, #0
 8009f06:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8009f08:	2000      	movs	r0, #0
 8009f0a:	f000 f97d 	bl	800a208 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8009f0e:	f001 fb52 	bl	800b5b6 <RBI_IsTCXO>
 8009f12:	4603      	mov	r3, r0
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d10e      	bne.n	8009f36 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8009f18:	2140      	movs	r1, #64	; 0x40
 8009f1a:	2001      	movs	r0, #1
 8009f1c:	f000 fb82 	bl	800a624 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8009f20:	2100      	movs	r1, #0
 8009f22:	f640 1011 	movw	r0, #2321	; 0x911
 8009f26:	f000 fef3 	bl	800ad10 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8009f2a:	237f      	movs	r3, #127	; 0x7f
 8009f2c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8009f2e:	7b38      	ldrb	r0, [r7, #12]
 8009f30:	f000 fa8b 	bl	800a44a <SUBGRF_Calibrate>
 8009f34:	e009      	b.n	8009f4a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8009f36:	2120      	movs	r1, #32
 8009f38:	f640 1011 	movw	r0, #2321	; 0x911
 8009f3c:	f000 fee8 	bl	800ad10 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8009f40:	2120      	movs	r1, #32
 8009f42:	f640 1012 	movw	r0, #2322	; 0x912
 8009f46:	f000 fee3 	bl	800ad10 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009f4a:	210e      	movs	r1, #14
 8009f4c:	f640 101f 	movw	r0, #2335	; 0x91f
 8009f50:	f000 fede 	bl	800ad10 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8009f54:	f001 fa86 	bl	800b464 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8009f58:	4b05      	ldr	r3, [pc, #20]	; (8009f70 <SUBGRF_Init+0x8c>)
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	701a      	strb	r2, [r3, #0]
}
 8009f5e:	bf00      	nop
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	20000a04 	.word	0x20000a04
 8009f6c:	20000a00 	.word	0x20000a00
 8009f70:	200009f8 	.word	0x200009f8

08009f74 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8009f74:	b480      	push	{r7}
 8009f76:	af00      	add	r7, sp, #0
    return OperatingMode;
 8009f78:	4b02      	ldr	r3, [pc, #8]	; (8009f84 <SUBGRF_GetOperatingMode+0x10>)
 8009f7a:	781b      	ldrb	r3, [r3, #0]
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bc80      	pop	{r7}
 8009f82:	4770      	bx	lr
 8009f84:	200009f8 	.word	0x200009f8

08009f88 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	460b      	mov	r3, r1
 8009f92:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8009f94:	78fb      	ldrb	r3, [r7, #3]
 8009f96:	461a      	mov	r2, r3
 8009f98:	6879      	ldr	r1, [r7, #4]
 8009f9a:	2000      	movs	r0, #0
 8009f9c:	f000 ff24 	bl	800ade8 <SUBGRF_WriteBuffer>
}
 8009fa0:	bf00      	nop
 8009fa2:	3708      	adds	r7, #8
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b086      	sub	sp, #24
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8009fba:	f107 0317 	add.w	r3, r7, #23
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	68b8      	ldr	r0, [r7, #8]
 8009fc2:	f000 fe27 	bl	800ac14 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	79fa      	ldrb	r2, [r7, #7]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d201      	bcs.n	8009fd4 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	e007      	b.n	8009fe4 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8009fd4:	7df8      	ldrb	r0, [r7, #23]
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	461a      	mov	r2, r3
 8009fdc:	68f9      	ldr	r1, [r7, #12]
 8009fde:	f000 ff25 	bl	800ae2c <SUBGRF_ReadBuffer>

    return 0;
 8009fe2:	2300      	movs	r3, #0
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3718      	adds	r7, #24
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	60f8      	str	r0, [r7, #12]
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	607a      	str	r2, [r7, #4]
 8009ff8:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8009ffa:	7afb      	ldrb	r3, [r7, #11]
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	68f8      	ldr	r0, [r7, #12]
 800a000:	f7ff ffc2 	bl	8009f88 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f000 f91b 	bl	800a240 <SUBGRF_SetTx>
}
 800a00a:	bf00      	nop
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b082      	sub	sp, #8
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800a01a:	2208      	movs	r2, #8
 800a01c:	6879      	ldr	r1, [r7, #4]
 800a01e:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 800a022:	f000 fe9d 	bl	800ad60 <SUBGRF_WriteRegisters>
    return 0;
 800a026:	2300      	movs	r3, #0
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3708      	adds	r7, #8
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	4603      	mov	r3, r0
 800a038:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800a03a:	88fb      	ldrh	r3, [r7, #6]
 800a03c:	0a1b      	lsrs	r3, r3, #8
 800a03e:	b29b      	uxth	r3, r3
 800a040:	b2db      	uxtb	r3, r3
 800a042:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800a044:	88fb      	ldrh	r3, [r7, #6]
 800a046:	b2db      	uxtb	r3, r3
 800a048:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800a04a:	f000 fb6f 	bl	800a72c <SUBGRF_GetPacketType>
 800a04e:	4603      	mov	r3, r0
 800a050:	2b00      	cmp	r3, #0
 800a052:	d108      	bne.n	800a066 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800a054:	f107 030c 	add.w	r3, r7, #12
 800a058:	2202      	movs	r2, #2
 800a05a:	4619      	mov	r1, r3
 800a05c:	f240 60bc 	movw	r0, #1724	; 0x6bc
 800a060:	f000 fe7e 	bl	800ad60 <SUBGRF_WriteRegisters>
            break;
 800a064:	e000      	b.n	800a068 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800a066:	bf00      	nop
    }
}
 800a068:	bf00      	nop
 800a06a:	3710      	adds	r7, #16
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	4603      	mov	r3, r0
 800a078:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800a07a:	88fb      	ldrh	r3, [r7, #6]
 800a07c:	0a1b      	lsrs	r3, r3, #8
 800a07e:	b29b      	uxth	r3, r3
 800a080:	b2db      	uxtb	r3, r3
 800a082:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800a084:	88fb      	ldrh	r3, [r7, #6]
 800a086:	b2db      	uxtb	r3, r3
 800a088:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800a08a:	f000 fb4f 	bl	800a72c <SUBGRF_GetPacketType>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b00      	cmp	r3, #0
 800a092:	d108      	bne.n	800a0a6 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800a094:	f107 030c 	add.w	r3, r7, #12
 800a098:	2202      	movs	r2, #2
 800a09a:	4619      	mov	r1, r3
 800a09c:	f240 60be 	movw	r0, #1726	; 0x6be
 800a0a0:	f000 fe5e 	bl	800ad60 <SUBGRF_WriteRegisters>
            break;
 800a0a4:	e000      	b.n	800a0a8 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800a0a6:	bf00      	nop
    }
}
 800a0a8:	bf00      	nop
 800a0aa:	3710      	adds	r7, #16
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800a0be:	f000 fb35 	bl	800a72c <SUBGRF_GetPacketType>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d121      	bne.n	800a10c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800a0c8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800a0cc:	f000 fe34 	bl	800ad38 <SUBGRF_ReadRegister>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	f023 0301 	bic.w	r3, r3, #1
 800a0d6:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800a0d8:	88fb      	ldrh	r3, [r7, #6]
 800a0da:	0a1b      	lsrs	r3, r3, #8
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	b25b      	sxtb	r3, r3
 800a0e0:	f003 0301 	and.w	r3, r3, #1
 800a0e4:	b25a      	sxtb	r2, r3
 800a0e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	b25b      	sxtb	r3, r3
 800a0ee:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800a0f0:	7bfb      	ldrb	r3, [r7, #15]
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800a0f8:	f000 fe0a 	bl	800ad10 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800a0fc:	88fb      	ldrh	r3, [r7, #6]
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	4619      	mov	r1, r3
 800a102:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800a106:	f000 fe03 	bl	800ad10 <SUBGRF_WriteRegister>
            break;
 800a10a:	e000      	b.n	800a10e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800a10c:	bf00      	nop
    }
}
 800a10e:	bf00      	nop
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b082      	sub	sp, #8
 800a11a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800a11c:	2300      	movs	r3, #0
 800a11e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800a120:	2300      	movs	r3, #0
 800a122:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800a124:	2300      	movs	r3, #0
 800a126:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800a128:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800a12c:	f000 fe04 	bl	800ad38 <SUBGRF_ReadRegister>
 800a130:	4603      	mov	r3, r0
 800a132:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800a134:	79fb      	ldrb	r3, [r7, #7]
 800a136:	f023 0301 	bic.w	r3, r3, #1
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	4619      	mov	r1, r3
 800a13e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800a142:	f000 fde5 	bl	800ad10 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800a146:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800a14a:	f000 fdf5 	bl	800ad38 <SUBGRF_ReadRegister>
 800a14e:	4603      	mov	r3, r0
 800a150:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800a152:	79bb      	ldrb	r3, [r7, #6]
 800a154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	4619      	mov	r1, r3
 800a15c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800a160:	f000 fdd6 	bl	800ad10 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800a164:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800a168:	f000 f88a 	bl	800a280 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800a16c:	463b      	mov	r3, r7
 800a16e:	2204      	movs	r2, #4
 800a170:	4619      	mov	r1, r3
 800a172:	f640 0019 	movw	r0, #2073	; 0x819
 800a176:	f000 fe15 	bl	800ada4 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800a17a:	2000      	movs	r0, #0
 800a17c:	f000 f844 	bl	800a208 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800a180:	79fb      	ldrb	r3, [r7, #7]
 800a182:	4619      	mov	r1, r3
 800a184:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800a188:	f000 fdc2 	bl	800ad10 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800a18c:	79bb      	ldrb	r3, [r7, #6]
 800a18e:	4619      	mov	r1, r3
 800a190:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800a194:	f000 fdbc 	bl	800ad10 <SUBGRF_WriteRegister>

    return number;
 800a198:	683b      	ldr	r3, [r7, #0]
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3708      	adds	r7, #8
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
	...

0800a1a4 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800a1ac:	2000      	movs	r0, #0
 800a1ae:	f001 f999 	bl	800b4e4 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800a1b2:	2002      	movs	r0, #2
 800a1b4:	f000 ffa4 	bl	800b100 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a1b8:	793b      	ldrb	r3, [r7, #4]
 800a1ba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a1be:	b2db      	uxtb	r3, r3
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800a1c4:	793b      	ldrb	r3, [r7, #4]
 800a1c6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a1ce:	b25b      	sxtb	r3, r3
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800a1d4:	793b      	ldrb	r3, [r7, #4]
 800a1d6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	b25b      	sxtb	r3, r3
 800a1e2:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a1e4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800a1e6:	f107 030f 	add.w	r3, r7, #15
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	2084      	movs	r0, #132	; 0x84
 800a1f0:	f000 fe3e 	bl	800ae70 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800a1f4:	4b03      	ldr	r3, [pc, #12]	; (800a204 <SUBGRF_SetSleep+0x60>)
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	701a      	strb	r2, [r3, #0]
}
 800a1fa:	bf00      	nop
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	200009f8 	.word	0x200009f8

0800a208 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	4603      	mov	r3, r0
 800a210:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800a212:	1dfb      	adds	r3, r7, #7
 800a214:	2201      	movs	r2, #1
 800a216:	4619      	mov	r1, r3
 800a218:	2080      	movs	r0, #128	; 0x80
 800a21a:	f000 fe29 	bl	800ae70 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800a21e:	79fb      	ldrb	r3, [r7, #7]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d103      	bne.n	800a22c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800a224:	4b05      	ldr	r3, [pc, #20]	; (800a23c <SUBGRF_SetStandby+0x34>)
 800a226:	2201      	movs	r2, #1
 800a228:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800a22a:	e002      	b.n	800a232 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800a22c:	4b03      	ldr	r3, [pc, #12]	; (800a23c <SUBGRF_SetStandby+0x34>)
 800a22e:	2202      	movs	r2, #2
 800a230:	701a      	strb	r2, [r3, #0]
}
 800a232:	bf00      	nop
 800a234:	3708      	adds	r7, #8
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	200009f8 	.word	0x200009f8

0800a240 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b084      	sub	sp, #16
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800a248:	4b0c      	ldr	r3, [pc, #48]	; (800a27c <SUBGRF_SetTx+0x3c>)
 800a24a:	2204      	movs	r2, #4
 800a24c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	0c1b      	lsrs	r3, r3, #16
 800a252:	b2db      	uxtb	r3, r3
 800a254:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	0a1b      	lsrs	r3, r3, #8
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	b2db      	uxtb	r3, r3
 800a262:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800a264:	f107 030c 	add.w	r3, r7, #12
 800a268:	2203      	movs	r2, #3
 800a26a:	4619      	mov	r1, r3
 800a26c:	2083      	movs	r0, #131	; 0x83
 800a26e:	f000 fdff 	bl	800ae70 <SUBGRF_WriteCommand>
}
 800a272:	bf00      	nop
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	200009f8 	.word	0x200009f8

0800a280 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800a288:	4b0c      	ldr	r3, [pc, #48]	; (800a2bc <SUBGRF_SetRx+0x3c>)
 800a28a:	2205      	movs	r2, #5
 800a28c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	0c1b      	lsrs	r3, r3, #16
 800a292:	b2db      	uxtb	r3, r3
 800a294:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	0a1b      	lsrs	r3, r3, #8
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800a2a4:	f107 030c 	add.w	r3, r7, #12
 800a2a8:	2203      	movs	r2, #3
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	2082      	movs	r0, #130	; 0x82
 800a2ae:	f000 fddf 	bl	800ae70 <SUBGRF_WriteCommand>
}
 800a2b2:	bf00      	nop
 800a2b4:	3710      	adds	r7, #16
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	200009f8 	.word	0x200009f8

0800a2c0 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b084      	sub	sp, #16
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800a2c8:	4b0e      	ldr	r3, [pc, #56]	; (800a304 <SUBGRF_SetRxBoosted+0x44>)
 800a2ca:	2205      	movs	r2, #5
 800a2cc:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800a2ce:	2197      	movs	r1, #151	; 0x97
 800a2d0:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800a2d4:	f000 fd1c 	bl	800ad10 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	0c1b      	lsrs	r3, r3, #16
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	0a1b      	lsrs	r3, r3, #8
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800a2ee:	f107 030c 	add.w	r3, r7, #12
 800a2f2:	2203      	movs	r2, #3
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	2082      	movs	r0, #130	; 0x82
 800a2f8:	f000 fdba 	bl	800ae70 <SUBGRF_WriteCommand>
}
 800a2fc:	bf00      	nop
 800a2fe:	3710      	adds	r7, #16
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	200009f8 	.word	0x200009f8

0800a308 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	0c1b      	lsrs	r3, r3, #16
 800a316:	b2db      	uxtb	r3, r3
 800a318:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	0a1b      	lsrs	r3, r3, #8
 800a31e:	b2db      	uxtb	r3, r3
 800a320:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	b2db      	uxtb	r3, r3
 800a326:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	0c1b      	lsrs	r3, r3, #16
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	0a1b      	lsrs	r3, r3, #8
 800a334:	b2db      	uxtb	r3, r3
 800a336:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800a33e:	f107 0308 	add.w	r3, r7, #8
 800a342:	2206      	movs	r2, #6
 800a344:	4619      	mov	r1, r3
 800a346:	2094      	movs	r0, #148	; 0x94
 800a348:	f000 fd92 	bl	800ae70 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800a34c:	4b03      	ldr	r3, [pc, #12]	; (800a35c <SUBGRF_SetRxDutyCycle+0x54>)
 800a34e:	2206      	movs	r2, #6
 800a350:	701a      	strb	r2, [r3, #0]
}
 800a352:	bf00      	nop
 800a354:	3710      	adds	r7, #16
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	200009f8 	.word	0x200009f8

0800a360 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800a360:	b580      	push	{r7, lr}
 800a362:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800a364:	2200      	movs	r2, #0
 800a366:	2100      	movs	r1, #0
 800a368:	20c5      	movs	r0, #197	; 0xc5
 800a36a:	f000 fd81 	bl	800ae70 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800a36e:	4b02      	ldr	r3, [pc, #8]	; (800a378 <SUBGRF_SetCad+0x18>)
 800a370:	2207      	movs	r2, #7
 800a372:	701a      	strb	r2, [r3, #0]
}
 800a374:	bf00      	nop
 800a376:	bd80      	pop	{r7, pc}
 800a378:	200009f8 	.word	0x200009f8

0800a37c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800a380:	2200      	movs	r2, #0
 800a382:	2100      	movs	r1, #0
 800a384:	20d1      	movs	r0, #209	; 0xd1
 800a386:	f000 fd73 	bl	800ae70 <SUBGRF_WriteCommand>
}
 800a38a:	bf00      	nop
 800a38c:	bd80      	pop	{r7, pc}

0800a38e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800a38e:	b580      	push	{r7, lr}
 800a390:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800a392:	2200      	movs	r2, #0
 800a394:	2100      	movs	r1, #0
 800a396:	20d2      	movs	r0, #210	; 0xd2
 800a398:	f000 fd6a 	bl	800ae70 <SUBGRF_WriteCommand>
}
 800a39c:	bf00      	nop
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800a3aa:	1dfb      	adds	r3, r7, #7
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	209f      	movs	r0, #159	; 0x9f
 800a3b2:	f000 fd5d 	bl	800ae70 <SUBGRF_WriteCommand>
}
 800a3b6:	bf00      	nop
 800a3b8:	3708      	adds	r7, #8
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}

0800a3be <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800a3be:	b580      	push	{r7, lr}
 800a3c0:	b084      	sub	sp, #16
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800a3c8:	1dfb      	adds	r3, r7, #7
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	20a0      	movs	r0, #160	; 0xa0
 800a3d0:	f000 fd4e 	bl	800ae70 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800a3d4:	79fb      	ldrb	r3, [r7, #7]
 800a3d6:	2b3f      	cmp	r3, #63	; 0x3f
 800a3d8:	d91c      	bls.n	800a414 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800a3da:	79fb      	ldrb	r3, [r7, #7]
 800a3dc:	085b      	lsrs	r3, r3, #1
 800a3de:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800a3e8:	e005      	b.n	800a3f6 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800a3ea:	7bfb      	ldrb	r3, [r7, #15]
 800a3ec:	089b      	lsrs	r3, r3, #2
 800a3ee:	73fb      	strb	r3, [r7, #15]
            exp++;
 800a3f0:	7bbb      	ldrb	r3, [r7, #14]
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800a3f6:	7bfb      	ldrb	r3, [r7, #15]
 800a3f8:	2b1f      	cmp	r3, #31
 800a3fa:	d8f6      	bhi.n	800a3ea <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800a3fc:	7bfb      	ldrb	r3, [r7, #15]
 800a3fe:	00db      	lsls	r3, r3, #3
 800a400:	b2da      	uxtb	r2, r3
 800a402:	7bbb      	ldrb	r3, [r7, #14]
 800a404:	4413      	add	r3, r2
 800a406:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800a408:	7b7b      	ldrb	r3, [r7, #13]
 800a40a:	4619      	mov	r1, r3
 800a40c:	f240 7006 	movw	r0, #1798	; 0x706
 800a410:	f000 fc7e 	bl	800ad10 <SUBGRF_WriteRegister>
    }
}
 800a414:	bf00      	nop
 800a416:	3710      	adds	r7, #16
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800a422:	f001 f8d3 	bl	800b5cc <RBI_IsDCDC>
 800a426:	4603      	mov	r3, r0
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d102      	bne.n	800a432 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800a42c:	2301      	movs	r3, #1
 800a42e:	71fb      	strb	r3, [r7, #7]
 800a430:	e001      	b.n	800a436 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800a432:	2300      	movs	r3, #0
 800a434:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800a436:	1dfb      	adds	r3, r7, #7
 800a438:	2201      	movs	r2, #1
 800a43a:	4619      	mov	r1, r3
 800a43c:	2096      	movs	r0, #150	; 0x96
 800a43e:	f000 fd17 	bl	800ae70 <SUBGRF_WriteCommand>
}
 800a442:	bf00      	nop
 800a444:	3708      	adds	r7, #8
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b084      	sub	sp, #16
 800a44e:	af00      	add	r7, sp, #0
 800a450:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a452:	793b      	ldrb	r3, [r7, #4]
 800a454:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	019b      	lsls	r3, r3, #6
 800a45c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a45e:	793b      	ldrb	r3, [r7, #4]
 800a460:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a464:	b2db      	uxtb	r3, r3
 800a466:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a468:	b25b      	sxtb	r3, r3
 800a46a:	4313      	orrs	r3, r2
 800a46c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a46e:	793b      	ldrb	r3, [r7, #4]
 800a470:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a474:	b2db      	uxtb	r3, r3
 800a476:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a478:	b25b      	sxtb	r3, r3
 800a47a:	4313      	orrs	r3, r2
 800a47c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a47e:	793b      	ldrb	r3, [r7, #4]
 800a480:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a484:	b2db      	uxtb	r3, r3
 800a486:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a488:	b25b      	sxtb	r3, r3
 800a48a:	4313      	orrs	r3, r2
 800a48c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a48e:	793b      	ldrb	r3, [r7, #4]
 800a490:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a494:	b2db      	uxtb	r3, r3
 800a496:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a498:	b25b      	sxtb	r3, r3
 800a49a:	4313      	orrs	r3, r2
 800a49c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800a49e:	793b      	ldrb	r3, [r7, #4]
 800a4a0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a4a8:	b25b      	sxtb	r3, r3
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800a4ae:	793b      	ldrb	r3, [r7, #4]
 800a4b0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	b25b      	sxtb	r3, r3
 800a4bc:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a4be:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800a4c0:	f107 030f 	add.w	r3, r7, #15
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	2089      	movs	r0, #137	; 0x89
 800a4ca:	f000 fcd1 	bl	800ae70 <SUBGRF_WriteCommand>
}
 800a4ce:	bf00      	nop
 800a4d0:	3710      	adds	r7, #16
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
	...

0800a4d8 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	4a1d      	ldr	r2, [pc, #116]	; (800a558 <SUBGRF_CalibrateImage+0x80>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d904      	bls.n	800a4f2 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800a4e8:	23e1      	movs	r3, #225	; 0xe1
 800a4ea:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800a4ec:	23e9      	movs	r3, #233	; 0xe9
 800a4ee:	737b      	strb	r3, [r7, #13]
 800a4f0:	e027      	b.n	800a542 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	4a19      	ldr	r2, [pc, #100]	; (800a55c <SUBGRF_CalibrateImage+0x84>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d904      	bls.n	800a504 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800a4fa:	23d7      	movs	r3, #215	; 0xd7
 800a4fc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800a4fe:	23db      	movs	r3, #219	; 0xdb
 800a500:	737b      	strb	r3, [r7, #13]
 800a502:	e01e      	b.n	800a542 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	4a16      	ldr	r2, [pc, #88]	; (800a560 <SUBGRF_CalibrateImage+0x88>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d904      	bls.n	800a516 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800a50c:	23c1      	movs	r3, #193	; 0xc1
 800a50e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800a510:	23c5      	movs	r3, #197	; 0xc5
 800a512:	737b      	strb	r3, [r7, #13]
 800a514:	e015      	b.n	800a542 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	4a12      	ldr	r2, [pc, #72]	; (800a564 <SUBGRF_CalibrateImage+0x8c>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d904      	bls.n	800a528 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800a51e:	2375      	movs	r3, #117	; 0x75
 800a520:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800a522:	2381      	movs	r3, #129	; 0x81
 800a524:	737b      	strb	r3, [r7, #13]
 800a526:	e00c      	b.n	800a542 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	4a0f      	ldr	r2, [pc, #60]	; (800a568 <SUBGRF_CalibrateImage+0x90>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d904      	bls.n	800a53a <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 800a530:	236b      	movs	r3, #107	; 0x6b
 800a532:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800a534:	236f      	movs	r3, #111	; 0x6f
 800a536:	737b      	strb	r3, [r7, #13]
 800a538:	e003      	b.n	800a542 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800a53a:	2329      	movs	r3, #41	; 0x29
 800a53c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800a53e:	232b      	movs	r3, #43	; 0x2b
 800a540:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800a542:	f107 030c 	add.w	r3, r7, #12
 800a546:	2202      	movs	r2, #2
 800a548:	4619      	mov	r1, r3
 800a54a:	2098      	movs	r0, #152	; 0x98
 800a54c:	f000 fc90 	bl	800ae70 <SUBGRF_WriteCommand>
}
 800a550:	bf00      	nop
 800a552:	3710      	adds	r7, #16
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	35a4e900 	.word	0x35a4e900
 800a55c:	32a9f880 	.word	0x32a9f880
 800a560:	2de54480 	.word	0x2de54480
 800a564:	1b6b0b00 	.word	0x1b6b0b00
 800a568:	1954fc40 	.word	0x1954fc40

0800a56c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800a56c:	b590      	push	{r4, r7, lr}
 800a56e:	b085      	sub	sp, #20
 800a570:	af00      	add	r7, sp, #0
 800a572:	4604      	mov	r4, r0
 800a574:	4608      	mov	r0, r1
 800a576:	4611      	mov	r1, r2
 800a578:	461a      	mov	r2, r3
 800a57a:	4623      	mov	r3, r4
 800a57c:	71fb      	strb	r3, [r7, #7]
 800a57e:	4603      	mov	r3, r0
 800a580:	71bb      	strb	r3, [r7, #6]
 800a582:	460b      	mov	r3, r1
 800a584:	717b      	strb	r3, [r7, #5]
 800a586:	4613      	mov	r3, r2
 800a588:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800a58a:	79fb      	ldrb	r3, [r7, #7]
 800a58c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800a58e:	79bb      	ldrb	r3, [r7, #6]
 800a590:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800a592:	797b      	ldrb	r3, [r7, #5]
 800a594:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800a596:	793b      	ldrb	r3, [r7, #4]
 800a598:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800a59a:	f107 030c 	add.w	r3, r7, #12
 800a59e:	2204      	movs	r2, #4
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	2095      	movs	r0, #149	; 0x95
 800a5a4:	f000 fc64 	bl	800ae70 <SUBGRF_WriteCommand>
}
 800a5a8:	bf00      	nop
 800a5aa:	3714      	adds	r7, #20
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd90      	pop	{r4, r7, pc}

0800a5b0 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800a5b0:	b590      	push	{r4, r7, lr}
 800a5b2:	b085      	sub	sp, #20
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	4604      	mov	r4, r0
 800a5b8:	4608      	mov	r0, r1
 800a5ba:	4611      	mov	r1, r2
 800a5bc:	461a      	mov	r2, r3
 800a5be:	4623      	mov	r3, r4
 800a5c0:	80fb      	strh	r3, [r7, #6]
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	80bb      	strh	r3, [r7, #4]
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	807b      	strh	r3, [r7, #2]
 800a5ca:	4613      	mov	r3, r2
 800a5cc:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800a5ce:	88fb      	ldrh	r3, [r7, #6]
 800a5d0:	0a1b      	lsrs	r3, r3, #8
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800a5d8:	88fb      	ldrh	r3, [r7, #6]
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800a5de:	88bb      	ldrh	r3, [r7, #4]
 800a5e0:	0a1b      	lsrs	r3, r3, #8
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800a5e8:	88bb      	ldrh	r3, [r7, #4]
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800a5ee:	887b      	ldrh	r3, [r7, #2]
 800a5f0:	0a1b      	lsrs	r3, r3, #8
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800a5f8:	887b      	ldrh	r3, [r7, #2]
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800a5fe:	883b      	ldrh	r3, [r7, #0]
 800a600:	0a1b      	lsrs	r3, r3, #8
 800a602:	b29b      	uxth	r3, r3
 800a604:	b2db      	uxtb	r3, r3
 800a606:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800a608:	883b      	ldrh	r3, [r7, #0]
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800a60e:	f107 0308 	add.w	r3, r7, #8
 800a612:	2208      	movs	r2, #8
 800a614:	4619      	mov	r1, r3
 800a616:	2008      	movs	r0, #8
 800a618:	f000 fc2a 	bl	800ae70 <SUBGRF_WriteCommand>
}
 800a61c:	bf00      	nop
 800a61e:	3714      	adds	r7, #20
 800a620:	46bd      	mov	sp, r7
 800a622:	bd90      	pop	{r4, r7, pc}

0800a624 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
 800a62a:	4603      	mov	r3, r0
 800a62c:	6039      	str	r1, [r7, #0]
 800a62e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800a630:	79fb      	ldrb	r3, [r7, #7]
 800a632:	f003 0307 	and.w	r3, r3, #7
 800a636:	b2db      	uxtb	r3, r3
 800a638:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	0c1b      	lsrs	r3, r3, #16
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	0a1b      	lsrs	r3, r3, #8
 800a646:	b2db      	uxtb	r3, r3
 800a648:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800a650:	f107 030c 	add.w	r3, r7, #12
 800a654:	2204      	movs	r2, #4
 800a656:	4619      	mov	r1, r3
 800a658:	2097      	movs	r0, #151	; 0x97
 800a65a:	f000 fc09 	bl	800ae70 <SUBGRF_WriteCommand>
}
 800a65e:	bf00      	nop
 800a660:	3710      	adds	r7, #16
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
	...

0800a668 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800a668:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a66c:	b084      	sub	sp, #16
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800a672:	2300      	movs	r3, #0
 800a674:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800a676:	4b1d      	ldr	r3, [pc, #116]	; (800a6ec <SUBGRF_SetRfFrequency+0x84>)
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	f083 0301 	eor.w	r3, r3, #1
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	2b00      	cmp	r3, #0
 800a682:	d005      	beq.n	800a690 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f7ff ff27 	bl	800a4d8 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800a68a:	4b18      	ldr	r3, [pc, #96]	; (800a6ec <SUBGRF_SetRfFrequency+0x84>)
 800a68c:	2201      	movs	r2, #1
 800a68e:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2200      	movs	r2, #0
 800a694:	461c      	mov	r4, r3
 800a696:	4615      	mov	r5, r2
 800a698:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800a69c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800a6a0:	4a13      	ldr	r2, [pc, #76]	; (800a6f0 <SUBGRF_SetRfFrequency+0x88>)
 800a6a2:	f04f 0300 	mov.w	r3, #0
 800a6a6:	4640      	mov	r0, r8
 800a6a8:	4649      	mov	r1, r9
 800a6aa:	f7f5 fdb9 	bl	8000220 <__aeabi_uldivmod>
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	4613      	mov	r3, r2
 800a6b4:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	0e1b      	lsrs	r3, r3, #24
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	0c1b      	lsrs	r3, r3, #16
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	0a1b      	lsrs	r3, r3, #8
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800a6d4:	f107 0308 	add.w	r3, r7, #8
 800a6d8:	2204      	movs	r2, #4
 800a6da:	4619      	mov	r1, r3
 800a6dc:	2086      	movs	r0, #134	; 0x86
 800a6de:	f000 fbc7 	bl	800ae70 <SUBGRF_WriteCommand>
}
 800a6e2:	bf00      	nop
 800a6e4:	3710      	adds	r7, #16
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a6ec:	20000a00 	.word	0x20000a00
 800a6f0:	01e84800 	.word	0x01e84800

0800a6f4 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b082      	sub	sp, #8
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800a6fe:	79fa      	ldrb	r2, [r7, #7]
 800a700:	4b09      	ldr	r3, [pc, #36]	; (800a728 <SUBGRF_SetPacketType+0x34>)
 800a702:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800a704:	79fb      	ldrb	r3, [r7, #7]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d104      	bne.n	800a714 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800a70a:	2100      	movs	r1, #0
 800a70c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800a710:	f000 fafe 	bl	800ad10 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800a714:	1dfb      	adds	r3, r7, #7
 800a716:	2201      	movs	r2, #1
 800a718:	4619      	mov	r1, r3
 800a71a:	208a      	movs	r0, #138	; 0x8a
 800a71c:	f000 fba8 	bl	800ae70 <SUBGRF_WriteCommand>
}
 800a720:	bf00      	nop
 800a722:	3708      	adds	r7, #8
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}
 800a728:	200009f9 	.word	0x200009f9

0800a72c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800a72c:	b480      	push	{r7}
 800a72e:	af00      	add	r7, sp, #0
    return PacketType;
 800a730:	4b02      	ldr	r3, [pc, #8]	; (800a73c <SUBGRF_GetPacketType+0x10>)
 800a732:	781b      	ldrb	r3, [r3, #0]
}
 800a734:	4618      	mov	r0, r3
 800a736:	46bd      	mov	sp, r7
 800a738:	bc80      	pop	{r7}
 800a73a:	4770      	bx	lr
 800a73c:	200009f9 	.word	0x200009f9

0800a740 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b084      	sub	sp, #16
 800a744:	af00      	add	r7, sp, #0
 800a746:	4603      	mov	r3, r0
 800a748:	71fb      	strb	r3, [r7, #7]
 800a74a:	460b      	mov	r3, r1
 800a74c:	71bb      	strb	r3, [r7, #6]
 800a74e:	4613      	mov	r3, r2
 800a750:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800a752:	79fb      	ldrb	r3, [r7, #7]
 800a754:	2b01      	cmp	r3, #1
 800a756:	d149      	bne.n	800a7ec <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800a758:	2000      	movs	r0, #0
 800a75a:	f000 ff42 	bl	800b5e2 <RBI_GetRFOMaxPowerConfig>
 800a75e:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 800a760:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a764:	68fa      	ldr	r2, [r7, #12]
 800a766:	429a      	cmp	r2, r3
 800a768:	da01      	bge.n	800a76e <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2b0e      	cmp	r3, #14
 800a772:	d10e      	bne.n	800a792 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800a774:	2301      	movs	r3, #1
 800a776:	2201      	movs	r2, #1
 800a778:	2100      	movs	r1, #0
 800a77a:	2004      	movs	r0, #4
 800a77c:	f7ff fef6 	bl	800a56c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a780:	79ba      	ldrb	r2, [r7, #6]
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	b2db      	uxtb	r3, r3
 800a786:	1ad3      	subs	r3, r2, r3
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	330e      	adds	r3, #14
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	71bb      	strb	r3, [r7, #6]
 800a790:	e01f      	b.n	800a7d2 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2b0a      	cmp	r3, #10
 800a796:	d10e      	bne.n	800a7b6 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800a798:	2301      	movs	r3, #1
 800a79a:	2201      	movs	r2, #1
 800a79c:	2100      	movs	r1, #0
 800a79e:	2001      	movs	r0, #1
 800a7a0:	f7ff fee4 	bl	800a56c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800a7a4:	79ba      	ldrb	r2, [r7, #6]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	1ad3      	subs	r3, r2, r3
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	330d      	adds	r3, #13
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	71bb      	strb	r3, [r7, #6]
 800a7b4:	e00d      	b.n	800a7d2 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	2100      	movs	r1, #0
 800a7bc:	2007      	movs	r0, #7
 800a7be:	f7ff fed5 	bl	800a56c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a7c2:	79ba      	ldrb	r2, [r7, #6]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	1ad3      	subs	r3, r2, r3
 800a7ca:	b2db      	uxtb	r3, r3
 800a7cc:	330e      	adds	r3, #14
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800a7d2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a7d6:	f113 0f11 	cmn.w	r3, #17
 800a7da:	da01      	bge.n	800a7e0 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800a7dc:	23ef      	movs	r3, #239	; 0xef
 800a7de:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800a7e0:	2118      	movs	r1, #24
 800a7e2:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800a7e6:	f000 fa93 	bl	800ad10 <SUBGRF_WriteRegister>
 800a7ea:	e067      	b.n	800a8bc <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800a7ec:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800a7f0:	f000 faa2 	bl	800ad38 <SUBGRF_ReadRegister>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	f043 031e 	orr.w	r3, r3, #30
 800a7fa:	b2db      	uxtb	r3, r3
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800a802:	f000 fa85 	bl	800ad10 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800a806:	2001      	movs	r0, #1
 800a808:	f000 feeb 	bl	800b5e2 <RBI_GetRFOMaxPowerConfig>
 800a80c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800a80e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a812:	68fa      	ldr	r2, [r7, #12]
 800a814:	429a      	cmp	r2, r3
 800a816:	da01      	bge.n	800a81c <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2b14      	cmp	r3, #20
 800a820:	d10e      	bne.n	800a840 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800a822:	2301      	movs	r3, #1
 800a824:	2200      	movs	r2, #0
 800a826:	2105      	movs	r1, #5
 800a828:	2003      	movs	r0, #3
 800a82a:	f7ff fe9f 	bl	800a56c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a82e:	79ba      	ldrb	r2, [r7, #6]
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	b2db      	uxtb	r3, r3
 800a834:	1ad3      	subs	r3, r2, r3
 800a836:	b2db      	uxtb	r3, r3
 800a838:	3316      	adds	r3, #22
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	71bb      	strb	r3, [r7, #6]
 800a83e:	e031      	b.n	800a8a4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2b11      	cmp	r3, #17
 800a844:	d10e      	bne.n	800a864 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800a846:	2301      	movs	r3, #1
 800a848:	2200      	movs	r2, #0
 800a84a:	2103      	movs	r1, #3
 800a84c:	2002      	movs	r0, #2
 800a84e:	f7ff fe8d 	bl	800a56c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a852:	79ba      	ldrb	r2, [r7, #6]
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	b2db      	uxtb	r3, r3
 800a858:	1ad3      	subs	r3, r2, r3
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	3316      	adds	r3, #22
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	71bb      	strb	r3, [r7, #6]
 800a862:	e01f      	b.n	800a8a4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2b0e      	cmp	r3, #14
 800a868:	d10e      	bne.n	800a888 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800a86a:	2301      	movs	r3, #1
 800a86c:	2200      	movs	r2, #0
 800a86e:	2102      	movs	r1, #2
 800a870:	2002      	movs	r0, #2
 800a872:	f7ff fe7b 	bl	800a56c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a876:	79ba      	ldrb	r2, [r7, #6]
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	1ad3      	subs	r3, r2, r3
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	330e      	adds	r3, #14
 800a882:	b2db      	uxtb	r3, r3
 800a884:	71bb      	strb	r3, [r7, #6]
 800a886:	e00d      	b.n	800a8a4 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800a888:	2301      	movs	r3, #1
 800a88a:	2200      	movs	r2, #0
 800a88c:	2107      	movs	r1, #7
 800a88e:	2004      	movs	r0, #4
 800a890:	f7ff fe6c 	bl	800a56c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a894:	79ba      	ldrb	r2, [r7, #6]
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	1ad3      	subs	r3, r2, r3
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	3316      	adds	r3, #22
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800a8a4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a8a8:	f113 0f09 	cmn.w	r3, #9
 800a8ac:	da01      	bge.n	800a8b2 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800a8ae:	23f7      	movs	r3, #247	; 0xf7
 800a8b0:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800a8b2:	2138      	movs	r1, #56	; 0x38
 800a8b4:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800a8b8:	f000 fa2a 	bl	800ad10 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800a8bc:	79bb      	ldrb	r3, [r7, #6]
 800a8be:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 800a8c0:	797b      	ldrb	r3, [r7, #5]
 800a8c2:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800a8c4:	f107 0308 	add.w	r3, r7, #8
 800a8c8:	2202      	movs	r2, #2
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	208e      	movs	r0, #142	; 0x8e
 800a8ce:	f000 facf 	bl	800ae70 <SUBGRF_WriteCommand>
}
 800a8d2:	bf00      	nop
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
	...

0800a8dc <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800a8dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a8e0:	b086      	sub	sp, #24
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800a8ea:	4a61      	ldr	r2, [pc, #388]	; (800aa70 <SUBGRF_SetModulationParams+0x194>)
 800a8ec:	f107 0308 	add.w	r3, r7, #8
 800a8f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a8f4:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	781a      	ldrb	r2, [r3, #0]
 800a8fc:	4b5d      	ldr	r3, [pc, #372]	; (800aa74 <SUBGRF_SetModulationParams+0x198>)
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	429a      	cmp	r2, r3
 800a902:	d004      	beq.n	800a90e <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	781b      	ldrb	r3, [r3, #0]
 800a908:	4618      	mov	r0, r3
 800a90a:	f7ff fef3 	bl	800a6f4 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	2b03      	cmp	r3, #3
 800a914:	f200 80a5 	bhi.w	800aa62 <SUBGRF_SetModulationParams+0x186>
 800a918:	a201      	add	r2, pc, #4	; (adr r2, 800a920 <SUBGRF_SetModulationParams+0x44>)
 800a91a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a91e:	bf00      	nop
 800a920:	0800a931 	.word	0x0800a931
 800a924:	0800a9f1 	.word	0x0800a9f1
 800a928:	0800a9b3 	.word	0x0800a9b3
 800a92c:	0800aa1f 	.word	0x0800aa1f
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800a930:	2308      	movs	r3, #8
 800a932:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	4a4f      	ldr	r2, [pc, #316]	; (800aa78 <SUBGRF_SetModulationParams+0x19c>)
 800a93a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a93e:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	0c1b      	lsrs	r3, r3, #16
 800a944:	b2db      	uxtb	r3, r3
 800a946:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	0a1b      	lsrs	r3, r3, #8
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	b2db      	uxtb	r3, r3
 800a954:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	7b1b      	ldrb	r3, [r3, #12]
 800a95a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	7b5b      	ldrb	r3, [r3, #13]
 800a960:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	689b      	ldr	r3, [r3, #8]
 800a966:	2200      	movs	r2, #0
 800a968:	461c      	mov	r4, r3
 800a96a:	4615      	mov	r5, r2
 800a96c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800a970:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800a974:	4a41      	ldr	r2, [pc, #260]	; (800aa7c <SUBGRF_SetModulationParams+0x1a0>)
 800a976:	f04f 0300 	mov.w	r3, #0
 800a97a:	4640      	mov	r0, r8
 800a97c:	4649      	mov	r1, r9
 800a97e:	f7f5 fc4f 	bl	8000220 <__aeabi_uldivmod>
 800a982:	4602      	mov	r2, r0
 800a984:	460b      	mov	r3, r1
 800a986:	4613      	mov	r3, r2
 800a988:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	0c1b      	lsrs	r3, r3, #16
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	0a1b      	lsrs	r3, r3, #8
 800a996:	b2db      	uxtb	r3, r3
 800a998:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a9a0:	7cfb      	ldrb	r3, [r7, #19]
 800a9a2:	b29a      	uxth	r2, r3
 800a9a4:	f107 0308 	add.w	r3, r7, #8
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	208b      	movs	r0, #139	; 0x8b
 800a9ac:	f000 fa60 	bl	800ae70 <SUBGRF_WriteCommand>
        break;
 800a9b0:	e058      	b.n	800aa64 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800a9b2:	2304      	movs	r3, #4
 800a9b4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	4a2f      	ldr	r2, [pc, #188]	; (800aa78 <SUBGRF_SetModulationParams+0x19c>)
 800a9bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9c0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	0c1b      	lsrs	r3, r3, #16
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	0a1b      	lsrs	r3, r3, #8
 800a9ce:	b2db      	uxtb	r3, r3
 800a9d0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	7d1b      	ldrb	r3, [r3, #20]
 800a9dc:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a9de:	7cfb      	ldrb	r3, [r7, #19]
 800a9e0:	b29a      	uxth	r2, r3
 800a9e2:	f107 0308 	add.w	r3, r7, #8
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	208b      	movs	r0, #139	; 0x8b
 800a9ea:	f000 fa41 	bl	800ae70 <SUBGRF_WriteCommand>
        break;
 800a9ee:	e039      	b.n	800aa64 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800a9f0:	2304      	movs	r3, #4
 800a9f2:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	7e1b      	ldrb	r3, [r3, #24]
 800a9f8:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	7e5b      	ldrb	r3, [r3, #25]
 800a9fe:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	7e9b      	ldrb	r3, [r3, #26]
 800aa04:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	7edb      	ldrb	r3, [r3, #27]
 800aa0a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800aa0c:	7cfb      	ldrb	r3, [r7, #19]
 800aa0e:	b29a      	uxth	r2, r3
 800aa10:	f107 0308 	add.w	r3, r7, #8
 800aa14:	4619      	mov	r1, r3
 800aa16:	208b      	movs	r0, #139	; 0x8b
 800aa18:	f000 fa2a 	bl	800ae70 <SUBGRF_WriteCommand>

        break;
 800aa1c:	e022      	b.n	800aa64 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800aa1e:	2305      	movs	r3, #5
 800aa20:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	4a14      	ldr	r2, [pc, #80]	; (800aa78 <SUBGRF_SetModulationParams+0x19c>)
 800aa28:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa2c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	0c1b      	lsrs	r3, r3, #16
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	0a1b      	lsrs	r3, r3, #8
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	7b1b      	ldrb	r3, [r3, #12]
 800aa48:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	7b5b      	ldrb	r3, [r3, #13]
 800aa4e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800aa50:	7cfb      	ldrb	r3, [r7, #19]
 800aa52:	b29a      	uxth	r2, r3
 800aa54:	f107 0308 	add.w	r3, r7, #8
 800aa58:	4619      	mov	r1, r3
 800aa5a:	208b      	movs	r0, #139	; 0x8b
 800aa5c:	f000 fa08 	bl	800ae70 <SUBGRF_WriteCommand>
        break;
 800aa60:	e000      	b.n	800aa64 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800aa62:	bf00      	nop
    }
}
 800aa64:	bf00      	nop
 800aa66:	3718      	adds	r7, #24
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800aa6e:	bf00      	nop
 800aa70:	0800cc10 	.word	0x0800cc10
 800aa74:	200009f9 	.word	0x200009f9
 800aa78:	3d090000 	.word	0x3d090000
 800aa7c:	01e84800 	.word	0x01e84800

0800aa80 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b086      	sub	sp, #24
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800aa8c:	4a48      	ldr	r2, [pc, #288]	; (800abb0 <SUBGRF_SetPacketParams+0x130>)
 800aa8e:	f107 030c 	add.w	r3, r7, #12
 800aa92:	ca07      	ldmia	r2, {r0, r1, r2}
 800aa94:	c303      	stmia	r3!, {r0, r1}
 800aa96:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	781a      	ldrb	r2, [r3, #0]
 800aa9c:	4b45      	ldr	r3, [pc, #276]	; (800abb4 <SUBGRF_SetPacketParams+0x134>)
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d004      	beq.n	800aaae <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f7ff fe23 	bl	800a6f4 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	2b03      	cmp	r3, #3
 800aab4:	d878      	bhi.n	800aba8 <SUBGRF_SetPacketParams+0x128>
 800aab6:	a201      	add	r2, pc, #4	; (adr r2, 800aabc <SUBGRF_SetPacketParams+0x3c>)
 800aab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aabc:	0800aacd 	.word	0x0800aacd
 800aac0:	0800ab5d 	.word	0x0800ab5d
 800aac4:	0800ab51 	.word	0x0800ab51
 800aac8:	0800aacd 	.word	0x0800aacd
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	7a5b      	ldrb	r3, [r3, #9]
 800aad0:	2bf1      	cmp	r3, #241	; 0xf1
 800aad2:	d10a      	bne.n	800aaea <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800aad4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800aad8:	f7ff faaa 	bl	800a030 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800aadc:	f248 0005 	movw	r0, #32773	; 0x8005
 800aae0:	f7ff fac6 	bl	800a070 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800aae4:	2302      	movs	r3, #2
 800aae6:	75bb      	strb	r3, [r7, #22]
 800aae8:	e011      	b.n	800ab0e <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	7a5b      	ldrb	r3, [r3, #9]
 800aaee:	2bf2      	cmp	r3, #242	; 0xf2
 800aaf0:	d10a      	bne.n	800ab08 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800aaf2:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800aaf6:	f7ff fa9b 	bl	800a030 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800aafa:	f241 0021 	movw	r0, #4129	; 0x1021
 800aafe:	f7ff fab7 	bl	800a070 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800ab02:	2306      	movs	r3, #6
 800ab04:	75bb      	strb	r3, [r7, #22]
 800ab06:	e002      	b.n	800ab0e <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	7a5b      	ldrb	r3, [r3, #9]
 800ab0c:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800ab0e:	2309      	movs	r3, #9
 800ab10:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	885b      	ldrh	r3, [r3, #2]
 800ab16:	0a1b      	lsrs	r3, r3, #8
 800ab18:	b29b      	uxth	r3, r3
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	885b      	ldrh	r3, [r3, #2]
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	791b      	ldrb	r3, [r3, #4]
 800ab2a:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	795b      	ldrb	r3, [r3, #5]
 800ab30:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	799b      	ldrb	r3, [r3, #6]
 800ab36:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	79db      	ldrb	r3, [r3, #7]
 800ab3c:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	7a1b      	ldrb	r3, [r3, #8]
 800ab42:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800ab44:	7dbb      	ldrb	r3, [r7, #22]
 800ab46:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	7a9b      	ldrb	r3, [r3, #10]
 800ab4c:	753b      	strb	r3, [r7, #20]
        break;
 800ab4e:	e022      	b.n	800ab96 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800ab50:	2301      	movs	r3, #1
 800ab52:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	7b1b      	ldrb	r3, [r3, #12]
 800ab58:	733b      	strb	r3, [r7, #12]
        break;
 800ab5a:	e01c      	b.n	800ab96 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800ab5c:	2306      	movs	r3, #6
 800ab5e:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	89db      	ldrh	r3, [r3, #14]
 800ab64:	0a1b      	lsrs	r3, r3, #8
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	b2db      	uxtb	r3, r3
 800ab6a:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	89db      	ldrh	r3, [r3, #14]
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	7c1a      	ldrb	r2, [r3, #16]
 800ab78:	4b0f      	ldr	r3, [pc, #60]	; (800abb8 <SUBGRF_SetPacketParams+0x138>)
 800ab7a:	4611      	mov	r1, r2
 800ab7c:	7019      	strb	r1, [r3, #0]
 800ab7e:	4613      	mov	r3, r2
 800ab80:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	7c5b      	ldrb	r3, [r3, #17]
 800ab86:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	7c9b      	ldrb	r3, [r3, #18]
 800ab8c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	7cdb      	ldrb	r3, [r3, #19]
 800ab92:	747b      	strb	r3, [r7, #17]
        break;
 800ab94:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800ab96:	7dfb      	ldrb	r3, [r7, #23]
 800ab98:	b29a      	uxth	r2, r3
 800ab9a:	f107 030c 	add.w	r3, r7, #12
 800ab9e:	4619      	mov	r1, r3
 800aba0:	208c      	movs	r0, #140	; 0x8c
 800aba2:	f000 f965 	bl	800ae70 <SUBGRF_WriteCommand>
 800aba6:	e000      	b.n	800abaa <SUBGRF_SetPacketParams+0x12a>
        return;
 800aba8:	bf00      	nop
}
 800abaa:	3718      	adds	r7, #24
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	0800cc18 	.word	0x0800cc18
 800abb4:	200009f9 	.word	0x200009f9
 800abb8:	200009fa 	.word	0x200009fa

0800abbc <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b084      	sub	sp, #16
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	4603      	mov	r3, r0
 800abc4:	460a      	mov	r2, r1
 800abc6:	71fb      	strb	r3, [r7, #7]
 800abc8:	4613      	mov	r3, r2
 800abca:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800abcc:	79fb      	ldrb	r3, [r7, #7]
 800abce:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800abd0:	79bb      	ldrb	r3, [r7, #6]
 800abd2:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800abd4:	f107 030c 	add.w	r3, r7, #12
 800abd8:	2202      	movs	r2, #2
 800abda:	4619      	mov	r1, r3
 800abdc:	208f      	movs	r0, #143	; 0x8f
 800abde:	f000 f947 	bl	800ae70 <SUBGRF_WriteCommand>
}
 800abe2:	bf00      	nop
 800abe4:	3710      	adds	r7, #16
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}

0800abea <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800abea:	b580      	push	{r7, lr}
 800abec:	b082      	sub	sp, #8
 800abee:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800abf0:	2300      	movs	r3, #0
 800abf2:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800abf4:	1d3b      	adds	r3, r7, #4
 800abf6:	2201      	movs	r2, #1
 800abf8:	4619      	mov	r1, r3
 800abfa:	2015      	movs	r0, #21
 800abfc:	f000 f95a 	bl	800aeb4 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800ac00:	793b      	ldrb	r3, [r7, #4]
 800ac02:	425b      	negs	r3, r3
 800ac04:	105b      	asrs	r3, r3, #1
 800ac06:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800ac08:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3708      	adds	r7, #8
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800ac1e:	f107 030c 	add.w	r3, r7, #12
 800ac22:	2202      	movs	r2, #2
 800ac24:	4619      	mov	r1, r3
 800ac26:	2013      	movs	r0, #19
 800ac28:	f000 f944 	bl	800aeb4 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800ac2c:	f7ff fd7e 	bl	800a72c <SUBGRF_GetPacketType>
 800ac30:	4603      	mov	r3, r0
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	d10d      	bne.n	800ac52 <SUBGRF_GetRxBufferStatus+0x3e>
 800ac36:	4b0c      	ldr	r3, [pc, #48]	; (800ac68 <SUBGRF_GetRxBufferStatus+0x54>)
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d108      	bne.n	800ac52 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800ac40:	f240 7002 	movw	r0, #1794	; 0x702
 800ac44:	f000 f878 	bl	800ad38 <SUBGRF_ReadRegister>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	701a      	strb	r2, [r3, #0]
 800ac50:	e002      	b.n	800ac58 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800ac52:	7b3a      	ldrb	r2, [r7, #12]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800ac58:	7b7a      	ldrb	r2, [r7, #13]
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	701a      	strb	r2, [r3, #0]
}
 800ac5e:	bf00      	nop
 800ac60:	3710      	adds	r7, #16
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	200009fa 	.word	0x200009fa

0800ac6c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b084      	sub	sp, #16
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800ac74:	f107 030c 	add.w	r3, r7, #12
 800ac78:	2203      	movs	r2, #3
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	2014      	movs	r0, #20
 800ac7e:	f000 f919 	bl	800aeb4 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800ac82:	f7ff fd53 	bl	800a72c <SUBGRF_GetPacketType>
 800ac86:	4603      	mov	r3, r0
 800ac88:	461a      	mov	r2, r3
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d002      	beq.n	800ac9c <SUBGRF_GetPacketStatus+0x30>
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d013      	beq.n	800acc2 <SUBGRF_GetPacketStatus+0x56>
 800ac9a:	e02a      	b.n	800acf2 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800ac9c:	7b3a      	ldrb	r2, [r7, #12]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800aca2:	7b7b      	ldrb	r3, [r7, #13]
 800aca4:	425b      	negs	r3, r3
 800aca6:	105b      	asrs	r3, r3, #1
 800aca8:	b25a      	sxtb	r2, r3
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800acae:	7bbb      	ldrb	r3, [r7, #14]
 800acb0:	425b      	negs	r3, r3
 800acb2:	105b      	asrs	r3, r3, #1
 800acb4:	b25a      	sxtb	r2, r3
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2200      	movs	r2, #0
 800acbe:	609a      	str	r2, [r3, #8]
            break;
 800acc0:	e020      	b.n	800ad04 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800acc2:	7b3b      	ldrb	r3, [r7, #12]
 800acc4:	425b      	negs	r3, r3
 800acc6:	105b      	asrs	r3, r3, #1
 800acc8:	b25a      	sxtb	r2, r3
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800acce:	7b7b      	ldrb	r3, [r7, #13]
 800acd0:	b25b      	sxtb	r3, r3
 800acd2:	3302      	adds	r3, #2
 800acd4:	109b      	asrs	r3, r3, #2
 800acd6:	b25a      	sxtb	r2, r3
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800acdc:	7bbb      	ldrb	r3, [r7, #14]
 800acde:	425b      	negs	r3, r3
 800ace0:	105b      	asrs	r3, r3, #1
 800ace2:	b25a      	sxtb	r2, r3
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800ace8:	4b08      	ldr	r3, [pc, #32]	; (800ad0c <SUBGRF_GetPacketStatus+0xa0>)
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	611a      	str	r2, [r3, #16]
            break;
 800acf0:	e008      	b.n	800ad04 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800acf2:	2214      	movs	r2, #20
 800acf4:	2100      	movs	r1, #0
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 fca7 	bl	800b64a <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	220f      	movs	r2, #15
 800ad00:	701a      	strb	r2, [r3, #0]
            break;
 800ad02:	bf00      	nop
    }
}
 800ad04:	bf00      	nop
 800ad06:	3710      	adds	r7, #16
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	200009fc 	.word	0x200009fc

0800ad10 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	4603      	mov	r3, r0
 800ad18:	460a      	mov	r2, r1
 800ad1a:	80fb      	strh	r3, [r7, #6]
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800ad20:	1d7a      	adds	r2, r7, #5
 800ad22:	88f9      	ldrh	r1, [r7, #6]
 800ad24:	2301      	movs	r3, #1
 800ad26:	4803      	ldr	r0, [pc, #12]	; (800ad34 <SUBGRF_WriteRegister+0x24>)
 800ad28:	f7fa fdaa 	bl	8005880 <HAL_SUBGHZ_WriteRegisters>
}
 800ad2c:	bf00      	nop
 800ad2e:	3708      	adds	r7, #8
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	200004c4 	.word	0x200004c4

0800ad38 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	4603      	mov	r3, r0
 800ad40:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800ad42:	f107 020f 	add.w	r2, r7, #15
 800ad46:	88f9      	ldrh	r1, [r7, #6]
 800ad48:	2301      	movs	r3, #1
 800ad4a:	4804      	ldr	r0, [pc, #16]	; (800ad5c <SUBGRF_ReadRegister+0x24>)
 800ad4c:	f7fa fdf7 	bl	800593e <HAL_SUBGHZ_ReadRegisters>
    return data;
 800ad50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3710      	adds	r7, #16
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	200004c4 	.word	0x200004c4

0800ad60 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b086      	sub	sp, #24
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	4603      	mov	r3, r0
 800ad68:	6039      	str	r1, [r7, #0]
 800ad6a:	80fb      	strh	r3, [r7, #6]
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad70:	f3ef 8310 	mrs	r3, PRIMASK
 800ad74:	60fb      	str	r3, [r7, #12]
  return(result);
 800ad76:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ad78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ad7a:	b672      	cpsid	i
}
 800ad7c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800ad7e:	88bb      	ldrh	r3, [r7, #4]
 800ad80:	88f9      	ldrh	r1, [r7, #6]
 800ad82:	683a      	ldr	r2, [r7, #0]
 800ad84:	4806      	ldr	r0, [pc, #24]	; (800ada0 <SUBGRF_WriteRegisters+0x40>)
 800ad86:	f7fa fd7b 	bl	8005880 <HAL_SUBGHZ_WriteRegisters>
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	f383 8810 	msr	PRIMASK, r3
}
 800ad94:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ad96:	bf00      	nop
 800ad98:	3718      	adds	r7, #24
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	200004c4 	.word	0x200004c4

0800ada4 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b086      	sub	sp, #24
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	4603      	mov	r3, r0
 800adac:	6039      	str	r1, [r7, #0]
 800adae:	80fb      	strh	r3, [r7, #6]
 800adb0:	4613      	mov	r3, r2
 800adb2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800adb4:	f3ef 8310 	mrs	r3, PRIMASK
 800adb8:	60fb      	str	r3, [r7, #12]
  return(result);
 800adba:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800adbc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800adbe:	b672      	cpsid	i
}
 800adc0:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800adc2:	88bb      	ldrh	r3, [r7, #4]
 800adc4:	88f9      	ldrh	r1, [r7, #6]
 800adc6:	683a      	ldr	r2, [r7, #0]
 800adc8:	4806      	ldr	r0, [pc, #24]	; (800ade4 <SUBGRF_ReadRegisters+0x40>)
 800adca:	f7fa fdb8 	bl	800593e <HAL_SUBGHZ_ReadRegisters>
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	f383 8810 	msr	PRIMASK, r3
}
 800add8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800adda:	bf00      	nop
 800addc:	3718      	adds	r7, #24
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	200004c4 	.word	0x200004c4

0800ade8 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b086      	sub	sp, #24
 800adec:	af00      	add	r7, sp, #0
 800adee:	4603      	mov	r3, r0
 800adf0:	6039      	str	r1, [r7, #0]
 800adf2:	71fb      	strb	r3, [r7, #7]
 800adf4:	4613      	mov	r3, r2
 800adf6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800adf8:	f3ef 8310 	mrs	r3, PRIMASK
 800adfc:	60fb      	str	r3, [r7, #12]
  return(result);
 800adfe:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ae00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae02:	b672      	cpsid	i
}
 800ae04:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800ae06:	79bb      	ldrb	r3, [r7, #6]
 800ae08:	b29b      	uxth	r3, r3
 800ae0a:	79f9      	ldrb	r1, [r7, #7]
 800ae0c:	683a      	ldr	r2, [r7, #0]
 800ae0e:	4806      	ldr	r0, [pc, #24]	; (800ae28 <SUBGRF_WriteBuffer+0x40>)
 800ae10:	f7fa fea9 	bl	8005b66 <HAL_SUBGHZ_WriteBuffer>
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	f383 8810 	msr	PRIMASK, r3
}
 800ae1e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ae20:	bf00      	nop
 800ae22:	3718      	adds	r7, #24
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	200004c4 	.word	0x200004c4

0800ae2c <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b086      	sub	sp, #24
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	4603      	mov	r3, r0
 800ae34:	6039      	str	r1, [r7, #0]
 800ae36:	71fb      	strb	r3, [r7, #7]
 800ae38:	4613      	mov	r3, r2
 800ae3a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae3c:	f3ef 8310 	mrs	r3, PRIMASK
 800ae40:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae42:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ae44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae46:	b672      	cpsid	i
}
 800ae48:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800ae4a:	79bb      	ldrb	r3, [r7, #6]
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	79f9      	ldrb	r1, [r7, #7]
 800ae50:	683a      	ldr	r2, [r7, #0]
 800ae52:	4806      	ldr	r0, [pc, #24]	; (800ae6c <SUBGRF_ReadBuffer+0x40>)
 800ae54:	f7fa feda 	bl	8005c0c <HAL_SUBGHZ_ReadBuffer>
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	f383 8810 	msr	PRIMASK, r3
}
 800ae62:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ae64:	bf00      	nop
 800ae66:	3718      	adds	r7, #24
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}
 800ae6c:	200004c4 	.word	0x200004c4

0800ae70 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b086      	sub	sp, #24
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	4603      	mov	r3, r0
 800ae78:	6039      	str	r1, [r7, #0]
 800ae7a:	71fb      	strb	r3, [r7, #7]
 800ae7c:	4613      	mov	r3, r2
 800ae7e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae80:	f3ef 8310 	mrs	r3, PRIMASK
 800ae84:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae86:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ae88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae8a:	b672      	cpsid	i
}
 800ae8c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800ae8e:	88bb      	ldrh	r3, [r7, #4]
 800ae90:	79f9      	ldrb	r1, [r7, #7]
 800ae92:	683a      	ldr	r2, [r7, #0]
 800ae94:	4806      	ldr	r0, [pc, #24]	; (800aeb0 <SUBGRF_WriteCommand+0x40>)
 800ae96:	f7fa fdb3 	bl	8005a00 <HAL_SUBGHZ_ExecSetCmd>
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	f383 8810 	msr	PRIMASK, r3
}
 800aea4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800aea6:	bf00      	nop
 800aea8:	3718      	adds	r7, #24
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop
 800aeb0:	200004c4 	.word	0x200004c4

0800aeb4 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b086      	sub	sp, #24
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	4603      	mov	r3, r0
 800aebc:	6039      	str	r1, [r7, #0]
 800aebe:	71fb      	strb	r3, [r7, #7]
 800aec0:	4613      	mov	r3, r2
 800aec2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aec4:	f3ef 8310 	mrs	r3, PRIMASK
 800aec8:	60fb      	str	r3, [r7, #12]
  return(result);
 800aeca:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800aecc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aece:	b672      	cpsid	i
}
 800aed0:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800aed2:	88bb      	ldrh	r3, [r7, #4]
 800aed4:	79f9      	ldrb	r1, [r7, #7]
 800aed6:	683a      	ldr	r2, [r7, #0]
 800aed8:	4806      	ldr	r0, [pc, #24]	; (800aef4 <SUBGRF_ReadCommand+0x40>)
 800aeda:	f7fa fdf0 	bl	8005abe <HAL_SUBGHZ_ExecGetCmd>
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	f383 8810 	msr	PRIMASK, r3
}
 800aee8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800aeea:	bf00      	nop
 800aeec:	3718      	adds	r7, #24
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	bf00      	nop
 800aef4:	200004c4 	.word	0x200004c4

0800aef8 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	4603      	mov	r3, r0
 800af00:	460a      	mov	r2, r1
 800af02:	71fb      	strb	r3, [r7, #7]
 800af04:	4613      	mov	r3, r2
 800af06:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800af08:	2301      	movs	r3, #1
 800af0a:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800af0c:	79bb      	ldrb	r3, [r7, #6]
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d10d      	bne.n	800af2e <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800af12:	79fb      	ldrb	r3, [r7, #7]
 800af14:	2b01      	cmp	r3, #1
 800af16:	d104      	bne.n	800af22 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800af18:	2302      	movs	r3, #2
 800af1a:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800af1c:	2004      	movs	r0, #4
 800af1e:	f000 f8ef 	bl	800b100 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800af22:	79fb      	ldrb	r3, [r7, #7]
 800af24:	2b02      	cmp	r3, #2
 800af26:	d107      	bne.n	800af38 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800af28:	2303      	movs	r3, #3
 800af2a:	73fb      	strb	r3, [r7, #15]
 800af2c:	e004      	b.n	800af38 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800af2e:	79bb      	ldrb	r3, [r7, #6]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d101      	bne.n	800af38 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800af34:	2301      	movs	r3, #1
 800af36:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800af38:	7bfb      	ldrb	r3, [r7, #15]
 800af3a:	4618      	mov	r0, r3
 800af3c:	f000 fad2 	bl	800b4e4 <RBI_ConfigRFSwitch>
}
 800af40:	bf00      	nop
 800af42:	3710      	adds	r7, #16
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	4603      	mov	r3, r0
 800af50:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800af52:	2301      	movs	r3, #1
 800af54:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800af56:	f000 fb23 	bl	800b5a0 <RBI_GetTxConfig>
 800af5a:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	2b02      	cmp	r3, #2
 800af60:	d016      	beq.n	800af90 <SUBGRF_SetRfTxPower+0x48>
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	2b02      	cmp	r3, #2
 800af66:	dc16      	bgt.n	800af96 <SUBGRF_SetRfTxPower+0x4e>
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d003      	beq.n	800af76 <SUBGRF_SetRfTxPower+0x2e>
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	2b01      	cmp	r3, #1
 800af72:	d00a      	beq.n	800af8a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800af74:	e00f      	b.n	800af96 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800af76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af7a:	2b0f      	cmp	r3, #15
 800af7c:	dd02      	ble.n	800af84 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800af7e:	2302      	movs	r3, #2
 800af80:	73fb      	strb	r3, [r7, #15]
            break;
 800af82:	e009      	b.n	800af98 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800af84:	2301      	movs	r3, #1
 800af86:	73fb      	strb	r3, [r7, #15]
            break;
 800af88:	e006      	b.n	800af98 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800af8a:	2301      	movs	r3, #1
 800af8c:	73fb      	strb	r3, [r7, #15]
            break;
 800af8e:	e003      	b.n	800af98 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800af90:	2302      	movs	r3, #2
 800af92:	73fb      	strb	r3, [r7, #15]
            break;
 800af94:	e000      	b.n	800af98 <SUBGRF_SetRfTxPower+0x50>
            break;
 800af96:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800af98:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800af9c:	7bfb      	ldrb	r3, [r7, #15]
 800af9e:	2202      	movs	r2, #2
 800afa0:	4618      	mov	r0, r3
 800afa2:	f7ff fbcd 	bl	800a740 <SUBGRF_SetTxParams>

    return paSelect;
 800afa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3710      	adds	r7, #16
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800afb0:	b480      	push	{r7}
 800afb2:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800afb4:	2301      	movs	r3, #1
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	46bd      	mov	sp, r7
 800afba:	bc80      	pop	{r7}
 800afbc:	4770      	bx	lr
	...

0800afc0 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b082      	sub	sp, #8
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800afc8:	4b03      	ldr	r3, [pc, #12]	; (800afd8 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	2001      	movs	r0, #1
 800afce:	4798      	blx	r3
}
 800afd0:	bf00      	nop
 800afd2:	3708      	adds	r7, #8
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	20000a04 	.word	0x20000a04

0800afdc <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800afe4:	4b03      	ldr	r3, [pc, #12]	; (800aff4 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	2002      	movs	r0, #2
 800afea:	4798      	blx	r3
}
 800afec:	bf00      	nop
 800afee:	3708      	adds	r7, #8
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	20000a04 	.word	0x20000a04

0800aff8 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800b000:	4b03      	ldr	r3, [pc, #12]	; (800b010 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	2040      	movs	r0, #64	; 0x40
 800b006:	4798      	blx	r3
}
 800b008:	bf00      	nop
 800b00a:	3708      	adds	r7, #8
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}
 800b010:	20000a04 	.word	0x20000a04

0800b014 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	460b      	mov	r3, r1
 800b01e:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800b020:	78fb      	ldrb	r3, [r7, #3]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d002      	beq.n	800b02c <HAL_SUBGHZ_CADStatusCallback+0x18>
 800b026:	2b01      	cmp	r3, #1
 800b028:	d005      	beq.n	800b036 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800b02a:	e00a      	b.n	800b042 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800b02c:	4b07      	ldr	r3, [pc, #28]	; (800b04c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2080      	movs	r0, #128	; 0x80
 800b032:	4798      	blx	r3
            break;
 800b034:	e005      	b.n	800b042 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800b036:	4b05      	ldr	r3, [pc, #20]	; (800b04c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b03e:	4798      	blx	r3
            break;
 800b040:	bf00      	nop
    }
}
 800b042:	bf00      	nop
 800b044:	3708      	adds	r7, #8
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
 800b04a:	bf00      	nop
 800b04c:	20000a04 	.word	0x20000a04

0800b050 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800b058:	4b04      	ldr	r3, [pc, #16]	; (800b06c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b060:	4798      	blx	r3
}
 800b062:	bf00      	nop
 800b064:	3708      	adds	r7, #8
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	20000a04 	.word	0x20000a04

0800b070 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b082      	sub	sp, #8
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800b078:	4b03      	ldr	r3, [pc, #12]	; (800b088 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2020      	movs	r0, #32
 800b07e:	4798      	blx	r3
}
 800b080:	bf00      	nop
 800b082:	3708      	adds	r7, #8
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}
 800b088:	20000a04 	.word	0x20000a04

0800b08c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800b094:	4b03      	ldr	r3, [pc, #12]	; (800b0a4 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	2004      	movs	r0, #4
 800b09a:	4798      	blx	r3
}
 800b09c:	bf00      	nop
 800b09e:	3708      	adds	r7, #8
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}
 800b0a4:	20000a04 	.word	0x20000a04

0800b0a8 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800b0b0:	4b03      	ldr	r3, [pc, #12]	; (800b0c0 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	2008      	movs	r0, #8
 800b0b6:	4798      	blx	r3
}
 800b0b8:	bf00      	nop
 800b0ba:	3708      	adds	r7, #8
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	20000a04 	.word	0x20000a04

0800b0c4 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800b0cc:	4b03      	ldr	r3, [pc, #12]	; (800b0dc <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2010      	movs	r0, #16
 800b0d2:	4798      	blx	r3
}
 800b0d4:	bf00      	nop
 800b0d6:	3708      	adds	r7, #8
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}
 800b0dc:	20000a04 	.word	0x20000a04

0800b0e0 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800b0e8:	4b04      	ldr	r3, [pc, #16]	; (800b0fc <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b0f0:	4798      	blx	r3
}
 800b0f2:	bf00      	nop
 800b0f4:	3708      	adds	r7, #8
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	20000a04 	.word	0x20000a04

0800b100 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	4603      	mov	r3, r0
 800b108:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800b10a:	f000 fa5f 	bl	800b5cc <RBI_IsDCDC>
 800b10e:	4603      	mov	r3, r0
 800b110:	2b01      	cmp	r3, #1
 800b112:	d112      	bne.n	800b13a <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800b114:	f640 1023 	movw	r0, #2339	; 0x923
 800b118:	f7ff fe0e 	bl	800ad38 <SUBGRF_ReadRegister>
 800b11c:	4603      	mov	r3, r0
 800b11e:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800b120:	7bfb      	ldrb	r3, [r7, #15]
 800b122:	f023 0306 	bic.w	r3, r3, #6
 800b126:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800b128:	7bfa      	ldrb	r2, [r7, #15]
 800b12a:	79fb      	ldrb	r3, [r7, #7]
 800b12c:	4313      	orrs	r3, r2
 800b12e:	b2db      	uxtb	r3, r3
 800b130:	4619      	mov	r1, r3
 800b132:	f640 1023 	movw	r0, #2339	; 0x923
 800b136:	f7ff fdeb 	bl	800ad10 <SUBGRF_WriteRegister>
  }
}
 800b13a:	bf00      	nop
 800b13c:	3710      	adds	r7, #16
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
	...

0800b144 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800b144:	b480      	push	{r7}
 800b146:	b085      	sub	sp, #20
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d101      	bne.n	800b156 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800b152:	231f      	movs	r3, #31
 800b154:	e016      	b.n	800b184 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800b156:	2300      	movs	r3, #0
 800b158:	73fb      	strb	r3, [r7, #15]
 800b15a:	e00f      	b.n	800b17c <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800b15c:	7bfb      	ldrb	r3, [r7, #15]
 800b15e:	4a0c      	ldr	r2, [pc, #48]	; (800b190 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800b160:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	429a      	cmp	r2, r3
 800b168:	d205      	bcs.n	800b176 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800b16a:	7bfb      	ldrb	r3, [r7, #15]
 800b16c:	4a08      	ldr	r2, [pc, #32]	; (800b190 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800b16e:	00db      	lsls	r3, r3, #3
 800b170:	4413      	add	r3, r2
 800b172:	791b      	ldrb	r3, [r3, #4]
 800b174:	e006      	b.n	800b184 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800b176:	7bfb      	ldrb	r3, [r7, #15]
 800b178:	3301      	adds	r3, #1
 800b17a:	73fb      	strb	r3, [r7, #15]
 800b17c:	7bfb      	ldrb	r3, [r7, #15]
 800b17e:	2b15      	cmp	r3, #21
 800b180:	d9ec      	bls.n	800b15c <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800b182:	e7fe      	b.n	800b182 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800b184:	4618      	mov	r0, r3
 800b186:	3714      	adds	r7, #20
 800b188:	46bd      	mov	sp, r7
 800b18a:	bc80      	pop	{r7}
 800b18c:	4770      	bx	lr
 800b18e:	bf00      	nop
 800b190:	0800cda8 	.word	0x0800cda8

0800b194 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b08a      	sub	sp, #40	; 0x28
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800b19e:	4b35      	ldr	r3, [pc, #212]	; (800b274 <SUBGRF_GetCFO+0xe0>)
 800b1a0:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800b1a2:	f640 0007 	movw	r0, #2055	; 0x807
 800b1a6:	f7ff fdc7 	bl	800ad38 <SUBGRF_ReadRegister>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800b1ae:	7ffb      	ldrb	r3, [r7, #31]
 800b1b0:	08db      	lsrs	r3, r3, #3
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	f003 0303 	and.w	r3, r3, #3
 800b1b8:	3328      	adds	r3, #40	; 0x28
 800b1ba:	443b      	add	r3, r7
 800b1bc:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800b1c0:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800b1c2:	7ffb      	ldrb	r3, [r7, #31]
 800b1c4:	f003 0307 	and.w	r3, r3, #7
 800b1c8:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800b1ca:	7fba      	ldrb	r2, [r7, #30]
 800b1cc:	7f7b      	ldrb	r3, [r7, #29]
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b1d4:	461a      	mov	r2, r3
 800b1d6:	4b28      	ldr	r3, [pc, #160]	; (800b278 <SUBGRF_GetCFO+0xe4>)
 800b1d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1dc:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800b1de:	69ba      	ldr	r2, [r7, #24]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1e6:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800b1ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1f2:	697a      	ldr	r2, [r7, #20]
 800b1f4:	fb02 f303 	mul.w	r3, r2, r3
 800b1f8:	2b07      	cmp	r3, #7
 800b1fa:	d802      	bhi.n	800b202 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800b1fc:	2302      	movs	r3, #2
 800b1fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800b202:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b206:	697a      	ldr	r2, [r7, #20]
 800b208:	fb02 f303 	mul.w	r3, r2, r3
 800b20c:	2b03      	cmp	r3, #3
 800b20e:	d802      	bhi.n	800b216 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800b210:	2304      	movs	r3, #4
 800b212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800b216:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b21a:	69bb      	ldr	r3, [r7, #24]
 800b21c:	fb02 f303 	mul.w	r3, r2, r3
 800b220:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800b222:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800b226:	f7ff fd87 	bl	800ad38 <SUBGRF_ReadRegister>
 800b22a:	4603      	mov	r3, r0
 800b22c:	021b      	lsls	r3, r3, #8
 800b22e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b232:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800b234:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800b238:	f7ff fd7e 	bl	800ad38 <SUBGRF_ReadRegister>
 800b23c:	4603      	mov	r3, r0
 800b23e:	461a      	mov	r2, r3
 800b240:	6a3b      	ldr	r3, [r7, #32]
 800b242:	4313      	orrs	r3, r2
 800b244:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800b246:	6a3b      	ldr	r3, [r7, #32]
 800b248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d005      	beq.n	800b25c <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800b250:	6a3b      	ldr	r3, [r7, #32]
 800b252:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b256:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b25a:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	095b      	lsrs	r3, r3, #5
 800b260:	6a3a      	ldr	r2, [r7, #32]
 800b262:	fb02 f303 	mul.w	r3, r2, r3
 800b266:	11da      	asrs	r2, r3, #7
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	601a      	str	r2, [r3, #0]
}
 800b26c:	bf00      	nop
 800b26e:	3728      	adds	r7, #40	; 0x28
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}
 800b274:	0c0a0804 	.word	0x0c0a0804
 800b278:	01e84800 	.word	0x01e84800

0800b27c <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800b27c:	b480      	push	{r7}
 800b27e:	b087      	sub	sp, #28
 800b280:	af00      	add	r7, sp, #0
 800b282:	4603      	mov	r3, r0
 800b284:	60b9      	str	r1, [r7, #8]
 800b286:	607a      	str	r2, [r7, #4]
 800b288:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800b28a:	2300      	movs	r3, #0
 800b28c:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800b28e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b292:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800b294:	697b      	ldr	r3, [r7, #20]
}
 800b296:	4618      	mov	r0, r3
 800b298:	371c      	adds	r7, #28
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bc80      	pop	{r7}
 800b29e:	4770      	bx	lr

0800b2a0 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b087      	sub	sp, #28
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	607a      	str	r2, [r7, #4]
 800b2ac:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800b2b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2b6:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800b2b8:	697b      	ldr	r3, [r7, #20]
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	371c      	adds	r7, #28
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bc80      	pop	{r7}
 800b2c2:	4770      	bx	lr

0800b2c4 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b085      	sub	sp, #20
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	60f8      	str	r0, [r7, #12]
 800b2cc:	60b9      	str	r1, [r7, #8]
 800b2ce:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800b2d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3714      	adds	r7, #20
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bc80      	pop	{r7}
 800b2dc:	4770      	bx	lr

0800b2de <RFW_DeInit>:

void RFW_DeInit( void )
{
 800b2de:	b480      	push	{r7}
 800b2e0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800b2e2:	bf00      	nop
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bc80      	pop	{r7}
 800b2e8:	4770      	bx	lr

0800b2ea <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800b2ea:	b480      	push	{r7}
 800b2ec:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800b2ee:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bc80      	pop	{r7}
 800b2f6:	4770      	bx	lr

0800b2f8 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800b2fc:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	46bd      	mov	sp, r7
 800b302:	bc80      	pop	{r7}
 800b304:	4770      	bx	lr

0800b306 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800b306:	b480      	push	{r7}
 800b308:	b083      	sub	sp, #12
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	4603      	mov	r3, r0
 800b30e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800b310:	bf00      	nop
 800b312:	370c      	adds	r7, #12
 800b314:	46bd      	mov	sp, r7
 800b316:	bc80      	pop	{r7}
 800b318:	4770      	bx	lr

0800b31a <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800b31a:	b480      	push	{r7}
 800b31c:	b087      	sub	sp, #28
 800b31e:	af00      	add	r7, sp, #0
 800b320:	60f8      	str	r0, [r7, #12]
 800b322:	460b      	mov	r3, r1
 800b324:	607a      	str	r2, [r7, #4]
 800b326:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800b328:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b32c:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800b32e:	697b      	ldr	r3, [r7, #20]
}
 800b330:	4618      	mov	r0, r3
 800b332:	371c      	adds	r7, #28
 800b334:	46bd      	mov	sp, r7
 800b336:	bc80      	pop	{r7}
 800b338:	4770      	bx	lr

0800b33a <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800b33a:	b480      	push	{r7}
 800b33c:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800b33e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800b342:	4618      	mov	r0, r3
 800b344:	46bd      	mov	sp, r7
 800b346:	bc80      	pop	{r7}
 800b348:	4770      	bx	lr

0800b34a <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800b34a:	b480      	push	{r7}
 800b34c:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800b34e:	bf00      	nop
 800b350:	46bd      	mov	sp, r7
 800b352:	bc80      	pop	{r7}
 800b354:	4770      	bx	lr

0800b356 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800b356:	b480      	push	{r7}
 800b358:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800b35a:	bf00      	nop
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bc80      	pop	{r7}
 800b360:	4770      	bx	lr

0800b362 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800b362:	b480      	push	{r7}
 800b364:	b083      	sub	sp, #12
 800b366:	af00      	add	r7, sp, #0
 800b368:	4603      	mov	r3, r0
 800b36a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800b36c:	bf00      	nop
 800b36e:	370c      	adds	r7, #12
 800b370:	46bd      	mov	sp, r7
 800b372:	bc80      	pop	{r7}
 800b374:	4770      	bx	lr

0800b376 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800b376:	b580      	push	{r7, lr}
 800b378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800b37a:	f7f7 fb8a 	bl	8002a92 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800b37e:	f000 f809 	bl	800b394 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800b382:	bf00      	nop
 800b384:	bd80      	pop	{r7, pc}

0800b386 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800b386:	b480      	push	{r7}
 800b388:	af00      	add	r7, sp, #0

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_OS */

  /* USER CODE END MX_SubGHz_Phy_Process_OS */
}
 800b38a:	bf00      	nop
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bc80      	pop	{r7}
 800b390:	4770      	bx	lr
	...

0800b394 <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800b398:	4b0a      	ldr	r3, [pc, #40]	; (800b3c4 <SubghzApp_Init+0x30>)
 800b39a:	4a0b      	ldr	r2, [pc, #44]	; (800b3c8 <SubghzApp_Init+0x34>)
 800b39c:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800b39e:	4b09      	ldr	r3, [pc, #36]	; (800b3c4 <SubghzApp_Init+0x30>)
 800b3a0:	4a0a      	ldr	r2, [pc, #40]	; (800b3cc <SubghzApp_Init+0x38>)
 800b3a2:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800b3a4:	4b07      	ldr	r3, [pc, #28]	; (800b3c4 <SubghzApp_Init+0x30>)
 800b3a6:	4a0a      	ldr	r2, [pc, #40]	; (800b3d0 <SubghzApp_Init+0x3c>)
 800b3a8:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800b3aa:	4b06      	ldr	r3, [pc, #24]	; (800b3c4 <SubghzApp_Init+0x30>)
 800b3ac:	4a09      	ldr	r2, [pc, #36]	; (800b3d4 <SubghzApp_Init+0x40>)
 800b3ae:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800b3b0:	4b04      	ldr	r3, [pc, #16]	; (800b3c4 <SubghzApp_Init+0x30>)
 800b3b2:	4a09      	ldr	r2, [pc, #36]	; (800b3d8 <SubghzApp_Init+0x44>)
 800b3b4:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800b3b6:	4b09      	ldr	r3, [pc, #36]	; (800b3dc <SubghzApp_Init+0x48>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4802      	ldr	r0, [pc, #8]	; (800b3c4 <SubghzApp_Init+0x30>)
 800b3bc:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 800b3be:	bf00      	nop
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	20000a08 	.word	0x20000a08
 800b3c8:	0800b3e1 	.word	0x0800b3e1
 800b3cc:	0800b3ed 	.word	0x0800b3ed
 800b3d0:	0800b411 	.word	0x0800b411
 800b3d4:	0800b41d 	.word	0x0800b41d
 800b3d8:	0800b429 	.word	0x0800b429
 800b3dc:	0800cd18 	.word	0x0800cd18

0800b3e0 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 800b3e4:	bf00      	nop
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bc80      	pop	{r7}
 800b3ea:	4770      	bx	lr

0800b3ec <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b085      	sub	sp, #20
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	4608      	mov	r0, r1
 800b3f6:	4611      	mov	r1, r2
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	817b      	strh	r3, [r7, #10]
 800b3fe:	460b      	mov	r3, r1
 800b400:	813b      	strh	r3, [r7, #8]
 800b402:	4613      	mov	r3, r2
 800b404:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 800b406:	bf00      	nop
 800b408:	3714      	adds	r7, #20
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bc80      	pop	{r7}
 800b40e:	4770      	bx	lr

0800b410 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800b410:	b480      	push	{r7}
 800b412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 800b414:	bf00      	nop
 800b416:	46bd      	mov	sp, r7
 800b418:	bc80      	pop	{r7}
 800b41a:	4770      	bx	lr

0800b41c <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800b41c:	b480      	push	{r7}
 800b41e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 800b420:	bf00      	nop
 800b422:	46bd      	mov	sp, r7
 800b424:	bc80      	pop	{r7}
 800b426:	4770      	bx	lr

0800b428 <OnRxError>:

static void OnRxError(void)
{
 800b428:	b480      	push	{r7}
 800b42a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 800b42c:	bf00      	nop
 800b42e:	46bd      	mov	sp, r7
 800b430:	bc80      	pop	{r7}
 800b432:	4770      	bx	lr

0800b434 <LL_AHB2_GRP1_EnableClock>:
{
 800b434:	b480      	push	{r7}
 800b436:	b085      	sub	sp, #20
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800b43c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b440:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b442:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	4313      	orrs	r3, r2
 800b44a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800b44c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b450:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	4013      	ands	r3, r2
 800b456:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b458:	68fb      	ldr	r3, [r7, #12]
}
 800b45a:	bf00      	nop
 800b45c:	3714      	adds	r7, #20
 800b45e:	46bd      	mov	sp, r7
 800b460:	bc80      	pop	{r7}
 800b462:	4770      	bx	lr

0800b464 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b086      	sub	sp, #24
 800b468:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800b46a:	2300      	movs	r3, #0
 800b46c:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN RBI_Init_2 */
	GPIO_InitTypeDef gpio_init_structure = { 0 };
 800b46e:	463b      	mov	r3, r7
 800b470:	2200      	movs	r2, #0
 800b472:	601a      	str	r2, [r3, #0]
 800b474:	605a      	str	r2, [r3, #4]
 800b476:	609a      	str	r2, [r3, #8]
 800b478:	60da      	str	r2, [r3, #12]
 800b47a:	611a      	str	r2, [r3, #16]

	/* Enable the Radio Switch Clock */
	RF_SW_CTRL3_GPIO_CLK_ENABLE();
 800b47c:	2004      	movs	r0, #4
 800b47e:	f7ff ffd9 	bl	800b434 <LL_AHB2_GRP1_EnableClock>

	/* Configure the Radio Switch pin */
	gpio_init_structure.Pin = RF_SW_CTRL1_PIN;
 800b482:	2310      	movs	r3, #16
 800b484:	603b      	str	r3, [r7, #0]
	gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800b486:	2301      	movs	r3, #1
 800b488:	607b      	str	r3, [r7, #4]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800b48a:	2300      	movs	r3, #0
 800b48c:	60bb      	str	r3, [r7, #8]
	gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b48e:	2303      	movs	r3, #3
 800b490:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800b492:	463b      	mov	r3, r7
 800b494:	4619      	mov	r1, r3
 800b496:	4812      	ldr	r0, [pc, #72]	; (800b4e0 <RBI_Init+0x7c>)
 800b498:	f7f8 fc4e 	bl	8003d38 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800b49c:	2320      	movs	r3, #32
 800b49e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800b4a0:	463b      	mov	r3, r7
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	480e      	ldr	r0, [pc, #56]	; (800b4e0 <RBI_Init+0x7c>)
 800b4a6:	f7f8 fc47 	bl	8003d38 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 800b4aa:	2308      	movs	r3, #8
 800b4ac:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 800b4ae:	463b      	mov	r3, r7
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	480b      	ldr	r0, [pc, #44]	; (800b4e0 <RBI_Init+0x7c>)
 800b4b4:	f7f8 fc40 	bl	8003d38 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	2120      	movs	r1, #32
 800b4bc:	4808      	ldr	r0, [pc, #32]	; (800b4e0 <RBI_Init+0x7c>)
 800b4be:	f7f8 fd9b 	bl	8003ff8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	2110      	movs	r1, #16
 800b4c6:	4806      	ldr	r0, [pc, #24]	; (800b4e0 <RBI_Init+0x7c>)
 800b4c8:	f7f8 fd96 	bl	8003ff8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	2108      	movs	r1, #8
 800b4d0:	4803      	ldr	r0, [pc, #12]	; (800b4e0 <RBI_Init+0x7c>)
 800b4d2:	f7f8 fd91 	bl	8003ff8 <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800b4d6:	697b      	ldr	r3, [r7, #20]
#endif  /* USE_BSP_DRIVER  */
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3718      	adds	r7, #24
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}
 800b4e0:	48000800 	.word	0x48000800

0800b4e4 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
	switch (Config) {
 800b4f2:	79fb      	ldrb	r3, [r7, #7]
 800b4f4:	2b03      	cmp	r3, #3
 800b4f6:	d84b      	bhi.n	800b590 <RBI_ConfigRFSwitch+0xac>
 800b4f8:	a201      	add	r2, pc, #4	; (adr r2, 800b500 <RBI_ConfigRFSwitch+0x1c>)
 800b4fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4fe:	bf00      	nop
 800b500:	0800b511 	.word	0x0800b511
 800b504:	0800b531 	.word	0x0800b531
 800b508:	0800b551 	.word	0x0800b551
 800b50c:	0800b571 	.word	0x0800b571
	case RADIO_SWITCH_OFF: {
		/* Turn off switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN,
 800b510:	2200      	movs	r2, #0
 800b512:	2108      	movs	r1, #8
 800b514:	4821      	ldr	r0, [pc, #132]	; (800b59c <RBI_ConfigRFSwitch+0xb8>)
 800b516:	f7f8 fd6f 	bl	8003ff8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800b51a:	2200      	movs	r2, #0
 800b51c:	2110      	movs	r1, #16
 800b51e:	481f      	ldr	r0, [pc, #124]	; (800b59c <RBI_ConfigRFSwitch+0xb8>)
 800b520:	f7f8 fd6a 	bl	8003ff8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 800b524:	2200      	movs	r2, #0
 800b526:	2120      	movs	r1, #32
 800b528:	481c      	ldr	r0, [pc, #112]	; (800b59c <RBI_ConfigRFSwitch+0xb8>)
 800b52a:	f7f8 fd65 	bl	8003ff8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 800b52e:	e030      	b.n	800b592 <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RX: {
		/*Turns On in Rx Mode the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800b530:	2201      	movs	r2, #1
 800b532:	2108      	movs	r1, #8
 800b534:	4819      	ldr	r0, [pc, #100]	; (800b59c <RBI_ConfigRFSwitch+0xb8>)
 800b536:	f7f8 fd5f 	bl	8003ff8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800b53a:	2201      	movs	r2, #1
 800b53c:	2110      	movs	r1, #16
 800b53e:	4817      	ldr	r0, [pc, #92]	; (800b59c <RBI_ConfigRFSwitch+0xb8>)
 800b540:	f7f8 fd5a 	bl	8003ff8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 800b544:	2200      	movs	r2, #0
 800b546:	2120      	movs	r1, #32
 800b548:	4814      	ldr	r0, [pc, #80]	; (800b59c <RBI_ConfigRFSwitch+0xb8>)
 800b54a:	f7f8 fd55 	bl	8003ff8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 800b54e:	e020      	b.n	800b592 <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_LP: {
		/*Turns On in Tx Low Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800b550:	2201      	movs	r2, #1
 800b552:	2108      	movs	r1, #8
 800b554:	4811      	ldr	r0, [pc, #68]	; (800b59c <RBI_ConfigRFSwitch+0xb8>)
 800b556:	f7f8 fd4f 	bl	8003ff8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800b55a:	2201      	movs	r2, #1
 800b55c:	2110      	movs	r1, #16
 800b55e:	480f      	ldr	r0, [pc, #60]	; (800b59c <RBI_ConfigRFSwitch+0xb8>)
 800b560:	f7f8 fd4a 	bl	8003ff8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800b564:	2201      	movs	r2, #1
 800b566:	2120      	movs	r1, #32
 800b568:	480c      	ldr	r0, [pc, #48]	; (800b59c <RBI_ConfigRFSwitch+0xb8>)
 800b56a:	f7f8 fd45 	bl	8003ff8 <HAL_GPIO_WritePin>
		break;
 800b56e:	e010      	b.n	800b592 <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_HP: {
		/*Turns On in Tx High Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800b570:	2201      	movs	r2, #1
 800b572:	2108      	movs	r1, #8
 800b574:	4809      	ldr	r0, [pc, #36]	; (800b59c <RBI_ConfigRFSwitch+0xb8>)
 800b576:	f7f8 fd3f 	bl	8003ff8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800b57a:	2200      	movs	r2, #0
 800b57c:	2110      	movs	r1, #16
 800b57e:	4807      	ldr	r0, [pc, #28]	; (800b59c <RBI_ConfigRFSwitch+0xb8>)
 800b580:	f7f8 fd3a 	bl	8003ff8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800b584:	2201      	movs	r2, #1
 800b586:	2120      	movs	r1, #32
 800b588:	4804      	ldr	r0, [pc, #16]	; (800b59c <RBI_ConfigRFSwitch+0xb8>)
 800b58a:	f7f8 fd35 	bl	8003ff8 <HAL_GPIO_WritePin>
		break;
 800b58e:	e000      	b.n	800b592 <RBI_ConfigRFSwitch+0xae>
	}
	default:
		break;
 800b590:	bf00      	nop
	}
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800b592:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800b594:	4618      	mov	r0, r3
 800b596:	3710      	adds	r7, #16
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}
 800b59c:	48000800 	.word	0x48000800

0800b5a0 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b083      	sub	sp, #12
 800b5a4:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
	return RADIO_CONF_RFO_LP_HP;
 800b5aa:	2300      	movs	r3, #0
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	370c      	adds	r7, #12
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bc80      	pop	{r7}
 800b5b4:	4770      	bx	lr

0800b5b6 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800b5b6:	b480      	push	{r7}
 800b5b8:	b083      	sub	sp, #12
 800b5ba:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
	return IS_TCXO_SUPPORTED;
 800b5c0:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	370c      	adds	r7, #12
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bc80      	pop	{r7}
 800b5ca:	4770      	bx	lr

0800b5cc <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
	return IS_DCDC_SUPPORTED;
 800b5d6:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	370c      	adds	r7, #12
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bc80      	pop	{r7}
 800b5e0:	4770      	bx	lr

0800b5e2 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800b5e2:	b480      	push	{r7}
 800b5e4:	b085      	sub	sp, #20
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
// #warning user to provide its board code or to call his board driver functions
	if (Config == RBI_RFO_LP_MAXPOWER) {
 800b5f0:	79fb      	ldrb	r3, [r7, #7]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d102      	bne.n	800b5fc <RBI_GetRFOMaxPowerConfig+0x1a>
		ret = 15; /*dBm*/
 800b5f6:	230f      	movs	r3, #15
 800b5f8:	60fb      	str	r3, [r7, #12]
 800b5fa:	e001      	b.n	800b600 <RBI_GetRFOMaxPowerConfig+0x1e>
	} else {
		ret = 22; /*dBm*/
 800b5fc:	2316      	movs	r3, #22
 800b5fe:	60fb      	str	r3, [r7, #12]
	}
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800b600:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800b602:	4618      	mov	r0, r3
 800b604:	3714      	adds	r7, #20
 800b606:	46bd      	mov	sp, r7
 800b608:	bc80      	pop	{r7}
 800b60a:	4770      	bx	lr

0800b60c <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800b60c:	b480      	push	{r7}
 800b60e:	b087      	sub	sp, #28
 800b610:	af00      	add	r7, sp, #0
 800b612:	60f8      	str	r0, [r7, #12]
 800b614:	60b9      	str	r1, [r7, #8]
 800b616:	4613      	mov	r3, r2
 800b618:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	613b      	str	r3, [r7, #16]

  while( size-- )
 800b622:	e007      	b.n	800b634 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800b624:	693a      	ldr	r2, [r7, #16]
 800b626:	1c53      	adds	r3, r2, #1
 800b628:	613b      	str	r3, [r7, #16]
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	1c59      	adds	r1, r3, #1
 800b62e:	6179      	str	r1, [r7, #20]
 800b630:	7812      	ldrb	r2, [r2, #0]
 800b632:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b634:	88fb      	ldrh	r3, [r7, #6]
 800b636:	1e5a      	subs	r2, r3, #1
 800b638:	80fa      	strh	r2, [r7, #6]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d1f2      	bne.n	800b624 <UTIL_MEM_cpy_8+0x18>
    }
}
 800b63e:	bf00      	nop
 800b640:	bf00      	nop
 800b642:	371c      	adds	r7, #28
 800b644:	46bd      	mov	sp, r7
 800b646:	bc80      	pop	{r7}
 800b648:	4770      	bx	lr

0800b64a <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800b64a:	b480      	push	{r7}
 800b64c:	b085      	sub	sp, #20
 800b64e:	af00      	add	r7, sp, #0
 800b650:	6078      	str	r0, [r7, #4]
 800b652:	460b      	mov	r3, r1
 800b654:	70fb      	strb	r3, [r7, #3]
 800b656:	4613      	mov	r3, r2
 800b658:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800b65e:	e004      	b.n	800b66a <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	1c5a      	adds	r2, r3, #1
 800b664:	60fa      	str	r2, [r7, #12]
 800b666:	78fa      	ldrb	r2, [r7, #3]
 800b668:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b66a:	883b      	ldrh	r3, [r7, #0]
 800b66c:	1e5a      	subs	r2, r3, #1
 800b66e:	803a      	strh	r2, [r7, #0]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d1f5      	bne.n	800b660 <UTIL_MEM_set_8+0x16>
  }
}
 800b674:	bf00      	nop
 800b676:	bf00      	nop
 800b678:	3714      	adds	r7, #20
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bc80      	pop	{r7}
 800b67e:	4770      	bx	lr

0800b680 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b084      	sub	sp, #16
 800b684:	af00      	add	r7, sp, #0
 800b686:	60f8      	str	r0, [r7, #12]
 800b688:	60b9      	str	r1, [r7, #8]
 800b68a:	603b      	str	r3, [r7, #0]
 800b68c:	4613      	mov	r3, r2
 800b68e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d023      	beq.n	800b6de <UTIL_TIMER_Create+0x5e>
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d020      	beq.n	800b6de <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800b6a2:	4b11      	ldr	r3, [pc, #68]	; (800b6e8 <UTIL_TIMER_Create+0x68>)
 800b6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a6:	68b8      	ldr	r0, [r7, #8]
 800b6a8:	4798      	blx	r3
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	683a      	ldr	r2, [r7, #0]
 800b6c6:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	69ba      	ldr	r2, [r7, #24]
 800b6cc:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	79fa      	ldrb	r2, [r7, #7]
 800b6d2:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	e000      	b.n	800b6e0 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800b6de:	2301      	movs	r3, #1
  }
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3710      	adds	r7, #16
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	0800ccc4 	.word	0x0800ccc4

0800b6ec <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b08a      	sub	sp, #40	; 0x28
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d056      	beq.n	800b7ae <UTIL_TIMER_Start+0xc2>
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 f929 	bl	800b958 <TimerExists>
 800b706:	4603      	mov	r3, r0
 800b708:	f083 0301 	eor.w	r3, r3, #1
 800b70c:	b2db      	uxtb	r3, r3
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d04d      	beq.n	800b7ae <UTIL_TIMER_Start+0xc2>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	7a5b      	ldrb	r3, [r3, #9]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d149      	bne.n	800b7ae <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b71a:	f3ef 8310 	mrs	r3, PRIMASK
 800b71e:	613b      	str	r3, [r7, #16]
  return(result);
 800b720:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b722:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b724:	b672      	cpsid	i
}
 800b726:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800b72e:	4b24      	ldr	r3, [pc, #144]	; (800b7c0 <UTIL_TIMER_Start+0xd4>)
 800b730:	6a1b      	ldr	r3, [r3, #32]
 800b732:	4798      	blx	r3
 800b734:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800b736:	6a3a      	ldr	r2, [r7, #32]
 800b738:	69bb      	ldr	r3, [r7, #24]
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d201      	bcs.n	800b742 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800b73e:	69bb      	ldr	r3, [r7, #24]
 800b740:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6a3a      	ldr	r2, [r7, #32]
 800b746:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2200      	movs	r2, #0
 800b74c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2201      	movs	r2, #1
 800b752:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2200      	movs	r2, #0
 800b758:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800b75a:	4b1a      	ldr	r3, [pc, #104]	; (800b7c4 <UTIL_TIMER_Start+0xd8>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d106      	bne.n	800b770 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800b762:	4b17      	ldr	r3, [pc, #92]	; (800b7c0 <UTIL_TIMER_Start+0xd4>)
 800b764:	691b      	ldr	r3, [r3, #16]
 800b766:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 f96b 	bl	800ba44 <TimerInsertNewHeadTimer>
 800b76e:	e017      	b.n	800b7a0 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800b770:	4b13      	ldr	r3, [pc, #76]	; (800b7c0 <UTIL_TIMER_Start+0xd4>)
 800b772:	699b      	ldr	r3, [r3, #24]
 800b774:	4798      	blx	r3
 800b776:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	441a      	add	r2, r3
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	4b0e      	ldr	r3, [pc, #56]	; (800b7c4 <UTIL_TIMER_Start+0xd8>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d203      	bcs.n	800b79a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 f956 	bl	800ba44 <TimerInsertNewHeadTimer>
 800b798:	e002      	b.n	800b7a0 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f000 f922 	bl	800b9e4 <TimerInsertTimer>
 800b7a0:	69fb      	ldr	r3, [r7, #28]
 800b7a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	f383 8810 	msr	PRIMASK, r3
}
 800b7aa:	bf00      	nop
  {
 800b7ac:	e002      	b.n	800b7b4 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800b7b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3728      	adds	r7, #40	; 0x28
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	0800ccc4 	.word	0x0800ccc4
 800b7c4:	20000a24 	.word	0x20000a24

0800b7c8 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b088      	sub	sp, #32
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d05b      	beq.n	800b892 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7da:	f3ef 8310 	mrs	r3, PRIMASK
 800b7de:	60fb      	str	r3, [r7, #12]
  return(result);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b7e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b7e4:	b672      	cpsid	i
}
 800b7e6:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800b7e8:	4b2d      	ldr	r3, [pc, #180]	; (800b8a0 <UTIL_TIMER_Stop+0xd8>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800b7ee:	4b2c      	ldr	r3, [pc, #176]	; (800b8a0 <UTIL_TIMER_Stop+0xd8>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800b7fa:	4b29      	ldr	r3, [pc, #164]	; (800b8a0 <UTIL_TIMER_Stop+0xd8>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d041      	beq.n	800b886 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2200      	movs	r2, #0
 800b806:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800b808:	4b25      	ldr	r3, [pc, #148]	; (800b8a0 <UTIL_TIMER_Stop+0xd8>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	687a      	ldr	r2, [r7, #4]
 800b80e:	429a      	cmp	r2, r3
 800b810:	d134      	bne.n	800b87c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800b812:	4b23      	ldr	r3, [pc, #140]	; (800b8a0 <UTIL_TIMER_Stop+0xd8>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	2200      	movs	r2, #0
 800b818:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800b81a:	4b21      	ldr	r3, [pc, #132]	; (800b8a0 <UTIL_TIMER_Stop+0xd8>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	695b      	ldr	r3, [r3, #20]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d00a      	beq.n	800b83a <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800b824:	4b1e      	ldr	r3, [pc, #120]	; (800b8a0 <UTIL_TIMER_Stop+0xd8>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	695b      	ldr	r3, [r3, #20]
 800b82a:	4a1d      	ldr	r2, [pc, #116]	; (800b8a0 <UTIL_TIMER_Stop+0xd8>)
 800b82c:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800b82e:	4b1c      	ldr	r3, [pc, #112]	; (800b8a0 <UTIL_TIMER_Stop+0xd8>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	4618      	mov	r0, r3
 800b834:	f000 f8ac 	bl	800b990 <TimerSetTimeout>
 800b838:	e023      	b.n	800b882 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800b83a:	4b1a      	ldr	r3, [pc, #104]	; (800b8a4 <UTIL_TIMER_Stop+0xdc>)
 800b83c:	68db      	ldr	r3, [r3, #12]
 800b83e:	4798      	blx	r3
            TimerListHead = NULL;
 800b840:	4b17      	ldr	r3, [pc, #92]	; (800b8a0 <UTIL_TIMER_Stop+0xd8>)
 800b842:	2200      	movs	r2, #0
 800b844:	601a      	str	r2, [r3, #0]
 800b846:	e01c      	b.n	800b882 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800b848:	697a      	ldr	r2, [r7, #20]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d110      	bne.n	800b872 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	695b      	ldr	r3, [r3, #20]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d006      	beq.n	800b866 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	695b      	ldr	r3, [r3, #20]
 800b85c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b85e:	69bb      	ldr	r3, [r7, #24]
 800b860:	697a      	ldr	r2, [r7, #20]
 800b862:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800b864:	e00d      	b.n	800b882 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800b866:	2300      	movs	r3, #0
 800b868:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b86a:	69bb      	ldr	r3, [r7, #24]
 800b86c:	697a      	ldr	r2, [r7, #20]
 800b86e:	615a      	str	r2, [r3, #20]
            break;
 800b870:	e007      	b.n	800b882 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	695b      	ldr	r3, [r3, #20]
 800b87a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d1e2      	bne.n	800b848 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800b882:	2300      	movs	r3, #0
 800b884:	77fb      	strb	r3, [r7, #31]
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	f383 8810 	msr	PRIMASK, r3
}
 800b890:	e001      	b.n	800b896 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800b892:	2301      	movs	r3, #1
 800b894:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800b896:	7ffb      	ldrb	r3, [r7, #31]
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3720      	adds	r7, #32
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}
 800b8a0:	20000a24 	.word	0x20000a24
 800b8a4:	0800ccc4 	.word	0x0800ccc4

0800b8a8 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b084      	sub	sp, #16
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d102      	bne.n	800b8c2 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	73fb      	strb	r3, [r7, #15]
 800b8c0:	e014      	b.n	800b8ec <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800b8c2:	4b0d      	ldr	r3, [pc, #52]	; (800b8f8 <UTIL_TIMER_SetPeriod+0x50>)
 800b8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c6:	6838      	ldr	r0, [r7, #0]
 800b8c8:	4798      	blx	r3
 800b8ca:	4602      	mov	r2, r0
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f000 f841 	bl	800b958 <TimerExists>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d007      	beq.n	800b8ec <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f7ff ff73 	bl	800b7c8 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f7ff ff02 	bl	800b6ec <UTIL_TIMER_Start>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800b8ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3710      	adds	r7, #16
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	0800ccc4 	.word	0x0800ccc4

0800b8fc <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b082      	sub	sp, #8
 800b900:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800b902:	4b06      	ldr	r3, [pc, #24]	; (800b91c <UTIL_TIMER_GetCurrentTime+0x20>)
 800b904:	69db      	ldr	r3, [r3, #28]
 800b906:	4798      	blx	r3
 800b908:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800b90a:	4b04      	ldr	r3, [pc, #16]	; (800b91c <UTIL_TIMER_GetCurrentTime+0x20>)
 800b90c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	4798      	blx	r3
 800b912:	4603      	mov	r3, r0
}
 800b914:	4618      	mov	r0, r3
 800b916:	3708      	adds	r7, #8
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}
 800b91c:	0800ccc4 	.word	0x0800ccc4

0800b920 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b084      	sub	sp, #16
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800b928:	4b0a      	ldr	r3, [pc, #40]	; (800b954 <UTIL_TIMER_GetElapsedTime+0x34>)
 800b92a:	69db      	ldr	r3, [r3, #28]
 800b92c:	4798      	blx	r3
 800b92e:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800b930:	4b08      	ldr	r3, [pc, #32]	; (800b954 <UTIL_TIMER_GetElapsedTime+0x34>)
 800b932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	4798      	blx	r3
 800b938:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800b93a:	4b06      	ldr	r3, [pc, #24]	; (800b954 <UTIL_TIMER_GetElapsedTime+0x34>)
 800b93c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b93e:	68f9      	ldr	r1, [r7, #12]
 800b940:	68ba      	ldr	r2, [r7, #8]
 800b942:	1a8a      	subs	r2, r1, r2
 800b944:	4610      	mov	r0, r2
 800b946:	4798      	blx	r3
 800b948:	4603      	mov	r3, r0
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3710      	adds	r7, #16
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}
 800b952:	bf00      	nop
 800b954:	0800ccc4 	.word	0x0800ccc4

0800b958 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800b958:	b480      	push	{r7}
 800b95a:	b085      	sub	sp, #20
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b960:	4b0a      	ldr	r3, [pc, #40]	; (800b98c <TimerExists+0x34>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800b966:	e008      	b.n	800b97a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800b968:	68fa      	ldr	r2, [r7, #12]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d101      	bne.n	800b974 <TimerExists+0x1c>
    {
      return true;
 800b970:	2301      	movs	r3, #1
 800b972:	e006      	b.n	800b982 <TimerExists+0x2a>
    }
    cur = cur->Next;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	695b      	ldr	r3, [r3, #20]
 800b978:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d1f3      	bne.n	800b968 <TimerExists+0x10>
  }
  return false;
 800b980:	2300      	movs	r3, #0
}
 800b982:	4618      	mov	r0, r3
 800b984:	3714      	adds	r7, #20
 800b986:	46bd      	mov	sp, r7
 800b988:	bc80      	pop	{r7}
 800b98a:	4770      	bx	lr
 800b98c:	20000a24 	.word	0x20000a24

0800b990 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800b990:	b590      	push	{r4, r7, lr}
 800b992:	b085      	sub	sp, #20
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800b998:	4b11      	ldr	r3, [pc, #68]	; (800b9e0 <TimerSetTimeout+0x50>)
 800b99a:	6a1b      	ldr	r3, [r3, #32]
 800b99c:	4798      	blx	r3
 800b99e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681c      	ldr	r4, [r3, #0]
 800b9aa:	4b0d      	ldr	r3, [pc, #52]	; (800b9e0 <TimerSetTimeout+0x50>)
 800b9ac:	699b      	ldr	r3, [r3, #24]
 800b9ae:	4798      	blx	r3
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	4413      	add	r3, r2
 800b9b6:	429c      	cmp	r4, r3
 800b9b8:	d207      	bcs.n	800b9ca <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800b9ba:	4b09      	ldr	r3, [pc, #36]	; (800b9e0 <TimerSetTimeout+0x50>)
 800b9bc:	699b      	ldr	r3, [r3, #24]
 800b9be:	4798      	blx	r3
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	441a      	add	r2, r3
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800b9ca:	4b05      	ldr	r3, [pc, #20]	; (800b9e0 <TimerSetTimeout+0x50>)
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	6812      	ldr	r2, [r2, #0]
 800b9d2:	4610      	mov	r0, r2
 800b9d4:	4798      	blx	r3
}
 800b9d6:	bf00      	nop
 800b9d8:	3714      	adds	r7, #20
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd90      	pop	{r4, r7, pc}
 800b9de:	bf00      	nop
 800b9e0:	0800ccc4 	.word	0x0800ccc4

0800b9e4 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b085      	sub	sp, #20
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b9ec:	4b14      	ldr	r3, [pc, #80]	; (800ba40 <TimerInsertTimer+0x5c>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800b9f2:	4b13      	ldr	r3, [pc, #76]	; (800ba40 <TimerInsertTimer+0x5c>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	695b      	ldr	r3, [r3, #20]
 800b9f8:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800b9fa:	e012      	b.n	800ba22 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681a      	ldr	r2, [r3, #0]
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d905      	bls.n	800ba14 <TimerInsertTimer+0x30>
    {
        cur = next;
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	695b      	ldr	r3, [r3, #20]
 800ba10:	60bb      	str	r3, [r7, #8]
 800ba12:	e006      	b.n	800ba22 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	68ba      	ldr	r2, [r7, #8]
 800ba1e:	615a      	str	r2, [r3, #20]
        return;
 800ba20:	e009      	b.n	800ba36 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	695b      	ldr	r3, [r3, #20]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d1e8      	bne.n	800b9fc <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	687a      	ldr	r2, [r7, #4]
 800ba2e:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2200      	movs	r2, #0
 800ba34:	615a      	str	r2, [r3, #20]
}
 800ba36:	3714      	adds	r7, #20
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bc80      	pop	{r7}
 800ba3c:	4770      	bx	lr
 800ba3e:	bf00      	nop
 800ba40:	20000a24 	.word	0x20000a24

0800ba44 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800ba4c:	4b0b      	ldr	r3, [pc, #44]	; (800ba7c <TimerInsertNewHeadTimer+0x38>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d002      	beq.n	800ba5e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	68fa      	ldr	r2, [r7, #12]
 800ba62:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800ba64:	4a05      	ldr	r2, [pc, #20]	; (800ba7c <TimerInsertNewHeadTimer+0x38>)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800ba6a:	4b04      	ldr	r3, [pc, #16]	; (800ba7c <TimerInsertNewHeadTimer+0x38>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7ff ff8e 	bl	800b990 <TimerSetTimeout>
}
 800ba74:	bf00      	nop
 800ba76:	3710      	adds	r7, #16
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}
 800ba7c:	20000a24 	.word	0x20000a24

0800ba80 <_vsniprintf_r>:
 800ba80:	b530      	push	{r4, r5, lr}
 800ba82:	4614      	mov	r4, r2
 800ba84:	2c00      	cmp	r4, #0
 800ba86:	b09b      	sub	sp, #108	; 0x6c
 800ba88:	4605      	mov	r5, r0
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	da05      	bge.n	800ba9a <_vsniprintf_r+0x1a>
 800ba8e:	238b      	movs	r3, #139	; 0x8b
 800ba90:	6003      	str	r3, [r0, #0]
 800ba92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba96:	b01b      	add	sp, #108	; 0x6c
 800ba98:	bd30      	pop	{r4, r5, pc}
 800ba9a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ba9e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800baa2:	bf14      	ite	ne
 800baa4:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800baa8:	4623      	moveq	r3, r4
 800baaa:	9302      	str	r3, [sp, #8]
 800baac:	9305      	str	r3, [sp, #20]
 800baae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bab2:	9100      	str	r1, [sp, #0]
 800bab4:	9104      	str	r1, [sp, #16]
 800bab6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800baba:	4669      	mov	r1, sp
 800babc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800babe:	f000 f8b5 	bl	800bc2c <_svfiprintf_r>
 800bac2:	1c43      	adds	r3, r0, #1
 800bac4:	bfbc      	itt	lt
 800bac6:	238b      	movlt	r3, #139	; 0x8b
 800bac8:	602b      	strlt	r3, [r5, #0]
 800baca:	2c00      	cmp	r4, #0
 800bacc:	d0e3      	beq.n	800ba96 <_vsniprintf_r+0x16>
 800bace:	9b00      	ldr	r3, [sp, #0]
 800bad0:	2200      	movs	r2, #0
 800bad2:	701a      	strb	r2, [r3, #0]
 800bad4:	e7df      	b.n	800ba96 <_vsniprintf_r+0x16>
	...

0800bad8 <vsniprintf>:
 800bad8:	b507      	push	{r0, r1, r2, lr}
 800bada:	9300      	str	r3, [sp, #0]
 800badc:	4613      	mov	r3, r2
 800bade:	460a      	mov	r2, r1
 800bae0:	4601      	mov	r1, r0
 800bae2:	4803      	ldr	r0, [pc, #12]	; (800baf0 <vsniprintf+0x18>)
 800bae4:	6800      	ldr	r0, [r0, #0]
 800bae6:	f7ff ffcb 	bl	800ba80 <_vsniprintf_r>
 800baea:	b003      	add	sp, #12
 800baec:	f85d fb04 	ldr.w	pc, [sp], #4
 800baf0:	20000064 	.word	0x20000064

0800baf4 <memset>:
 800baf4:	4402      	add	r2, r0
 800baf6:	4603      	mov	r3, r0
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d100      	bne.n	800bafe <memset+0xa>
 800bafc:	4770      	bx	lr
 800bafe:	f803 1b01 	strb.w	r1, [r3], #1
 800bb02:	e7f9      	b.n	800baf8 <memset+0x4>

0800bb04 <__errno>:
 800bb04:	4b01      	ldr	r3, [pc, #4]	; (800bb0c <__errno+0x8>)
 800bb06:	6818      	ldr	r0, [r3, #0]
 800bb08:	4770      	bx	lr
 800bb0a:	bf00      	nop
 800bb0c:	20000064 	.word	0x20000064

0800bb10 <__libc_init_array>:
 800bb10:	b570      	push	{r4, r5, r6, lr}
 800bb12:	4d0d      	ldr	r5, [pc, #52]	; (800bb48 <__libc_init_array+0x38>)
 800bb14:	4c0d      	ldr	r4, [pc, #52]	; (800bb4c <__libc_init_array+0x3c>)
 800bb16:	1b64      	subs	r4, r4, r5
 800bb18:	10a4      	asrs	r4, r4, #2
 800bb1a:	2600      	movs	r6, #0
 800bb1c:	42a6      	cmp	r6, r4
 800bb1e:	d109      	bne.n	800bb34 <__libc_init_array+0x24>
 800bb20:	4d0b      	ldr	r5, [pc, #44]	; (800bb50 <__libc_init_array+0x40>)
 800bb22:	4c0c      	ldr	r4, [pc, #48]	; (800bb54 <__libc_init_array+0x44>)
 800bb24:	f000 fc68 	bl	800c3f8 <_init>
 800bb28:	1b64      	subs	r4, r4, r5
 800bb2a:	10a4      	asrs	r4, r4, #2
 800bb2c:	2600      	movs	r6, #0
 800bb2e:	42a6      	cmp	r6, r4
 800bb30:	d105      	bne.n	800bb3e <__libc_init_array+0x2e>
 800bb32:	bd70      	pop	{r4, r5, r6, pc}
 800bb34:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb38:	4798      	blx	r3
 800bb3a:	3601      	adds	r6, #1
 800bb3c:	e7ee      	b.n	800bb1c <__libc_init_array+0xc>
 800bb3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb42:	4798      	blx	r3
 800bb44:	3601      	adds	r6, #1
 800bb46:	e7f2      	b.n	800bb2e <__libc_init_array+0x1e>
 800bb48:	0800ce94 	.word	0x0800ce94
 800bb4c:	0800ce94 	.word	0x0800ce94
 800bb50:	0800ce94 	.word	0x0800ce94
 800bb54:	0800ce98 	.word	0x0800ce98

0800bb58 <__retarget_lock_acquire_recursive>:
 800bb58:	4770      	bx	lr

0800bb5a <__retarget_lock_release_recursive>:
 800bb5a:	4770      	bx	lr

0800bb5c <memcpy>:
 800bb5c:	440a      	add	r2, r1
 800bb5e:	4291      	cmp	r1, r2
 800bb60:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bb64:	d100      	bne.n	800bb68 <memcpy+0xc>
 800bb66:	4770      	bx	lr
 800bb68:	b510      	push	{r4, lr}
 800bb6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb72:	4291      	cmp	r1, r2
 800bb74:	d1f9      	bne.n	800bb6a <memcpy+0xe>
 800bb76:	bd10      	pop	{r4, pc}

0800bb78 <__ssputs_r>:
 800bb78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb7c:	688e      	ldr	r6, [r1, #8]
 800bb7e:	461f      	mov	r7, r3
 800bb80:	42be      	cmp	r6, r7
 800bb82:	680b      	ldr	r3, [r1, #0]
 800bb84:	4682      	mov	sl, r0
 800bb86:	460c      	mov	r4, r1
 800bb88:	4690      	mov	r8, r2
 800bb8a:	d82c      	bhi.n	800bbe6 <__ssputs_r+0x6e>
 800bb8c:	898a      	ldrh	r2, [r1, #12]
 800bb8e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bb92:	d026      	beq.n	800bbe2 <__ssputs_r+0x6a>
 800bb94:	6965      	ldr	r5, [r4, #20]
 800bb96:	6909      	ldr	r1, [r1, #16]
 800bb98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb9c:	eba3 0901 	sub.w	r9, r3, r1
 800bba0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bba4:	1c7b      	adds	r3, r7, #1
 800bba6:	444b      	add	r3, r9
 800bba8:	106d      	asrs	r5, r5, #1
 800bbaa:	429d      	cmp	r5, r3
 800bbac:	bf38      	it	cc
 800bbae:	461d      	movcc	r5, r3
 800bbb0:	0553      	lsls	r3, r2, #21
 800bbb2:	d527      	bpl.n	800bc04 <__ssputs_r+0x8c>
 800bbb4:	4629      	mov	r1, r5
 800bbb6:	f000 f957 	bl	800be68 <_malloc_r>
 800bbba:	4606      	mov	r6, r0
 800bbbc:	b360      	cbz	r0, 800bc18 <__ssputs_r+0xa0>
 800bbbe:	6921      	ldr	r1, [r4, #16]
 800bbc0:	464a      	mov	r2, r9
 800bbc2:	f7ff ffcb 	bl	800bb5c <memcpy>
 800bbc6:	89a3      	ldrh	r3, [r4, #12]
 800bbc8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bbcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbd0:	81a3      	strh	r3, [r4, #12]
 800bbd2:	6126      	str	r6, [r4, #16]
 800bbd4:	6165      	str	r5, [r4, #20]
 800bbd6:	444e      	add	r6, r9
 800bbd8:	eba5 0509 	sub.w	r5, r5, r9
 800bbdc:	6026      	str	r6, [r4, #0]
 800bbde:	60a5      	str	r5, [r4, #8]
 800bbe0:	463e      	mov	r6, r7
 800bbe2:	42be      	cmp	r6, r7
 800bbe4:	d900      	bls.n	800bbe8 <__ssputs_r+0x70>
 800bbe6:	463e      	mov	r6, r7
 800bbe8:	6820      	ldr	r0, [r4, #0]
 800bbea:	4632      	mov	r2, r6
 800bbec:	4641      	mov	r1, r8
 800bbee:	f000 fb86 	bl	800c2fe <memmove>
 800bbf2:	68a3      	ldr	r3, [r4, #8]
 800bbf4:	1b9b      	subs	r3, r3, r6
 800bbf6:	60a3      	str	r3, [r4, #8]
 800bbf8:	6823      	ldr	r3, [r4, #0]
 800bbfa:	4433      	add	r3, r6
 800bbfc:	6023      	str	r3, [r4, #0]
 800bbfe:	2000      	movs	r0, #0
 800bc00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc04:	462a      	mov	r2, r5
 800bc06:	f000 fb4b 	bl	800c2a0 <_realloc_r>
 800bc0a:	4606      	mov	r6, r0
 800bc0c:	2800      	cmp	r0, #0
 800bc0e:	d1e0      	bne.n	800bbd2 <__ssputs_r+0x5a>
 800bc10:	6921      	ldr	r1, [r4, #16]
 800bc12:	4650      	mov	r0, sl
 800bc14:	f000 fb9e 	bl	800c354 <_free_r>
 800bc18:	230c      	movs	r3, #12
 800bc1a:	f8ca 3000 	str.w	r3, [sl]
 800bc1e:	89a3      	ldrh	r3, [r4, #12]
 800bc20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc24:	81a3      	strh	r3, [r4, #12]
 800bc26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc2a:	e7e9      	b.n	800bc00 <__ssputs_r+0x88>

0800bc2c <_svfiprintf_r>:
 800bc2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc30:	4698      	mov	r8, r3
 800bc32:	898b      	ldrh	r3, [r1, #12]
 800bc34:	061b      	lsls	r3, r3, #24
 800bc36:	b09d      	sub	sp, #116	; 0x74
 800bc38:	4607      	mov	r7, r0
 800bc3a:	460d      	mov	r5, r1
 800bc3c:	4614      	mov	r4, r2
 800bc3e:	d50e      	bpl.n	800bc5e <_svfiprintf_r+0x32>
 800bc40:	690b      	ldr	r3, [r1, #16]
 800bc42:	b963      	cbnz	r3, 800bc5e <_svfiprintf_r+0x32>
 800bc44:	2140      	movs	r1, #64	; 0x40
 800bc46:	f000 f90f 	bl	800be68 <_malloc_r>
 800bc4a:	6028      	str	r0, [r5, #0]
 800bc4c:	6128      	str	r0, [r5, #16]
 800bc4e:	b920      	cbnz	r0, 800bc5a <_svfiprintf_r+0x2e>
 800bc50:	230c      	movs	r3, #12
 800bc52:	603b      	str	r3, [r7, #0]
 800bc54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc58:	e0d0      	b.n	800bdfc <_svfiprintf_r+0x1d0>
 800bc5a:	2340      	movs	r3, #64	; 0x40
 800bc5c:	616b      	str	r3, [r5, #20]
 800bc5e:	2300      	movs	r3, #0
 800bc60:	9309      	str	r3, [sp, #36]	; 0x24
 800bc62:	2320      	movs	r3, #32
 800bc64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc68:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc6c:	2330      	movs	r3, #48	; 0x30
 800bc6e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800be14 <_svfiprintf_r+0x1e8>
 800bc72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc76:	f04f 0901 	mov.w	r9, #1
 800bc7a:	4623      	mov	r3, r4
 800bc7c:	469a      	mov	sl, r3
 800bc7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc82:	b10a      	cbz	r2, 800bc88 <_svfiprintf_r+0x5c>
 800bc84:	2a25      	cmp	r2, #37	; 0x25
 800bc86:	d1f9      	bne.n	800bc7c <_svfiprintf_r+0x50>
 800bc88:	ebba 0b04 	subs.w	fp, sl, r4
 800bc8c:	d00b      	beq.n	800bca6 <_svfiprintf_r+0x7a>
 800bc8e:	465b      	mov	r3, fp
 800bc90:	4622      	mov	r2, r4
 800bc92:	4629      	mov	r1, r5
 800bc94:	4638      	mov	r0, r7
 800bc96:	f7ff ff6f 	bl	800bb78 <__ssputs_r>
 800bc9a:	3001      	adds	r0, #1
 800bc9c:	f000 80a9 	beq.w	800bdf2 <_svfiprintf_r+0x1c6>
 800bca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bca2:	445a      	add	r2, fp
 800bca4:	9209      	str	r2, [sp, #36]	; 0x24
 800bca6:	f89a 3000 	ldrb.w	r3, [sl]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	f000 80a1 	beq.w	800bdf2 <_svfiprintf_r+0x1c6>
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bcb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcba:	f10a 0a01 	add.w	sl, sl, #1
 800bcbe:	9304      	str	r3, [sp, #16]
 800bcc0:	9307      	str	r3, [sp, #28]
 800bcc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcc6:	931a      	str	r3, [sp, #104]	; 0x68
 800bcc8:	4654      	mov	r4, sl
 800bcca:	2205      	movs	r2, #5
 800bccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcd0:	4850      	ldr	r0, [pc, #320]	; (800be14 <_svfiprintf_r+0x1e8>)
 800bcd2:	f7f4 fa55 	bl	8000180 <memchr>
 800bcd6:	9a04      	ldr	r2, [sp, #16]
 800bcd8:	b9d8      	cbnz	r0, 800bd12 <_svfiprintf_r+0xe6>
 800bcda:	06d0      	lsls	r0, r2, #27
 800bcdc:	bf44      	itt	mi
 800bcde:	2320      	movmi	r3, #32
 800bce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bce4:	0711      	lsls	r1, r2, #28
 800bce6:	bf44      	itt	mi
 800bce8:	232b      	movmi	r3, #43	; 0x2b
 800bcea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcee:	f89a 3000 	ldrb.w	r3, [sl]
 800bcf2:	2b2a      	cmp	r3, #42	; 0x2a
 800bcf4:	d015      	beq.n	800bd22 <_svfiprintf_r+0xf6>
 800bcf6:	9a07      	ldr	r2, [sp, #28]
 800bcf8:	4654      	mov	r4, sl
 800bcfa:	2000      	movs	r0, #0
 800bcfc:	f04f 0c0a 	mov.w	ip, #10
 800bd00:	4621      	mov	r1, r4
 800bd02:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd06:	3b30      	subs	r3, #48	; 0x30
 800bd08:	2b09      	cmp	r3, #9
 800bd0a:	d94d      	bls.n	800bda8 <_svfiprintf_r+0x17c>
 800bd0c:	b1b0      	cbz	r0, 800bd3c <_svfiprintf_r+0x110>
 800bd0e:	9207      	str	r2, [sp, #28]
 800bd10:	e014      	b.n	800bd3c <_svfiprintf_r+0x110>
 800bd12:	eba0 0308 	sub.w	r3, r0, r8
 800bd16:	fa09 f303 	lsl.w	r3, r9, r3
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	9304      	str	r3, [sp, #16]
 800bd1e:	46a2      	mov	sl, r4
 800bd20:	e7d2      	b.n	800bcc8 <_svfiprintf_r+0x9c>
 800bd22:	9b03      	ldr	r3, [sp, #12]
 800bd24:	1d19      	adds	r1, r3, #4
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	9103      	str	r1, [sp, #12]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	bfbb      	ittet	lt
 800bd2e:	425b      	neglt	r3, r3
 800bd30:	f042 0202 	orrlt.w	r2, r2, #2
 800bd34:	9307      	strge	r3, [sp, #28]
 800bd36:	9307      	strlt	r3, [sp, #28]
 800bd38:	bfb8      	it	lt
 800bd3a:	9204      	strlt	r2, [sp, #16]
 800bd3c:	7823      	ldrb	r3, [r4, #0]
 800bd3e:	2b2e      	cmp	r3, #46	; 0x2e
 800bd40:	d10c      	bne.n	800bd5c <_svfiprintf_r+0x130>
 800bd42:	7863      	ldrb	r3, [r4, #1]
 800bd44:	2b2a      	cmp	r3, #42	; 0x2a
 800bd46:	d134      	bne.n	800bdb2 <_svfiprintf_r+0x186>
 800bd48:	9b03      	ldr	r3, [sp, #12]
 800bd4a:	1d1a      	adds	r2, r3, #4
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	9203      	str	r2, [sp, #12]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	bfb8      	it	lt
 800bd54:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bd58:	3402      	adds	r4, #2
 800bd5a:	9305      	str	r3, [sp, #20]
 800bd5c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800be18 <_svfiprintf_r+0x1ec>
 800bd60:	7821      	ldrb	r1, [r4, #0]
 800bd62:	2203      	movs	r2, #3
 800bd64:	4650      	mov	r0, sl
 800bd66:	f7f4 fa0b 	bl	8000180 <memchr>
 800bd6a:	b138      	cbz	r0, 800bd7c <_svfiprintf_r+0x150>
 800bd6c:	9b04      	ldr	r3, [sp, #16]
 800bd6e:	eba0 000a 	sub.w	r0, r0, sl
 800bd72:	2240      	movs	r2, #64	; 0x40
 800bd74:	4082      	lsls	r2, r0
 800bd76:	4313      	orrs	r3, r2
 800bd78:	3401      	adds	r4, #1
 800bd7a:	9304      	str	r3, [sp, #16]
 800bd7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd80:	4826      	ldr	r0, [pc, #152]	; (800be1c <_svfiprintf_r+0x1f0>)
 800bd82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd86:	2206      	movs	r2, #6
 800bd88:	f7f4 f9fa 	bl	8000180 <memchr>
 800bd8c:	2800      	cmp	r0, #0
 800bd8e:	d038      	beq.n	800be02 <_svfiprintf_r+0x1d6>
 800bd90:	4b23      	ldr	r3, [pc, #140]	; (800be20 <_svfiprintf_r+0x1f4>)
 800bd92:	bb1b      	cbnz	r3, 800bddc <_svfiprintf_r+0x1b0>
 800bd94:	9b03      	ldr	r3, [sp, #12]
 800bd96:	3307      	adds	r3, #7
 800bd98:	f023 0307 	bic.w	r3, r3, #7
 800bd9c:	3308      	adds	r3, #8
 800bd9e:	9303      	str	r3, [sp, #12]
 800bda0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bda2:	4433      	add	r3, r6
 800bda4:	9309      	str	r3, [sp, #36]	; 0x24
 800bda6:	e768      	b.n	800bc7a <_svfiprintf_r+0x4e>
 800bda8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdac:	460c      	mov	r4, r1
 800bdae:	2001      	movs	r0, #1
 800bdb0:	e7a6      	b.n	800bd00 <_svfiprintf_r+0xd4>
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	3401      	adds	r4, #1
 800bdb6:	9305      	str	r3, [sp, #20]
 800bdb8:	4619      	mov	r1, r3
 800bdba:	f04f 0c0a 	mov.w	ip, #10
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdc4:	3a30      	subs	r2, #48	; 0x30
 800bdc6:	2a09      	cmp	r2, #9
 800bdc8:	d903      	bls.n	800bdd2 <_svfiprintf_r+0x1a6>
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d0c6      	beq.n	800bd5c <_svfiprintf_r+0x130>
 800bdce:	9105      	str	r1, [sp, #20]
 800bdd0:	e7c4      	b.n	800bd5c <_svfiprintf_r+0x130>
 800bdd2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdd6:	4604      	mov	r4, r0
 800bdd8:	2301      	movs	r3, #1
 800bdda:	e7f0      	b.n	800bdbe <_svfiprintf_r+0x192>
 800bddc:	ab03      	add	r3, sp, #12
 800bdde:	9300      	str	r3, [sp, #0]
 800bde0:	462a      	mov	r2, r5
 800bde2:	4b10      	ldr	r3, [pc, #64]	; (800be24 <_svfiprintf_r+0x1f8>)
 800bde4:	a904      	add	r1, sp, #16
 800bde6:	4638      	mov	r0, r7
 800bde8:	f3af 8000 	nop.w
 800bdec:	1c42      	adds	r2, r0, #1
 800bdee:	4606      	mov	r6, r0
 800bdf0:	d1d6      	bne.n	800bda0 <_svfiprintf_r+0x174>
 800bdf2:	89ab      	ldrh	r3, [r5, #12]
 800bdf4:	065b      	lsls	r3, r3, #25
 800bdf6:	f53f af2d 	bmi.w	800bc54 <_svfiprintf_r+0x28>
 800bdfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdfc:	b01d      	add	sp, #116	; 0x74
 800bdfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be02:	ab03      	add	r3, sp, #12
 800be04:	9300      	str	r3, [sp, #0]
 800be06:	462a      	mov	r2, r5
 800be08:	4b06      	ldr	r3, [pc, #24]	; (800be24 <_svfiprintf_r+0x1f8>)
 800be0a:	a904      	add	r1, sp, #16
 800be0c:	4638      	mov	r0, r7
 800be0e:	f000 f919 	bl	800c044 <_printf_i>
 800be12:	e7eb      	b.n	800bdec <_svfiprintf_r+0x1c0>
 800be14:	0800ce58 	.word	0x0800ce58
 800be18:	0800ce5e 	.word	0x0800ce5e
 800be1c:	0800ce62 	.word	0x0800ce62
 800be20:	00000000 	.word	0x00000000
 800be24:	0800bb79 	.word	0x0800bb79

0800be28 <sbrk_aligned>:
 800be28:	b570      	push	{r4, r5, r6, lr}
 800be2a:	4e0e      	ldr	r6, [pc, #56]	; (800be64 <sbrk_aligned+0x3c>)
 800be2c:	460c      	mov	r4, r1
 800be2e:	6831      	ldr	r1, [r6, #0]
 800be30:	4605      	mov	r5, r0
 800be32:	b911      	cbnz	r1, 800be3a <sbrk_aligned+0x12>
 800be34:	f000 fa7e 	bl	800c334 <_sbrk_r>
 800be38:	6030      	str	r0, [r6, #0]
 800be3a:	4621      	mov	r1, r4
 800be3c:	4628      	mov	r0, r5
 800be3e:	f000 fa79 	bl	800c334 <_sbrk_r>
 800be42:	1c43      	adds	r3, r0, #1
 800be44:	d00a      	beq.n	800be5c <sbrk_aligned+0x34>
 800be46:	1cc4      	adds	r4, r0, #3
 800be48:	f024 0403 	bic.w	r4, r4, #3
 800be4c:	42a0      	cmp	r0, r4
 800be4e:	d007      	beq.n	800be60 <sbrk_aligned+0x38>
 800be50:	1a21      	subs	r1, r4, r0
 800be52:	4628      	mov	r0, r5
 800be54:	f000 fa6e 	bl	800c334 <_sbrk_r>
 800be58:	3001      	adds	r0, #1
 800be5a:	d101      	bne.n	800be60 <sbrk_aligned+0x38>
 800be5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800be60:	4620      	mov	r0, r4
 800be62:	bd70      	pop	{r4, r5, r6, pc}
 800be64:	20000b68 	.word	0x20000b68

0800be68 <_malloc_r>:
 800be68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be6c:	1ccd      	adds	r5, r1, #3
 800be6e:	f025 0503 	bic.w	r5, r5, #3
 800be72:	3508      	adds	r5, #8
 800be74:	2d0c      	cmp	r5, #12
 800be76:	bf38      	it	cc
 800be78:	250c      	movcc	r5, #12
 800be7a:	2d00      	cmp	r5, #0
 800be7c:	4607      	mov	r7, r0
 800be7e:	db01      	blt.n	800be84 <_malloc_r+0x1c>
 800be80:	42a9      	cmp	r1, r5
 800be82:	d905      	bls.n	800be90 <_malloc_r+0x28>
 800be84:	230c      	movs	r3, #12
 800be86:	603b      	str	r3, [r7, #0]
 800be88:	2600      	movs	r6, #0
 800be8a:	4630      	mov	r0, r6
 800be8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bf64 <_malloc_r+0xfc>
 800be94:	f000 f9f8 	bl	800c288 <__malloc_lock>
 800be98:	f8d8 3000 	ldr.w	r3, [r8]
 800be9c:	461c      	mov	r4, r3
 800be9e:	bb5c      	cbnz	r4, 800bef8 <_malloc_r+0x90>
 800bea0:	4629      	mov	r1, r5
 800bea2:	4638      	mov	r0, r7
 800bea4:	f7ff ffc0 	bl	800be28 <sbrk_aligned>
 800bea8:	1c43      	adds	r3, r0, #1
 800beaa:	4604      	mov	r4, r0
 800beac:	d155      	bne.n	800bf5a <_malloc_r+0xf2>
 800beae:	f8d8 4000 	ldr.w	r4, [r8]
 800beb2:	4626      	mov	r6, r4
 800beb4:	2e00      	cmp	r6, #0
 800beb6:	d145      	bne.n	800bf44 <_malloc_r+0xdc>
 800beb8:	2c00      	cmp	r4, #0
 800beba:	d048      	beq.n	800bf4e <_malloc_r+0xe6>
 800bebc:	6823      	ldr	r3, [r4, #0]
 800bebe:	4631      	mov	r1, r6
 800bec0:	4638      	mov	r0, r7
 800bec2:	eb04 0903 	add.w	r9, r4, r3
 800bec6:	f000 fa35 	bl	800c334 <_sbrk_r>
 800beca:	4581      	cmp	r9, r0
 800becc:	d13f      	bne.n	800bf4e <_malloc_r+0xe6>
 800bece:	6821      	ldr	r1, [r4, #0]
 800bed0:	1a6d      	subs	r5, r5, r1
 800bed2:	4629      	mov	r1, r5
 800bed4:	4638      	mov	r0, r7
 800bed6:	f7ff ffa7 	bl	800be28 <sbrk_aligned>
 800beda:	3001      	adds	r0, #1
 800bedc:	d037      	beq.n	800bf4e <_malloc_r+0xe6>
 800bede:	6823      	ldr	r3, [r4, #0]
 800bee0:	442b      	add	r3, r5
 800bee2:	6023      	str	r3, [r4, #0]
 800bee4:	f8d8 3000 	ldr.w	r3, [r8]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d038      	beq.n	800bf5e <_malloc_r+0xf6>
 800beec:	685a      	ldr	r2, [r3, #4]
 800beee:	42a2      	cmp	r2, r4
 800bef0:	d12b      	bne.n	800bf4a <_malloc_r+0xe2>
 800bef2:	2200      	movs	r2, #0
 800bef4:	605a      	str	r2, [r3, #4]
 800bef6:	e00f      	b.n	800bf18 <_malloc_r+0xb0>
 800bef8:	6822      	ldr	r2, [r4, #0]
 800befa:	1b52      	subs	r2, r2, r5
 800befc:	d41f      	bmi.n	800bf3e <_malloc_r+0xd6>
 800befe:	2a0b      	cmp	r2, #11
 800bf00:	d917      	bls.n	800bf32 <_malloc_r+0xca>
 800bf02:	1961      	adds	r1, r4, r5
 800bf04:	42a3      	cmp	r3, r4
 800bf06:	6025      	str	r5, [r4, #0]
 800bf08:	bf18      	it	ne
 800bf0a:	6059      	strne	r1, [r3, #4]
 800bf0c:	6863      	ldr	r3, [r4, #4]
 800bf0e:	bf08      	it	eq
 800bf10:	f8c8 1000 	streq.w	r1, [r8]
 800bf14:	5162      	str	r2, [r4, r5]
 800bf16:	604b      	str	r3, [r1, #4]
 800bf18:	4638      	mov	r0, r7
 800bf1a:	f104 060b 	add.w	r6, r4, #11
 800bf1e:	f000 f9b9 	bl	800c294 <__malloc_unlock>
 800bf22:	f026 0607 	bic.w	r6, r6, #7
 800bf26:	1d23      	adds	r3, r4, #4
 800bf28:	1af2      	subs	r2, r6, r3
 800bf2a:	d0ae      	beq.n	800be8a <_malloc_r+0x22>
 800bf2c:	1b9b      	subs	r3, r3, r6
 800bf2e:	50a3      	str	r3, [r4, r2]
 800bf30:	e7ab      	b.n	800be8a <_malloc_r+0x22>
 800bf32:	42a3      	cmp	r3, r4
 800bf34:	6862      	ldr	r2, [r4, #4]
 800bf36:	d1dd      	bne.n	800bef4 <_malloc_r+0x8c>
 800bf38:	f8c8 2000 	str.w	r2, [r8]
 800bf3c:	e7ec      	b.n	800bf18 <_malloc_r+0xb0>
 800bf3e:	4623      	mov	r3, r4
 800bf40:	6864      	ldr	r4, [r4, #4]
 800bf42:	e7ac      	b.n	800be9e <_malloc_r+0x36>
 800bf44:	4634      	mov	r4, r6
 800bf46:	6876      	ldr	r6, [r6, #4]
 800bf48:	e7b4      	b.n	800beb4 <_malloc_r+0x4c>
 800bf4a:	4613      	mov	r3, r2
 800bf4c:	e7cc      	b.n	800bee8 <_malloc_r+0x80>
 800bf4e:	230c      	movs	r3, #12
 800bf50:	603b      	str	r3, [r7, #0]
 800bf52:	4638      	mov	r0, r7
 800bf54:	f000 f99e 	bl	800c294 <__malloc_unlock>
 800bf58:	e797      	b.n	800be8a <_malloc_r+0x22>
 800bf5a:	6025      	str	r5, [r4, #0]
 800bf5c:	e7dc      	b.n	800bf18 <_malloc_r+0xb0>
 800bf5e:	605b      	str	r3, [r3, #4]
 800bf60:	deff      	udf	#255	; 0xff
 800bf62:	bf00      	nop
 800bf64:	20000b64 	.word	0x20000b64

0800bf68 <_printf_common>:
 800bf68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf6c:	4616      	mov	r6, r2
 800bf6e:	4699      	mov	r9, r3
 800bf70:	688a      	ldr	r2, [r1, #8]
 800bf72:	690b      	ldr	r3, [r1, #16]
 800bf74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	bfb8      	it	lt
 800bf7c:	4613      	movlt	r3, r2
 800bf7e:	6033      	str	r3, [r6, #0]
 800bf80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bf84:	4607      	mov	r7, r0
 800bf86:	460c      	mov	r4, r1
 800bf88:	b10a      	cbz	r2, 800bf8e <_printf_common+0x26>
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	6033      	str	r3, [r6, #0]
 800bf8e:	6823      	ldr	r3, [r4, #0]
 800bf90:	0699      	lsls	r1, r3, #26
 800bf92:	bf42      	ittt	mi
 800bf94:	6833      	ldrmi	r3, [r6, #0]
 800bf96:	3302      	addmi	r3, #2
 800bf98:	6033      	strmi	r3, [r6, #0]
 800bf9a:	6825      	ldr	r5, [r4, #0]
 800bf9c:	f015 0506 	ands.w	r5, r5, #6
 800bfa0:	d106      	bne.n	800bfb0 <_printf_common+0x48>
 800bfa2:	f104 0a19 	add.w	sl, r4, #25
 800bfa6:	68e3      	ldr	r3, [r4, #12]
 800bfa8:	6832      	ldr	r2, [r6, #0]
 800bfaa:	1a9b      	subs	r3, r3, r2
 800bfac:	42ab      	cmp	r3, r5
 800bfae:	dc26      	bgt.n	800bffe <_printf_common+0x96>
 800bfb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bfb4:	1e13      	subs	r3, r2, #0
 800bfb6:	6822      	ldr	r2, [r4, #0]
 800bfb8:	bf18      	it	ne
 800bfba:	2301      	movne	r3, #1
 800bfbc:	0692      	lsls	r2, r2, #26
 800bfbe:	d42b      	bmi.n	800c018 <_printf_common+0xb0>
 800bfc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bfc4:	4649      	mov	r1, r9
 800bfc6:	4638      	mov	r0, r7
 800bfc8:	47c0      	blx	r8
 800bfca:	3001      	adds	r0, #1
 800bfcc:	d01e      	beq.n	800c00c <_printf_common+0xa4>
 800bfce:	6823      	ldr	r3, [r4, #0]
 800bfd0:	6922      	ldr	r2, [r4, #16]
 800bfd2:	f003 0306 	and.w	r3, r3, #6
 800bfd6:	2b04      	cmp	r3, #4
 800bfd8:	bf02      	ittt	eq
 800bfda:	68e5      	ldreq	r5, [r4, #12]
 800bfdc:	6833      	ldreq	r3, [r6, #0]
 800bfde:	1aed      	subeq	r5, r5, r3
 800bfe0:	68a3      	ldr	r3, [r4, #8]
 800bfe2:	bf0c      	ite	eq
 800bfe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bfe8:	2500      	movne	r5, #0
 800bfea:	4293      	cmp	r3, r2
 800bfec:	bfc4      	itt	gt
 800bfee:	1a9b      	subgt	r3, r3, r2
 800bff0:	18ed      	addgt	r5, r5, r3
 800bff2:	2600      	movs	r6, #0
 800bff4:	341a      	adds	r4, #26
 800bff6:	42b5      	cmp	r5, r6
 800bff8:	d11a      	bne.n	800c030 <_printf_common+0xc8>
 800bffa:	2000      	movs	r0, #0
 800bffc:	e008      	b.n	800c010 <_printf_common+0xa8>
 800bffe:	2301      	movs	r3, #1
 800c000:	4652      	mov	r2, sl
 800c002:	4649      	mov	r1, r9
 800c004:	4638      	mov	r0, r7
 800c006:	47c0      	blx	r8
 800c008:	3001      	adds	r0, #1
 800c00a:	d103      	bne.n	800c014 <_printf_common+0xac>
 800c00c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c014:	3501      	adds	r5, #1
 800c016:	e7c6      	b.n	800bfa6 <_printf_common+0x3e>
 800c018:	18e1      	adds	r1, r4, r3
 800c01a:	1c5a      	adds	r2, r3, #1
 800c01c:	2030      	movs	r0, #48	; 0x30
 800c01e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c022:	4422      	add	r2, r4
 800c024:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c028:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c02c:	3302      	adds	r3, #2
 800c02e:	e7c7      	b.n	800bfc0 <_printf_common+0x58>
 800c030:	2301      	movs	r3, #1
 800c032:	4622      	mov	r2, r4
 800c034:	4649      	mov	r1, r9
 800c036:	4638      	mov	r0, r7
 800c038:	47c0      	blx	r8
 800c03a:	3001      	adds	r0, #1
 800c03c:	d0e6      	beq.n	800c00c <_printf_common+0xa4>
 800c03e:	3601      	adds	r6, #1
 800c040:	e7d9      	b.n	800bff6 <_printf_common+0x8e>
	...

0800c044 <_printf_i>:
 800c044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c048:	7e0f      	ldrb	r7, [r1, #24]
 800c04a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c04c:	2f78      	cmp	r7, #120	; 0x78
 800c04e:	4691      	mov	r9, r2
 800c050:	4680      	mov	r8, r0
 800c052:	460c      	mov	r4, r1
 800c054:	469a      	mov	sl, r3
 800c056:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c05a:	d807      	bhi.n	800c06c <_printf_i+0x28>
 800c05c:	2f62      	cmp	r7, #98	; 0x62
 800c05e:	d80a      	bhi.n	800c076 <_printf_i+0x32>
 800c060:	2f00      	cmp	r7, #0
 800c062:	f000 80d4 	beq.w	800c20e <_printf_i+0x1ca>
 800c066:	2f58      	cmp	r7, #88	; 0x58
 800c068:	f000 80c0 	beq.w	800c1ec <_printf_i+0x1a8>
 800c06c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c070:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c074:	e03a      	b.n	800c0ec <_printf_i+0xa8>
 800c076:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c07a:	2b15      	cmp	r3, #21
 800c07c:	d8f6      	bhi.n	800c06c <_printf_i+0x28>
 800c07e:	a101      	add	r1, pc, #4	; (adr r1, 800c084 <_printf_i+0x40>)
 800c080:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c084:	0800c0dd 	.word	0x0800c0dd
 800c088:	0800c0f1 	.word	0x0800c0f1
 800c08c:	0800c06d 	.word	0x0800c06d
 800c090:	0800c06d 	.word	0x0800c06d
 800c094:	0800c06d 	.word	0x0800c06d
 800c098:	0800c06d 	.word	0x0800c06d
 800c09c:	0800c0f1 	.word	0x0800c0f1
 800c0a0:	0800c06d 	.word	0x0800c06d
 800c0a4:	0800c06d 	.word	0x0800c06d
 800c0a8:	0800c06d 	.word	0x0800c06d
 800c0ac:	0800c06d 	.word	0x0800c06d
 800c0b0:	0800c1f5 	.word	0x0800c1f5
 800c0b4:	0800c11d 	.word	0x0800c11d
 800c0b8:	0800c1af 	.word	0x0800c1af
 800c0bc:	0800c06d 	.word	0x0800c06d
 800c0c0:	0800c06d 	.word	0x0800c06d
 800c0c4:	0800c217 	.word	0x0800c217
 800c0c8:	0800c06d 	.word	0x0800c06d
 800c0cc:	0800c11d 	.word	0x0800c11d
 800c0d0:	0800c06d 	.word	0x0800c06d
 800c0d4:	0800c06d 	.word	0x0800c06d
 800c0d8:	0800c1b7 	.word	0x0800c1b7
 800c0dc:	682b      	ldr	r3, [r5, #0]
 800c0de:	1d1a      	adds	r2, r3, #4
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	602a      	str	r2, [r5, #0]
 800c0e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c0e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	e09f      	b.n	800c230 <_printf_i+0x1ec>
 800c0f0:	6820      	ldr	r0, [r4, #0]
 800c0f2:	682b      	ldr	r3, [r5, #0]
 800c0f4:	0607      	lsls	r7, r0, #24
 800c0f6:	f103 0104 	add.w	r1, r3, #4
 800c0fa:	6029      	str	r1, [r5, #0]
 800c0fc:	d501      	bpl.n	800c102 <_printf_i+0xbe>
 800c0fe:	681e      	ldr	r6, [r3, #0]
 800c100:	e003      	b.n	800c10a <_printf_i+0xc6>
 800c102:	0646      	lsls	r6, r0, #25
 800c104:	d5fb      	bpl.n	800c0fe <_printf_i+0xba>
 800c106:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c10a:	2e00      	cmp	r6, #0
 800c10c:	da03      	bge.n	800c116 <_printf_i+0xd2>
 800c10e:	232d      	movs	r3, #45	; 0x2d
 800c110:	4276      	negs	r6, r6
 800c112:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c116:	485a      	ldr	r0, [pc, #360]	; (800c280 <_printf_i+0x23c>)
 800c118:	230a      	movs	r3, #10
 800c11a:	e012      	b.n	800c142 <_printf_i+0xfe>
 800c11c:	682b      	ldr	r3, [r5, #0]
 800c11e:	6820      	ldr	r0, [r4, #0]
 800c120:	1d19      	adds	r1, r3, #4
 800c122:	6029      	str	r1, [r5, #0]
 800c124:	0605      	lsls	r5, r0, #24
 800c126:	d501      	bpl.n	800c12c <_printf_i+0xe8>
 800c128:	681e      	ldr	r6, [r3, #0]
 800c12a:	e002      	b.n	800c132 <_printf_i+0xee>
 800c12c:	0641      	lsls	r1, r0, #25
 800c12e:	d5fb      	bpl.n	800c128 <_printf_i+0xe4>
 800c130:	881e      	ldrh	r6, [r3, #0]
 800c132:	4853      	ldr	r0, [pc, #332]	; (800c280 <_printf_i+0x23c>)
 800c134:	2f6f      	cmp	r7, #111	; 0x6f
 800c136:	bf0c      	ite	eq
 800c138:	2308      	moveq	r3, #8
 800c13a:	230a      	movne	r3, #10
 800c13c:	2100      	movs	r1, #0
 800c13e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c142:	6865      	ldr	r5, [r4, #4]
 800c144:	60a5      	str	r5, [r4, #8]
 800c146:	2d00      	cmp	r5, #0
 800c148:	bfa2      	ittt	ge
 800c14a:	6821      	ldrge	r1, [r4, #0]
 800c14c:	f021 0104 	bicge.w	r1, r1, #4
 800c150:	6021      	strge	r1, [r4, #0]
 800c152:	b90e      	cbnz	r6, 800c158 <_printf_i+0x114>
 800c154:	2d00      	cmp	r5, #0
 800c156:	d04b      	beq.n	800c1f0 <_printf_i+0x1ac>
 800c158:	4615      	mov	r5, r2
 800c15a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c15e:	fb03 6711 	mls	r7, r3, r1, r6
 800c162:	5dc7      	ldrb	r7, [r0, r7]
 800c164:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c168:	4637      	mov	r7, r6
 800c16a:	42bb      	cmp	r3, r7
 800c16c:	460e      	mov	r6, r1
 800c16e:	d9f4      	bls.n	800c15a <_printf_i+0x116>
 800c170:	2b08      	cmp	r3, #8
 800c172:	d10b      	bne.n	800c18c <_printf_i+0x148>
 800c174:	6823      	ldr	r3, [r4, #0]
 800c176:	07de      	lsls	r6, r3, #31
 800c178:	d508      	bpl.n	800c18c <_printf_i+0x148>
 800c17a:	6923      	ldr	r3, [r4, #16]
 800c17c:	6861      	ldr	r1, [r4, #4]
 800c17e:	4299      	cmp	r1, r3
 800c180:	bfde      	ittt	le
 800c182:	2330      	movle	r3, #48	; 0x30
 800c184:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c188:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c18c:	1b52      	subs	r2, r2, r5
 800c18e:	6122      	str	r2, [r4, #16]
 800c190:	f8cd a000 	str.w	sl, [sp]
 800c194:	464b      	mov	r3, r9
 800c196:	aa03      	add	r2, sp, #12
 800c198:	4621      	mov	r1, r4
 800c19a:	4640      	mov	r0, r8
 800c19c:	f7ff fee4 	bl	800bf68 <_printf_common>
 800c1a0:	3001      	adds	r0, #1
 800c1a2:	d14a      	bne.n	800c23a <_printf_i+0x1f6>
 800c1a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c1a8:	b004      	add	sp, #16
 800c1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ae:	6823      	ldr	r3, [r4, #0]
 800c1b0:	f043 0320 	orr.w	r3, r3, #32
 800c1b4:	6023      	str	r3, [r4, #0]
 800c1b6:	4833      	ldr	r0, [pc, #204]	; (800c284 <_printf_i+0x240>)
 800c1b8:	2778      	movs	r7, #120	; 0x78
 800c1ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c1be:	6823      	ldr	r3, [r4, #0]
 800c1c0:	6829      	ldr	r1, [r5, #0]
 800c1c2:	061f      	lsls	r7, r3, #24
 800c1c4:	f851 6b04 	ldr.w	r6, [r1], #4
 800c1c8:	d402      	bmi.n	800c1d0 <_printf_i+0x18c>
 800c1ca:	065f      	lsls	r7, r3, #25
 800c1cc:	bf48      	it	mi
 800c1ce:	b2b6      	uxthmi	r6, r6
 800c1d0:	07df      	lsls	r7, r3, #31
 800c1d2:	bf48      	it	mi
 800c1d4:	f043 0320 	orrmi.w	r3, r3, #32
 800c1d8:	6029      	str	r1, [r5, #0]
 800c1da:	bf48      	it	mi
 800c1dc:	6023      	strmi	r3, [r4, #0]
 800c1de:	b91e      	cbnz	r6, 800c1e8 <_printf_i+0x1a4>
 800c1e0:	6823      	ldr	r3, [r4, #0]
 800c1e2:	f023 0320 	bic.w	r3, r3, #32
 800c1e6:	6023      	str	r3, [r4, #0]
 800c1e8:	2310      	movs	r3, #16
 800c1ea:	e7a7      	b.n	800c13c <_printf_i+0xf8>
 800c1ec:	4824      	ldr	r0, [pc, #144]	; (800c280 <_printf_i+0x23c>)
 800c1ee:	e7e4      	b.n	800c1ba <_printf_i+0x176>
 800c1f0:	4615      	mov	r5, r2
 800c1f2:	e7bd      	b.n	800c170 <_printf_i+0x12c>
 800c1f4:	682b      	ldr	r3, [r5, #0]
 800c1f6:	6826      	ldr	r6, [r4, #0]
 800c1f8:	6961      	ldr	r1, [r4, #20]
 800c1fa:	1d18      	adds	r0, r3, #4
 800c1fc:	6028      	str	r0, [r5, #0]
 800c1fe:	0635      	lsls	r5, r6, #24
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	d501      	bpl.n	800c208 <_printf_i+0x1c4>
 800c204:	6019      	str	r1, [r3, #0]
 800c206:	e002      	b.n	800c20e <_printf_i+0x1ca>
 800c208:	0670      	lsls	r0, r6, #25
 800c20a:	d5fb      	bpl.n	800c204 <_printf_i+0x1c0>
 800c20c:	8019      	strh	r1, [r3, #0]
 800c20e:	2300      	movs	r3, #0
 800c210:	6123      	str	r3, [r4, #16]
 800c212:	4615      	mov	r5, r2
 800c214:	e7bc      	b.n	800c190 <_printf_i+0x14c>
 800c216:	682b      	ldr	r3, [r5, #0]
 800c218:	1d1a      	adds	r2, r3, #4
 800c21a:	602a      	str	r2, [r5, #0]
 800c21c:	681d      	ldr	r5, [r3, #0]
 800c21e:	6862      	ldr	r2, [r4, #4]
 800c220:	2100      	movs	r1, #0
 800c222:	4628      	mov	r0, r5
 800c224:	f7f3 ffac 	bl	8000180 <memchr>
 800c228:	b108      	cbz	r0, 800c22e <_printf_i+0x1ea>
 800c22a:	1b40      	subs	r0, r0, r5
 800c22c:	6060      	str	r0, [r4, #4]
 800c22e:	6863      	ldr	r3, [r4, #4]
 800c230:	6123      	str	r3, [r4, #16]
 800c232:	2300      	movs	r3, #0
 800c234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c238:	e7aa      	b.n	800c190 <_printf_i+0x14c>
 800c23a:	6923      	ldr	r3, [r4, #16]
 800c23c:	462a      	mov	r2, r5
 800c23e:	4649      	mov	r1, r9
 800c240:	4640      	mov	r0, r8
 800c242:	47d0      	blx	sl
 800c244:	3001      	adds	r0, #1
 800c246:	d0ad      	beq.n	800c1a4 <_printf_i+0x160>
 800c248:	6823      	ldr	r3, [r4, #0]
 800c24a:	079b      	lsls	r3, r3, #30
 800c24c:	d413      	bmi.n	800c276 <_printf_i+0x232>
 800c24e:	68e0      	ldr	r0, [r4, #12]
 800c250:	9b03      	ldr	r3, [sp, #12]
 800c252:	4298      	cmp	r0, r3
 800c254:	bfb8      	it	lt
 800c256:	4618      	movlt	r0, r3
 800c258:	e7a6      	b.n	800c1a8 <_printf_i+0x164>
 800c25a:	2301      	movs	r3, #1
 800c25c:	4632      	mov	r2, r6
 800c25e:	4649      	mov	r1, r9
 800c260:	4640      	mov	r0, r8
 800c262:	47d0      	blx	sl
 800c264:	3001      	adds	r0, #1
 800c266:	d09d      	beq.n	800c1a4 <_printf_i+0x160>
 800c268:	3501      	adds	r5, #1
 800c26a:	68e3      	ldr	r3, [r4, #12]
 800c26c:	9903      	ldr	r1, [sp, #12]
 800c26e:	1a5b      	subs	r3, r3, r1
 800c270:	42ab      	cmp	r3, r5
 800c272:	dcf2      	bgt.n	800c25a <_printf_i+0x216>
 800c274:	e7eb      	b.n	800c24e <_printf_i+0x20a>
 800c276:	2500      	movs	r5, #0
 800c278:	f104 0619 	add.w	r6, r4, #25
 800c27c:	e7f5      	b.n	800c26a <_printf_i+0x226>
 800c27e:	bf00      	nop
 800c280:	0800ce69 	.word	0x0800ce69
 800c284:	0800ce7a 	.word	0x0800ce7a

0800c288 <__malloc_lock>:
 800c288:	4801      	ldr	r0, [pc, #4]	; (800c290 <__malloc_lock+0x8>)
 800c28a:	f7ff bc65 	b.w	800bb58 <__retarget_lock_acquire_recursive>
 800c28e:	bf00      	nop
 800c290:	20000b60 	.word	0x20000b60

0800c294 <__malloc_unlock>:
 800c294:	4801      	ldr	r0, [pc, #4]	; (800c29c <__malloc_unlock+0x8>)
 800c296:	f7ff bc60 	b.w	800bb5a <__retarget_lock_release_recursive>
 800c29a:	bf00      	nop
 800c29c:	20000b60 	.word	0x20000b60

0800c2a0 <_realloc_r>:
 800c2a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2a4:	4680      	mov	r8, r0
 800c2a6:	4614      	mov	r4, r2
 800c2a8:	460e      	mov	r6, r1
 800c2aa:	b921      	cbnz	r1, 800c2b6 <_realloc_r+0x16>
 800c2ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2b0:	4611      	mov	r1, r2
 800c2b2:	f7ff bdd9 	b.w	800be68 <_malloc_r>
 800c2b6:	b92a      	cbnz	r2, 800c2c4 <_realloc_r+0x24>
 800c2b8:	f000 f84c 	bl	800c354 <_free_r>
 800c2bc:	4625      	mov	r5, r4
 800c2be:	4628      	mov	r0, r5
 800c2c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2c4:	f000 f890 	bl	800c3e8 <_malloc_usable_size_r>
 800c2c8:	4284      	cmp	r4, r0
 800c2ca:	4607      	mov	r7, r0
 800c2cc:	d802      	bhi.n	800c2d4 <_realloc_r+0x34>
 800c2ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c2d2:	d812      	bhi.n	800c2fa <_realloc_r+0x5a>
 800c2d4:	4621      	mov	r1, r4
 800c2d6:	4640      	mov	r0, r8
 800c2d8:	f7ff fdc6 	bl	800be68 <_malloc_r>
 800c2dc:	4605      	mov	r5, r0
 800c2de:	2800      	cmp	r0, #0
 800c2e0:	d0ed      	beq.n	800c2be <_realloc_r+0x1e>
 800c2e2:	42bc      	cmp	r4, r7
 800c2e4:	4622      	mov	r2, r4
 800c2e6:	4631      	mov	r1, r6
 800c2e8:	bf28      	it	cs
 800c2ea:	463a      	movcs	r2, r7
 800c2ec:	f7ff fc36 	bl	800bb5c <memcpy>
 800c2f0:	4631      	mov	r1, r6
 800c2f2:	4640      	mov	r0, r8
 800c2f4:	f000 f82e 	bl	800c354 <_free_r>
 800c2f8:	e7e1      	b.n	800c2be <_realloc_r+0x1e>
 800c2fa:	4635      	mov	r5, r6
 800c2fc:	e7df      	b.n	800c2be <_realloc_r+0x1e>

0800c2fe <memmove>:
 800c2fe:	4288      	cmp	r0, r1
 800c300:	b510      	push	{r4, lr}
 800c302:	eb01 0402 	add.w	r4, r1, r2
 800c306:	d902      	bls.n	800c30e <memmove+0x10>
 800c308:	4284      	cmp	r4, r0
 800c30a:	4623      	mov	r3, r4
 800c30c:	d807      	bhi.n	800c31e <memmove+0x20>
 800c30e:	1e43      	subs	r3, r0, #1
 800c310:	42a1      	cmp	r1, r4
 800c312:	d008      	beq.n	800c326 <memmove+0x28>
 800c314:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c318:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c31c:	e7f8      	b.n	800c310 <memmove+0x12>
 800c31e:	4402      	add	r2, r0
 800c320:	4601      	mov	r1, r0
 800c322:	428a      	cmp	r2, r1
 800c324:	d100      	bne.n	800c328 <memmove+0x2a>
 800c326:	bd10      	pop	{r4, pc}
 800c328:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c32c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c330:	e7f7      	b.n	800c322 <memmove+0x24>
	...

0800c334 <_sbrk_r>:
 800c334:	b538      	push	{r3, r4, r5, lr}
 800c336:	4d06      	ldr	r5, [pc, #24]	; (800c350 <_sbrk_r+0x1c>)
 800c338:	2300      	movs	r3, #0
 800c33a:	4604      	mov	r4, r0
 800c33c:	4608      	mov	r0, r1
 800c33e:	602b      	str	r3, [r5, #0]
 800c340:	f7f6 fbce 	bl	8002ae0 <_sbrk>
 800c344:	1c43      	adds	r3, r0, #1
 800c346:	d102      	bne.n	800c34e <_sbrk_r+0x1a>
 800c348:	682b      	ldr	r3, [r5, #0]
 800c34a:	b103      	cbz	r3, 800c34e <_sbrk_r+0x1a>
 800c34c:	6023      	str	r3, [r4, #0]
 800c34e:	bd38      	pop	{r3, r4, r5, pc}
 800c350:	20000b6c 	.word	0x20000b6c

0800c354 <_free_r>:
 800c354:	b538      	push	{r3, r4, r5, lr}
 800c356:	4605      	mov	r5, r0
 800c358:	2900      	cmp	r1, #0
 800c35a:	d041      	beq.n	800c3e0 <_free_r+0x8c>
 800c35c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c360:	1f0c      	subs	r4, r1, #4
 800c362:	2b00      	cmp	r3, #0
 800c364:	bfb8      	it	lt
 800c366:	18e4      	addlt	r4, r4, r3
 800c368:	f7ff ff8e 	bl	800c288 <__malloc_lock>
 800c36c:	4a1d      	ldr	r2, [pc, #116]	; (800c3e4 <_free_r+0x90>)
 800c36e:	6813      	ldr	r3, [r2, #0]
 800c370:	b933      	cbnz	r3, 800c380 <_free_r+0x2c>
 800c372:	6063      	str	r3, [r4, #4]
 800c374:	6014      	str	r4, [r2, #0]
 800c376:	4628      	mov	r0, r5
 800c378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c37c:	f7ff bf8a 	b.w	800c294 <__malloc_unlock>
 800c380:	42a3      	cmp	r3, r4
 800c382:	d908      	bls.n	800c396 <_free_r+0x42>
 800c384:	6820      	ldr	r0, [r4, #0]
 800c386:	1821      	adds	r1, r4, r0
 800c388:	428b      	cmp	r3, r1
 800c38a:	bf01      	itttt	eq
 800c38c:	6819      	ldreq	r1, [r3, #0]
 800c38e:	685b      	ldreq	r3, [r3, #4]
 800c390:	1809      	addeq	r1, r1, r0
 800c392:	6021      	streq	r1, [r4, #0]
 800c394:	e7ed      	b.n	800c372 <_free_r+0x1e>
 800c396:	461a      	mov	r2, r3
 800c398:	685b      	ldr	r3, [r3, #4]
 800c39a:	b10b      	cbz	r3, 800c3a0 <_free_r+0x4c>
 800c39c:	42a3      	cmp	r3, r4
 800c39e:	d9fa      	bls.n	800c396 <_free_r+0x42>
 800c3a0:	6811      	ldr	r1, [r2, #0]
 800c3a2:	1850      	adds	r0, r2, r1
 800c3a4:	42a0      	cmp	r0, r4
 800c3a6:	d10b      	bne.n	800c3c0 <_free_r+0x6c>
 800c3a8:	6820      	ldr	r0, [r4, #0]
 800c3aa:	4401      	add	r1, r0
 800c3ac:	1850      	adds	r0, r2, r1
 800c3ae:	4283      	cmp	r3, r0
 800c3b0:	6011      	str	r1, [r2, #0]
 800c3b2:	d1e0      	bne.n	800c376 <_free_r+0x22>
 800c3b4:	6818      	ldr	r0, [r3, #0]
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	6053      	str	r3, [r2, #4]
 800c3ba:	4408      	add	r0, r1
 800c3bc:	6010      	str	r0, [r2, #0]
 800c3be:	e7da      	b.n	800c376 <_free_r+0x22>
 800c3c0:	d902      	bls.n	800c3c8 <_free_r+0x74>
 800c3c2:	230c      	movs	r3, #12
 800c3c4:	602b      	str	r3, [r5, #0]
 800c3c6:	e7d6      	b.n	800c376 <_free_r+0x22>
 800c3c8:	6820      	ldr	r0, [r4, #0]
 800c3ca:	1821      	adds	r1, r4, r0
 800c3cc:	428b      	cmp	r3, r1
 800c3ce:	bf04      	itt	eq
 800c3d0:	6819      	ldreq	r1, [r3, #0]
 800c3d2:	685b      	ldreq	r3, [r3, #4]
 800c3d4:	6063      	str	r3, [r4, #4]
 800c3d6:	bf04      	itt	eq
 800c3d8:	1809      	addeq	r1, r1, r0
 800c3da:	6021      	streq	r1, [r4, #0]
 800c3dc:	6054      	str	r4, [r2, #4]
 800c3de:	e7ca      	b.n	800c376 <_free_r+0x22>
 800c3e0:	bd38      	pop	{r3, r4, r5, pc}
 800c3e2:	bf00      	nop
 800c3e4:	20000b64 	.word	0x20000b64

0800c3e8 <_malloc_usable_size_r>:
 800c3e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3ec:	1f18      	subs	r0, r3, #4
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	bfbc      	itt	lt
 800c3f2:	580b      	ldrlt	r3, [r1, r0]
 800c3f4:	18c0      	addlt	r0, r0, r3
 800c3f6:	4770      	bx	lr

0800c3f8 <_init>:
 800c3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3fa:	bf00      	nop
 800c3fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3fe:	bc08      	pop	{r3}
 800c400:	469e      	mov	lr, r3
 800c402:	4770      	bx	lr

0800c404 <_fini>:
 800c404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c406:	bf00      	nop
 800c408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c40a:	bc08      	pop	{r3}
 800c40c:	469e      	mov	lr, r3
 800c40e:	4770      	bx	lr
