
COM_S2S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd68  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b5c  0800bea8  0800bea8  0001bea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca04  0800ca04  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca04  0800ca04  0001ca04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca0c  0800ca0c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca0c  0800ca0c  0001ca0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca10  0800ca10  0001ca10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800ca14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b00  20000064  0800ca78  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b64  0800ca78  00020b64  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021fb3  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ea5  00000000  00000000  00042084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f18  00000000  00000000  00046f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017b0  00000000  00000000  00048e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002251e  00000000  00000000  0004a5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000230e2  00000000  00000000  0006cb16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4643  00000000  00000000  0008fbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008500  00000000  00000000  0015423c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0015c73c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000064 	.word	0x20000064
 800015c:	00000000 	.word	0x00000000
 8000160:	0800be90 	.word	0x0800be90

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000068 	.word	0x20000068
 800017c:	0800be90 	.word	0x0800be90

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002a4:	f080 811b 	bcs.w	80004de <__udivmoddi4+0x28e>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8118 	bls.w	80004de <__udivmoddi4+0x28e>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002d2:	f080 8106 	bcs.w	80004e2 <__udivmoddi4+0x292>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8103 	bls.w	80004e2 <__udivmoddi4+0x292>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ec 	beq.w	80004d8 <__udivmoddi4+0x288>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f7 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 808f 	bne.w	800045e <__udivmoddi4+0x20e>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80ca 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80ba 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	4323      	orrs	r3, r4
 80003c2:	fa00 f901 	lsl.w	r9, r0, r1
 80003c6:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fbb5 f8f0 	udiv	r8, r5, r0
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	fb00 5518 	mls	r5, r0, r8, r5
 80003d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003dc:	fb08 f50e 	mul.w	r5, r8, lr
 80003e0:	42a5      	cmp	r5, r4
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f0 	udiv	r3, r4, r0
 8000408:	fb00 4413 	mls	r4, r0, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800042e:	fba0 8302 	umull	r8, r3, r0, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	429c      	cmp	r4, r3
 8000438:	46c6      	mov	lr, r8
 800043a:	461d      	mov	r5, r3
 800043c:	d355      	bcc.n	80004ea <__udivmoddi4+0x29a>
 800043e:	d052      	beq.n	80004e6 <__udivmoddi4+0x296>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb9 030e 	subs.w	r3, r9, lr
 8000446:	eb64 0405 	sbc.w	r4, r4, r5
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40cb      	lsrs	r3, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	431f      	orrs	r7, r3
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	2100      	movs	r1, #0
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c3 0120 	rsb	r1, r3, #32
 8000462:	fa02 fc03 	lsl.w	ip, r2, r3
 8000466:	fa20 f201 	lsr.w	r2, r0, r1
 800046a:	fa25 f101 	lsr.w	r1, r5, r1
 800046e:	409d      	lsls	r5, r3
 8000470:	432a      	orrs	r2, r5
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	fbb1 f0f7 	udiv	r0, r1, r7
 800047e:	fb07 1510 	mls	r5, r7, r0, r1
 8000482:	0c11      	lsrs	r1, r2, #16
 8000484:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000488:	fb00 f50e 	mul.w	r5, r0, lr
 800048c:	428d      	cmp	r5, r1
 800048e:	fa04 f403 	lsl.w	r4, r4, r3
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428d      	cmp	r5, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3802      	subs	r0, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1b49      	subs	r1, r1, r5
 80004a8:	b292      	uxth	r2, r2
 80004aa:	fbb1 f5f7 	udiv	r5, r1, r7
 80004ae:	fb07 1115 	mls	r1, r7, r5, r1
 80004b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b6:	fb05 f10e 	mul.w	r1, r5, lr
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x280>
 80004be:	eb1c 0202 	adds.w	r2, ip, r2
 80004c2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c6:	d216      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c8:	4291      	cmp	r1, r2
 80004ca:	d914      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004cc:	3d02      	subs	r5, #2
 80004ce:	4462      	add	r2, ip
 80004d0:	1a52      	subs	r2, r2, r1
 80004d2:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d6:	e739      	b.n	800034c <__udivmoddi4+0xfc>
 80004d8:	4631      	mov	r1, r6
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004de:	4639      	mov	r1, r7
 80004e0:	e6e7      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e2:	4610      	mov	r0, r2
 80004e4:	e6fc      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e6:	45c1      	cmp	r9, r8
 80004e8:	d2aa      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb63 050c 	sbc.w	r5, r3, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4645      	mov	r5, r8
 80004f8:	e7ea      	b.n	80004d0 <__udivmoddi4+0x280>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4640      	mov	r0, r8
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	46d0      	mov	r8, sl
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3d02      	subs	r5, #2
 8000508:	4462      	add	r2, ip
 800050a:	e733      	b.n	8000374 <__udivmoddi4+0x124>
 800050c:	4608      	mov	r0, r1
 800050e:	e70b      	b.n	8000328 <__udivmoddi4+0xd8>
 8000510:	4464      	add	r4, ip
 8000512:	3802      	subs	r0, #2
 8000514:	e743      	b.n	800039e <__udivmoddi4+0x14e>
 8000516:	bf00      	nop

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <updatePacket>:
uint8_t ax_buffer[150] = { 0 };
uint8_t ax_buff_stuffed[150] = { 0 };

uint8_t info_packet[INFO_LENGTH];

void updatePacket(uint8_t *OBC_Rx_buffer) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b088      	sub	sp, #32
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	info_packet[0] = OBC_Rx_buffer[1];  	// Packet Type
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	785a      	ldrb	r2, [r3, #1]
 8000528:	4b21      	ldr	r3, [pc, #132]	; (80005b0 <updatePacket+0x94>)
 800052a:	701a      	strb	r2, [r3, #0]
	int j = 1;
 800052c:	2301      	movs	r3, #1
 800052e:	61fb      	str	r3, [r7, #28]
	int k = 3;
 8000530:	2303      	movs	r3, #3
 8000532:	61bb      	str	r3, [r7, #24]
	int len_of_payload = OBC_Rx_buffer[2];  // length of info_field
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3302      	adds	r3, #2
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	60fb      	str	r3, [r7, #12]
	myDebug("\nlen_of_payload: %d\r\n", len_of_payload);
 800053c:	68f9      	ldr	r1, [r7, #12]
 800053e:	481d      	ldr	r0, [pc, #116]	; (80005b4 <updatePacket+0x98>)
 8000540:	f000 f964 	bl	800080c <myDebug>
	for (int i = 0; i < len_of_payload; i++) {
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]
 8000548:	e011      	b.n	800056e <updatePacket+0x52>
		info_packet[j] = OBC_Rx_buffer[k];
 800054a:	69bb      	ldr	r3, [r7, #24]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	4413      	add	r3, r2
 8000550:	7819      	ldrb	r1, [r3, #0]
 8000552:	4a17      	ldr	r2, [pc, #92]	; (80005b0 <updatePacket+0x94>)
 8000554:	69fb      	ldr	r3, [r7, #28]
 8000556:	4413      	add	r3, r2
 8000558:	460a      	mov	r2, r1
 800055a:	701a      	strb	r2, [r3, #0]
		j++;
 800055c:	69fb      	ldr	r3, [r7, #28]
 800055e:	3301      	adds	r3, #1
 8000560:	61fb      	str	r3, [r7, #28]
		k++;
 8000562:	69bb      	ldr	r3, [r7, #24]
 8000564:	3301      	adds	r3, #1
 8000566:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < len_of_payload; i++) {
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	3301      	adds	r3, #1
 800056c:	617b      	str	r3, [r7, #20]
 800056e:	697a      	ldr	r2, [r7, #20]
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	429a      	cmp	r2, r3
 8000574:	dbe9      	blt.n	800054a <updatePacket+0x2e>
	}
	myDebug("info_packet: 0x%x\r\n", info_packet);
 8000576:	490e      	ldr	r1, [pc, #56]	; (80005b0 <updatePacket+0x94>)
 8000578:	480f      	ldr	r0, [pc, #60]	; (80005b8 <updatePacket+0x9c>)
 800057a:	f000 f947 	bl	800080c <myDebug>
	for (int i = 0; i < len_of_payload; i++) {
 800057e:	2300      	movs	r3, #0
 8000580:	613b      	str	r3, [r7, #16]
 8000582:	e00a      	b.n	800059a <updatePacket+0x7e>
		myDebug("%02x ", info_packet[i]);
 8000584:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <updatePacket+0x94>)
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	4413      	add	r3, r2
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	4619      	mov	r1, r3
 800058e:	480b      	ldr	r0, [pc, #44]	; (80005bc <updatePacket+0xa0>)
 8000590:	f000 f93c 	bl	800080c <myDebug>
	for (int i = 0; i < len_of_payload; i++) {
 8000594:	693b      	ldr	r3, [r7, #16]
 8000596:	3301      	adds	r3, #1
 8000598:	613b      	str	r3, [r7, #16]
 800059a:	693a      	ldr	r2, [r7, #16]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	429a      	cmp	r2, r3
 80005a0:	dbf0      	blt.n	8000584 <updatePacket+0x68>
	}
	myDebug("\r\n");
 80005a2:	4807      	ldr	r0, [pc, #28]	; (80005c0 <updatePacket+0xa4>)
 80005a4:	f000 f932 	bl	800080c <myDebug>
}
 80005a8:	bf00      	nop
 80005aa:	3720      	adds	r7, #32
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	200001b0 	.word	0x200001b0
 80005b4:	0800bea8 	.word	0x0800bea8
 80005b8:	0800bec0 	.word	0x0800bec0
 80005bc:	0800bed4 	.word	0x0800bed4
 80005c0:	0800bedc 	.word	0x0800bedc

080005c4 <getHDLCPacket>:

void getHDLCPacket(uint8_t *data, uint8_t data_len) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	70fb      	strb	r3, [r7, #3]

	myDebug("After Bit stuffing: \n");
 80005d0:	4834      	ldr	r0, [pc, #208]	; (80006a4 <getHDLCPacket+0xe0>)
 80005d2:	f000 f91b 	bl	800080c <myDebug>
	myDebug("length of stuffed_packet: %d\r\n", data_len);
 80005d6:	78fb      	ldrb	r3, [r7, #3]
 80005d8:	4619      	mov	r1, r3
 80005da:	4833      	ldr	r0, [pc, #204]	; (80006a8 <getHDLCPacket+0xe4>)
 80005dc:	f000 f916 	bl	800080c <myDebug>
	for (int j = 0; j < data_len; j++) {
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
 80005e4:	e00a      	b.n	80005fc <getHDLCPacket+0x38>
		myDebug("%02x ", data[j]);
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	4413      	add	r3, r2
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	4619      	mov	r1, r3
 80005f0:	482e      	ldr	r0, [pc, #184]	; (80006ac <getHDLCPacket+0xe8>)
 80005f2:	f000 f90b 	bl	800080c <myDebug>
	for (int j = 0; j < data_len; j++) {
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	3301      	adds	r3, #1
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	78fb      	ldrb	r3, [r7, #3]
 80005fe:	697a      	ldr	r2, [r7, #20]
 8000600:	429a      	cmp	r2, r3
 8000602:	dbf0      	blt.n	80005e6 <getHDLCPacket+0x22>
	}
	myDebug("\r\n");
 8000604:	482a      	ldr	r0, [pc, #168]	; (80006b0 <getHDLCPacket+0xec>)
 8000606:	f000 f901 	bl	800080c <myDebug>

	uint16_t crc = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	817b      	strh	r3, [r7, #10]
	crc = calculateCRC_CCITT_AX25(data, data_len);
 800060e:	78fb      	ldrb	r3, [r7, #3]
 8000610:	4619      	mov	r1, r3
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f000 f976 	bl	8000904 <calculateCRC_CCITT_AX25>
 8000618:	4603      	mov	r3, r0
 800061a:	817b      	strh	r3, [r7, #10]

	temp_tx_buffer[0] = 0x7e;
 800061c:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <getHDLCPacket+0xf0>)
 800061e:	227e      	movs	r2, #126	; 0x7e
 8000620:	701a      	strb	r2, [r3, #0]

	int i = 1;
 8000622:	2301      	movs	r3, #1
 8000624:	613b      	str	r3, [r7, #16]
	for (int k = 0; k < data_len; k++) {
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	e00e      	b.n	800064a <getHDLCPacket+0x86>
		temp_tx_buffer[i] = data[k];
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	4413      	add	r3, r2
 8000632:	7819      	ldrb	r1, [r3, #0]
 8000634:	4a1f      	ldr	r2, [pc, #124]	; (80006b4 <getHDLCPacket+0xf0>)
 8000636:	693b      	ldr	r3, [r7, #16]
 8000638:	4413      	add	r3, r2
 800063a:	460a      	mov	r2, r1
 800063c:	701a      	strb	r2, [r3, #0]
		i++;
 800063e:	693b      	ldr	r3, [r7, #16]
 8000640:	3301      	adds	r3, #1
 8000642:	613b      	str	r3, [r7, #16]
	for (int k = 0; k < data_len; k++) {
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	3301      	adds	r3, #1
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	78fb      	ldrb	r3, [r7, #3]
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	429a      	cmp	r2, r3
 8000650:	dbec      	blt.n	800062c <getHDLCPacket+0x68>
	}

	// Store CRC result in the packet array
	temp_tx_buffer[i] = (crc >> 8) & 0xFF; // Most significant byte
 8000652:	897b      	ldrh	r3, [r7, #10]
 8000654:	0a1b      	lsrs	r3, r3, #8
 8000656:	b29b      	uxth	r3, r3
 8000658:	b2d9      	uxtb	r1, r3
 800065a:	4a16      	ldr	r2, [pc, #88]	; (80006b4 <getHDLCPacket+0xf0>)
 800065c:	693b      	ldr	r3, [r7, #16]
 800065e:	4413      	add	r3, r2
 8000660:	460a      	mov	r2, r1
 8000662:	701a      	strb	r2, [r3, #0]
	i++;
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	3301      	adds	r3, #1
 8000668:	613b      	str	r3, [r7, #16]
	temp_tx_buffer[i] = crc & 0xFF;        // Least significant byte
 800066a:	897b      	ldrh	r3, [r7, #10]
 800066c:	b2d9      	uxtb	r1, r3
 800066e:	4a11      	ldr	r2, [pc, #68]	; (80006b4 <getHDLCPacket+0xf0>)
 8000670:	693b      	ldr	r3, [r7, #16]
 8000672:	4413      	add	r3, r2
 8000674:	460a      	mov	r2, r1
 8000676:	701a      	strb	r2, [r3, #0]
	i++;
 8000678:	693b      	ldr	r3, [r7, #16]
 800067a:	3301      	adds	r3, #1
 800067c:	613b      	str	r3, [r7, #16]

	temp_tx_buffer[i] = 0x7e;
 800067e:	4a0d      	ldr	r2, [pc, #52]	; (80006b4 <getHDLCPacket+0xf0>)
 8000680:	693b      	ldr	r3, [r7, #16]
 8000682:	4413      	add	r3, r2
 8000684:	227e      	movs	r2, #126	; 0x7e
 8000686:	701a      	strb	r2, [r3, #0]
//	for (int j = 0; j < destuffed_size - 1; j++) {
//		myDebug("%02x ", tem[j]);
//	}
//	myDebug("\r\n");

	memset(ax_buffer, '\0', sizeof(ax_buffer));
 8000688:	2296      	movs	r2, #150	; 0x96
 800068a:	2100      	movs	r1, #0
 800068c:	480a      	ldr	r0, [pc, #40]	; (80006b8 <getHDLCPacket+0xf4>)
 800068e:	f00a ff7d 	bl	800b58c <memset>
	memset(ax_buff_stuffed, '\0', sizeof(ax_buff_stuffed));
 8000692:	2296      	movs	r2, #150	; 0x96
 8000694:	2100      	movs	r1, #0
 8000696:	4809      	ldr	r0, [pc, #36]	; (80006bc <getHDLCPacket+0xf8>)
 8000698:	f00a ff78 	bl	800b58c <memset>

}
 800069c:	bf00      	nop
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	0800bee0 	.word	0x0800bee0
 80006a8:	0800bef8 	.word	0x0800bef8
 80006ac:	0800bed4 	.word	0x0800bed4
 80006b0:	0800bedc 	.word	0x0800bedc
 80006b4:	20000368 	.word	0x20000368
 80006b8:	20000080 	.word	0x20000080
 80006bc:	20000118 	.word	0x20000118

080006c0 <getAX25Packet>:

void getAX25Packet(uint8_t *OBC_data_Field, uint8_t size) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	70fb      	strb	r3, [r7, #3]

	updatePacket(OBC_data_Field);
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f7ff ff25 	bl	800051c <updatePacket>

	//destination field   9N2SI -0
	ax_buffer[0] = 0x72; //	ASCII->9, HEX->0x39, 1 bit shifted->0b01110010, Shifted HEX->0x72
 80006d2:	4b3a      	ldr	r3, [pc, #232]	; (80007bc <getAX25Packet+0xfc>)
 80006d4:	2272      	movs	r2, #114	; 0x72
 80006d6:	701a      	strb	r2, [r3, #0]
	ax_buffer[1] = 0x9C; //	ASCII->N, HEX->0x4E, 1 bit shifted->0b10011100, Shifted HEX->0x9C
 80006d8:	4b38      	ldr	r3, [pc, #224]	; (80007bc <getAX25Packet+0xfc>)
 80006da:	229c      	movs	r2, #156	; 0x9c
 80006dc:	705a      	strb	r2, [r3, #1]
	ax_buffer[2] = 0x64; //	ASCII->2, HEX->0x32, 1 bit shifted->0b01100100, Shifted HEX->0x64
 80006de:	4b37      	ldr	r3, [pc, #220]	; (80007bc <getAX25Packet+0xfc>)
 80006e0:	2264      	movs	r2, #100	; 0x64
 80006e2:	709a      	strb	r2, [r3, #2]
	ax_buffer[3] = 0xA6; //	ASCII->S, HEX->0x53, 1 bit shifted->0b10100110, Shifted HEX->0xA6
 80006e4:	4b35      	ldr	r3, [pc, #212]	; (80007bc <getAX25Packet+0xfc>)
 80006e6:	22a6      	movs	r2, #166	; 0xa6
 80006e8:	70da      	strb	r2, [r3, #3]
	ax_buffer[4] = 0x64; //	ASCII->I, HEX->0x49, 1 bit shifted->0b10010010, Shifted HEX->0x92
 80006ea:	4b34      	ldr	r3, [pc, #208]	; (80007bc <getAX25Packet+0xfc>)
 80006ec:	2264      	movs	r2, #100	; 0x64
 80006ee:	711a      	strb	r2, [r3, #4]
	ax_buffer[5] = 0x40; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 80006f0:	4b32      	ldr	r3, [pc, #200]	; (80007bc <getAX25Packet+0xfc>)
 80006f2:	2240      	movs	r2, #64	; 0x40
 80006f4:	715a      	strb	r2, [r3, #5]
	ax_buffer[6] = 0xE0; //	0b111SSID0, SSID->0000 and LSB is set to 0; if more addresses follow, HEX->0xE0
 80006f6:	4b31      	ldr	r3, [pc, #196]	; (80007bc <getAX25Packet+0xfc>)
 80006f8:	22e0      	movs	r2, #224	; 0xe0
 80006fa:	719a      	strb	r2, [r3, #6]

	//source field   9N2SI -0
	ax_buffer[7] = 0x72; //	ASCII->9, HEX->0x39, 1 bit shifted->0b01110010, Shifted HEX->0x72
 80006fc:	4b2f      	ldr	r3, [pc, #188]	; (80007bc <getAX25Packet+0xfc>)
 80006fe:	2272      	movs	r2, #114	; 0x72
 8000700:	71da      	strb	r2, [r3, #7]
	ax_buffer[8] = 0x9C; //	ASCII->N, HEX->0x4E, 1 bit shifted->0b10011100, Shifted HEX->0x9C
 8000702:	4b2e      	ldr	r3, [pc, #184]	; (80007bc <getAX25Packet+0xfc>)
 8000704:	229c      	movs	r2, #156	; 0x9c
 8000706:	721a      	strb	r2, [r3, #8]
	ax_buffer[9] = 0x64; //	ASCII->2, HEX->0x32, 1 bit shifted->0b01100100, Shifted HEX->0x64
 8000708:	4b2c      	ldr	r3, [pc, #176]	; (80007bc <getAX25Packet+0xfc>)
 800070a:	2264      	movs	r2, #100	; 0x64
 800070c:	725a      	strb	r2, [r3, #9]
	ax_buffer[10] = 0xA6; //	ASCII->S, HEX->0x53, 1 bit shifted->0b10100110, Shifted HEX->0xA6
 800070e:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <getAX25Packet+0xfc>)
 8000710:	22a6      	movs	r2, #166	; 0xa6
 8000712:	729a      	strb	r2, [r3, #10]
	ax_buffer[11] = 0x64; //	ASCII->I, HEX->0x49, 1 bit shifted->0b10010010, Shifted HEX->0x92
 8000714:	4b29      	ldr	r3, [pc, #164]	; (80007bc <getAX25Packet+0xfc>)
 8000716:	2264      	movs	r2, #100	; 0x64
 8000718:	72da      	strb	r2, [r3, #11]
	ax_buffer[12] = 0x40; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 800071a:	4b28      	ldr	r3, [pc, #160]	; (80007bc <getAX25Packet+0xfc>)
 800071c:	2240      	movs	r2, #64	; 0x40
 800071e:	731a      	strb	r2, [r3, #12]
	ax_buffer[13] = 0x61; //	0b011SSID1, SSID->0000 and LSB is set to 1 if this is the last address, HEX->0x61
 8000720:	4b26      	ldr	r3, [pc, #152]	; (80007bc <getAX25Packet+0xfc>)
 8000722:	2261      	movs	r2, #97	; 0x61
 8000724:	735a      	strb	r2, [r3, #13]

	//control bit
	ax_buffer[14] = 0x03; //  Unnumbered Information Frame, AX.25 is always 0b00000011 i.e 0x03 in HEX
 8000726:	4b25      	ldr	r3, [pc, #148]	; (80007bc <getAX25Packet+0xfc>)
 8000728:	2203      	movs	r2, #3
 800072a:	739a      	strb	r2, [r3, #14]

	//protocol identifier
	ax_buffer[15] = 0xF0; //	No Layer-3 Implemented so, 0b11110000 i.e 0xF0 in HEX
 800072c:	4b23      	ldr	r3, [pc, #140]	; (80007bc <getAX25Packet+0xfc>)
 800072e:	22f0      	movs	r2, #240	; 0xf0
 8000730:	73da      	strb	r2, [r3, #15]

	int i = 16;
 8000732:	2310      	movs	r3, #16
 8000734:	617b      	str	r3, [r7, #20]

	for (int k = 0; k < size; k++) {
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	e00e      	b.n	800075a <getAX25Packet+0x9a>
		ax_buffer[i] = info_packet[k];
 800073c:	4a20      	ldr	r2, [pc, #128]	; (80007c0 <getAX25Packet+0x100>)
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	4413      	add	r3, r2
 8000742:	7819      	ldrb	r1, [r3, #0]
 8000744:	4a1d      	ldr	r2, [pc, #116]	; (80007bc <getAX25Packet+0xfc>)
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	4413      	add	r3, r2
 800074a:	460a      	mov	r2, r1
 800074c:	701a      	strb	r2, [r3, #0]
		i++;
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	3301      	adds	r3, #1
 8000752:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < size; k++) {
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	3301      	adds	r3, #1
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	78fb      	ldrb	r3, [r7, #3]
 800075c:	693a      	ldr	r2, [r7, #16]
 800075e:	429a      	cmp	r2, r3
 8000760:	dbec      	blt.n	800073c <getAX25Packet+0x7c>
	}

	myDebug("Before Bit stuffing: \n");
 8000762:	4818      	ldr	r0, [pc, #96]	; (80007c4 <getAX25Packet+0x104>)
 8000764:	f000 f852 	bl	800080c <myDebug>
	myDebug("length before Bit Stuffing: %d \r\n", i);
 8000768:	6979      	ldr	r1, [r7, #20]
 800076a:	4817      	ldr	r0, [pc, #92]	; (80007c8 <getAX25Packet+0x108>)
 800076c:	f000 f84e 	bl	800080c <myDebug>
	for (int j = 0; j < i; j++) {
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	e00a      	b.n	800078c <getAX25Packet+0xcc>
		myDebug("%02x ", ax_buffer[j]);
 8000776:	4a11      	ldr	r2, [pc, #68]	; (80007bc <getAX25Packet+0xfc>)
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	4413      	add	r3, r2
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	4619      	mov	r1, r3
 8000780:	4812      	ldr	r0, [pc, #72]	; (80007cc <getAX25Packet+0x10c>)
 8000782:	f000 f843 	bl	800080c <myDebug>
	for (int j = 0; j < i; j++) {
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	3301      	adds	r3, #1
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fa      	ldr	r2, [r7, #12]
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	429a      	cmp	r2, r3
 8000792:	dbf0      	blt.n	8000776 <getAX25Packet+0xb6>
	}
	myDebug("\r\n");
 8000794:	480e      	ldr	r0, [pc, #56]	; (80007d0 <getAX25Packet+0x110>)
 8000796:	f000 f839 	bl	800080c <myDebug>

	// Bit Stuffing
	int stuffed_size = bit_stuffing(ax_buffer, ax_buff_stuffed, i);
 800079a:	697a      	ldr	r2, [r7, #20]
 800079c:	490d      	ldr	r1, [pc, #52]	; (80007d4 <getAX25Packet+0x114>)
 800079e:	4807      	ldr	r0, [pc, #28]	; (80007bc <getAX25Packet+0xfc>)
 80007a0:	f000 f8ef 	bl	8000982 <bit_stuffing>
 80007a4:	60b8      	str	r0, [r7, #8]

	getHDLCPacket(ax_buff_stuffed, stuffed_size);
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	4619      	mov	r1, r3
 80007ac:	4809      	ldr	r0, [pc, #36]	; (80007d4 <getAX25Packet+0x114>)
 80007ae:	f7ff ff09 	bl	80005c4 <getHDLCPacket>
}
 80007b2:	bf00      	nop
 80007b4:	3718      	adds	r7, #24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000080 	.word	0x20000080
 80007c0:	200001b0 	.word	0x200001b0
 80007c4:	0800bf18 	.word	0x0800bf18
 80007c8:	0800bf30 	.word	0x0800bf30
 80007cc:	0800bed4 	.word	0x0800bed4
 80007d0:	0800bedc 	.word	0x0800bedc
 80007d4:	20000118 	.word	0x20000118

080007d8 <delay_us>:
 */


#include "com_debug.h"

void delay_us(uint32_t us) {
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	uint32_t delay_counter_disp;
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <delay_us+0x30>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2200      	movs	r2, #0
 80007e6:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 80007e8:	e002      	b.n	80007f0 <delay_us+0x18>
		delay_counter_disp++;
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	3301      	adds	r3, #1
 80007ee:	60fb      	str	r3, [r7, #12]
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <delay_us+0x30>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d8f6      	bhi.n	80007ea <delay_us+0x12>
	// wait for the counter to reach the us input in the parameter
}
 80007fc:	bf00      	nop
 80007fe:	bf00      	nop
 8000800:	3714      	adds	r7, #20
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr
 8000808:	200004cc 	.word	0x200004cc

0800080c <myDebug>:

void myDebug(const char *fmt, ...) {
 800080c:	b40f      	push	{r0, r1, r2, r3}
 800080e:	b580      	push	{r7, lr}
 8000810:	b082      	sub	sp, #8
 8000812:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	693a      	ldr	r2, [r7, #16]
 800081e:	2164      	movs	r1, #100	; 0x64
 8000820:	480a      	ldr	r0, [pc, #40]	; (800084c <myDebug+0x40>)
 8000822:	f00a fea5 	bl	800b570 <vsniprintf>
	va_end(args);
	int len = bufferSize(temp);
 8000826:	4809      	ldr	r0, [pc, #36]	; (800084c <myDebug+0x40>)
 8000828:	f000 f814 	bl	8000854 <bufferSize>
 800082c:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) temp, len, 1000);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	b29a      	uxth	r2, r3
 8000832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000836:	4905      	ldr	r1, [pc, #20]	; (800084c <myDebug+0x40>)
 8000838:	4805      	ldr	r0, [pc, #20]	; (8000850 <myDebug+0x44>)
 800083a:	f005 fc58 	bl	80060ee <HAL_UART_Transmit>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000848:	b004      	add	sp, #16
 800084a:	4770      	bx	lr
 800084c:	20000214 	.word	0x20000214
 8000850:	200005b0 	.word	0x200005b0

08000854 <bufferSize>:
	va_end(args);
	int len = bufferSize(temp);
	HAL_UART_Transmit(&huart2, (uint8_t*) temp, len, 1000);
}

int bufferSize(char *buffer) {
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	int i = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 8000860:	e002      	b.n	8000868 <bufferSize+0x14>
		i++;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	3301      	adds	r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	1c5a      	adds	r2, r3, #1
 800086c:	607a      	str	r2, [r7, #4]
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d1f6      	bne.n	8000862 <bufferSize+0xe>
	return i;
 8000874:	68fb      	ldr	r3, [r7, #12]
}
 8000876:	4618      	mov	r0, r3
 8000878:	3714      	adds	r7, #20
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800088c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800088e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4313      	orrs	r3, r2
 8000896:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800089c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4013      	ands	r3, r2
 80008a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008a4:	68fb      	ldr	r3, [r7, #12]
}
 80008a6:	bf00      	nop
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80008b4:	2004      	movs	r0, #4
 80008b6:	f7ff ffe3 	bl	8000880 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ba:	2001      	movs	r0, #1
 80008bc:	f7ff ffe0 	bl	8000880 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2100      	movs	r1, #0
 80008c4:	200b      	movs	r0, #11
 80008c6:	f002 fbcc 	bl	8003062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008ca:	200b      	movs	r0, #11
 80008cc:	f002 fbe3 	bl	8003096 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2100      	movs	r1, #0
 80008d4:	200c      	movs	r0, #12
 80008d6:	f002 fbc4 	bl	8003062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80008da:	200c      	movs	r0, #12
 80008dc:	f002 fbdb 	bl	8003096 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2100      	movs	r1, #0
 80008e4:	200d      	movs	r0, #13
 80008e6:	f002 fbbc 	bl	8003062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80008ea:	200d      	movs	r0, #13
 80008ec:	f002 fbd3 	bl	8003096 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2100      	movs	r1, #0
 80008f4:	200e      	movs	r0, #14
 80008f6:	f002 fbb4 	bl	8003062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80008fa:	200e      	movs	r0, #14
 80008fc:	f002 fbcb 	bl	8003096 <HAL_NVIC_EnableIRQ>

}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}

08000904 <calculateCRC_CCITT_AX25>:
 */

#include "error_handler.h"

// Function to calculate CRC-CCITT for AX.25 frames
uint16_t calculateCRC_CCITT_AX25(const uint8_t *data, size_t length) {
 8000904:	b480      	push	{r7}
 8000906:	b087      	sub	sp, #28
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0xFFFF; // Initialize CRC register with 0xFFFF
 800090e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000912:	82fb      	strh	r3, [r7, #22]
	uint16_t CRC_POLY = 0x1021; // CRC polynomial for CCITT (0x1021)
 8000914:	f241 0321 	movw	r3, #4129	; 0x1021
 8000918:	817b      	strh	r3, [r7, #10]

	// Iterate through each byte of the input data
	for (size_t i = 0; i < length; i++) {
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	e026      	b.n	800096e <calculateCRC_CCITT_AX25+0x6a>
		crc ^= ((uint16_t) data[i] << 8); // XOR CRC with next byte of input data
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	4413      	add	r3, r2
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	021b      	lsls	r3, r3, #8
 800092a:	b21a      	sxth	r2, r3
 800092c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000930:	4053      	eors	r3, r2
 8000932:	b21b      	sxth	r3, r3
 8000934:	82fb      	strh	r3, [r7, #22]

		// Iterate through each bit of the current byte
		for (int j = 0; j < 8; j++) {
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	e012      	b.n	8000962 <calculateCRC_CCITT_AX25+0x5e>
			if (crc & 0x8000) { // If MSB of CRC is 1
 800093c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000940:	2b00      	cmp	r3, #0
 8000942:	da08      	bge.n	8000956 <calculateCRC_CCITT_AX25+0x52>
				crc = (crc << 1) ^ CRC_POLY; // Left shift CRC and XOR with polynomial
 8000944:	8afb      	ldrh	r3, [r7, #22]
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	b21a      	sxth	r2, r3
 800094a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800094e:	4053      	eors	r3, r2
 8000950:	b21b      	sxth	r3, r3
 8000952:	82fb      	strh	r3, [r7, #22]
 8000954:	e002      	b.n	800095c <calculateCRC_CCITT_AX25+0x58>
			} else {
				crc <<= 1; // Left shift CRC
 8000956:	8afb      	ldrh	r3, [r7, #22]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++) {
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	3301      	adds	r3, #1
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	2b07      	cmp	r3, #7
 8000966:	dde9      	ble.n	800093c <calculateCRC_CCITT_AX25+0x38>
	for (size_t i = 0; i < length; i++) {
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	3301      	adds	r3, #1
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	429a      	cmp	r2, r3
 8000974:	d3d4      	bcc.n	8000920 <calculateCRC_CCITT_AX25+0x1c>
			}
		}
	}

	return crc; // Return calculated CRC
 8000976:	8afb      	ldrh	r3, [r7, #22]
}
 8000978:	4618      	mov	r0, r3
 800097a:	371c      	adds	r7, #28
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr

08000982 <bit_stuffing>:
	}
	crcReg = crcReg ^ 0xFFFF;						// Final XOR with 0xFFFF
	return crcReg;
}

int bit_stuffing(uint8_t *data, uint8_t *output_data, int length) {
 8000982:	b480      	push	{r7}
 8000984:	b08f      	sub	sp, #60	; 0x3c
 8000986:	af00      	add	r7, sp, #0
 8000988:	60f8      	str	r0, [r7, #12]
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607a      	str	r2, [r7, #4]
	int out_index = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	637b      	str	r3, [r7, #52]	; 0x34
	int bit_count = 0; // Count of consecutive 1 bits
 8000992:	2300      	movs	r3, #0
 8000994:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t current_byte = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	int bit_pos = 7;
 800099c:	2307      	movs	r3, #7
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
	int stuffed_size = 0; // Track size of output data after bit stuffing
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
	int bits_stuffed = 0; // Number of bits stuffed since last size increase
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]

	//myDebug("Error handler: before Bit stuffing \n");

	for (int i = 0; i < length; i++) {
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
 80009ac:	e078      	b.n	8000aa0 <bit_stuffing+0x11e>
		for (int bit = 7; bit >= 0; bit--) {
 80009ae:	2307      	movs	r3, #7
 80009b0:	61bb      	str	r3, [r7, #24]
 80009b2:	e06f      	b.n	8000a94 <bit_stuffing+0x112>
			int bit_val = (data[i] >> bit) & 1;
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	68fa      	ldr	r2, [r7, #12]
 80009b8:	4413      	add	r3, r2
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	69bb      	ldr	r3, [r7, #24]
 80009c0:	fa42 f303 	asr.w	r3, r2, r3
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	617b      	str	r3, [r7, #20]

		//	myDebug("%d ", bit_val);

			current_byte |= (bit_val << bit_pos);
 80009ca:	697a      	ldr	r2, [r7, #20]
 80009cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	b25a      	sxtb	r2, r3
 80009d4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80009d8:	4313      	orrs	r3, r2
 80009da:	b25b      	sxtb	r3, r3
 80009dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			bit_pos--;
 80009e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e2:	3b01      	subs	r3, #1
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28

			if (bit_val) {
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d02f      	beq.n	8000a4c <bit_stuffing+0xca>
				bit_count++;
 80009ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009ee:	3301      	adds	r3, #1
 80009f0:	633b      	str	r3, [r7, #48]	; 0x30
				if (bit_count == 5) {
 80009f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f4:	2b05      	cmp	r3, #5
 80009f6:	d12b      	bne.n	8000a50 <bit_stuffing+0xce>
					// Insert a 0 bit after five consecutive 1s
					if (bit_pos < 0) {
 80009f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	da10      	bge.n	8000a20 <bit_stuffing+0x9e>
						output_data[out_index++] = current_byte;
 80009fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a00:	1c5a      	adds	r2, r3, #1
 8000a02:	637a      	str	r2, [r7, #52]	; 0x34
 8000a04:	461a      	mov	r2, r3
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	4413      	add	r3, r2
 8000a0a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000a0e:	701a      	strb	r2, [r3, #0]
						stuffed_size++;
 8000a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a12:	3301      	adds	r3, #1
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
						current_byte = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						bit_pos = 7;
 8000a1c:	2307      	movs	r3, #7
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
					}
					current_byte &= ~(1 << bit_pos);
 8000a20:	2201      	movs	r2, #1
 8000a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	b25b      	sxtb	r3, r3
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	b25a      	sxtb	r2, r3
 8000a2e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000a32:	4013      	ands	r3, r2
 8000a34:	b25b      	sxtb	r3, r3
 8000a36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					bit_pos--;
 8000a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a3c:	3b01      	subs	r3, #1
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
					bits_stuffed++;
 8000a40:	6a3b      	ldr	r3, [r7, #32]
 8000a42:	3301      	adds	r3, #1
 8000a44:	623b      	str	r3, [r7, #32]
					bit_count = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	633b      	str	r3, [r7, #48]	; 0x30
 8000a4a:	e001      	b.n	8000a50 <bit_stuffing+0xce>
				}
			} else {
				bit_count = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	633b      	str	r3, [r7, #48]	; 0x30
			}

			if (bit_pos < 0) {
 8000a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	da10      	bge.n	8000a78 <bit_stuffing+0xf6>
				output_data[out_index++] = current_byte;
 8000a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a58:	1c5a      	adds	r2, r3, #1
 8000a5a:	637a      	str	r2, [r7, #52]	; 0x34
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	4413      	add	r3, r2
 8000a62:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000a66:	701a      	strb	r2, [r3, #0]
				stuffed_size++;
 8000a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
				current_byte = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				bit_pos = 7;
 8000a74:	2307      	movs	r3, #7
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			// Check if we've stuffed enough bits to increase size
			if (bits_stuffed >= 9 && bit_pos >= 0) {
 8000a78:	6a3b      	ldr	r3, [r7, #32]
 8000a7a:	2b08      	cmp	r3, #8
 8000a7c:	dd07      	ble.n	8000a8e <bit_stuffing+0x10c>
 8000a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	db04      	blt.n	8000a8e <bit_stuffing+0x10c>
				stuffed_size++;
 8000a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a86:	3301      	adds	r3, #1
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
				bits_stuffed = 0; // Reset bits_stuffed after increasing size
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
		for (int bit = 7; bit >= 0; bit--) {
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	3b01      	subs	r3, #1
 8000a92:	61bb      	str	r3, [r7, #24]
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	da8c      	bge.n	80009b4 <bit_stuffing+0x32>
	for (int i = 0; i < length; i++) {
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
 8000aa0:	69fa      	ldr	r2, [r7, #28]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	db82      	blt.n	80009ae <bit_stuffing+0x2c>
			}
		}
	}
	//myDebug("\n");

	if (bit_pos < 7) {
 8000aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aaa:	2b06      	cmp	r3, #6
 8000aac:	dc0b      	bgt.n	8000ac6 <bit_stuffing+0x144>
		output_data[out_index++] = current_byte;
 8000aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab0:	1c5a      	adds	r2, r3, #1
 8000ab2:	637a      	str	r2, [r7, #52]	; 0x34
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	4413      	add	r3, r2
 8000aba:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000abe:	701a      	strb	r2, [r3, #0]
		stuffed_size++;
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
//			myDebug("%d ", bit_val);
//		}
//	}
//	myDebug("\n");

	return out_index; // Return the size of output data after bit stuffing
 8000ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	373c      	adds	r7, #60	; 0x3c
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr

08000ad2 <bit_destuffing>:

int bit_destuffing(uint8_t *data, uint8_t *output_data, int length) {
 8000ad2:	b480      	push	{r7}
 8000ad4:	b08d      	sub	sp, #52	; 0x34
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	60f8      	str	r0, [r7, #12]
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
    int out_index = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
    int bit_count = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t current_byte = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int bit_pos = 7;
 8000aec:	2307      	movs	r3, #7
 8000aee:	623b      	str	r3, [r7, #32]

    for (int i = 0; i < length; i++) {
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
 8000af4:	e052      	b.n	8000b9c <bit_destuffing+0xca>
        for (int bit = 7; bit >= 0; bit--) {
 8000af6:	2307      	movs	r3, #7
 8000af8:	61bb      	str	r3, [r7, #24]
 8000afa:	e049      	b.n	8000b90 <bit_destuffing+0xbe>
            int bit_val = (data[i] >> bit) & 1;
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	4413      	add	r3, r2
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	461a      	mov	r2, r3
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	fa42 f303 	asr.w	r3, r2, r3
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	617b      	str	r3, [r7, #20]

            if (bit_val) {
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d011      	beq.n	8000b3c <bit_destuffing+0x6a>
                bit_count++;
 8000b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
                current_byte |= (bit_val << bit_pos);
 8000b1e:	697a      	ldr	r2, [r7, #20]
 8000b20:	6a3b      	ldr	r3, [r7, #32]
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	b25a      	sxtb	r2, r3
 8000b28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	b25b      	sxtb	r3, r3
 8000b30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                bit_pos--;
 8000b34:	6a3b      	ldr	r3, [r7, #32]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	623b      	str	r3, [r7, #32]
 8000b3a:	e015      	b.n	8000b68 <bit_destuffing+0x96>
            } else {
                if (bit_count == 5) {
 8000b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b3e:	2b05      	cmp	r3, #5
 8000b40:	d102      	bne.n	8000b48 <bit_destuffing+0x76>
                    // Skip this bit as it is a stuffed bit
                    bit_count = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
                    continue;
 8000b46:	e020      	b.n	8000b8a <bit_destuffing+0xb8>
                } else {
                    bit_count = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
                    current_byte |= (bit_val << bit_pos);
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	6a3b      	ldr	r3, [r7, #32]
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	b25a      	sxtb	r2, r3
 8000b56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	b25b      	sxtb	r3, r3
 8000b5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    bit_pos--;
 8000b62:	6a3b      	ldr	r3, [r7, #32]
 8000b64:	3b01      	subs	r3, #1
 8000b66:	623b      	str	r3, [r7, #32]
                }
            }

            if (bit_pos < 0) {
 8000b68:	6a3b      	ldr	r3, [r7, #32]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	da0d      	bge.n	8000b8a <bit_destuffing+0xb8>
                output_data[out_index++] = current_byte;
 8000b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b70:	1c5a      	adds	r2, r3, #1
 8000b72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000b74:	461a      	mov	r2, r3
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	4413      	add	r3, r2
 8000b7a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000b7e:	701a      	strb	r2, [r3, #0]
                current_byte = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                bit_pos = 7;
 8000b86:	2307      	movs	r3, #7
 8000b88:	623b      	str	r3, [r7, #32]
        for (int bit = 7; bit >= 0; bit--) {
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	61bb      	str	r3, [r7, #24]
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	dab2      	bge.n	8000afc <bit_destuffing+0x2a>
    for (int i = 0; i < length; i++) {
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	61fb      	str	r3, [r7, #28]
 8000b9c:	69fa      	ldr	r2, [r7, #28]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	dba8      	blt.n	8000af6 <bit_destuffing+0x24>
            }
        }
    }

    // Ensure the last byte is written if it's partially filled
    if (bit_pos < 7) {
 8000ba4:	6a3b      	ldr	r3, [r7, #32]
 8000ba6:	2b06      	cmp	r3, #6
 8000ba8:	dc08      	bgt.n	8000bbc <bit_destuffing+0xea>
        output_data[out_index++] = current_byte;
 8000baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bac:	1c5a      	adds	r2, r3, #1
 8000bae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000bba:	701a      	strb	r2, [r3, #0]
//			myDebug("%d ", bit_val);
//		}
//	}
//	myDebug("\n");

    return out_index;
 8000bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3734      	adds	r7, #52	; 0x34
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr

08000bc8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000be4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4013      	ands	r3, r2
 8000bea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bec:	68fb      	ldr	r3, [r7, #12]
}
 8000bee:	bf00      	nop
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr

08000bf8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f7ff ffdb 	bl	8000bc8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c12:	2002      	movs	r0, #2
 8000c14:	f7ff ffd8 	bl	8000bc8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c18:	2004      	movs	r0, #4
 8000c1a:	f7ff ffd5 	bl	8000bc8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 8000c24:	481f      	ldr	r0, [pc, #124]	; (8000ca4 <MX_GPIO_Init+0xac>)
 8000c26:	f002 ff33 	bl	8003a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2138      	movs	r1, #56	; 0x38
 8000c2e:	481e      	ldr	r0, [pc, #120]	; (8000ca8 <MX_GPIO_Init+0xb0>)
 8000c30:	f002 ff2e 	bl	8003a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000c34:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000c38:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c42:	2302      	movs	r3, #2
 8000c44:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4816      	ldr	r0, [pc, #88]	; (8000ca4 <MX_GPIO_Init+0xac>)
 8000c4c:	f002 fdc0 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000c50:	2338      	movs	r3, #56	; 0x38
 8000c52:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	4619      	mov	r1, r3
 8000c64:	4810      	ldr	r0, [pc, #64]	; (8000ca8 <MX_GPIO_Init+0xb0>)
 8000c66:	f002 fdb3 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c6e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c74:	2301      	movs	r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c80:	f002 fda6 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000c84:	2340      	movs	r3, #64	; 0x40
 8000c86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c88:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	4619      	mov	r1, r3
 8000c96:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <MX_GPIO_Init+0xb0>)
 8000c98:	f002 fd9a 	bl	80037d0 <HAL_GPIO_Init>

}
 8000c9c:	bf00      	nop
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	48000400 	.word	0x48000400
 8000ca8:	48000800 	.word	0x48000800

08000cac <countsDataBetweenFlags>:
int countsDataBetweenFlags(uint8_t *data, int data_length);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int countsDataBetweenFlags(uint8_t *data, int data_length) {
 8000cac:	b480      	push	{r7}
 8000cae:	b087      	sub	sp, #28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
	int found_first_7e = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
	int start_index = 0, end_index = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < data_length; i++) {
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	e013      	b.n	8000cf0 <countsDataBetweenFlags+0x44>
		if (data[i] == 0x7e) {
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b7e      	cmp	r3, #126	; 0x7e
 8000cd2:	d10a      	bne.n	8000cea <countsDataBetweenFlags+0x3e>
			if (!found_first_7e) {
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d104      	bne.n	8000ce4 <countsDataBetweenFlags+0x38>
				found_first_7e = 1;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	617b      	str	r3, [r7, #20]
				start_index = i;
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	e002      	b.n	8000cea <countsDataBetweenFlags+0x3e>
			} else {
				end_index = i;
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	60fb      	str	r3, [r7, #12]
				break;
 8000ce8:	e006      	b.n	8000cf8 <countsDataBetweenFlags+0x4c>
	for (int i = 0; i < data_length; i++) {
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	3301      	adds	r3, #1
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68ba      	ldr	r2, [r7, #8]
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	dbe7      	blt.n	8000cc8 <countsDataBetweenFlags+0x1c>
			}
		}
	}

	if (end_index > start_index) {
 8000cf8:	68fa      	ldr	r2, [r7, #12]
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	dd04      	ble.n	8000d0a <countsDataBetweenFlags+0x5e>
		return end_index - start_index + 1;
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	3301      	adds	r3, #1
 8000d08:	e001      	b.n	8000d0e <countsDataBetweenFlags+0x62>
	} else {
		return -1; // Return -1 if two 0x7E flags are not found
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	371c      	adds	r7, #28
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr

08000d18 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d1e:	f002 f85d 	bl	8002ddc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d22:	f000 fa6b 	bl	80011fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d26:	f7ff ff67 	bl	8000bf8 <MX_GPIO_Init>
	MX_DMA_Init();
 8000d2a:	f7ff fdc1 	bl	80008b0 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000d2e:	f001 fe47 	bl	80029c0 <MX_USART2_UART_Init>
	MX_LPUART1_UART_Init();
 8000d32:	f001 fdab 	bl	800288c <MX_LPUART1_UART_Init>
	MX_TIM2_Init();
 8000d36:	f001 fc73 	bl	8002620 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8000d3a:	f001 fdf5 	bl	8002928 <MX_USART1_UART_Init>
	MX_SubGHz_Phy_Init();
 8000d3e:	f00a f866 	bl	800ae0e <MX_SubGHz_Phy_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim2);
 8000d42:	487f      	ldr	r0, [pc, #508]	; (8000f40 <main+0x228>)
 8000d44:	f004 fefc 	bl	8005b40 <HAL_TIM_Base_Start>

	myDebug("########## Slippers2Sat SATELLITE COM: BEGIN ##########\r\n");
 8000d48:	487e      	ldr	r0, [pc, #504]	; (8000f44 <main+0x22c>)
 8000d4a:	f7ff fd5f 	bl	800080c <myDebug>
	myDebug("########## COMMUNICATION PARAMETERS ##########\r\n");
 8000d4e:	487e      	ldr	r0, [pc, #504]	; (8000f48 <main+0x230>)
 8000d50:	f7ff fd5c 	bl	800080c <myDebug>
	myDebug("Modulation: GFSK PACKET\r\n");
 8000d54:	487d      	ldr	r0, [pc, #500]	; (8000f4c <main+0x234>)
 8000d56:	f7ff fd59 	bl	800080c <myDebug>
	myDebug("FREQUENCY MODES: DOWNLINK FREQ: %luHz and UPLINK FREQ: %lu Hz\r\n",
 8000d5a:	4a7d      	ldr	r2, [pc, #500]	; (8000f50 <main+0x238>)
 8000d5c:	497d      	ldr	r1, [pc, #500]	; (8000f54 <main+0x23c>)
 8000d5e:	487e      	ldr	r0, [pc, #504]	; (8000f58 <main+0x240>)
 8000d60:	f7ff fd54 	bl	800080c <myDebug>
	FREQ_437_MHZ, FREQ_435_MHZ);
	myDebug("STM32 BSP_SubGHz-WL Radio: Low Power\n");
 8000d64:	487d      	ldr	r0, [pc, #500]	; (8000f5c <main+0x244>)
 8000d66:	f7ff fd51 	bl	800080c <myDebug>
	myDebug(
 8000d6a:	230e      	movs	r3, #14
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	2301      	movs	r3, #1
 8000d70:	2200      	movs	r2, #0
 8000d72:	2104      	movs	r1, #4
 8000d74:	487a      	ldr	r0, [pc, #488]	; (8000f60 <main+0x248>)
 8000d76:	f7ff fd49 	bl	800080c <myDebug>
			"POWER CONFIG:::- \n"
					"\t PA_DUTY_CYCLE: %x, HP_MAX: %x, PA_SEL: %x, POWER TX: %u dBm\r\n",
			PA_DUTY_CYCLE, HP_MAX, PA_SEL, POWER);

	myDebug("\n########## Wait for Handshake ##########\r\n");
 8000d7a:	487a      	ldr	r0, [pc, #488]	; (8000f64 <main+0x24c>)
 8000d7c:	f7ff fd46 	bl	800080c <myDebug>

	pkt_params.PacketType = PACKET_TYPE_GFSK;
 8000d80:	4b79      	ldr	r3, [pc, #484]	; (8000f68 <main+0x250>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
	pkt_params.Params.Gfsk.PayloadLength = RX_BUFF_LENGTH;
 8000d86:	4b78      	ldr	r3, [pc, #480]	; (8000f68 <main+0x250>)
 8000d88:	2264      	movs	r2, #100	; 0x64
 8000d8a:	721a      	strb	r2, [r3, #8]
	pkt_params.Params.Gfsk.PreambleLength = 8; /*Convert byte into bit*/
 8000d8c:	4b76      	ldr	r3, [pc, #472]	; (8000f68 <main+0x250>)
 8000d8e:	2208      	movs	r2, #8
 8000d90:	805a      	strh	r2, [r3, #2]
	pkt_params.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8000d92:	4b75      	ldr	r3, [pc, #468]	; (8000f68 <main+0x250>)
 8000d94:	2204      	movs	r2, #4
 8000d96:	711a      	strb	r2, [r3, #4]
	pkt_params.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8000d98:	4b73      	ldr	r3, [pc, #460]	; (8000f68 <main+0x250>)
 8000d9a:	2218      	movs	r2, #24
 8000d9c:	715a      	strb	r2, [r3, #5]
	pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8000d9e:	4b72      	ldr	r3, [pc, #456]	; (8000f68 <main+0x250>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	719a      	strb	r2, [r3, #6]
	pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8000da4:	4b70      	ldr	r3, [pc, #448]	; (8000f68 <main+0x250>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	71da      	strb	r2, [r3, #7]
	pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8000daa:	4b6f      	ldr	r3, [pc, #444]	; (8000f68 <main+0x250>)
 8000dac:	22f2      	movs	r2, #242	; 0xf2
 8000dae:	725a      	strb	r2, [r3, #9]
	pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8000db0:	4b6d      	ldr	r3, [pc, #436]	; (8000f68 <main+0x250>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	729a      	strb	r2, [r3, #10]

	mod_params.PacketType = PACKET_TYPE_GFSK;
 8000db6:	4b6d      	ldr	r3, [pc, #436]	; (8000f6c <main+0x254>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]
	mod_params.Params.Gfsk.Bandwidth = RX_BW_29300; /*Not used in TX*/
 8000dbc:	4b6b      	ldr	r3, [pc, #428]	; (8000f6c <main+0x254>)
 8000dbe:	220d      	movs	r2, #13
 8000dc0:	735a      	strb	r2, [r3, #13]
	mod_params.Params.Gfsk.BitRate = DEMO_DEFAULT_BR_1200;
 8000dc2:	4b6a      	ldr	r3, [pc, #424]	; (8000f6c <main+0x254>)
 8000dc4:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000dc8:	605a      	str	r2, [r3, #4]
	mod_params.Params.Gfsk.Fdev = DEMO_DEFAULT_FDEV_1200;
 8000dca:	4b68      	ldr	r3, [pc, #416]	; (8000f6c <main+0x254>)
 8000dcc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000dd0:	609a      	str	r2, [r3, #8]
	mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8000dd2:	4b66      	ldr	r3, [pc, #408]	; (8000f6c <main+0x254>)
 8000dd4:	220b      	movs	r2, #11
 8000dd6:	731a      	strb	r2, [r3, #12]

	SUBGRF_Init(DioIrqHndlr);
 8000dd8:	4865      	ldr	r0, [pc, #404]	; (8000f70 <main+0x258>)
 8000dda:	f008 fdcf 	bl	800997c <SUBGRF_Init>
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8000dde:	2100      	movs	r1, #0
 8000de0:	2000      	movs	r0, #0
 8000de2:	f009 fc37 	bl	800a654 <SUBGRF_SetBufferBaseAddress>
	SUBGRF_SetPacketParams(&pkt_params);
 8000de6:	4860      	ldr	r0, [pc, #384]	; (8000f68 <main+0x250>)
 8000de8:	f009 fb96 	bl	800a518 <SUBGRF_SetPacketParams>
	SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00,
 8000dec:	4a61      	ldr	r2, [pc, #388]	; (8000f74 <main+0x25c>)
 8000dee:	f107 030c 	add.w	r3, r7, #12
 8000df2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000df6:	e883 0003 	stmia.w	r3, {r0, r1}
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f008 fe53 	bl	8009aaa <SUBGRF_SetSyncWord>
					0x00 });
	SUBGRF_SetWhiteningSeed(0x01FF);
 8000e04:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000e08:	f008 fe9e 	bl	8009b48 <SUBGRF_SetWhiteningSeed>
	SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 8000e0c:	4850      	ldr	r0, [pc, #320]	; (8000f50 <main+0x238>)
 8000e0e:	f009 f977 	bl	800a100 <SUBGRF_SetRfFrequency>
	SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 8000e12:	2301      	movs	r3, #1
 8000e14:	2201      	movs	r2, #1
 8000e16:	2100      	movs	r1, #0
 8000e18:	2004      	movs	r0, #4
 8000e1a:	f009 f8f3 	bl	800a004 <SUBGRF_SetPaConfig>
	SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME); // Set to RFO_LP for low power
 8000e1e:	2202      	movs	r2, #2
 8000e20:	210e      	movs	r1, #14
 8000e22:	2001      	movs	r0, #1
 8000e24:	f009 f9d8 	bl	800a1d8 <SUBGRF_SetTxParams>
	SUBGRF_SetModulationParams(&mod_params);
 8000e28:	4850      	ldr	r0, [pc, #320]	; (8000f6c <main+0x254>)
 8000e2a:	f009 faa3 	bl	800a374 <SUBGRF_SetModulationParams>
	SUBGRF_SetDioIrqParams(
 8000e2e:	2300      	movs	r3, #0
 8000e30:	2200      	movs	r2, #0
 8000e32:	f240 210f 	movw	r1, #527	; 0x20f
 8000e36:	f240 200f 	movw	r0, #527	; 0x20f
 8000e3a:	f009 f905 	bl	800a048 <SUBGRF_SetDioIrqParams>
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
			IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID, IRQ_RADIO_NONE,
			IRQ_RADIO_NONE);

	while (OBC_HANDSHAKE_FLAG == 0) {
 8000e3e:	e001      	b.n	8000e44 <main+0x12c>
		WAIT_FOR_HANDSHAKE();
 8000e40:	f001 f95c 	bl	80020fc <WAIT_FOR_HANDSHAKE>
	while (OBC_HANDSHAKE_FLAG == 0) {
 8000e44:	4b4c      	ldr	r3, [pc, #304]	; (8000f78 <main+0x260>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d0f9      	beq.n	8000e40 <main+0x128>
	}

	myDebug(
 8000e4c:	484b      	ldr	r0, [pc, #300]	; (8000f7c <main+0x264>)
 8000e4e:	f7ff fcdd 	bl	800080c <myDebug>
			"\n########## Operation Starts, Perform any one operation: ##########\r\n");
	myDebug("1. Transmit from Satellite\r\n");
 8000e52:	484b      	ldr	r0, [pc, #300]	; (8000f80 <main+0x268>)
 8000e54:	f7ff fcda 	bl	800080c <myDebug>
	myDebug("2. Wait to receive GS Command\r\n");
 8000e58:	484a      	ldr	r0, [pc, #296]	; (8000f84 <main+0x26c>)
 8000e5a:	f7ff fcd7 	bl	800080c <myDebug>

	myDebug("\n########## RX Configuration: ##########\n");
 8000e5e:	484a      	ldr	r0, [pc, #296]	; (8000f88 <main+0x270>)
 8000e60:	f7ff fcd4 	bl	800080c <myDebug>

	myDebug("FREQUENCY MODS: UPLINK FREQ: %lu Hz\r\n", FREQ_435_MHZ);
 8000e64:	493a      	ldr	r1, [pc, #232]	; (8000f50 <main+0x238>)
 8000e66:	4849      	ldr	r0, [pc, #292]	; (8000f8c <main+0x274>)
 8000e68:	f7ff fcd0 	bl	800080c <myDebug>
	myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 8000e6c:	4b3f      	ldr	r3, [pc, #252]	; (8000f6c <main+0x254>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	4619      	mov	r1, r3
 8000e72:	4847      	ldr	r0, [pc, #284]	; (8000f90 <main+0x278>)
 8000e74:	f7ff fcca 	bl	800080c <myDebug>
	myDebug("Frequency Deviation: 	%d\n\r", mod_params.Params.Gfsk.Fdev);
 8000e78:	4b3c      	ldr	r3, [pc, #240]	; (8000f6c <main+0x254>)
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4845      	ldr	r0, [pc, #276]	; (8000f94 <main+0x27c>)
 8000e80:	f7ff fcc4 	bl	800080c <myDebug>
	myDebug("RECEVING BANDWIDTH: 	%d\n\r", mod_params.Params.Gfsk.Bandwidth);
 8000e84:	4b39      	ldr	r3, [pc, #228]	; (8000f6c <main+0x254>)
 8000e86:	7b5b      	ldrb	r3, [r3, #13]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4843      	ldr	r0, [pc, #268]	; (8000f98 <main+0x280>)
 8000e8c:	f7ff fcbe 	bl	800080c <myDebug>
	myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8000e90:	4b35      	ldr	r3, [pc, #212]	; (8000f68 <main+0x250>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4619      	mov	r1, r3
 8000e96:	4841      	ldr	r0, [pc, #260]	; (8000f9c <main+0x284>)
 8000e98:	f7ff fcb8 	bl	800080c <myDebug>
	myDebug("PayloadLength 			%d\n\r", pkt_params.Params.Gfsk.PayloadLength);
 8000e9c:	4b32      	ldr	r3, [pc, #200]	; (8000f68 <main+0x250>)
 8000e9e:	7a1b      	ldrb	r3, [r3, #8]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	483f      	ldr	r0, [pc, #252]	; (8000fa0 <main+0x288>)
 8000ea4:	f7ff fcb2 	bl	800080c <myDebug>
	myDebug("PreambleLength 		%d\n\r", pkt_params.Params.Gfsk.PreambleLength);
 8000ea8:	4b2f      	ldr	r3, [pc, #188]	; (8000f68 <main+0x250>)
 8000eaa:	885b      	ldrh	r3, [r3, #2]
 8000eac:	4619      	mov	r1, r3
 8000eae:	483d      	ldr	r0, [pc, #244]	; (8000fa4 <main+0x28c>)
 8000eb0:	f7ff fcac 	bl	800080c <myDebug>
	myDebug("PreambleMinDetect		%d\n\r",
			pkt_params.Params.Gfsk.PreambleMinDetect);
 8000eb4:	4b2c      	ldr	r3, [pc, #176]	; (8000f68 <main+0x250>)
 8000eb6:	791b      	ldrb	r3, [r3, #4]
	myDebug("PreambleMinDetect		%d\n\r",
 8000eb8:	4619      	mov	r1, r3
 8000eba:	483b      	ldr	r0, [pc, #236]	; (8000fa8 <main+0x290>)
 8000ebc:	f7ff fca6 	bl	800080c <myDebug>
	myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 8000ec0:	4b29      	ldr	r3, [pc, #164]	; (8000f68 <main+0x250>)
 8000ec2:	79db      	ldrb	r3, [r3, #7]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4839      	ldr	r0, [pc, #228]	; (8000fac <main+0x294>)
 8000ec8:	f7ff fca0 	bl	800080c <myDebug>
	myDebug("__________*******************__________\r\n");
 8000ecc:	4838      	ldr	r0, [pc, #224]	; (8000fb0 <main+0x298>)
 8000ece:	f7ff fc9d 	bl	800080c <myDebug>

	SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 8000ed2:	481f      	ldr	r0, [pc, #124]	; (8000f50 <main+0x238>)
 8000ed4:	f009 f914 	bl	800a100 <SUBGRF_SetRfFrequency>
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 8000ed8:	2100      	movs	r1, #0
 8000eda:	2001      	movs	r0, #1
 8000edc:	f009 fd58 	bl	800a990 <SUBGRF_SetSwitch>
	SUBGRF_SetRxBoosted(0xFFFFFF);
 8000ee0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8000ee4:	f008 ff38 	bl	8009d58 <SUBGRF_SetRxBoosted>

	HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 8000ee8:	4b32      	ldr	r3, [pc, #200]	; (8000fb4 <main+0x29c>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4931      	ldr	r1, [pc, #196]	; (8000fb8 <main+0x2a0>)
 8000ef2:	4832      	ldr	r0, [pc, #200]	; (8000fbc <main+0x2a4>)
 8000ef4:	f005 fa46 	bl	8006384 <HAL_UART_Receive_DMA>

	HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 8000ef8:	4b2e      	ldr	r3, [pc, #184]	; (8000fb4 <main+0x29c>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	461a      	mov	r2, r3
 8000f00:	492d      	ldr	r1, [pc, #180]	; (8000fb8 <main+0x2a0>)
 8000f02:	482f      	ldr	r0, [pc, #188]	; (8000fc0 <main+0x2a8>)
 8000f04:	f005 fa3e 	bl	8006384 <HAL_UART_Receive_DMA>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		delay_us(500000);
 8000f08:	482e      	ldr	r0, [pc, #184]	; (8000fc4 <main+0x2ac>)
 8000f0a:	f7ff fc65 	bl	80007d8 <delay_us>

		if (OBC_SUCCESS_DATA_RX_FLAG) {
 8000f0e:	4b2e      	ldr	r3, [pc, #184]	; (8000fc8 <main+0x2b0>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 813f 	beq.w	8001196 <main+0x47e>

			getAX25Packet(OBC_UART_RX, obc_ilen);
 8000f18:	4b2c      	ldr	r3, [pc, #176]	; (8000fcc <main+0x2b4>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4826      	ldr	r0, [pc, #152]	; (8000fb8 <main+0x2a0>)
 8000f20:	f7ff fbce 	bl	80006c0 <getAX25Packet>

			tx_buffer_len = countsDataBetweenFlags(temp_tx_buffer,
 8000f24:	2196      	movs	r1, #150	; 0x96
 8000f26:	482a      	ldr	r0, [pc, #168]	; (8000fd0 <main+0x2b8>)
 8000f28:	f7ff fec0 	bl	8000cac <countsDataBetweenFlags>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	4a29      	ldr	r2, [pc, #164]	; (8000fd4 <main+0x2bc>)
 8000f30:	6013      	str	r3, [r2, #0]
					sizeof(temp_tx_buffer));

			myDebug("AX.25 complete GS packet ready to TX: 0x%x\r\n",
 8000f32:	4927      	ldr	r1, [pc, #156]	; (8000fd0 <main+0x2b8>)
 8000f34:	4828      	ldr	r0, [pc, #160]	; (8000fd8 <main+0x2c0>)
 8000f36:	f7ff fc69 	bl	800080c <myDebug>
					temp_tx_buffer);
			for (int j = 0; j < tx_buffer_len; j++) {
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	e061      	b.n	8001004 <main+0x2ec>
 8000f40:	200004cc 	.word	0x200004cc
 8000f44:	0800bf54 	.word	0x0800bf54
 8000f48:	0800bf90 	.word	0x0800bf90
 8000f4c:	0800bfc4 	.word	0x0800bfc4
 8000f50:	19f25968 	.word	0x19f25968
 8000f54:	1a11d018 	.word	0x1a11d018
 8000f58:	0800bfe0 	.word	0x0800bfe0
 8000f5c:	0800c020 	.word	0x0800c020
 8000f60:	0800c048 	.word	0x0800c048
 8000f64:	0800c09c 	.word	0x0800c09c
 8000f68:	20000278 	.word	0x20000278
 8000f6c:	2000028c 	.word	0x2000028c
 8000f70:	0800176d 	.word	0x0800176d
 8000f74:	0800c334 	.word	0x0800c334
 8000f78:	2000049c 	.word	0x2000049c
 8000f7c:	0800c0c8 	.word	0x0800c0c8
 8000f80:	0800c110 	.word	0x0800c110
 8000f84:	0800c130 	.word	0x0800c130
 8000f88:	0800c150 	.word	0x0800c150
 8000f8c:	0800c17c 	.word	0x0800c17c
 8000f90:	0800c1a4 	.word	0x0800c1a4
 8000f94:	0800c1b4 	.word	0x0800c1b4
 8000f98:	0800c1d0 	.word	0x0800c1d0
 8000f9c:	0800c1ec 	.word	0x0800c1ec
 8000fa0:	0800c200 	.word	0x0800c200
 8000fa4:	0800c218 	.word	0x0800c218
 8000fa8:	0800c230 	.word	0x0800c230
 8000fac:	0800c248 	.word	0x0800c248
 8000fb0:	0800c25c 	.word	0x0800c25c
 8000fb4:	20000001 	.word	0x20000001
 8000fb8:	20000310 	.word	0x20000310
 8000fbc:	20000644 	.word	0x20000644
 8000fc0:	2000051c 	.word	0x2000051c
 8000fc4:	0007a120 	.word	0x0007a120
 8000fc8:	20000364 	.word	0x20000364
 8000fcc:	2000030d 	.word	0x2000030d
 8000fd0:	20000368 	.word	0x20000368
 8000fd4:	20000498 	.word	0x20000498
 8000fd8:	0800c288 	.word	0x0800c288
				tx_buffer[j] = temp_tx_buffer[j];
 8000fdc:	4a6f      	ldr	r2, [pc, #444]	; (800119c <main+0x484>)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	7819      	ldrb	r1, [r3, #0]
 8000fe4:	4a6e      	ldr	r2, [pc, #440]	; (80011a0 <main+0x488>)
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	4413      	add	r3, r2
 8000fea:	460a      	mov	r2, r1
 8000fec:	701a      	strb	r2, [r3, #0]
				myDebug("%02x ", tx_buffer[j]);
 8000fee:	4a6c      	ldr	r2, [pc, #432]	; (80011a0 <main+0x488>)
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	486a      	ldr	r0, [pc, #424]	; (80011a4 <main+0x48c>)
 8000ffa:	f7ff fc07 	bl	800080c <myDebug>
			for (int j = 0; j < tx_buffer_len; j++) {
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	3301      	adds	r3, #1
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	4b68      	ldr	r3, [pc, #416]	; (80011a8 <main+0x490>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	697a      	ldr	r2, [r7, #20]
 800100a:	429a      	cmp	r2, r3
 800100c:	dbe6      	blt.n	8000fdc <main+0x2c4>
			}
			myDebug("\r\n");
 800100e:	4867      	ldr	r0, [pc, #412]	; (80011ac <main+0x494>)
 8001010:	f7ff fbfc 	bl	800080c <myDebug>

			myDebug("size of tx_buffer = %d\r\n", tx_buffer_len);
 8001014:	4b64      	ldr	r3, [pc, #400]	; (80011a8 <main+0x490>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4619      	mov	r1, r3
 800101a:	4865      	ldr	r0, [pc, #404]	; (80011b0 <main+0x498>)
 800101c:	f7ff fbf6 	bl	800080c <myDebug>

			memset(OBC_UART_RX, '\0', obc_ilen);
 8001020:	4b64      	ldr	r3, [pc, #400]	; (80011b4 <main+0x49c>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	2100      	movs	r1, #0
 8001028:	4863      	ldr	r0, [pc, #396]	; (80011b8 <main+0x4a0>)
 800102a:	f00a faaf 	bl	800b58c <memset>
			memset(temp_tx_buffer, '\0', sizeof(temp_tx_buffer));
 800102e:	2296      	movs	r2, #150	; 0x96
 8001030:	2100      	movs	r1, #0
 8001032:	485a      	ldr	r0, [pc, #360]	; (800119c <main+0x484>)
 8001034:	f00a faaa 	bl	800b58c <memset>

			pkt_params.PacketType = PACKET_TYPE_GFSK;
 8001038:	4b60      	ldr	r3, [pc, #384]	; (80011bc <main+0x4a4>)
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
			pkt_params.Params.Gfsk.PayloadLength = tx_buffer_len;
 800103e:	4b5a      	ldr	r3, [pc, #360]	; (80011a8 <main+0x490>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	b2da      	uxtb	r2, r3
 8001044:	4b5d      	ldr	r3, [pc, #372]	; (80011bc <main+0x4a4>)
 8001046:	721a      	strb	r2, [r3, #8]
			pkt_params.Params.Gfsk.PreambleLength = 8; /*Convert byte into bit*/
 8001048:	4b5c      	ldr	r3, [pc, #368]	; (80011bc <main+0x4a4>)
 800104a:	2208      	movs	r2, #8
 800104c:	805a      	strh	r2, [r3, #2]
			pkt_params.Params.Gfsk.PreambleMinDetect =
 800104e:	4b5b      	ldr	r3, [pc, #364]	; (80011bc <main+0x4a4>)
 8001050:	2204      	movs	r2, #4
 8001052:	711a      	strb	r2, [r3, #4]
					RADIO_PREAMBLE_DETECTOR_08_BITS;
			pkt_params.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8001054:	4b59      	ldr	r3, [pc, #356]	; (80011bc <main+0x4a4>)
 8001056:	2218      	movs	r2, #24
 8001058:	715a      	strb	r2, [r3, #5]
			pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800105a:	4b58      	ldr	r3, [pc, #352]	; (80011bc <main+0x4a4>)
 800105c:	2200      	movs	r2, #0
 800105e:	719a      	strb	r2, [r3, #6]
			pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8001060:	4b56      	ldr	r3, [pc, #344]	; (80011bc <main+0x4a4>)
 8001062:	2200      	movs	r2, #0
 8001064:	71da      	strb	r2, [r3, #7]
			pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8001066:	4b55      	ldr	r3, [pc, #340]	; (80011bc <main+0x4a4>)
 8001068:	22f2      	movs	r2, #242	; 0xf2
 800106a:	725a      	strb	r2, [r3, #9]
			pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800106c:	4b53      	ldr	r3, [pc, #332]	; (80011bc <main+0x4a4>)
 800106e:	2201      	movs	r2, #1
 8001070:	729a      	strb	r2, [r3, #10]

			mod_params.PacketType = PACKET_TYPE_GFSK;
 8001072:	4b53      	ldr	r3, [pc, #332]	; (80011c0 <main+0x4a8>)
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]
			mod_params.Params.Gfsk.Bandwidth = RX_BW_29300; /*Not used in TX*/
 8001078:	4b51      	ldr	r3, [pc, #324]	; (80011c0 <main+0x4a8>)
 800107a:	220d      	movs	r2, #13
 800107c:	735a      	strb	r2, [r3, #13]
			mod_params.Params.Gfsk.BitRate = DEMO_DEFAULT_BR_4800;
 800107e:	4b50      	ldr	r3, [pc, #320]	; (80011c0 <main+0x4a8>)
 8001080:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8001084:	605a      	str	r2, [r3, #4]
			mod_params.Params.Gfsk.Fdev = DEMO_DEFAULT_FDEV_4800;
 8001086:	4b4e      	ldr	r3, [pc, #312]	; (80011c0 <main+0x4a8>)
 8001088:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800108c:	609a      	str	r2, [r3, #8]
			mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800108e:	4b4c      	ldr	r3, [pc, #304]	; (80011c0 <main+0x4a8>)
 8001090:	220b      	movs	r2, #11
 8001092:	731a      	strb	r2, [r3, #12]

			SUBGRF_Init(DioIrqHndlr);
 8001094:	484b      	ldr	r0, [pc, #300]	; (80011c4 <main+0x4ac>)
 8001096:	f008 fc71 	bl	800997c <SUBGRF_Init>
			SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 800109a:	2100      	movs	r1, #0
 800109c:	2000      	movs	r0, #0
 800109e:	f009 fad9 	bl	800a654 <SUBGRF_SetBufferBaseAddress>
			SUBGRF_SetPayload(tx_buffer, tx_buffer_len);
 80010a2:	4b41      	ldr	r3, [pc, #260]	; (80011a8 <main+0x490>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	4619      	mov	r1, r3
 80010aa:	483d      	ldr	r0, [pc, #244]	; (80011a0 <main+0x488>)
 80010ac:	f008 fcb8 	bl	8009a20 <SUBGRF_SetPayload>
			SUBGRF_SetPacketParams(&pkt_params);
 80010b0:	4842      	ldr	r0, [pc, #264]	; (80011bc <main+0x4a4>)
 80010b2:	f009 fa31 	bl	800a518 <SUBGRF_SetPacketParams>
			SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00,
 80010b6:	4a44      	ldr	r2, [pc, #272]	; (80011c8 <main+0x4b0>)
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010be:	e883 0003 	stmia.w	r3, {r0, r1}
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	4618      	mov	r0, r3
 80010c6:	f008 fcf0 	bl	8009aaa <SUBGRF_SetSyncWord>
							0x00, 0x00, 0x00 });
			SUBGRF_SetWhiteningSeed(0x01FF);
 80010ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80010ce:	f008 fd3b 	bl	8009b48 <SUBGRF_SetWhiteningSeed>
			SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 80010d2:	483e      	ldr	r0, [pc, #248]	; (80011cc <main+0x4b4>)
 80010d4:	f009 f814 	bl	800a100 <SUBGRF_SetRfFrequency>
			SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 80010d8:	2301      	movs	r3, #1
 80010da:	2201      	movs	r2, #1
 80010dc:	2100      	movs	r1, #0
 80010de:	2004      	movs	r0, #4
 80010e0:	f008 ff90 	bl	800a004 <SUBGRF_SetPaConfig>
			SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME); // Set to RFO_LP for low power
 80010e4:	2202      	movs	r2, #2
 80010e6:	210e      	movs	r1, #14
 80010e8:	2001      	movs	r0, #1
 80010ea:	f009 f875 	bl	800a1d8 <SUBGRF_SetTxParams>
			SUBGRF_SetModulationParams(&mod_params);
 80010ee:	4834      	ldr	r0, [pc, #208]	; (80011c0 <main+0x4a8>)
 80010f0:	f009 f940 	bl	800a374 <SUBGRF_SetModulationParams>
			SUBGRF_SetDioIrqParams(
 80010f4:	2300      	movs	r3, #0
 80010f6:	2200      	movs	r2, #0
 80010f8:	f240 210f 	movw	r1, #527	; 0x20f
 80010fc:	f240 200f 	movw	r0, #527	; 0x20f
 8001100:	f008 ffa2 	bl	800a048 <SUBGRF_SetDioIrqParams>
							| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
					IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
							| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
					IRQ_RADIO_NONE, IRQ_RADIO_NONE);

			myDebug("\n########## TX Configuration: ##########\n");
 8001104:	4832      	ldr	r0, [pc, #200]	; (80011d0 <main+0x4b8>)
 8001106:	f7ff fb81 	bl	800080c <myDebug>

			myDebug("FREQUENCY MODS: DOWNLINK FREQ: %lu Hz\r\n", FREQ_437_MHZ);
 800110a:	4930      	ldr	r1, [pc, #192]	; (80011cc <main+0x4b4>)
 800110c:	4831      	ldr	r0, [pc, #196]	; (80011d4 <main+0x4bc>)
 800110e:	f7ff fb7d 	bl	800080c <myDebug>
			myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 8001112:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <main+0x4a8>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	4619      	mov	r1, r3
 8001118:	482f      	ldr	r0, [pc, #188]	; (80011d8 <main+0x4c0>)
 800111a:	f7ff fb77 	bl	800080c <myDebug>
			myDebug("Frequency Deviation: 	%d\n\r",
 800111e:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <main+0x4a8>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	4619      	mov	r1, r3
 8001124:	482d      	ldr	r0, [pc, #180]	; (80011dc <main+0x4c4>)
 8001126:	f7ff fb71 	bl	800080c <myDebug>
					mod_params.Params.Gfsk.Fdev);
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
					mod_params.Params.Gfsk.Bandwidth);
 800112a:	4b25      	ldr	r3, [pc, #148]	; (80011c0 <main+0x4a8>)
 800112c:	7b5b      	ldrb	r3, [r3, #13]
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 800112e:	4619      	mov	r1, r3
 8001130:	482b      	ldr	r0, [pc, #172]	; (80011e0 <main+0x4c8>)
 8001132:	f7ff fb6b 	bl	800080c <myDebug>
			myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8001136:	4b21      	ldr	r3, [pc, #132]	; (80011bc <main+0x4a4>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	4619      	mov	r1, r3
 800113c:	4829      	ldr	r0, [pc, #164]	; (80011e4 <main+0x4cc>)
 800113e:	f7ff fb65 	bl	800080c <myDebug>
			myDebug("PayloadLength 			%d\n\r",
					pkt_params.Params.Gfsk.PayloadLength);
 8001142:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <main+0x4a4>)
 8001144:	7a1b      	ldrb	r3, [r3, #8]
			myDebug("PayloadLength 			%d\n\r",
 8001146:	4619      	mov	r1, r3
 8001148:	4827      	ldr	r0, [pc, #156]	; (80011e8 <main+0x4d0>)
 800114a:	f7ff fb5f 	bl	800080c <myDebug>
			myDebug("PreambleLength 		%d\n\r",
					pkt_params.Params.Gfsk.PreambleLength);
 800114e:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <main+0x4a4>)
 8001150:	885b      	ldrh	r3, [r3, #2]
			myDebug("PreambleLength 		%d\n\r",
 8001152:	4619      	mov	r1, r3
 8001154:	4825      	ldr	r0, [pc, #148]	; (80011ec <main+0x4d4>)
 8001156:	f7ff fb59 	bl	800080c <myDebug>
			myDebug("PreambleMinDetect		%d\n\r",
					pkt_params.Params.Gfsk.PreambleMinDetect);
 800115a:	4b18      	ldr	r3, [pc, #96]	; (80011bc <main+0x4a4>)
 800115c:	791b      	ldrb	r3, [r3, #4]
			myDebug("PreambleMinDetect		%d\n\r",
 800115e:	4619      	mov	r1, r3
 8001160:	4823      	ldr	r0, [pc, #140]	; (80011f0 <main+0x4d8>)
 8001162:	f7ff fb53 	bl	800080c <myDebug>
			myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <main+0x4a4>)
 8001168:	79db      	ldrb	r3, [r3, #7]
 800116a:	4619      	mov	r1, r3
 800116c:	4821      	ldr	r0, [pc, #132]	; (80011f4 <main+0x4dc>)
 800116e:	f7ff fb4d 	bl	800080c <myDebug>
			myDebug("__________*******************__________\r\n");
 8001172:	4821      	ldr	r0, [pc, #132]	; (80011f8 <main+0x4e0>)
 8001174:	f7ff fb4a 	bl	800080c <myDebug>

			SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8001178:	4814      	ldr	r0, [pc, #80]	; (80011cc <main+0x4b4>)
 800117a:	f008 ffc1 	bl	800a100 <SUBGRF_SetRfFrequency>
			//SUBGRF_SetSwitch(RFO_HP, RFSWITCH_TX); /*Set RF switch*/
			SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX); /*Set RF switch*/
 800117e:	2101      	movs	r1, #1
 8001180:	2001      	movs	r0, #1
 8001182:	f009 fc05 	bl	800a990 <SUBGRF_SetSwitch>
			SUBGRF_SendPayload(tx_buffer, tx_buffer_len, 0);
 8001186:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <main+0x490>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2200      	movs	r2, #0
 800118e:	4619      	mov	r1, r3
 8001190:	4803      	ldr	r0, [pc, #12]	; (80011a0 <main+0x488>)
 8001192:	f008 fc77 	bl	8009a84 <SUBGRF_SendPayload>
		}

		/* USER CODE END WHILE */
		MX_SubGHz_Phy_Process();
 8001196:	f009 fe42 	bl	800ae1e <MX_SubGHz_Phy_Process>
		delay_us(500000);
 800119a:	e6b5      	b.n	8000f08 <main+0x1f0>
 800119c:	20000368 	.word	0x20000368
 80011a0:	20000400 	.word	0x20000400
 80011a4:	0800c2b8 	.word	0x0800c2b8
 80011a8:	20000498 	.word	0x20000498
 80011ac:	0800c2c0 	.word	0x0800c2c0
 80011b0:	0800c2c4 	.word	0x0800c2c4
 80011b4:	2000030d 	.word	0x2000030d
 80011b8:	20000310 	.word	0x20000310
 80011bc:	20000278 	.word	0x20000278
 80011c0:	2000028c 	.word	0x2000028c
 80011c4:	0800176d 	.word	0x0800176d
 80011c8:	0800c334 	.word	0x0800c334
 80011cc:	1a11d018 	.word	0x1a11d018
 80011d0:	0800c2e0 	.word	0x0800c2e0
 80011d4:	0800c30c 	.word	0x0800c30c
 80011d8:	0800c1a4 	.word	0x0800c1a4
 80011dc:	0800c1b4 	.word	0x0800c1b4
 80011e0:	0800c1d0 	.word	0x0800c1d0
 80011e4:	0800c1ec 	.word	0x0800c1ec
 80011e8:	0800c200 	.word	0x0800c200
 80011ec:	0800c218 	.word	0x0800c218
 80011f0:	0800c230 	.word	0x0800c230
 80011f4:	0800c248 	.word	0x0800c248
 80011f8:	0800c25c 	.word	0x0800c25c

080011fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b09a      	sub	sp, #104	; 0x68
 8001200:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001202:	f107 0320 	add.w	r3, r7, #32
 8001206:	2248      	movs	r2, #72	; 0x48
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f00a f9be 	bl	800b58c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]
 800121e:	615a      	str	r2, [r3, #20]
 8001220:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001222:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <SystemClock_Config+0xbc>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800122a:	4a23      	ldr	r2, [pc, #140]	; (80012b8 <SystemClock_Config+0xbc>)
 800122c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <SystemClock_Config+0xbc>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	683b      	ldr	r3, [r7, #0]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800123e:	2301      	movs	r3, #1
 8001240:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8001242:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8001248:	2300      	movs	r3, #0
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800124c:	2302      	movs	r3, #2
 800124e:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001250:	2303      	movs	r3, #3
 8001252:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001254:	2310      	movs	r3, #16
 8001256:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 6;
 8001258:	2306      	movs	r3, #6
 800125a:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800125c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001260:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001262:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001266:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001268:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800126c:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	4618      	mov	r0, r3
 8001274:	f002 fef6 	bl	8004064 <HAL_RCC_OscConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0x86>
		Error_Handler();
 800127e:	f000 ff37 	bl	80020f0 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3 | RCC_CLOCKTYPE_HCLK
 8001282:	234f      	movs	r3, #79	; 0x4f
 8001284:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001286:	2303      	movs	r3, #3
 8001288:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	2102      	movs	r1, #2
 800129e:	4618      	mov	r0, r3
 80012a0:	f003 fa62 	bl	8004768 <HAL_RCC_ClockConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <SystemClock_Config+0xb2>
		Error_Handler();
 80012aa:	f000 ff21 	bl	80020f0 <Error_Handler>
	}
}
 80012ae:	bf00      	nop
 80012b0:	3768      	adds	r7, #104	; 0x68
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	58000400 	.word	0x58000400

080012bc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	if (huart == &huart2 || huart == &hlpuart1 || huart == &huart1) {
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4aa4      	ldr	r2, [pc, #656]	; (8001558 <HAL_UART_RxCpltCallback+0x29c>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d008      	beq.n	80012de <HAL_UART_RxCpltCallback+0x22>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4aa3      	ldr	r2, [pc, #652]	; (800155c <HAL_UART_RxCpltCallback+0x2a0>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d004      	beq.n	80012de <HAL_UART_RxCpltCallback+0x22>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4aa2      	ldr	r2, [pc, #648]	; (8001560 <HAL_UART_RxCpltCallback+0x2a4>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	f040 8220 	bne.w	800171e <HAL_UART_RxCpltCallback+0x462>

		if (OBC_HANDSHAKE_FLAG) {
 80012de:	4ba1      	ldr	r3, [pc, #644]	; (8001564 <HAL_UART_RxCpltCallback+0x2a8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 821b 	beq.w	800171e <HAL_UART_RxCpltCallback+0x462>
			if (DIGIPEATER_STATUS == 1 && BEACON_COUNT == 0
 80012e8:	4b9f      	ldr	r3, [pc, #636]	; (8001568 <HAL_UART_RxCpltCallback+0x2ac>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	f040 81a7 	bne.w	8001640 <HAL_UART_RxCpltCallback+0x384>
 80012f2:	4b9e      	ldr	r3, [pc, #632]	; (800156c <HAL_UART_RxCpltCallback+0x2b0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f040 81a2 	bne.w	8001640 <HAL_UART_RxCpltCallback+0x384>
					&& DIGIPEATER_RX_FLAG == 1) {
 80012fc:	4b9c      	ldr	r3, [pc, #624]	; (8001570 <HAL_UART_RxCpltCallback+0x2b4>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b01      	cmp	r3, #1
 8001302:	f040 819d 	bne.w	8001640 <HAL_UART_RxCpltCallback+0x384>
				OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001306:	4b9b      	ldr	r3, [pc, #620]	; (8001574 <HAL_UART_RxCpltCallback+0x2b8>)
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]

				myDebug("\n--> Digipeater Data Received from OBC: 0x%x\r\n",
 800130c:	499a      	ldr	r1, [pc, #616]	; (8001578 <HAL_UART_RxCpltCallback+0x2bc>)
 800130e:	489b      	ldr	r0, [pc, #620]	; (800157c <HAL_UART_RxCpltCallback+0x2c0>)
 8001310:	f7ff fa7c 	bl	800080c <myDebug>
						OBC_UART_RX);
				for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
 8001318:	e00a      	b.n	8001330 <HAL_UART_RxCpltCallback+0x74>
					myDebug("%02x ", OBC_UART_RX[i]);
 800131a:	4a97      	ldr	r2, [pc, #604]	; (8001578 <HAL_UART_RxCpltCallback+0x2bc>)
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	4413      	add	r3, r2
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	4619      	mov	r1, r3
 8001324:	4896      	ldr	r0, [pc, #600]	; (8001580 <HAL_UART_RxCpltCallback+0x2c4>)
 8001326:	f7ff fa71 	bl	800080c <myDebug>
				for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3301      	adds	r3, #1
 800132e:	61fb      	str	r3, [r7, #28]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	2b53      	cmp	r3, #83	; 0x53
 8001334:	d9f1      	bls.n	800131a <HAL_UART_RxCpltCallback+0x5e>
				}
				myDebug("\r\n");
 8001336:	4893      	ldr	r0, [pc, #588]	; (8001584 <HAL_UART_RxCpltCallback+0x2c8>)
 8001338:	f7ff fa68 	bl	800080c <myDebug>

				if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 800133c:	4b8e      	ldr	r3, [pc, #568]	; (8001578 <HAL_UART_RxCpltCallback+0x2bc>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b53      	cmp	r3, #83	; 0x53
 8001342:	f040 8153 	bne.w	80015ec <HAL_UART_RxCpltCallback+0x330>
 8001346:	4b8c      	ldr	r3, [pc, #560]	; (8001578 <HAL_UART_RxCpltCallback+0x2bc>)
 8001348:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800134c:	2b7e      	cmp	r3, #126	; 0x7e
 800134e:	f040 814d 	bne.w	80015ec <HAL_UART_RxCpltCallback+0x330>
					myDebug("--> Correct Digipeater Data received from OBC\n");
 8001352:	488d      	ldr	r0, [pc, #564]	; (8001588 <HAL_UART_RxCpltCallback+0x2cc>)
 8001354:	f7ff fa5a 	bl	800080c <myDebug>
					obc_ilen = OBC_UART_RX[2];  //len of info
 8001358:	4b87      	ldr	r3, [pc, #540]	; (8001578 <HAL_UART_RxCpltCallback+0x2bc>)
 800135a:	789a      	ldrb	r2, [r3, #2]
 800135c:	4b8b      	ldr	r3, [pc, #556]	; (800158c <HAL_UART_RxCpltCallback+0x2d0>)
 800135e:	701a      	strb	r2, [r3, #0]
					PACKET_TYPE = OBC_UART_RX[1]; //packet_type
 8001360:	4b85      	ldr	r3, [pc, #532]	; (8001578 <HAL_UART_RxCpltCallback+0x2bc>)
 8001362:	785a      	ldrb	r2, [r3, #1]
 8001364:	4b8a      	ldr	r3, [pc, #552]	; (8001590 <HAL_UART_RxCpltCallback+0x2d4>)
 8001366:	701a      	strb	r2, [r3, #0]
					DIGIPEATER_FLAG = 1;
 8001368:	4b8a      	ldr	r3, [pc, #552]	; (8001594 <HAL_UART_RxCpltCallback+0x2d8>)
 800136a:	2201      	movs	r2, #1
 800136c:	601a      	str	r2, [r3, #0]

					getAX25Packet(OBC_UART_RX, obc_ilen);
 800136e:	4b87      	ldr	r3, [pc, #540]	; (800158c <HAL_UART_RxCpltCallback+0x2d0>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	4619      	mov	r1, r3
 8001374:	4880      	ldr	r0, [pc, #512]	; (8001578 <HAL_UART_RxCpltCallback+0x2bc>)
 8001376:	f7ff f9a3 	bl	80006c0 <getAX25Packet>

					tx_buffer_len = countsDataBetweenFlags(temp_tx_buffer,
 800137a:	2196      	movs	r1, #150	; 0x96
 800137c:	4886      	ldr	r0, [pc, #536]	; (8001598 <HAL_UART_RxCpltCallback+0x2dc>)
 800137e:	f7ff fc95 	bl	8000cac <countsDataBetweenFlags>
 8001382:	4603      	mov	r3, r0
 8001384:	4a85      	ldr	r2, [pc, #532]	; (800159c <HAL_UART_RxCpltCallback+0x2e0>)
 8001386:	6013      	str	r3, [r2, #0]
							sizeof(temp_tx_buffer));

					myDebug("Digipeater Packet complete, ready to TX: 0x%x\r\n",
 8001388:	4983      	ldr	r1, [pc, #524]	; (8001598 <HAL_UART_RxCpltCallback+0x2dc>)
 800138a:	4885      	ldr	r0, [pc, #532]	; (80015a0 <HAL_UART_RxCpltCallback+0x2e4>)
 800138c:	f7ff fa3e 	bl	800080c <myDebug>
							temp_tx_buffer);
					for (int j = 0; j < tx_buffer_len; j++) {
 8001390:	2300      	movs	r3, #0
 8001392:	61bb      	str	r3, [r7, #24]
 8001394:	e013      	b.n	80013be <HAL_UART_RxCpltCallback+0x102>
						tx_buffer[j] = temp_tx_buffer[j];
 8001396:	4a80      	ldr	r2, [pc, #512]	; (8001598 <HAL_UART_RxCpltCallback+0x2dc>)
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	4413      	add	r3, r2
 800139c:	7819      	ldrb	r1, [r3, #0]
 800139e:	4a81      	ldr	r2, [pc, #516]	; (80015a4 <HAL_UART_RxCpltCallback+0x2e8>)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	4413      	add	r3, r2
 80013a4:	460a      	mov	r2, r1
 80013a6:	701a      	strb	r2, [r3, #0]
						myDebug("%02x ", tx_buffer[j]);
 80013a8:	4a7e      	ldr	r2, [pc, #504]	; (80015a4 <HAL_UART_RxCpltCallback+0x2e8>)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	4413      	add	r3, r2
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	4873      	ldr	r0, [pc, #460]	; (8001580 <HAL_UART_RxCpltCallback+0x2c4>)
 80013b4:	f7ff fa2a 	bl	800080c <myDebug>
					for (int j = 0; j < tx_buffer_len; j++) {
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	3301      	adds	r3, #1
 80013bc:	61bb      	str	r3, [r7, #24]
 80013be:	4b77      	ldr	r3, [pc, #476]	; (800159c <HAL_UART_RxCpltCallback+0x2e0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	dbe6      	blt.n	8001396 <HAL_UART_RxCpltCallback+0xda>
					}
					myDebug("\r\n");
 80013c8:	486e      	ldr	r0, [pc, #440]	; (8001584 <HAL_UART_RxCpltCallback+0x2c8>)
 80013ca:	f7ff fa1f 	bl	800080c <myDebug>

					myDebug("size of tx_buffer = %d\r\n", tx_buffer_len);
 80013ce:	4b73      	ldr	r3, [pc, #460]	; (800159c <HAL_UART_RxCpltCallback+0x2e0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4619      	mov	r1, r3
 80013d4:	4874      	ldr	r0, [pc, #464]	; (80015a8 <HAL_UART_RxCpltCallback+0x2ec>)
 80013d6:	f7ff fa19 	bl	800080c <myDebug>

					memset(OBC_UART_RX, '\0', obc_ilen);
 80013da:	4b6c      	ldr	r3, [pc, #432]	; (800158c <HAL_UART_RxCpltCallback+0x2d0>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	2100      	movs	r1, #0
 80013e2:	4865      	ldr	r0, [pc, #404]	; (8001578 <HAL_UART_RxCpltCallback+0x2bc>)
 80013e4:	f00a f8d2 	bl	800b58c <memset>
					memset(temp_tx_buffer, '\0', sizeof(temp_tx_buffer));
 80013e8:	2296      	movs	r2, #150	; 0x96
 80013ea:	2100      	movs	r1, #0
 80013ec:	486a      	ldr	r0, [pc, #424]	; (8001598 <HAL_UART_RxCpltCallback+0x2dc>)
 80013ee:	f00a f8cd 	bl	800b58c <memset>

					pkt_params.PacketType = PACKET_TYPE_GFSK;
 80013f2:	4b6e      	ldr	r3, [pc, #440]	; (80015ac <HAL_UART_RxCpltCallback+0x2f0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
					pkt_params.Params.Gfsk.PayloadLength = tx_buffer_len;
 80013f8:	4b68      	ldr	r3, [pc, #416]	; (800159c <HAL_UART_RxCpltCallback+0x2e0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4b6b      	ldr	r3, [pc, #428]	; (80015ac <HAL_UART_RxCpltCallback+0x2f0>)
 8001400:	721a      	strb	r2, [r3, #8]
					pkt_params.Params.Gfsk.PreambleLength = 8; /*Convert byte into bit*/
 8001402:	4b6a      	ldr	r3, [pc, #424]	; (80015ac <HAL_UART_RxCpltCallback+0x2f0>)
 8001404:	2208      	movs	r2, #8
 8001406:	805a      	strh	r2, [r3, #2]
					pkt_params.Params.Gfsk.PreambleMinDetect =
 8001408:	4b68      	ldr	r3, [pc, #416]	; (80015ac <HAL_UART_RxCpltCallback+0x2f0>)
 800140a:	2204      	movs	r2, #4
 800140c:	711a      	strb	r2, [r3, #4]
							RADIO_PREAMBLE_DETECTOR_08_BITS;
					pkt_params.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800140e:	4b67      	ldr	r3, [pc, #412]	; (80015ac <HAL_UART_RxCpltCallback+0x2f0>)
 8001410:	2218      	movs	r2, #24
 8001412:	715a      	strb	r2, [r3, #5]
					pkt_params.Params.Gfsk.AddrComp =
 8001414:	4b65      	ldr	r3, [pc, #404]	; (80015ac <HAL_UART_RxCpltCallback+0x2f0>)
 8001416:	2200      	movs	r2, #0
 8001418:	719a      	strb	r2, [r3, #6]
							RADIO_ADDRESSCOMP_FILT_OFF;
					pkt_params.Params.Gfsk.HeaderType =
 800141a:	4b64      	ldr	r3, [pc, #400]	; (80015ac <HAL_UART_RxCpltCallback+0x2f0>)
 800141c:	2200      	movs	r2, #0
 800141e:	71da      	strb	r2, [r3, #7]
							RADIO_PACKET_FIXED_LENGTH;
					pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8001420:	4b62      	ldr	r3, [pc, #392]	; (80015ac <HAL_UART_RxCpltCallback+0x2f0>)
 8001422:	22f2      	movs	r2, #242	; 0xf2
 8001424:	725a      	strb	r2, [r3, #9]
					pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8001426:	4b61      	ldr	r3, [pc, #388]	; (80015ac <HAL_UART_RxCpltCallback+0x2f0>)
 8001428:	2201      	movs	r2, #1
 800142a:	729a      	strb	r2, [r3, #10]

					mod_params.PacketType = PACKET_TYPE_GFSK;
 800142c:	4b60      	ldr	r3, [pc, #384]	; (80015b0 <HAL_UART_RxCpltCallback+0x2f4>)
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]
					mod_params.Params.Gfsk.Bandwidth = RX_BW_29300; /*Not used in TX*/
 8001432:	4b5f      	ldr	r3, [pc, #380]	; (80015b0 <HAL_UART_RxCpltCallback+0x2f4>)
 8001434:	220d      	movs	r2, #13
 8001436:	735a      	strb	r2, [r3, #13]
					mod_params.Params.Gfsk.BitRate = DEMO_DEFAULT_BR_1200;
 8001438:	4b5d      	ldr	r3, [pc, #372]	; (80015b0 <HAL_UART_RxCpltCallback+0x2f4>)
 800143a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800143e:	605a      	str	r2, [r3, #4]
					mod_params.Params.Gfsk.Fdev = DEMO_DEFAULT_FDEV_1200;
 8001440:	4b5b      	ldr	r3, [pc, #364]	; (80015b0 <HAL_UART_RxCpltCallback+0x2f4>)
 8001442:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001446:	609a      	str	r2, [r3, #8]
					mod_params.Params.Gfsk.ModulationShaping =
 8001448:	4b59      	ldr	r3, [pc, #356]	; (80015b0 <HAL_UART_RxCpltCallback+0x2f4>)
 800144a:	220b      	movs	r2, #11
 800144c:	731a      	strb	r2, [r3, #12]
							MOD_SHAPING_G_BT_1;

					SUBGRF_Init(DioIrqHndlr);
 800144e:	4859      	ldr	r0, [pc, #356]	; (80015b4 <HAL_UART_RxCpltCallback+0x2f8>)
 8001450:	f008 fa94 	bl	800997c <SUBGRF_Init>
					SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8001454:	2100      	movs	r1, #0
 8001456:	2000      	movs	r0, #0
 8001458:	f009 f8fc 	bl	800a654 <SUBGRF_SetBufferBaseAddress>
					SUBGRF_SetPayload(tx_buffer, tx_buffer_len);
 800145c:	4b4f      	ldr	r3, [pc, #316]	; (800159c <HAL_UART_RxCpltCallback+0x2e0>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	b2db      	uxtb	r3, r3
 8001462:	4619      	mov	r1, r3
 8001464:	484f      	ldr	r0, [pc, #316]	; (80015a4 <HAL_UART_RxCpltCallback+0x2e8>)
 8001466:	f008 fadb 	bl	8009a20 <SUBGRF_SetPayload>
					SUBGRF_SetPacketParams(&pkt_params);
 800146a:	4850      	ldr	r0, [pc, #320]	; (80015ac <HAL_UART_RxCpltCallback+0x2f0>)
 800146c:	f009 f854 	bl	800a518 <SUBGRF_SetPacketParams>
					SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00,
 8001470:	4a51      	ldr	r2, [pc, #324]	; (80015b8 <HAL_UART_RxCpltCallback+0x2fc>)
 8001472:	f107 030c 	add.w	r3, r7, #12
 8001476:	e892 0003 	ldmia.w	r2, {r0, r1}
 800147a:	e883 0003 	stmia.w	r3, {r0, r1}
 800147e:	f107 030c 	add.w	r3, r7, #12
 8001482:	4618      	mov	r0, r3
 8001484:	f008 fb11 	bl	8009aaa <SUBGRF_SetSyncWord>
									0x00, 0x00, 0x00, 0x00 });
					SUBGRF_SetWhiteningSeed(0x01FF);
 8001488:	f240 10ff 	movw	r0, #511	; 0x1ff
 800148c:	f008 fb5c 	bl	8009b48 <SUBGRF_SetWhiteningSeed>
					SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8001490:	484a      	ldr	r0, [pc, #296]	; (80015bc <HAL_UART_RxCpltCallback+0x300>)
 8001492:	f008 fe35 	bl	800a100 <SUBGRF_SetRfFrequency>
					SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 8001496:	2301      	movs	r3, #1
 8001498:	2201      	movs	r2, #1
 800149a:	2100      	movs	r1, #0
 800149c:	2004      	movs	r0, #4
 800149e:	f008 fdb1 	bl	800a004 <SUBGRF_SetPaConfig>
					SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME); // Set to RFO_LP for low power
 80014a2:	2202      	movs	r2, #2
 80014a4:	210e      	movs	r1, #14
 80014a6:	2001      	movs	r0, #1
 80014a8:	f008 fe96 	bl	800a1d8 <SUBGRF_SetTxParams>
					SUBGRF_SetModulationParams(&mod_params);
 80014ac:	4840      	ldr	r0, [pc, #256]	; (80015b0 <HAL_UART_RxCpltCallback+0x2f4>)
 80014ae:	f008 ff61 	bl	800a374 <SUBGRF_SetModulationParams>
					SUBGRF_SetDioIrqParams(
 80014b2:	2300      	movs	r3, #0
 80014b4:	2200      	movs	r2, #0
 80014b6:	f240 210f 	movw	r1, #527	; 0x20f
 80014ba:	f240 200f 	movw	r0, #527	; 0x20f
 80014be:	f008 fdc3 	bl	800a048 <SUBGRF_SetDioIrqParams>
									| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
							IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
									| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
							IRQ_RADIO_NONE, IRQ_RADIO_NONE);

					myDebug("\n########## TX Configuration: ##########\n");
 80014c2:	483f      	ldr	r0, [pc, #252]	; (80015c0 <HAL_UART_RxCpltCallback+0x304>)
 80014c4:	f7ff f9a2 	bl	800080c <myDebug>

					myDebug("FREQUENCY MODS: DOWNLINK FREQ: %lu Hz\r\n",
 80014c8:	493c      	ldr	r1, [pc, #240]	; (80015bc <HAL_UART_RxCpltCallback+0x300>)
 80014ca:	483e      	ldr	r0, [pc, #248]	; (80015c4 <HAL_UART_RxCpltCallback+0x308>)
 80014cc:	f7ff f99e 	bl	800080c <myDebug>
					FREQ_437_MHZ);
					myDebug("Bit Rate: 	%d\n\r",
 80014d0:	4b37      	ldr	r3, [pc, #220]	; (80015b0 <HAL_UART_RxCpltCallback+0x2f4>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	4619      	mov	r1, r3
 80014d6:	483c      	ldr	r0, [pc, #240]	; (80015c8 <HAL_UART_RxCpltCallback+0x30c>)
 80014d8:	f7ff f998 	bl	800080c <myDebug>
							mod_params.Params.Gfsk.BitRate);
					myDebug("Frequency Deviation: 	%d\n\r",
 80014dc:	4b34      	ldr	r3, [pc, #208]	; (80015b0 <HAL_UART_RxCpltCallback+0x2f4>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	4619      	mov	r1, r3
 80014e2:	483a      	ldr	r0, [pc, #232]	; (80015cc <HAL_UART_RxCpltCallback+0x310>)
 80014e4:	f7ff f992 	bl	800080c <myDebug>
							mod_params.Params.Gfsk.Fdev);
					myDebug("RECEVING BANDWIDTH: 	%d\n\r",
							mod_params.Params.Gfsk.Bandwidth);
 80014e8:	4b31      	ldr	r3, [pc, #196]	; (80015b0 <HAL_UART_RxCpltCallback+0x2f4>)
 80014ea:	7b5b      	ldrb	r3, [r3, #13]
					myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 80014ec:	4619      	mov	r1, r3
 80014ee:	4838      	ldr	r0, [pc, #224]	; (80015d0 <HAL_UART_RxCpltCallback+0x314>)
 80014f0:	f7ff f98c 	bl	800080c <myDebug>
					myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 80014f4:	4b2d      	ldr	r3, [pc, #180]	; (80015ac <HAL_UART_RxCpltCallback+0x2f0>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	4836      	ldr	r0, [pc, #216]	; (80015d4 <HAL_UART_RxCpltCallback+0x318>)
 80014fc:	f7ff f986 	bl	800080c <myDebug>
					myDebug("PayloadLength 			%d\n\r",
							pkt_params.Params.Gfsk.PayloadLength);
 8001500:	4b2a      	ldr	r3, [pc, #168]	; (80015ac <HAL_UART_RxCpltCallback+0x2f0>)
 8001502:	7a1b      	ldrb	r3, [r3, #8]
					myDebug("PayloadLength 			%d\n\r",
 8001504:	4619      	mov	r1, r3
 8001506:	4834      	ldr	r0, [pc, #208]	; (80015d8 <HAL_UART_RxCpltCallback+0x31c>)
 8001508:	f7ff f980 	bl	800080c <myDebug>
					myDebug("PreambleLength 		%d\n\r",
							pkt_params.Params.Gfsk.PreambleLength);
 800150c:	4b27      	ldr	r3, [pc, #156]	; (80015ac <HAL_UART_RxCpltCallback+0x2f0>)
 800150e:	885b      	ldrh	r3, [r3, #2]
					myDebug("PreambleLength 		%d\n\r",
 8001510:	4619      	mov	r1, r3
 8001512:	4832      	ldr	r0, [pc, #200]	; (80015dc <HAL_UART_RxCpltCallback+0x320>)
 8001514:	f7ff f97a 	bl	800080c <myDebug>
					myDebug("PreambleMinDetect		%d\n\r",
							pkt_params.Params.Gfsk.PreambleMinDetect);
 8001518:	4b24      	ldr	r3, [pc, #144]	; (80015ac <HAL_UART_RxCpltCallback+0x2f0>)
 800151a:	791b      	ldrb	r3, [r3, #4]
					myDebug("PreambleMinDetect		%d\n\r",
 800151c:	4619      	mov	r1, r3
 800151e:	4830      	ldr	r0, [pc, #192]	; (80015e0 <HAL_UART_RxCpltCallback+0x324>)
 8001520:	f7ff f974 	bl	800080c <myDebug>
					myDebug("HeaderType 			%d\n\r",
							pkt_params.Params.Gfsk.HeaderType);
 8001524:	4b21      	ldr	r3, [pc, #132]	; (80015ac <HAL_UART_RxCpltCallback+0x2f0>)
 8001526:	79db      	ldrb	r3, [r3, #7]
					myDebug("HeaderType 			%d\n\r",
 8001528:	4619      	mov	r1, r3
 800152a:	482e      	ldr	r0, [pc, #184]	; (80015e4 <HAL_UART_RxCpltCallback+0x328>)
 800152c:	f7ff f96e 	bl	800080c <myDebug>
					myDebug("__________*******************__________\r\n");
 8001530:	482d      	ldr	r0, [pc, #180]	; (80015e8 <HAL_UART_RxCpltCallback+0x32c>)
 8001532:	f7ff f96b 	bl	800080c <myDebug>

					SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8001536:	4821      	ldr	r0, [pc, #132]	; (80015bc <HAL_UART_RxCpltCallback+0x300>)
 8001538:	f008 fde2 	bl	800a100 <SUBGRF_SetRfFrequency>
					//SUBGRF_SetSwitch(RFO_HP, RFSWITCH_TX); /*Set RF switch*/
					SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX); /*Set RF switch*/
 800153c:	2101      	movs	r1, #1
 800153e:	2001      	movs	r0, #1
 8001540:	f009 fa26 	bl	800a990 <SUBGRF_SetSwitch>
					SUBGRF_SendPayload(tx_buffer, tx_buffer_len, 0);
 8001544:	4b15      	ldr	r3, [pc, #84]	; (800159c <HAL_UART_RxCpltCallback+0x2e0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2200      	movs	r2, #0
 800154c:	4619      	mov	r1, r3
 800154e:	4815      	ldr	r0, [pc, #84]	; (80015a4 <HAL_UART_RxCpltCallback+0x2e8>)
 8001550:	f008 fa98 	bl	8009a84 <SUBGRF_SendPayload>
				if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 8001554:	bf00      	nop
 8001556:	e0d1      	b.n	80016fc <HAL_UART_RxCpltCallback+0x440>
 8001558:	20000644 	.word	0x20000644
 800155c:	2000051c 	.word	0x2000051c
 8001560:	200005b0 	.word	0x200005b0
 8001564:	2000049c 	.word	0x2000049c
 8001568:	200004a0 	.word	0x200004a0
 800156c:	20000004 	.word	0x20000004
 8001570:	200004ac 	.word	0x200004ac
 8001574:	20000364 	.word	0x20000364
 8001578:	20000310 	.word	0x20000310
 800157c:	0800c33c 	.word	0x0800c33c
 8001580:	0800c2b8 	.word	0x0800c2b8
 8001584:	0800c2c0 	.word	0x0800c2c0
 8001588:	0800c36c 	.word	0x0800c36c
 800158c:	2000030d 	.word	0x2000030d
 8001590:	200004a4 	.word	0x200004a4
 8001594:	200004a8 	.word	0x200004a8
 8001598:	20000368 	.word	0x20000368
 800159c:	20000498 	.word	0x20000498
 80015a0:	0800c39c 	.word	0x0800c39c
 80015a4:	20000400 	.word	0x20000400
 80015a8:	0800c2c4 	.word	0x0800c2c4
 80015ac:	20000278 	.word	0x20000278
 80015b0:	2000028c 	.word	0x2000028c
 80015b4:	0800176d 	.word	0x0800176d
 80015b8:	0800c334 	.word	0x0800c334
 80015bc:	1a11d018 	.word	0x1a11d018
 80015c0:	0800c2e0 	.word	0x0800c2e0
 80015c4:	0800c30c 	.word	0x0800c30c
 80015c8:	0800c1a4 	.word	0x0800c1a4
 80015cc:	0800c1b4 	.word	0x0800c1b4
 80015d0:	0800c1d0 	.word	0x0800c1d0
 80015d4:	0800c1ec 	.word	0x0800c1ec
 80015d8:	0800c200 	.word	0x0800c200
 80015dc:	0800c218 	.word	0x0800c218
 80015e0:	0800c230 	.word	0x0800c230
 80015e4:	0800c248 	.word	0x0800c248
 80015e8:	0800c25c 	.word	0x0800c25c

				} else {
					myDebug(
 80015ec:	484e      	ldr	r0, [pc, #312]	; (8001728 <HAL_UART_RxCpltCallback+0x46c>)
 80015ee:	f7ff f90d 	bl	800080c <myDebug>
							"*** Incorrect Digipeater Data received from OBC\n");
					if (HAL_UART_Transmit(&huart2, OBC_UART_RX, obc_plen, 2000)
 80015f2:	4b4e      	ldr	r3, [pc, #312]	; (800172c <HAL_UART_RxCpltCallback+0x470>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80015fc:	494c      	ldr	r1, [pc, #304]	; (8001730 <HAL_UART_RxCpltCallback+0x474>)
 80015fe:	484d      	ldr	r0, [pc, #308]	; (8001734 <HAL_UART_RxCpltCallback+0x478>)
 8001600:	f004 fd75 	bl	80060ee <HAL_UART_Transmit>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00b      	beq.n	8001622 <HAL_UART_RxCpltCallback+0x366>
							== HAL_OK
							|| HAL_UART_Transmit(&hlpuart1, OBC_UART_RX,
 800160a:	4b48      	ldr	r3, [pc, #288]	; (800172c <HAL_UART_RxCpltCallback+0x470>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	b29a      	uxth	r2, r3
 8001610:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001614:	4946      	ldr	r1, [pc, #280]	; (8001730 <HAL_UART_RxCpltCallback+0x474>)
 8001616:	4848      	ldr	r0, [pc, #288]	; (8001738 <HAL_UART_RxCpltCallback+0x47c>)
 8001618:	f004 fd69 	bl	80060ee <HAL_UART_Transmit>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d16c      	bne.n	80016fc <HAL_UART_RxCpltCallback+0x440>
									obc_plen, 2000) == HAL_OK) {
						myDebug(
 8001622:	4846      	ldr	r0, [pc, #280]	; (800173c <HAL_UART_RxCpltCallback+0x480>)
 8001624:	f7ff f8f2 	bl	800080c <myDebug>
								"*** Incorrect Digipeater Data re-transmit to OBC\n");
						memset(OBC_UART_RX, '\0', sizeof(OBC_UART_RX));
 8001628:	2254      	movs	r2, #84	; 0x54
 800162a:	2100      	movs	r1, #0
 800162c:	4840      	ldr	r0, [pc, #256]	; (8001730 <HAL_UART_RxCpltCallback+0x474>)
 800162e:	f009 ffad 	bl	800b58c <memset>
						OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001632:	4b43      	ldr	r3, [pc, #268]	; (8001740 <HAL_UART_RxCpltCallback+0x484>)
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
						DIGIPEATER_FLAG = 0;
 8001638:	4b42      	ldr	r3, [pc, #264]	; (8001744 <HAL_UART_RxCpltCallback+0x488>)
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
				if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 800163e:	e05d      	b.n	80016fc <HAL_UART_RxCpltCallback+0x440>
					}
				}

			} else {
				myDebug("\n--> Command Received from OBC: 0x%x\r\n",
 8001640:	493b      	ldr	r1, [pc, #236]	; (8001730 <HAL_UART_RxCpltCallback+0x474>)
 8001642:	4841      	ldr	r0, [pc, #260]	; (8001748 <HAL_UART_RxCpltCallback+0x48c>)
 8001644:	f7ff f8e2 	bl	800080c <myDebug>
						OBC_UART_RX);
				for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	e00a      	b.n	8001664 <HAL_UART_RxCpltCallback+0x3a8>
					myDebug("%02x ", OBC_UART_RX[i]);
 800164e:	4a38      	ldr	r2, [pc, #224]	; (8001730 <HAL_UART_RxCpltCallback+0x474>)
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	4413      	add	r3, r2
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	4619      	mov	r1, r3
 8001658:	483c      	ldr	r0, [pc, #240]	; (800174c <HAL_UART_RxCpltCallback+0x490>)
 800165a:	f7ff f8d7 	bl	800080c <myDebug>
				for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	3301      	adds	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	2b53      	cmp	r3, #83	; 0x53
 8001668:	d9f1      	bls.n	800164e <HAL_UART_RxCpltCallback+0x392>
				}
				myDebug("\r\n");
 800166a:	4839      	ldr	r0, [pc, #228]	; (8001750 <HAL_UART_RxCpltCallback+0x494>)
 800166c:	f7ff f8ce 	bl	800080c <myDebug>
				if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 8001670:	4b2f      	ldr	r3, [pc, #188]	; (8001730 <HAL_UART_RxCpltCallback+0x474>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b53      	cmp	r3, #83	; 0x53
 8001676:	d11a      	bne.n	80016ae <HAL_UART_RxCpltCallback+0x3f2>
 8001678:	4b2d      	ldr	r3, [pc, #180]	; (8001730 <HAL_UART_RxCpltCallback+0x474>)
 800167a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800167e:	2b7e      	cmp	r3, #126	; 0x7e
 8001680:	d115      	bne.n	80016ae <HAL_UART_RxCpltCallback+0x3f2>
					myDebug("--> Correct command received from OBC\n");
 8001682:	4834      	ldr	r0, [pc, #208]	; (8001754 <HAL_UART_RxCpltCallback+0x498>)
 8001684:	f7ff f8c2 	bl	800080c <myDebug>
					obc_ilen = OBC_UART_RX[2];  //len of info
 8001688:	4b29      	ldr	r3, [pc, #164]	; (8001730 <HAL_UART_RxCpltCallback+0x474>)
 800168a:	789a      	ldrb	r2, [r3, #2]
 800168c:	4b32      	ldr	r3, [pc, #200]	; (8001758 <HAL_UART_RxCpltCallback+0x49c>)
 800168e:	701a      	strb	r2, [r3, #0]
					PACKET_TYPE = OBC_UART_RX[1]; //packet_type
 8001690:	4b27      	ldr	r3, [pc, #156]	; (8001730 <HAL_UART_RxCpltCallback+0x474>)
 8001692:	785a      	ldrb	r2, [r3, #1]
 8001694:	4b31      	ldr	r3, [pc, #196]	; (800175c <HAL_UART_RxCpltCallback+0x4a0>)
 8001696:	701a      	strb	r2, [r3, #0]

					if (PACKET_TYPE == 0xB1) {
 8001698:	4b30      	ldr	r3, [pc, #192]	; (800175c <HAL_UART_RxCpltCallback+0x4a0>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2bb1      	cmp	r3, #177	; 0xb1
 800169e:	d102      	bne.n	80016a6 <HAL_UART_RxCpltCallback+0x3ea>
						BEACON_COUNT = 2;
 80016a0:	4b2f      	ldr	r3, [pc, #188]	; (8001760 <HAL_UART_RxCpltCallback+0x4a4>)
 80016a2:	2202      	movs	r2, #2
 80016a4:	601a      	str	r2, [r3, #0]
					}

					OBC_SUCCESS_DATA_RX_FLAG = 1;
 80016a6:	4b26      	ldr	r3, [pc, #152]	; (8001740 <HAL_UART_RxCpltCallback+0x484>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	e027      	b.n	80016fe <HAL_UART_RxCpltCallback+0x442>
				} else {
					myDebug("*** Incorrect command received from OBC\n");
 80016ae:	482d      	ldr	r0, [pc, #180]	; (8001764 <HAL_UART_RxCpltCallback+0x4a8>)
 80016b0:	f7ff f8ac 	bl	800080c <myDebug>
					if (HAL_UART_Transmit(&huart2, OBC_UART_RX, obc_plen, 2000)
 80016b4:	4b1d      	ldr	r3, [pc, #116]	; (800172c <HAL_UART_RxCpltCallback+0x470>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80016be:	491c      	ldr	r1, [pc, #112]	; (8001730 <HAL_UART_RxCpltCallback+0x474>)
 80016c0:	481c      	ldr	r0, [pc, #112]	; (8001734 <HAL_UART_RxCpltCallback+0x478>)
 80016c2:	f004 fd14 	bl	80060ee <HAL_UART_Transmit>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d00b      	beq.n	80016e4 <HAL_UART_RxCpltCallback+0x428>
							== HAL_OK
							|| HAL_UART_Transmit(&hlpuart1, OBC_UART_RX,
 80016cc:	4b17      	ldr	r3, [pc, #92]	; (800172c <HAL_UART_RxCpltCallback+0x470>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80016d6:	4916      	ldr	r1, [pc, #88]	; (8001730 <HAL_UART_RxCpltCallback+0x474>)
 80016d8:	4817      	ldr	r0, [pc, #92]	; (8001738 <HAL_UART_RxCpltCallback+0x47c>)
 80016da:	f004 fd08 	bl	80060ee <HAL_UART_Transmit>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d10c      	bne.n	80016fe <HAL_UART_RxCpltCallback+0x442>
									obc_plen, 2000) == HAL_OK) {
						myDebug("*** Incorrect command re-transmit to OBC\n");
 80016e4:	4820      	ldr	r0, [pc, #128]	; (8001768 <HAL_UART_RxCpltCallback+0x4ac>)
 80016e6:	f7ff f891 	bl	800080c <myDebug>
						memset(OBC_UART_RX, '\0', sizeof(OBC_UART_RX));
 80016ea:	2254      	movs	r2, #84	; 0x54
 80016ec:	2100      	movs	r1, #0
 80016ee:	4810      	ldr	r0, [pc, #64]	; (8001730 <HAL_UART_RxCpltCallback+0x474>)
 80016f0:	f009 ff4c 	bl	800b58c <memset>
						OBC_SUCCESS_DATA_RX_FLAG = 0;
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_UART_RxCpltCallback+0x484>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	e000      	b.n	80016fe <HAL_UART_RxCpltCallback+0x442>
				if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 80016fc:	bf00      	nop
					}
				}
			}

			HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <HAL_UART_RxCpltCallback+0x470>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	b29b      	uxth	r3, r3
 8001704:	461a      	mov	r2, r3
 8001706:	490a      	ldr	r1, [pc, #40]	; (8001730 <HAL_UART_RxCpltCallback+0x474>)
 8001708:	480a      	ldr	r0, [pc, #40]	; (8001734 <HAL_UART_RxCpltCallback+0x478>)
 800170a:	f004 fe3b 	bl	8006384 <HAL_UART_Receive_DMA>

			HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <HAL_UART_RxCpltCallback+0x470>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	b29b      	uxth	r3, r3
 8001714:	461a      	mov	r2, r3
 8001716:	4906      	ldr	r1, [pc, #24]	; (8001730 <HAL_UART_RxCpltCallback+0x474>)
 8001718:	4807      	ldr	r0, [pc, #28]	; (8001738 <HAL_UART_RxCpltCallback+0x47c>)
 800171a:	f004 fe33 	bl	8006384 <HAL_UART_Receive_DMA>
		}
	}
}
 800171e:	bf00      	nop
 8001720:	3720      	adds	r7, #32
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	0800c3cc 	.word	0x0800c3cc
 800172c:	20000001 	.word	0x20000001
 8001730:	20000310 	.word	0x20000310
 8001734:	20000644 	.word	0x20000644
 8001738:	2000051c 	.word	0x2000051c
 800173c:	0800c400 	.word	0x0800c400
 8001740:	20000364 	.word	0x20000364
 8001744:	200004a8 	.word	0x200004a8
 8001748:	0800c434 	.word	0x0800c434
 800174c:	0800c2b8 	.word	0x0800c2b8
 8001750:	0800c2c0 	.word	0x0800c2c0
 8001754:	0800c45c 	.word	0x0800c45c
 8001758:	2000030d 	.word	0x2000030d
 800175c:	200004a4 	.word	0x200004a4
 8001760:	20000004 	.word	0x20000004
 8001764:	0800c484 	.word	0x0800c484
 8001768:	0800c4b0 	.word	0x0800c4b0

0800176c <DioIrqHndlr>:

void DioIrqHndlr(RadioIrqMasks_t radioIrq) {
 800176c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001770:	b0b9      	sub	sp, #228	; 0xe4
 8001772:	af00      	add	r7, sp, #0
 8001774:	4603      	mov	r3, r0
 8001776:	84fb      	strh	r3, [r7, #38]	; 0x26
	if (radioIrq == IRQ_RX_DONE) {
 8001778:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800177a:	2b02      	cmp	r3, #2
 800177c:	f040 835d 	bne.w	8001e3a <DioIrqHndlr+0x6ce>
		SUBGRF_GetPayload(rx_buffer, &rx_buffer_len, RX_BUFF_LENGTH);
 8001780:	2264      	movs	r2, #100	; 0x64
 8001782:	49b1      	ldr	r1, [pc, #708]	; (8001a48 <DioIrqHndlr+0x2dc>)
 8001784:	48b1      	ldr	r0, [pc, #708]	; (8001a4c <DioIrqHndlr+0x2e0>)
 8001786:	f008 f95b 	bl	8009a40 <SUBGRF_GetPayload>
		rssi_value = SUBGRF_GetRssiInst();
 800178a:	f008 ff7a 	bl	800a682 <SUBGRF_GetRssiInst>
 800178e:	4603      	mov	r3, r0
 8001790:	b2db      	uxtb	r3, r3
 8001792:	4aaf      	ldr	r2, [pc, #700]	; (8001a50 <DioIrqHndlr+0x2e4>)
 8001794:	7013      	strb	r3, [r2, #0]
		myDebug("\nGS Command Received: 0x%x\r\n");
 8001796:	48af      	ldr	r0, [pc, #700]	; (8001a54 <DioIrqHndlr+0x2e8>)
 8001798:	f7ff f838 	bl	800080c <myDebug>

		uint8_t temp_rx_buffer_len = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
		temp_rx_buffer_len = countsDataBetweenFlags(rx_buffer, rx_buffer_len);
 80017a2:	4ba9      	ldr	r3, [pc, #676]	; (8001a48 <DioIrqHndlr+0x2dc>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	4619      	mov	r1, r3
 80017a8:	48a8      	ldr	r0, [pc, #672]	; (8001a4c <DioIrqHndlr+0x2e0>)
 80017aa:	f7ff fa7f 	bl	8000cac <countsDataBetweenFlags>
 80017ae:	4603      	mov	r3, r0
 80017b0:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

		if (temp_rx_buffer_len != -1) {
 80017b4:	466b      	mov	r3, sp
 80017b6:	607b      	str	r3, [r7, #4]

			uint8_t temp_check_buff[temp_rx_buffer_len];
 80017b8:	f897 20bf 	ldrb.w	r2, [r7, #191]	; 0xbf
 80017bc:	4611      	mov	r1, r2
 80017be:	6239      	str	r1, [r7, #32]
 80017c0:	460b      	mov	r3, r1
 80017c2:	3b01      	subs	r3, #1
 80017c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80017c8:	b2cb      	uxtb	r3, r1
 80017ca:	2200      	movs	r2, #0
 80017cc:	461c      	mov	r4, r3
 80017ce:	4615      	mov	r5, r2
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	f04f 0300 	mov.w	r3, #0
 80017d8:	00eb      	lsls	r3, r5, #3
 80017da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017de:	00e2      	lsls	r2, r4, #3
 80017e0:	b2cb      	uxtb	r3, r1
 80017e2:	2200      	movs	r2, #0
 80017e4:	4698      	mov	r8, r3
 80017e6:	4691      	mov	r9, r2
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	f04f 0300 	mov.w	r3, #0
 80017f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017fc:	460b      	mov	r3, r1
 80017fe:	3307      	adds	r3, #7
 8001800:	08db      	lsrs	r3, r3, #3
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	ebad 0d03 	sub.w	sp, sp, r3
 8001808:	466b      	mov	r3, sp
 800180a:	3300      	adds	r3, #0
 800180c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			for (int i = 0; i < temp_rx_buffer_len; i++) {
 8001810:	2300      	movs	r3, #0
 8001812:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001816:	e01a      	b.n	800184e <DioIrqHndlr+0xe2>
				temp_check_buff[i] = rx_buffer[i];
 8001818:	4a8c      	ldr	r2, [pc, #560]	; (8001a4c <DioIrqHndlr+0x2e0>)
 800181a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800181e:	4413      	add	r3, r2
 8001820:	7819      	ldrb	r1, [r3, #0]
 8001822:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800182a:	4413      	add	r3, r2
 800182c:	460a      	mov	r2, r1
 800182e:	701a      	strb	r2, [r3, #0]
				myDebug("%02x ", temp_check_buff[i]);
 8001830:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001838:	4413      	add	r3, r2
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	4619      	mov	r1, r3
 800183e:	4886      	ldr	r0, [pc, #536]	; (8001a58 <DioIrqHndlr+0x2ec>)
 8001840:	f7fe ffe4 	bl	800080c <myDebug>
			for (int i = 0; i < temp_rx_buffer_len; i++) {
 8001844:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001848:	3301      	adds	r3, #1
 800184a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800184e:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001852:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001856:	429a      	cmp	r2, r3
 8001858:	dbde      	blt.n	8001818 <DioIrqHndlr+0xac>
			}
			myDebug("\r\n");
 800185a:	4880      	ldr	r0, [pc, #512]	; (8001a5c <DioIrqHndlr+0x2f0>)
 800185c:	f7fe ffd6 	bl	800080c <myDebug>

			memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001860:	2264      	movs	r2, #100	; 0x64
 8001862:	2100      	movs	r1, #0
 8001864:	4879      	ldr	r0, [pc, #484]	; (8001a4c <DioIrqHndlr+0x2e0>)
 8001866:	f009 fe91 	bl	800b58c <memset>

			uint8_t crc_buff_len = temp_rx_buffer_len - 4;
 800186a:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800186e:	3b04      	subs	r3, #4
 8001870:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
			uint8_t crc_buff[crc_buff_len];
 8001874:	f897 50b3 	ldrb.w	r5, [r7, #179]	; 0xb3
 8001878:	462b      	mov	r3, r5
 800187a:	3b01      	subs	r3, #1
 800187c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001880:	b2eb      	uxtb	r3, r5
 8001882:	2200      	movs	r2, #0
 8001884:	61bb      	str	r3, [r7, #24]
 8001886:	61fa      	str	r2, [r7, #28]
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	f04f 0300 	mov.w	r3, #0
 8001890:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001894:	4649      	mov	r1, r9
 8001896:	00cb      	lsls	r3, r1, #3
 8001898:	4644      	mov	r4, r8
 800189a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800189e:	4641      	mov	r1, r8
 80018a0:	00ca      	lsls	r2, r1, #3
 80018a2:	b2eb      	uxtb	r3, r5
 80018a4:	2200      	movs	r2, #0
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	617a      	str	r2, [r7, #20]
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80018b6:	4649      	mov	r1, r9
 80018b8:	00cb      	lsls	r3, r1, #3
 80018ba:	4644      	mov	r4, r8
 80018bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018c0:	4641      	mov	r1, r8
 80018c2:	00ca      	lsls	r2, r1, #3
 80018c4:	462b      	mov	r3, r5
 80018c6:	3307      	adds	r3, #7
 80018c8:	08db      	lsrs	r3, r3, #3
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	ebad 0d03 	sub.w	sp, sp, r3
 80018d0:	466b      	mov	r3, sp
 80018d2:	3300      	adds	r3, #0
 80018d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

			myDebug("\nGS Command Testing: 0x%x\r\n");
 80018d8:	4861      	ldr	r0, [pc, #388]	; (8001a60 <DioIrqHndlr+0x2f4>)
 80018da:	f7fe ff97 	bl	800080c <myDebug>

			int j = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			for (int i = 1; i <= crc_buff_len; i++) {
 80018e4:	2301      	movs	r3, #1
 80018e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80018ea:	e020      	b.n	800192e <DioIrqHndlr+0x1c2>
				crc_buff[j] = temp_check_buff[i];
 80018ec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80018f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80018f4:	4413      	add	r3, r2
 80018f6:	7819      	ldrb	r1, [r3, #0]
 80018f8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80018fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001900:	4413      	add	r3, r2
 8001902:	460a      	mov	r2, r1
 8001904:	701a      	strb	r2, [r3, #0]
				myDebug("%02x ", crc_buff[j]);
 8001906:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800190a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800190e:	4413      	add	r3, r2
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	4619      	mov	r1, r3
 8001914:	4850      	ldr	r0, [pc, #320]	; (8001a58 <DioIrqHndlr+0x2ec>)
 8001916:	f7fe ff79 	bl	800080c <myDebug>
				j++;
 800191a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800191e:	3301      	adds	r3, #1
 8001920:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			for (int i = 1; i <= crc_buff_len; i++) {
 8001924:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001928:	3301      	adds	r3, #1
 800192a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800192e:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8001932:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001936:	429a      	cmp	r2, r3
 8001938:	ddd8      	ble.n	80018ec <DioIrqHndlr+0x180>
			}
			myDebug("\r\n");
 800193a:	4848      	ldr	r0, [pc, #288]	; (8001a5c <DioIrqHndlr+0x2f0>)
 800193c:	f7fe ff66 	bl	800080c <myDebug>

			uint16_t crc = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			crc = calculateCRC_CCITT_AX25(crc_buff, crc_buff_len);
 8001946:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800194a:	4619      	mov	r1, r3
 800194c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001950:	f7fe ffd8 	bl	8000904 <calculateCRC_CCITT_AX25>
 8001954:	4603      	mov	r3, r0
 8001956:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6

			uint8_t calc_crc[2];
			calc_crc[0] = (crc >> 8) & 0xFF;
 800195a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800195e:	0a1b      	lsrs	r3, r3, #8
 8001960:	b29b      	uxth	r3, r3
 8001962:	b2db      	uxtb	r3, r3
 8001964:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			calc_crc[1] = crc & 0xFF;
 8001968:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800196c:	b2db      	uxtb	r3, r3
 800196e:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95

			uint8_t msb_crc = temp_check_buff[temp_rx_buffer_len - 3];
 8001972:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001976:	3b03      	subs	r3, #3
 8001978:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800197c:	5cd3      	ldrb	r3, [r2, r3]
 800197e:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
			uint8_t lsb_crc = temp_check_buff[temp_rx_buffer_len - 2];
 8001982:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001986:	3b02      	subs	r3, #2
 8001988:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800198c:	5cd3      	ldrb	r3, [r2, r3]
 800198e:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4

			if (calc_crc[0] == msb_crc && calc_crc[1] == lsb_crc) {
 8001992:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001996:	f897 20a5 	ldrb.w	r2, [r7, #165]	; 0xa5
 800199a:	429a      	cmp	r2, r3
 800199c:	f040 8214 	bne.w	8001dc8 <DioIrqHndlr+0x65c>
 80019a0:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80019a4:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 80019a8:	429a      	cmp	r2, r3
 80019aa:	f040 820d 	bne.w	8001dc8 <DioIrqHndlr+0x65c>
 80019ae:	466b      	mov	r3, sp
 80019b0:	461e      	mov	r6, r3
				myDebug("GS Command checksum correct: 0x%x\r\n");
 80019b2:	482c      	ldr	r0, [pc, #176]	; (8001a64 <DioIrqHndlr+0x2f8>)
 80019b4:	f7fe ff2a 	bl	800080c <myDebug>

				uint8_t gs_cmd_buff[100];
				int gs_cmd_len = bit_destuffing(crc_buff, gs_cmd_buff,
 80019b8:	f897 20b3 	ldrb.w	r2, [r7, #179]	; 0xb3
 80019bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019c0:	4619      	mov	r1, r3
 80019c2:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80019c6:	f7ff f884 	bl	8000ad2 <bit_destuffing>
 80019ca:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
						crc_buff_len);
				gs_cmd_len--;
 80019ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019d2:	3b01      	subs	r3, #1
 80019d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
				myDebug("\nlength of command send to OBC: %d\r\n", gs_cmd_len);
 80019d8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80019dc:	4822      	ldr	r0, [pc, #136]	; (8001a68 <DioIrqHndlr+0x2fc>)
 80019de:	f7fe ff15 	bl	800080c <myDebug>
				uint8_t main_gs_cmd[gs_cmd_len];
 80019e2:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80019e6:	1e63      	subs	r3, r4, #1
 80019e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80019ec:	4622      	mov	r2, r4
 80019ee:	2300      	movs	r3, #0
 80019f0:	60ba      	str	r2, [r7, #8]
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001a00:	4649      	mov	r1, r9
 8001a02:	00cb      	lsls	r3, r1, #3
 8001a04:	46c4      	mov	ip, r8
 8001a06:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 8001a0a:	4641      	mov	r1, r8
 8001a0c:	00ca      	lsls	r2, r1, #3
 8001a0e:	4622      	mov	r2, r4
 8001a10:	2300      	movs	r3, #0
 8001a12:	4692      	mov	sl, r2
 8001a14:	469b      	mov	fp, r3
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	f04f 0300 	mov.w	r3, #0
 8001a1e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001a22:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001a26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001a2a:	4623      	mov	r3, r4
 8001a2c:	3307      	adds	r3, #7
 8001a2e:	08db      	lsrs	r3, r3, #3
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	ebad 0d03 	sub.w	sp, sp, r3
 8001a36:	466b      	mov	r3, sp
 8001a38:	3300      	adds	r3, #0
 8001a3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
				for (int i = 0; i < gs_cmd_len; i++) {
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001a44:	e024      	b.n	8001a90 <DioIrqHndlr+0x324>
 8001a46:	bf00      	nop
 8001a48:	20000000 	.word	0x20000000
 8001a4c:	200002a8 	.word	0x200002a8
 8001a50:	2000030c 	.word	0x2000030c
 8001a54:	0800c4dc 	.word	0x0800c4dc
 8001a58:	0800c2b8 	.word	0x0800c2b8
 8001a5c:	0800c2c0 	.word	0x0800c2c0
 8001a60:	0800c4fc 	.word	0x0800c4fc
 8001a64:	0800c518 	.word	0x0800c518
 8001a68:	0800c53c 	.word	0x0800c53c
					main_gs_cmd[i] = gs_cmd_buff[i];
 8001a6c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a70:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a74:	4413      	add	r3, r2
 8001a76:	7819      	ldrb	r1, [r3, #0]
 8001a78:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001a7c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a80:	4413      	add	r3, r2
 8001a82:	460a      	mov	r2, r1
 8001a84:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < gs_cmd_len; i++) {
 8001a86:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001a90:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001a94:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	dbe7      	blt.n	8001a6c <DioIrqHndlr+0x300>
				}

				if (main_gs_cmd[18] == 0x53 && main_gs_cmd[19] == 0x02
 8001a9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001aa0:	7c9b      	ldrb	r3, [r3, #18]
 8001aa2:	2b53      	cmp	r3, #83	; 0x53
 8001aa4:	d10c      	bne.n	8001ac0 <DioIrqHndlr+0x354>
 8001aa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001aaa:	7cdb      	ldrb	r3, [r3, #19]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d107      	bne.n	8001ac0 <DioIrqHndlr+0x354>
						&& main_gs_cmd[20] == 0x53) {
 8001ab0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ab4:	7d1b      	ldrb	r3, [r3, #20]
 8001ab6:	2b53      	cmp	r3, #83	; 0x53
 8001ab8:	d102      	bne.n	8001ac0 <DioIrqHndlr+0x354>
					DIGIPEATER_RX_FLAG = 1;
 8001aba:	4bb5      	ldr	r3, [pc, #724]	; (8001d90 <DioIrqHndlr+0x624>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	601a      	str	r2, [r3, #0]
				}

				if (main_gs_cmd[18] == 0xDF && main_gs_cmd[19] == 0xAB
 8001ac0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ac4:	7c9b      	ldrb	r3, [r3, #18]
 8001ac6:	2bdf      	cmp	r3, #223	; 0xdf
 8001ac8:	f040 8083 	bne.w	8001bd2 <DioIrqHndlr+0x466>
 8001acc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ad0:	7cdb      	ldrb	r3, [r3, #19]
 8001ad2:	2bab      	cmp	r3, #171	; 0xab
 8001ad4:	d17d      	bne.n	8001bd2 <DioIrqHndlr+0x466>
						&& main_gs_cmd[20] == 0xD1) {
 8001ad6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ada:	7d1b      	ldrb	r3, [r3, #20]
 8001adc:	2bd1      	cmp	r3, #209	; 0xd1
 8001ade:	d178      	bne.n	8001bd2 <DioIrqHndlr+0x466>

					BEACON_COUNT = 0;
 8001ae0:	4bac      	ldr	r3, [pc, #688]	; (8001d94 <DioIrqHndlr+0x628>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
					OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001ae6:	4bac      	ldr	r3, [pc, #688]	; (8001d98 <DioIrqHndlr+0x62c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
					DIGIPEATER_STATUS = 1;
 8001aec:	4bab      	ldr	r3, [pc, #684]	; (8001d9c <DioIrqHndlr+0x630>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	601a      	str	r2, [r3, #0]
					DIGIPEATER_RX_FLAG = 1;
 8001af2:	4ba7      	ldr	r3, [pc, #668]	; (8001d90 <DioIrqHndlr+0x624>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	601a      	str	r2, [r3, #0]

					myDebug(" \nDigipeater MODE ON\n ");
 8001af8:	48a9      	ldr	r0, [pc, #676]	; (8001da0 <DioIrqHndlr+0x634>)
 8001afa:	f7fe fe87 	bl	800080c <myDebug>

					OBC_UART_RX[0] = 0x53;	//header
 8001afe:	4ba9      	ldr	r3, [pc, #676]	; (8001da4 <DioIrqHndlr+0x638>)
 8001b00:	2253      	movs	r2, #83	; 0x53
 8001b02:	701a      	strb	r2, [r3, #0]
					OBC_UART_RX[1] = 0xac;	//packet_ type
 8001b04:	4ba7      	ldr	r3, [pc, #668]	; (8001da4 <DioIrqHndlr+0x638>)
 8001b06:	22ac      	movs	r2, #172	; 0xac
 8001b08:	705a      	strb	r2, [r3, #1]
					OBC_UART_RX[2] = 0x04;	//length of info
 8001b0a:	4ba6      	ldr	r3, [pc, #664]	; (8001da4 <DioIrqHndlr+0x638>)
 8001b0c:	2204      	movs	r2, #4
 8001b0e:	709a      	strb	r2, [r3, #2]
					OBC_UART_RX[3] = 0x02;	//mcu_no
 8001b10:	4ba4      	ldr	r3, [pc, #656]	; (8001da4 <DioIrqHndlr+0x638>)
 8001b12:	2202      	movs	r2, #2
 8001b14:	70da      	strb	r2, [r3, #3]
					OBC_UART_RX[4] = 0x01;	//Digipeater OFF
 8001b16:	4ba3      	ldr	r3, [pc, #652]	; (8001da4 <DioIrqHndlr+0x638>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	711a      	strb	r2, [r3, #4]
					OBC_UART_RX[5] = 0xdd;	//Digipeater prefix
 8001b1c:	4ba1      	ldr	r3, [pc, #644]	; (8001da4 <DioIrqHndlr+0x638>)
 8001b1e:	22dd      	movs	r2, #221	; 0xdd
 8001b20:	715a      	strb	r2, [r3, #5]
					obc_ilen = OBC_UART_RX[2];
 8001b22:	4ba0      	ldr	r3, [pc, #640]	; (8001da4 <DioIrqHndlr+0x638>)
 8001b24:	789a      	ldrb	r2, [r3, #2]
 8001b26:	4ba0      	ldr	r3, [pc, #640]	; (8001da8 <DioIrqHndlr+0x63c>)
 8001b28:	701a      	strb	r2, [r3, #0]

					if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001b2a:	b2a2      	uxth	r2, r4
 8001b2c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b30:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001b34:	489d      	ldr	r0, [pc, #628]	; (8001dac <DioIrqHndlr+0x640>)
 8001b36:	f004 fada 	bl	80060ee <HAL_UART_Transmit>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00a      	beq.n	8001b56 <DioIrqHndlr+0x3ea>
							sizeof(main_gs_cmd), 2000) == HAL_OK
							|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8001b40:	b2a2      	uxth	r2, r4
 8001b42:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b46:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001b4a:	4899      	ldr	r0, [pc, #612]	; (8001db0 <DioIrqHndlr+0x644>)
 8001b4c:	f004 facf 	bl	80060ee <HAL_UART_Transmit>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d039      	beq.n	8001bca <DioIrqHndlr+0x45e>
									sizeof(main_gs_cmd), 2000)) {

						for (int i = 0; i < gs_cmd_len; i++) {
 8001b56:	2300      	movs	r3, #0
 8001b58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001b5c:	e00e      	b.n	8001b7c <DioIrqHndlr+0x410>
							myDebug("%02x ", main_gs_cmd[i]);
 8001b5e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001b62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b66:	4413      	add	r3, r2
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4891      	ldr	r0, [pc, #580]	; (8001db4 <DioIrqHndlr+0x648>)
 8001b6e:	f7fe fe4d 	bl	800080c <myDebug>
						for (int i = 0; i < gs_cmd_len; i++) {
 8001b72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b76:	3301      	adds	r3, #1
 8001b78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001b7c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001b80:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b84:	429a      	cmp	r2, r3
 8001b86:	dbea      	blt.n	8001b5e <DioIrqHndlr+0x3f2>
						}

						memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001b88:	4623      	mov	r3, r4
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001b92:	f009 fcfb 	bl	800b58c <memset>
						memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001b96:	2264      	movs	r2, #100	; 0x64
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4887      	ldr	r0, [pc, #540]	; (8001db8 <DioIrqHndlr+0x64c>)
 8001b9c:	f009 fcf6 	bl	800b58c <memset>
						memset(temp_check_buff, '\0', sizeof(temp_check_buff));
 8001ba0:	6a3b      	ldr	r3, [r7, #32]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001baa:	f009 fcef 	bl	800b58c <memset>
						memset(crc_buff, '\0', sizeof(crc_buff));
 8001bae:	462b      	mov	r3, r5
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001bb8:	f009 fce8 	bl	800b58c <memset>
						memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001bbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bc0:	2264      	movs	r2, #100	; 0x64
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f009 fce1 	bl	800b58c <memset>
					}

					OBC_SUCCESS_DATA_RX_FLAG = 1;
 8001bca:	4b73      	ldr	r3, [pc, #460]	; (8001d98 <DioIrqHndlr+0x62c>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	e0db      	b.n	8001d8a <DioIrqHndlr+0x61e>

				} else if (main_gs_cmd[18] == 0xFD && main_gs_cmd[19] == 0xBA
 8001bd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bd6:	7c9b      	ldrb	r3, [r3, #18]
 8001bd8:	2bfd      	cmp	r3, #253	; 0xfd
 8001bda:	f040 8083 	bne.w	8001ce4 <DioIrqHndlr+0x578>
 8001bde:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001be2:	7cdb      	ldrb	r3, [r3, #19]
 8001be4:	2bba      	cmp	r3, #186	; 0xba
 8001be6:	d17d      	bne.n	8001ce4 <DioIrqHndlr+0x578>
						&& main_gs_cmd[20] == 0xD0) {
 8001be8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bec:	7d1b      	ldrb	r3, [r3, #20]
 8001bee:	2bd0      	cmp	r3, #208	; 0xd0
 8001bf0:	d178      	bne.n	8001ce4 <DioIrqHndlr+0x578>

					BEACON_COUNT = 2;
 8001bf2:	4b68      	ldr	r3, [pc, #416]	; (8001d94 <DioIrqHndlr+0x628>)
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	601a      	str	r2, [r3, #0]
					OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001bf8:	4b67      	ldr	r3, [pc, #412]	; (8001d98 <DioIrqHndlr+0x62c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
					DIGIPEATER_STATUS = 0;
 8001bfe:	4b67      	ldr	r3, [pc, #412]	; (8001d9c <DioIrqHndlr+0x630>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
					DIGIPEATER_FLAG = 0;
 8001c04:	4b6d      	ldr	r3, [pc, #436]	; (8001dbc <DioIrqHndlr+0x650>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]

					myDebug(" \nDigipeater MODE OFF\n ");
 8001c0a:	486d      	ldr	r0, [pc, #436]	; (8001dc0 <DioIrqHndlr+0x654>)
 8001c0c:	f7fe fdfe 	bl	800080c <myDebug>

					OBC_UART_RX[0] = 0x53;	//header
 8001c10:	4b64      	ldr	r3, [pc, #400]	; (8001da4 <DioIrqHndlr+0x638>)
 8001c12:	2253      	movs	r2, #83	; 0x53
 8001c14:	701a      	strb	r2, [r3, #0]
					OBC_UART_RX[1] = 0xac;	//packet_ type
 8001c16:	4b63      	ldr	r3, [pc, #396]	; (8001da4 <DioIrqHndlr+0x638>)
 8001c18:	22ac      	movs	r2, #172	; 0xac
 8001c1a:	705a      	strb	r2, [r3, #1]
					OBC_UART_RX[2] = 0x04;	//length of info
 8001c1c:	4b61      	ldr	r3, [pc, #388]	; (8001da4 <DioIrqHndlr+0x638>)
 8001c1e:	2204      	movs	r2, #4
 8001c20:	709a      	strb	r2, [r3, #2]
					OBC_UART_RX[3] = 0x02;	//mcu_no
 8001c22:	4b60      	ldr	r3, [pc, #384]	; (8001da4 <DioIrqHndlr+0x638>)
 8001c24:	2202      	movs	r2, #2
 8001c26:	70da      	strb	r2, [r3, #3]
					OBC_UART_RX[4] = 0x00;	//Digipeater OFF
 8001c28:	4b5e      	ldr	r3, [pc, #376]	; (8001da4 <DioIrqHndlr+0x638>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	711a      	strb	r2, [r3, #4]
					OBC_UART_RX[5] = 0xdd;	//Digipeater prefix
 8001c2e:	4b5d      	ldr	r3, [pc, #372]	; (8001da4 <DioIrqHndlr+0x638>)
 8001c30:	22dd      	movs	r2, #221	; 0xdd
 8001c32:	715a      	strb	r2, [r3, #5]
					obc_ilen = OBC_UART_RX[2];
 8001c34:	4b5b      	ldr	r3, [pc, #364]	; (8001da4 <DioIrqHndlr+0x638>)
 8001c36:	789a      	ldrb	r2, [r3, #2]
 8001c38:	4b5b      	ldr	r3, [pc, #364]	; (8001da8 <DioIrqHndlr+0x63c>)
 8001c3a:	701a      	strb	r2, [r3, #0]

					if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001c3c:	b2a2      	uxth	r2, r4
 8001c3e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c42:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001c46:	4859      	ldr	r0, [pc, #356]	; (8001dac <DioIrqHndlr+0x640>)
 8001c48:	f004 fa51 	bl	80060ee <HAL_UART_Transmit>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00a      	beq.n	8001c68 <DioIrqHndlr+0x4fc>
							sizeof(main_gs_cmd), 2000) == HAL_OK
							|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8001c52:	b2a2      	uxth	r2, r4
 8001c54:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c58:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001c5c:	4854      	ldr	r0, [pc, #336]	; (8001db0 <DioIrqHndlr+0x644>)
 8001c5e:	f004 fa46 	bl	80060ee <HAL_UART_Transmit>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d039      	beq.n	8001cdc <DioIrqHndlr+0x570>
									sizeof(main_gs_cmd), 2000)) {

						for (int i = 0; i < gs_cmd_len; i++) {
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001c6e:	e00e      	b.n	8001c8e <DioIrqHndlr+0x522>
							myDebug("%02x ", main_gs_cmd[i]);
 8001c70:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001c74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c78:	4413      	add	r3, r2
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	484d      	ldr	r0, [pc, #308]	; (8001db4 <DioIrqHndlr+0x648>)
 8001c80:	f7fe fdc4 	bl	800080c <myDebug>
						for (int i = 0; i < gs_cmd_len; i++) {
 8001c84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c88:	3301      	adds	r3, #1
 8001c8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001c8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001c92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c96:	429a      	cmp	r2, r3
 8001c98:	dbea      	blt.n	8001c70 <DioIrqHndlr+0x504>
						}

						memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001c9a:	4623      	mov	r3, r4
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001ca4:	f009 fc72 	bl	800b58c <memset>
						memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001ca8:	2264      	movs	r2, #100	; 0x64
 8001caa:	2100      	movs	r1, #0
 8001cac:	4842      	ldr	r0, [pc, #264]	; (8001db8 <DioIrqHndlr+0x64c>)
 8001cae:	f009 fc6d 	bl	800b58c <memset>
						memset(temp_check_buff, '\0', sizeof(temp_check_buff));
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001cbc:	f009 fc66 	bl	800b58c <memset>
						memset(crc_buff, '\0', sizeof(crc_buff));
 8001cc0:	462b      	mov	r3, r5
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001cca:	f009 fc5f 	bl	800b58c <memset>
						memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001cce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cd2:	2264      	movs	r2, #100	; 0x64
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f009 fc58 	bl	800b58c <memset>
					}

					OBC_SUCCESS_DATA_RX_FLAG = 1;
 8001cdc:	4b2e      	ldr	r3, [pc, #184]	; (8001d98 <DioIrqHndlr+0x62c>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	e052      	b.n	8001d8a <DioIrqHndlr+0x61e>

				} else {

					if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001ce4:	b2a2      	uxth	r2, r4
 8001ce6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001cea:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001cee:	482f      	ldr	r0, [pc, #188]	; (8001dac <DioIrqHndlr+0x640>)
 8001cf0:	f004 f9fd 	bl	80060ee <HAL_UART_Transmit>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00a      	beq.n	8001d10 <DioIrqHndlr+0x5a4>
							sizeof(main_gs_cmd), 2000) == HAL_OK
							|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8001cfa:	b2a2      	uxth	r2, r4
 8001cfc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001d00:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001d04:	482a      	ldr	r0, [pc, #168]	; (8001db0 <DioIrqHndlr+0x644>)
 8001d06:	f004 f9f2 	bl	80060ee <HAL_UART_Transmit>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d03c      	beq.n	8001d8a <DioIrqHndlr+0x61e>
									sizeof(main_gs_cmd), 2000)) {

						for (int i = 0; i < gs_cmd_len; i++) {
 8001d10:	2300      	movs	r3, #0
 8001d12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001d16:	e00e      	b.n	8001d36 <DioIrqHndlr+0x5ca>
							myDebug("%02x ", main_gs_cmd[i]);
 8001d18:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001d1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d20:	4413      	add	r3, r2
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	4619      	mov	r1, r3
 8001d26:	4823      	ldr	r0, [pc, #140]	; (8001db4 <DioIrqHndlr+0x648>)
 8001d28:	f7fe fd70 	bl	800080c <myDebug>
						for (int i = 0; i < gs_cmd_len; i++) {
 8001d2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d30:	3301      	adds	r3, #1
 8001d32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001d36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001d3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	dbea      	blt.n	8001d18 <DioIrqHndlr+0x5ac>
						}

						memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001d42:	4623      	mov	r3, r4
 8001d44:	461a      	mov	r2, r3
 8001d46:	2100      	movs	r1, #0
 8001d48:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001d4c:	f009 fc1e 	bl	800b58c <memset>
						memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001d50:	2264      	movs	r2, #100	; 0x64
 8001d52:	2100      	movs	r1, #0
 8001d54:	4818      	ldr	r0, [pc, #96]	; (8001db8 <DioIrqHndlr+0x64c>)
 8001d56:	f009 fc19 	bl	800b58c <memset>
						memset(temp_check_buff, '\0', sizeof(temp_check_buff));
 8001d5a:	6a3b      	ldr	r3, [r7, #32]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	2100      	movs	r1, #0
 8001d60:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001d64:	f009 fc12 	bl	800b58c <memset>
						memset(crc_buff, '\0', sizeof(crc_buff));
 8001d68:	462b      	mov	r3, r5
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001d72:	f009 fc0b 	bl	800b58c <memset>
						memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001d76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d7a:	2264      	movs	r2, #100	; 0x64
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f009 fc04 	bl	800b58c <memset>

						myDebug("\n\n_____OBC__RECEIVER_____\r\n");
 8001d84:	480f      	ldr	r0, [pc, #60]	; (8001dc4 <DioIrqHndlr+0x658>)
 8001d86:	f7fe fd41 	bl	800080c <myDebug>
 8001d8a:	46b5      	mov	sp, r6
			if (calc_crc[0] == msb_crc && calc_crc[1] == lsb_crc) {
 8001d8c:	e038      	b.n	8001e00 <DioIrqHndlr+0x694>
 8001d8e:	bf00      	nop
 8001d90:	200004ac 	.word	0x200004ac
 8001d94:	20000004 	.word	0x20000004
 8001d98:	20000364 	.word	0x20000364
 8001d9c:	200004a0 	.word	0x200004a0
 8001da0:	0800c564 	.word	0x0800c564
 8001da4:	20000310 	.word	0x20000310
 8001da8:	2000030d 	.word	0x2000030d
 8001dac:	20000644 	.word	0x20000644
 8001db0:	2000051c 	.word	0x2000051c
 8001db4:	0800c2b8 	.word	0x0800c2b8
 8001db8:	200002a8 	.word	0x200002a8
 8001dbc:	200004a8 	.word	0x200004a8
 8001dc0:	0800c57c 	.word	0x0800c57c
 8001dc4:	0800c594 	.word	0x0800c594
					}
				}

			} else {
				myDebug("\nGS Command checksum incorrect: 0x%x\r\n");
 8001dc8:	48a7      	ldr	r0, [pc, #668]	; (8002068 <DioIrqHndlr+0x8fc>)
 8001dca:	f7fe fd1f 	bl	800080c <myDebug>

				OBC_UART_RX[0] = 0x53;	//header
 8001dce:	4ba7      	ldr	r3, [pc, #668]	; (800206c <DioIrqHndlr+0x900>)
 8001dd0:	2253      	movs	r2, #83	; 0x53
 8001dd2:	701a      	strb	r2, [r3, #0]
				OBC_UART_RX[1] = 0xac;	//packet_ type
 8001dd4:	4ba5      	ldr	r3, [pc, #660]	; (800206c <DioIrqHndlr+0x900>)
 8001dd6:	22ac      	movs	r2, #172	; 0xac
 8001dd8:	705a      	strb	r2, [r3, #1]
				OBC_UART_RX[2] = 0x04;	//length of info
 8001dda:	4ba4      	ldr	r3, [pc, #656]	; (800206c <DioIrqHndlr+0x900>)
 8001ddc:	2204      	movs	r2, #4
 8001dde:	709a      	strb	r2, [r3, #2]
				OBC_UART_RX[3] = 0x02;	//mcu_no
 8001de0:	4ba2      	ldr	r3, [pc, #648]	; (800206c <DioIrqHndlr+0x900>)
 8001de2:	2202      	movs	r2, #2
 8001de4:	70da      	strb	r2, [r3, #3]
				OBC_UART_RX[4] = 0x01;	//checksum_error
 8001de6:	4ba1      	ldr	r3, [pc, #644]	; (800206c <DioIrqHndlr+0x900>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	711a      	strb	r2, [r3, #4]
				OBC_UART_RX[5] = 0xee;	//error prefix
 8001dec:	4b9f      	ldr	r3, [pc, #636]	; (800206c <DioIrqHndlr+0x900>)
 8001dee:	22ee      	movs	r2, #238	; 0xee
 8001df0:	715a      	strb	r2, [r3, #5]
				obc_ilen = OBC_UART_RX[2];
 8001df2:	4b9e      	ldr	r3, [pc, #632]	; (800206c <DioIrqHndlr+0x900>)
 8001df4:	789a      	ldrb	r2, [r3, #2]
 8001df6:	4b9e      	ldr	r3, [pc, #632]	; (8002070 <DioIrqHndlr+0x904>)
 8001df8:	701a      	strb	r2, [r3, #0]

				OBC_SUCCESS_DATA_RX_FLAG = 1;
 8001dfa:	4b9e      	ldr	r3, [pc, #632]	; (8002074 <DioIrqHndlr+0x908>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	f8d7 d004 	ldr.w	sp, [r7, #4]

			OBC_SUCCESS_DATA_RX_FLAG = 1;

		}

		SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 8001e04:	489c      	ldr	r0, [pc, #624]	; (8002078 <DioIrqHndlr+0x90c>)
 8001e06:	f008 f97b 	bl	800a100 <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	f008 fdbf 	bl	800a990 <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 8001e12:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8001e16:	f007 ff9f 	bl	8009d58 <SUBGRF_SetRxBoosted>

		HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 8001e1a:	4b98      	ldr	r3, [pc, #608]	; (800207c <DioIrqHndlr+0x910>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	461a      	mov	r2, r3
 8001e22:	4992      	ldr	r1, [pc, #584]	; (800206c <DioIrqHndlr+0x900>)
 8001e24:	4896      	ldr	r0, [pc, #600]	; (8002080 <DioIrqHndlr+0x914>)
 8001e26:	f004 faad 	bl	8006384 <HAL_UART_Receive_DMA>

		HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 8001e2a:	4b94      	ldr	r3, [pc, #592]	; (800207c <DioIrqHndlr+0x910>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	461a      	mov	r2, r3
 8001e32:	498e      	ldr	r1, [pc, #568]	; (800206c <DioIrqHndlr+0x900>)
 8001e34:	4893      	ldr	r0, [pc, #588]	; (8002084 <DioIrqHndlr+0x918>)
 8001e36:	f004 faa5 	bl	8006384 <HAL_UART_Receive_DMA>
	}

	if (radioIrq == IRQ_TX_DONE) {
 8001e3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	f040 810e 	bne.w	800205e <DioIrqHndlr+0x8f2>

		OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001e42:	4b8c      	ldr	r3, [pc, #560]	; (8002074 <DioIrqHndlr+0x908>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]

		myDebug("\nSatellite Data Transmitted Successful:\r\n");
 8001e48:	488f      	ldr	r0, [pc, #572]	; (8002088 <DioIrqHndlr+0x91c>)
 8001e4a:	f7fe fcdf 	bl	800080c <myDebug>
		for (int i = 0; i < tx_buffer_len; i++) {
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001e54:	e00d      	b.n	8001e72 <DioIrqHndlr+0x706>
			myDebug("%02x ", tx_buffer[i]);
 8001e56:	4a8d      	ldr	r2, [pc, #564]	; (800208c <DioIrqHndlr+0x920>)
 8001e58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e5c:	4413      	add	r3, r2
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	4619      	mov	r1, r3
 8001e62:	488b      	ldr	r0, [pc, #556]	; (8002090 <DioIrqHndlr+0x924>)
 8001e64:	f7fe fcd2 	bl	800080c <myDebug>
		for (int i = 0; i < tx_buffer_len; i++) {
 8001e68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001e72:	4b88      	ldr	r3, [pc, #544]	; (8002094 <DioIrqHndlr+0x928>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	dbeb      	blt.n	8001e56 <DioIrqHndlr+0x6ea>
		}
		myDebug("\r\n");
 8001e7e:	4886      	ldr	r0, [pc, #536]	; (8002098 <DioIrqHndlr+0x92c>)
 8001e80:	f7fe fcc4 	bl	800080c <myDebug>

		memset(tx_buffer, '\0', sizeof(tx_buffer));
 8001e84:	2296      	movs	r2, #150	; 0x96
 8001e86:	2100      	movs	r1, #0
 8001e88:	4880      	ldr	r0, [pc, #512]	; (800208c <DioIrqHndlr+0x920>)
 8001e8a:	f009 fb7f 	bl	800b58c <memset>

		if (PACKET_TYPE == 0xB1 || PACKET_TYPE == 0xB2) {
 8001e8e:	4b83      	ldr	r3, [pc, #524]	; (800209c <DioIrqHndlr+0x930>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2bb1      	cmp	r3, #177	; 0xb1
 8001e94:	d003      	beq.n	8001e9e <DioIrqHndlr+0x732>
 8001e96:	4b81      	ldr	r3, [pc, #516]	; (800209c <DioIrqHndlr+0x930>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2bb2      	cmp	r3, #178	; 0xb2
 8001e9c:	d107      	bne.n	8001eae <DioIrqHndlr+0x742>
			BEACON_COUNT--;
 8001e9e:	4b80      	ldr	r3, [pc, #512]	; (80020a0 <DioIrqHndlr+0x934>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	4a7e      	ldr	r2, [pc, #504]	; (80020a0 <DioIrqHndlr+0x934>)
 8001ea6:	6013      	str	r3, [r2, #0]
			PACKET_TYPE = 0;
 8001ea8:	4b7c      	ldr	r3, [pc, #496]	; (800209c <DioIrqHndlr+0x930>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
		}

		if (DIGIPEATER_FLAG) {
 8001eae:	4b7d      	ldr	r3, [pc, #500]	; (80020a4 <DioIrqHndlr+0x938>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00e      	beq.n	8001ed4 <DioIrqHndlr+0x768>
			BEACON_COUNT = 2;
 8001eb6:	4b7a      	ldr	r3, [pc, #488]	; (80020a0 <DioIrqHndlr+0x934>)
 8001eb8:	2202      	movs	r2, #2
 8001eba:	601a      	str	r2, [r3, #0]
			OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001ebc:	4b6d      	ldr	r3, [pc, #436]	; (8002074 <DioIrqHndlr+0x908>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
			DIGIPEATER_STATUS = 0;
 8001ec2:	4b79      	ldr	r3, [pc, #484]	; (80020a8 <DioIrqHndlr+0x93c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
			DIGIPEATER_FLAG = 0;
 8001ec8:	4b76      	ldr	r3, [pc, #472]	; (80020a4 <DioIrqHndlr+0x938>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
			DIGIPEATER_RX_FLAG = 0;
 8001ece:	4b77      	ldr	r3, [pc, #476]	; (80020ac <DioIrqHndlr+0x940>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
		}

		if (BEACON_COUNT == 0) {
 8001ed4:	4b72      	ldr	r3, [pc, #456]	; (80020a0 <DioIrqHndlr+0x934>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d109      	bne.n	8001ef0 <DioIrqHndlr+0x784>
			OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001edc:	4b65      	ldr	r3, [pc, #404]	; (8002074 <DioIrqHndlr+0x908>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
			DIGIPEATER_STATUS = 1;
 8001ee2:	4b71      	ldr	r3, [pc, #452]	; (80020a8 <DioIrqHndlr+0x93c>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
			myDebug("\n########## Digipeater Mode Configuration: ##########\n");
 8001ee8:	4871      	ldr	r0, [pc, #452]	; (80020b0 <DioIrqHndlr+0x944>)
 8001eea:	f7fe fc8f 	bl	800080c <myDebug>
 8001eee:	e002      	b.n	8001ef6 <DioIrqHndlr+0x78a>
		} else {
			DIGIPEATER_STATUS = 0;
 8001ef0:	4b6d      	ldr	r3, [pc, #436]	; (80020a8 <DioIrqHndlr+0x93c>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
		}

		pkt_params.PacketType = PACKET_TYPE_GFSK;
 8001ef6:	4b6f      	ldr	r3, [pc, #444]	; (80020b4 <DioIrqHndlr+0x948>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]
		pkt_params.Params.Gfsk.PayloadLength = RX_BUFF_LENGTH;
 8001efc:	4b6d      	ldr	r3, [pc, #436]	; (80020b4 <DioIrqHndlr+0x948>)
 8001efe:	2264      	movs	r2, #100	; 0x64
 8001f00:	721a      	strb	r2, [r3, #8]
		pkt_params.Params.Gfsk.PreambleLength = 8; /*Convert byte into bit*/
 8001f02:	4b6c      	ldr	r3, [pc, #432]	; (80020b4 <DioIrqHndlr+0x948>)
 8001f04:	2208      	movs	r2, #8
 8001f06:	805a      	strh	r2, [r3, #2]
		pkt_params.Params.Gfsk.PreambleMinDetect =
 8001f08:	4b6a      	ldr	r3, [pc, #424]	; (80020b4 <DioIrqHndlr+0x948>)
 8001f0a:	2204      	movs	r2, #4
 8001f0c:	711a      	strb	r2, [r3, #4]
				RADIO_PREAMBLE_DETECTOR_08_BITS;
		pkt_params.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8001f0e:	4b69      	ldr	r3, [pc, #420]	; (80020b4 <DioIrqHndlr+0x948>)
 8001f10:	2218      	movs	r2, #24
 8001f12:	715a      	strb	r2, [r3, #5]
		pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8001f14:	4b67      	ldr	r3, [pc, #412]	; (80020b4 <DioIrqHndlr+0x948>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	719a      	strb	r2, [r3, #6]
		pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8001f1a:	4b66      	ldr	r3, [pc, #408]	; (80020b4 <DioIrqHndlr+0x948>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	71da      	strb	r2, [r3, #7]
		pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8001f20:	4b64      	ldr	r3, [pc, #400]	; (80020b4 <DioIrqHndlr+0x948>)
 8001f22:	22f2      	movs	r2, #242	; 0xf2
 8001f24:	725a      	strb	r2, [r3, #9]
		pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8001f26:	4b63      	ldr	r3, [pc, #396]	; (80020b4 <DioIrqHndlr+0x948>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	729a      	strb	r2, [r3, #10]

		mod_params.PacketType = PACKET_TYPE_GFSK;
 8001f2c:	4b62      	ldr	r3, [pc, #392]	; (80020b8 <DioIrqHndlr+0x94c>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	701a      	strb	r2, [r3, #0]
		mod_params.Params.Gfsk.Bandwidth = RX_BW_29300; /*Not used in TX*/
 8001f32:	4b61      	ldr	r3, [pc, #388]	; (80020b8 <DioIrqHndlr+0x94c>)
 8001f34:	220d      	movs	r2, #13
 8001f36:	735a      	strb	r2, [r3, #13]
		mod_params.Params.Gfsk.BitRate = DEMO_DEFAULT_BR_1200;
 8001f38:	4b5f      	ldr	r3, [pc, #380]	; (80020b8 <DioIrqHndlr+0x94c>)
 8001f3a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001f3e:	605a      	str	r2, [r3, #4]
		mod_params.Params.Gfsk.Fdev = DEMO_DEFAULT_FDEV_1200;
 8001f40:	4b5d      	ldr	r3, [pc, #372]	; (80020b8 <DioIrqHndlr+0x94c>)
 8001f42:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001f46:	609a      	str	r2, [r3, #8]
		mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8001f48:	4b5b      	ldr	r3, [pc, #364]	; (80020b8 <DioIrqHndlr+0x94c>)
 8001f4a:	220b      	movs	r2, #11
 8001f4c:	731a      	strb	r2, [r3, #12]

		SUBGRF_Init(DioIrqHndlr);
 8001f4e:	485b      	ldr	r0, [pc, #364]	; (80020bc <DioIrqHndlr+0x950>)
 8001f50:	f007 fd14 	bl	800997c <SUBGRF_Init>
		SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8001f54:	2100      	movs	r1, #0
 8001f56:	2000      	movs	r0, #0
 8001f58:	f008 fb7c 	bl	800a654 <SUBGRF_SetBufferBaseAddress>
		SUBGRF_SetPacketParams(&pkt_params);
 8001f5c:	4855      	ldr	r0, [pc, #340]	; (80020b4 <DioIrqHndlr+0x948>)
 8001f5e:	f008 fadb 	bl	800a518 <SUBGRF_SetPacketParams>
		SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00,
 8001f62:	4a57      	ldr	r2, [pc, #348]	; (80020c0 <DioIrqHndlr+0x954>)
 8001f64:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001f68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f6c:	e883 0003 	stmia.w	r3, {r0, r1}
 8001f70:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001f74:	4618      	mov	r0, r3
 8001f76:	f007 fd98 	bl	8009aaa <SUBGRF_SetSyncWord>
						0x00, 0x00 });
		SUBGRF_SetWhiteningSeed(0x01FF);
 8001f7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f7e:	f007 fde3 	bl	8009b48 <SUBGRF_SetWhiteningSeed>
		SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 8001f82:	483d      	ldr	r0, [pc, #244]	; (8002078 <DioIrqHndlr+0x90c>)
 8001f84:	f008 f8bc 	bl	800a100 <SUBGRF_SetRfFrequency>
		SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 8001f88:	2301      	movs	r3, #1
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	2004      	movs	r0, #4
 8001f90:	f008 f838 	bl	800a004 <SUBGRF_SetPaConfig>
		SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME); // Set to RFO_LP for low power
 8001f94:	2202      	movs	r2, #2
 8001f96:	210e      	movs	r1, #14
 8001f98:	2001      	movs	r0, #1
 8001f9a:	f008 f91d 	bl	800a1d8 <SUBGRF_SetTxParams>
		SUBGRF_SetModulationParams(&mod_params);
 8001f9e:	4846      	ldr	r0, [pc, #280]	; (80020b8 <DioIrqHndlr+0x94c>)
 8001fa0:	f008 f9e8 	bl	800a374 <SUBGRF_SetModulationParams>
		SUBGRF_SetDioIrqParams(
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f240 210f 	movw	r1, #527	; 0x20f
 8001fac:	f240 200f 	movw	r0, #527	; 0x20f
 8001fb0:	f008 f84a 	bl	800a048 <SUBGRF_SetDioIrqParams>
						| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
				IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
						| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
				IRQ_RADIO_NONE, IRQ_RADIO_NONE);

		myDebug("\n########## RX Configuration: ##########\n");
 8001fb4:	4843      	ldr	r0, [pc, #268]	; (80020c4 <DioIrqHndlr+0x958>)
 8001fb6:	f7fe fc29 	bl	800080c <myDebug>

		myDebug("FREQUENCY MODS: UPLINK FREQ: %lu Hz\r\n", FREQ_435_MHZ);
 8001fba:	492f      	ldr	r1, [pc, #188]	; (8002078 <DioIrqHndlr+0x90c>)
 8001fbc:	4842      	ldr	r0, [pc, #264]	; (80020c8 <DioIrqHndlr+0x95c>)
 8001fbe:	f7fe fc25 	bl	800080c <myDebug>
		myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 8001fc2:	4b3d      	ldr	r3, [pc, #244]	; (80020b8 <DioIrqHndlr+0x94c>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4840      	ldr	r0, [pc, #256]	; (80020cc <DioIrqHndlr+0x960>)
 8001fca:	f7fe fc1f 	bl	800080c <myDebug>
		myDebug("Frequency Deviation: 	%d\n\r", mod_params.Params.Gfsk.Fdev);
 8001fce:	4b3a      	ldr	r3, [pc, #232]	; (80020b8 <DioIrqHndlr+0x94c>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	483e      	ldr	r0, [pc, #248]	; (80020d0 <DioIrqHndlr+0x964>)
 8001fd6:	f7fe fc19 	bl	800080c <myDebug>
		myDebug("RECEVING BANDWIDTH: 	%d\n\r",
				mod_params.Params.Gfsk.Bandwidth);
 8001fda:	4b37      	ldr	r3, [pc, #220]	; (80020b8 <DioIrqHndlr+0x94c>)
 8001fdc:	7b5b      	ldrb	r3, [r3, #13]
		myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 8001fde:	4619      	mov	r1, r3
 8001fe0:	483c      	ldr	r0, [pc, #240]	; (80020d4 <DioIrqHndlr+0x968>)
 8001fe2:	f7fe fc13 	bl	800080c <myDebug>
		myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8001fe6:	4b33      	ldr	r3, [pc, #204]	; (80020b4 <DioIrqHndlr+0x948>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	4619      	mov	r1, r3
 8001fec:	483a      	ldr	r0, [pc, #232]	; (80020d8 <DioIrqHndlr+0x96c>)
 8001fee:	f7fe fc0d 	bl	800080c <myDebug>
		myDebug("PayloadLength 			%d\n\r",
				pkt_params.Params.Gfsk.PayloadLength);
 8001ff2:	4b30      	ldr	r3, [pc, #192]	; (80020b4 <DioIrqHndlr+0x948>)
 8001ff4:	7a1b      	ldrb	r3, [r3, #8]
		myDebug("PayloadLength 			%d\n\r",
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4838      	ldr	r0, [pc, #224]	; (80020dc <DioIrqHndlr+0x970>)
 8001ffa:	f7fe fc07 	bl	800080c <myDebug>
		myDebug("PreambleLength 		%d\n\r",
				pkt_params.Params.Gfsk.PreambleLength);
 8001ffe:	4b2d      	ldr	r3, [pc, #180]	; (80020b4 <DioIrqHndlr+0x948>)
 8002000:	885b      	ldrh	r3, [r3, #2]
		myDebug("PreambleLength 		%d\n\r",
 8002002:	4619      	mov	r1, r3
 8002004:	4836      	ldr	r0, [pc, #216]	; (80020e0 <DioIrqHndlr+0x974>)
 8002006:	f7fe fc01 	bl	800080c <myDebug>
		myDebug("PreambleMinDetect		%d\n\r",
				pkt_params.Params.Gfsk.PreambleMinDetect);
 800200a:	4b2a      	ldr	r3, [pc, #168]	; (80020b4 <DioIrqHndlr+0x948>)
 800200c:	791b      	ldrb	r3, [r3, #4]
		myDebug("PreambleMinDetect		%d\n\r",
 800200e:	4619      	mov	r1, r3
 8002010:	4834      	ldr	r0, [pc, #208]	; (80020e4 <DioIrqHndlr+0x978>)
 8002012:	f7fe fbfb 	bl	800080c <myDebug>
		myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 8002016:	4b27      	ldr	r3, [pc, #156]	; (80020b4 <DioIrqHndlr+0x948>)
 8002018:	79db      	ldrb	r3, [r3, #7]
 800201a:	4619      	mov	r1, r3
 800201c:	4832      	ldr	r0, [pc, #200]	; (80020e8 <DioIrqHndlr+0x97c>)
 800201e:	f7fe fbf5 	bl	800080c <myDebug>
		myDebug("__________*******************__________\r\n");
 8002022:	4832      	ldr	r0, [pc, #200]	; (80020ec <DioIrqHndlr+0x980>)
 8002024:	f7fe fbf2 	bl	800080c <myDebug>

		SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 8002028:	4813      	ldr	r0, [pc, #76]	; (8002078 <DioIrqHndlr+0x90c>)
 800202a:	f008 f869 	bl	800a100 <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 800202e:	2100      	movs	r1, #0
 8002030:	2001      	movs	r0, #1
 8002032:	f008 fcad 	bl	800a990 <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 8002036:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800203a:	f007 fe8d 	bl	8009d58 <SUBGRF_SetRxBoosted>

		HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 800203e:	4b0f      	ldr	r3, [pc, #60]	; (800207c <DioIrqHndlr+0x910>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	b29b      	uxth	r3, r3
 8002044:	461a      	mov	r2, r3
 8002046:	4909      	ldr	r1, [pc, #36]	; (800206c <DioIrqHndlr+0x900>)
 8002048:	480d      	ldr	r0, [pc, #52]	; (8002080 <DioIrqHndlr+0x914>)
 800204a:	f004 f99b 	bl	8006384 <HAL_UART_Receive_DMA>

		HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 800204e:	4b0b      	ldr	r3, [pc, #44]	; (800207c <DioIrqHndlr+0x910>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	b29b      	uxth	r3, r3
 8002054:	461a      	mov	r2, r3
 8002056:	4905      	ldr	r1, [pc, #20]	; (800206c <DioIrqHndlr+0x900>)
 8002058:	480a      	ldr	r0, [pc, #40]	; (8002084 <DioIrqHndlr+0x918>)
 800205a:	f004 f993 	bl	8006384 <HAL_UART_Receive_DMA>

	}

}
 800205e:	bf00      	nop
 8002060:	37e4      	adds	r7, #228	; 0xe4
 8002062:	46bd      	mov	sp, r7
 8002064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002068:	0800c5b0 	.word	0x0800c5b0
 800206c:	20000310 	.word	0x20000310
 8002070:	2000030d 	.word	0x2000030d
 8002074:	20000364 	.word	0x20000364
 8002078:	19f25968 	.word	0x19f25968
 800207c:	20000001 	.word	0x20000001
 8002080:	20000644 	.word	0x20000644
 8002084:	2000051c 	.word	0x2000051c
 8002088:	0800c5d8 	.word	0x0800c5d8
 800208c:	20000400 	.word	0x20000400
 8002090:	0800c2b8 	.word	0x0800c2b8
 8002094:	20000498 	.word	0x20000498
 8002098:	0800c2c0 	.word	0x0800c2c0
 800209c:	200004a4 	.word	0x200004a4
 80020a0:	20000004 	.word	0x20000004
 80020a4:	200004a8 	.word	0x200004a8
 80020a8:	200004a0 	.word	0x200004a0
 80020ac:	200004ac 	.word	0x200004ac
 80020b0:	0800c604 	.word	0x0800c604
 80020b4:	20000278 	.word	0x20000278
 80020b8:	2000028c 	.word	0x2000028c
 80020bc:	0800176d 	.word	0x0800176d
 80020c0:	0800c334 	.word	0x0800c334
 80020c4:	0800c150 	.word	0x0800c150
 80020c8:	0800c17c 	.word	0x0800c17c
 80020cc:	0800c1a4 	.word	0x0800c1a4
 80020d0:	0800c1b4 	.word	0x0800c1b4
 80020d4:	0800c1d0 	.word	0x0800c1d0
 80020d8:	0800c1ec 	.word	0x0800c1ec
 80020dc:	0800c200 	.word	0x0800c200
 80020e0:	0800c218 	.word	0x0800c218
 80020e4:	0800c230 	.word	0x0800c230
 80020e8:	0800c248 	.word	0x0800c248
 80020ec:	0800c25c 	.word	0x0800c25c

080020f0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020f4:	b672      	cpsid	i
}
 80020f6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80020f8:	e7fe      	b.n	80020f8 <Error_Handler+0x8>
	...

080020fc <WAIT_FOR_HANDSHAKE>:
#define ACK_LENGTH	(7)

extern uint8_t OBC_HANDSHAKE_FLAG;
uint8_t MainCMDHs[ACK_LENGTH];

void WAIT_FOR_HANDSHAKE() {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0

	memset(MainCMDHs, '\0', sizeof(MainCMDHs));
 8002102:	2207      	movs	r2, #7
 8002104:	2100      	movs	r1, #0
 8002106:	489f      	ldr	r0, [pc, #636]	; (8002384 <WAIT_FOR_HANDSHAKE+0x288>)
 8002108:	f009 fa40 	bl	800b58c <memset>
	OBC_HANDSHAKE_FLAG = 0;
 800210c:	4b9e      	ldr	r3, [pc, #632]	; (8002388 <WAIT_FOR_HANDSHAKE+0x28c>)
 800210e:	2200      	movs	r2, #0
 8002110:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Receive(&huart2, MainCMDHs, ACK_LENGTH, 7000) == HAL_OK
 8002112:	f641 3358 	movw	r3, #7000	; 0x1b58
 8002116:	2207      	movs	r2, #7
 8002118:	499a      	ldr	r1, [pc, #616]	; (8002384 <WAIT_FOR_HANDSHAKE+0x288>)
 800211a:	489c      	ldr	r0, [pc, #624]	; (800238c <WAIT_FOR_HANDSHAKE+0x290>)
 800211c:	f004 f86d 	bl	80061fa <HAL_UART_Receive>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00a      	beq.n	800213c <WAIT_FOR_HANDSHAKE+0x40>
			|| HAL_UART_Receive(&hlpuart1, MainCMDHs, ACK_LENGTH, 7000)
 8002126:	f641 3358 	movw	r3, #7000	; 0x1b58
 800212a:	2207      	movs	r2, #7
 800212c:	4995      	ldr	r1, [pc, #596]	; (8002384 <WAIT_FOR_HANDSHAKE+0x288>)
 800212e:	4898      	ldr	r0, [pc, #608]	; (8002390 <WAIT_FOR_HANDSHAKE+0x294>)
 8002130:	f004 f863 	bl	80061fa <HAL_UART_Receive>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	f040 8111 	bne.w	800235e <WAIT_FOR_HANDSHAKE+0x262>
					== HAL_OK) {
		myDebug("--> Handshake command received from OBC: 0x%x\r\n");
 800213c:	4895      	ldr	r0, [pc, #596]	; (8002394 <WAIT_FOR_HANDSHAKE+0x298>)
 800213e:	f7fe fb65 	bl	800080c <myDebug>
		for (int i = 0; i < (ACK_LENGTH); i++) {
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	e00a      	b.n	800215e <WAIT_FOR_HANDSHAKE+0x62>
			myDebug("%02x ", MainCMDHs[i]);
 8002148:	4a8e      	ldr	r2, [pc, #568]	; (8002384 <WAIT_FOR_HANDSHAKE+0x288>)
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	4413      	add	r3, r2
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	4619      	mov	r1, r3
 8002152:	4891      	ldr	r0, [pc, #580]	; (8002398 <WAIT_FOR_HANDSHAKE+0x29c>)
 8002154:	f7fe fb5a 	bl	800080c <myDebug>
		for (int i = 0; i < (ACK_LENGTH); i++) {
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	3301      	adds	r3, #1
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	2b06      	cmp	r3, #6
 8002162:	ddf1      	ble.n	8002148 <WAIT_FOR_HANDSHAKE+0x4c>
		}
		myDebug("\n");
 8002164:	488d      	ldr	r0, [pc, #564]	; (800239c <WAIT_FOR_HANDSHAKE+0x2a0>)
 8002166:	f7fe fb51 	bl	800080c <myDebug>

		if (MainCMDHs[0] == 0) {
 800216a:	4b86      	ldr	r3, [pc, #536]	; (8002384 <WAIT_FOR_HANDSHAKE+0x288>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d179      	bne.n	8002266 <WAIT_FOR_HANDSHAKE+0x16a>

			if (MainCMDHs[1] == ACK_HEAD && MainCMDHs[6] == ACK_TAIL) {
 8002172:	4b84      	ldr	r3, [pc, #528]	; (8002384 <WAIT_FOR_HANDSHAKE+0x288>)
 8002174:	785b      	ldrb	r3, [r3, #1]
 8002176:	2b53      	cmp	r3, #83	; 0x53
 8002178:	d13b      	bne.n	80021f2 <WAIT_FOR_HANDSHAKE+0xf6>
 800217a:	4b82      	ldr	r3, [pc, #520]	; (8002384 <WAIT_FOR_HANDSHAKE+0x288>)
 800217c:	799b      	ldrb	r3, [r3, #6]
 800217e:	2b7e      	cmp	r3, #126	; 0x7e
 8002180:	d137      	bne.n	80021f2 <WAIT_FOR_HANDSHAKE+0xf6>
				myDebug("--> Command Acknowledged successful!\n");
 8002182:	4887      	ldr	r0, [pc, #540]	; (80023a0 <WAIT_FOR_HANDSHAKE+0x2a4>)
 8002184:	f7fe fb42 	bl	800080c <myDebug>
				if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 8002188:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800218c:	2207      	movs	r2, #7
 800218e:	497d      	ldr	r1, [pc, #500]	; (8002384 <WAIT_FOR_HANDSHAKE+0x288>)
 8002190:	487e      	ldr	r0, [pc, #504]	; (800238c <WAIT_FOR_HANDSHAKE+0x290>)
 8002192:	f003 ffac 	bl	80060ee <HAL_UART_Transmit>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00a      	beq.n	80021b2 <WAIT_FOR_HANDSHAKE+0xb6>
						== HAL_OK
						|| HAL_UART_Transmit(&hlpuart1, MainCMDHs, ACK_LENGTH,
 800219c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80021a0:	2207      	movs	r2, #7
 80021a2:	4978      	ldr	r1, [pc, #480]	; (8002384 <WAIT_FOR_HANDSHAKE+0x288>)
 80021a4:	487a      	ldr	r0, [pc, #488]	; (8002390 <WAIT_FOR_HANDSHAKE+0x294>)
 80021a6:	f003 ffa2 	bl	80060ee <HAL_UART_Transmit>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f040 80d2 	bne.w	8002356 <WAIT_FOR_HANDSHAKE+0x25a>
								2000) == HAL_OK) {
					myDebug("--> Handshake ACK, re-transmit to OBC: \n");
 80021b2:	487c      	ldr	r0, [pc, #496]	; (80023a4 <WAIT_FOR_HANDSHAKE+0x2a8>)
 80021b4:	f7fe fb2a 	bl	800080c <myDebug>
					for (int i = 0; i < (ACK_LENGTH); i++) {
 80021b8:	2300      	movs	r3, #0
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	e00a      	b.n	80021d4 <WAIT_FOR_HANDSHAKE+0xd8>
						myDebug("%02x ", MainCMDHs[i]);
 80021be:	4a71      	ldr	r2, [pc, #452]	; (8002384 <WAIT_FOR_HANDSHAKE+0x288>)
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	4413      	add	r3, r2
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	4619      	mov	r1, r3
 80021c8:	4873      	ldr	r0, [pc, #460]	; (8002398 <WAIT_FOR_HANDSHAKE+0x29c>)
 80021ca:	f7fe fb1f 	bl	800080c <myDebug>
					for (int i = 0; i < (ACK_LENGTH); i++) {
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	3301      	adds	r3, #1
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	2b06      	cmp	r3, #6
 80021d8:	ddf1      	ble.n	80021be <WAIT_FOR_HANDSHAKE+0xc2>
					}
					myDebug("\n");
 80021da:	4870      	ldr	r0, [pc, #448]	; (800239c <WAIT_FOR_HANDSHAKE+0x2a0>)
 80021dc:	f7fe fb16 	bl	800080c <myDebug>
					OBC_HANDSHAKE_FLAG = 1;
 80021e0:	4b69      	ldr	r3, [pc, #420]	; (8002388 <WAIT_FOR_HANDSHAKE+0x28c>)
 80021e2:	2201      	movs	r2, #1
 80021e4:	701a      	strb	r2, [r3, #0]
					memset(MainCMDHs, '\0', sizeof(MainCMDHs));
 80021e6:	2207      	movs	r2, #7
 80021e8:	2100      	movs	r1, #0
 80021ea:	4866      	ldr	r0, [pc, #408]	; (8002384 <WAIT_FOR_HANDSHAKE+0x288>)
 80021ec:	f009 f9ce 	bl	800b58c <memset>
				if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 80021f0:	e0b1      	b.n	8002356 <WAIT_FOR_HANDSHAKE+0x25a>
				}
			} else {
				myDebug("*** Unknown Handshake command received!\n");
 80021f2:	486d      	ldr	r0, [pc, #436]	; (80023a8 <WAIT_FOR_HANDSHAKE+0x2ac>)
 80021f4:	f7fe fb0a 	bl	800080c <myDebug>
				if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 80021f8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80021fc:	2207      	movs	r2, #7
 80021fe:	4961      	ldr	r1, [pc, #388]	; (8002384 <WAIT_FOR_HANDSHAKE+0x288>)
 8002200:	4862      	ldr	r0, [pc, #392]	; (800238c <WAIT_FOR_HANDSHAKE+0x290>)
 8002202:	f003 ff74 	bl	80060ee <HAL_UART_Transmit>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00a      	beq.n	8002222 <WAIT_FOR_HANDSHAKE+0x126>
						== HAL_OK
						|| HAL_UART_Transmit(&hlpuart1, MainCMDHs, ACK_LENGTH,
 800220c:	f641 3358 	movw	r3, #7000	; 0x1b58
 8002210:	2207      	movs	r2, #7
 8002212:	495c      	ldr	r1, [pc, #368]	; (8002384 <WAIT_FOR_HANDSHAKE+0x288>)
 8002214:	485e      	ldr	r0, [pc, #376]	; (8002390 <WAIT_FOR_HANDSHAKE+0x294>)
 8002216:	f003 ff6a 	bl	80060ee <HAL_UART_Transmit>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	f040 80ac 	bne.w	800237a <WAIT_FOR_HANDSHAKE+0x27e>
								7000) == HAL_OK) {
					myDebug("--> Unknown Handshake ACK, re-transmit to OBC.\n");
 8002222:	4862      	ldr	r0, [pc, #392]	; (80023ac <WAIT_FOR_HANDSHAKE+0x2b0>)
 8002224:	f7fe faf2 	bl	800080c <myDebug>
					for (int i = 0; i < (ACK_LENGTH); i++) {
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	e00a      	b.n	8002244 <WAIT_FOR_HANDSHAKE+0x148>
						myDebug("%02x ", MainCMDHs[i]);
 800222e:	4a55      	ldr	r2, [pc, #340]	; (8002384 <WAIT_FOR_HANDSHAKE+0x288>)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4413      	add	r3, r2
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	4619      	mov	r1, r3
 8002238:	4857      	ldr	r0, [pc, #348]	; (8002398 <WAIT_FOR_HANDSHAKE+0x29c>)
 800223a:	f7fe fae7 	bl	800080c <myDebug>
					for (int i = 0; i < (ACK_LENGTH); i++) {
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	3301      	adds	r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2b06      	cmp	r3, #6
 8002248:	ddf1      	ble.n	800222e <WAIT_FOR_HANDSHAKE+0x132>
					}
					myDebug("\n");
 800224a:	4854      	ldr	r0, [pc, #336]	; (800239c <WAIT_FOR_HANDSHAKE+0x2a0>)
 800224c:	f7fe fade 	bl	800080c <myDebug>
					memset(MainCMDHs, '\0', sizeof(MainCMDHs));
 8002250:	2207      	movs	r2, #7
 8002252:	2100      	movs	r1, #0
 8002254:	484b      	ldr	r0, [pc, #300]	; (8002384 <WAIT_FOR_HANDSHAKE+0x288>)
 8002256:	f009 f999 	bl	800b58c <memset>
					OBC_HANDSHAKE_FLAG = 0;
 800225a:	4b4b      	ldr	r3, [pc, #300]	; (8002388 <WAIT_FOR_HANDSHAKE+0x28c>)
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]
					WAIT_FOR_HANDSHAKE();
 8002260:	f7ff ff4c 	bl	80020fc <WAIT_FOR_HANDSHAKE>
		if (MainCMDHs[0] == 0) {
 8002264:	e089      	b.n	800237a <WAIT_FOR_HANDSHAKE+0x27e>
				}
			}
		} else {
			if (MainCMDHs[0] == ACK_HEAD && MainCMDHs[5] == ACK_TAIL) {
 8002266:	4b47      	ldr	r3, [pc, #284]	; (8002384 <WAIT_FOR_HANDSHAKE+0x288>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b53      	cmp	r3, #83	; 0x53
 800226c:	d13a      	bne.n	80022e4 <WAIT_FOR_HANDSHAKE+0x1e8>
 800226e:	4b45      	ldr	r3, [pc, #276]	; (8002384 <WAIT_FOR_HANDSHAKE+0x288>)
 8002270:	795b      	ldrb	r3, [r3, #5]
 8002272:	2b7e      	cmp	r3, #126	; 0x7e
 8002274:	d136      	bne.n	80022e4 <WAIT_FOR_HANDSHAKE+0x1e8>
				myDebug("--> Command Acknowledged successful!\n");
 8002276:	484a      	ldr	r0, [pc, #296]	; (80023a0 <WAIT_FOR_HANDSHAKE+0x2a4>)
 8002278:	f7fe fac8 	bl	800080c <myDebug>
				if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 800227c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002280:	2207      	movs	r2, #7
 8002282:	4940      	ldr	r1, [pc, #256]	; (8002384 <WAIT_FOR_HANDSHAKE+0x288>)
 8002284:	4841      	ldr	r0, [pc, #260]	; (800238c <WAIT_FOR_HANDSHAKE+0x290>)
 8002286:	f003 ff32 	bl	80060ee <HAL_UART_Transmit>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d009      	beq.n	80022a4 <WAIT_FOR_HANDSHAKE+0x1a8>
						== HAL_OK
						|| HAL_UART_Transmit(&hlpuart1, MainCMDHs, ACK_LENGTH,
 8002290:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002294:	2207      	movs	r2, #7
 8002296:	493b      	ldr	r1, [pc, #236]	; (8002384 <WAIT_FOR_HANDSHAKE+0x288>)
 8002298:	483d      	ldr	r0, [pc, #244]	; (8002390 <WAIT_FOR_HANDSHAKE+0x294>)
 800229a:	f003 ff28 	bl	80060ee <HAL_UART_Transmit>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d15a      	bne.n	800235a <WAIT_FOR_HANDSHAKE+0x25e>
								2000) == HAL_OK) {
					myDebug("--> Handshake ACK, re-transmit to OBC: \n");
 80022a4:	483f      	ldr	r0, [pc, #252]	; (80023a4 <WAIT_FOR_HANDSHAKE+0x2a8>)
 80022a6:	f7fe fab1 	bl	800080c <myDebug>
					for (int i = 0; i < (ACK_LENGTH); i++) {
 80022aa:	2300      	movs	r3, #0
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	e00a      	b.n	80022c6 <WAIT_FOR_HANDSHAKE+0x1ca>
						myDebug("%02x ", MainCMDHs[i]);
 80022b0:	4a34      	ldr	r2, [pc, #208]	; (8002384 <WAIT_FOR_HANDSHAKE+0x288>)
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	4413      	add	r3, r2
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	4619      	mov	r1, r3
 80022ba:	4837      	ldr	r0, [pc, #220]	; (8002398 <WAIT_FOR_HANDSHAKE+0x29c>)
 80022bc:	f7fe faa6 	bl	800080c <myDebug>
					for (int i = 0; i < (ACK_LENGTH); i++) {
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	3301      	adds	r3, #1
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2b06      	cmp	r3, #6
 80022ca:	ddf1      	ble.n	80022b0 <WAIT_FOR_HANDSHAKE+0x1b4>
					}
					myDebug("\n");
 80022cc:	4833      	ldr	r0, [pc, #204]	; (800239c <WAIT_FOR_HANDSHAKE+0x2a0>)
 80022ce:	f7fe fa9d 	bl	800080c <myDebug>
					OBC_HANDSHAKE_FLAG = 1;
 80022d2:	4b2d      	ldr	r3, [pc, #180]	; (8002388 <WAIT_FOR_HANDSHAKE+0x28c>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	701a      	strb	r2, [r3, #0]
					memset(MainCMDHs, '\0', sizeof(MainCMDHs));
 80022d8:	2207      	movs	r2, #7
 80022da:	2100      	movs	r1, #0
 80022dc:	4829      	ldr	r0, [pc, #164]	; (8002384 <WAIT_FOR_HANDSHAKE+0x288>)
 80022de:	f009 f955 	bl	800b58c <memset>
				if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 80022e2:	e03a      	b.n	800235a <WAIT_FOR_HANDSHAKE+0x25e>
				}
			} else {
				myDebug("*** Unknown Handshake command received!\n");
 80022e4:	4830      	ldr	r0, [pc, #192]	; (80023a8 <WAIT_FOR_HANDSHAKE+0x2ac>)
 80022e6:	f7fe fa91 	bl	800080c <myDebug>
				if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 80022ea:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80022ee:	2207      	movs	r2, #7
 80022f0:	4924      	ldr	r1, [pc, #144]	; (8002384 <WAIT_FOR_HANDSHAKE+0x288>)
 80022f2:	4826      	ldr	r0, [pc, #152]	; (800238c <WAIT_FOR_HANDSHAKE+0x290>)
 80022f4:	f003 fefb 	bl	80060ee <HAL_UART_Transmit>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d009      	beq.n	8002312 <WAIT_FOR_HANDSHAKE+0x216>
						== HAL_OK
						|| HAL_UART_Transmit(&hlpuart1, MainCMDHs, ACK_LENGTH,
 80022fe:	f641 3358 	movw	r3, #7000	; 0x1b58
 8002302:	2207      	movs	r2, #7
 8002304:	491f      	ldr	r1, [pc, #124]	; (8002384 <WAIT_FOR_HANDSHAKE+0x288>)
 8002306:	4822      	ldr	r0, [pc, #136]	; (8002390 <WAIT_FOR_HANDSHAKE+0x294>)
 8002308:	f003 fef1 	bl	80060ee <HAL_UART_Transmit>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d133      	bne.n	800237a <WAIT_FOR_HANDSHAKE+0x27e>
								7000) == HAL_OK) {
					myDebug("--> Unknown Handshake ACK, re-transmit to OBC.\n");
 8002312:	4826      	ldr	r0, [pc, #152]	; (80023ac <WAIT_FOR_HANDSHAKE+0x2b0>)
 8002314:	f7fe fa7a 	bl	800080c <myDebug>
					for (int i = 0; i < (ACK_LENGTH); i++) {
 8002318:	2300      	movs	r3, #0
 800231a:	607b      	str	r3, [r7, #4]
 800231c:	e00a      	b.n	8002334 <WAIT_FOR_HANDSHAKE+0x238>
						myDebug("%02x ", MainCMDHs[i]);
 800231e:	4a19      	ldr	r2, [pc, #100]	; (8002384 <WAIT_FOR_HANDSHAKE+0x288>)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4413      	add	r3, r2
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	4619      	mov	r1, r3
 8002328:	481b      	ldr	r0, [pc, #108]	; (8002398 <WAIT_FOR_HANDSHAKE+0x29c>)
 800232a:	f7fe fa6f 	bl	800080c <myDebug>
					for (int i = 0; i < (ACK_LENGTH); i++) {
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3301      	adds	r3, #1
 8002332:	607b      	str	r3, [r7, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b06      	cmp	r3, #6
 8002338:	ddf1      	ble.n	800231e <WAIT_FOR_HANDSHAKE+0x222>
					}
					myDebug("\n");
 800233a:	4818      	ldr	r0, [pc, #96]	; (800239c <WAIT_FOR_HANDSHAKE+0x2a0>)
 800233c:	f7fe fa66 	bl	800080c <myDebug>
					memset(MainCMDHs, '\0', sizeof(MainCMDHs));
 8002340:	2207      	movs	r2, #7
 8002342:	2100      	movs	r1, #0
 8002344:	480f      	ldr	r0, [pc, #60]	; (8002384 <WAIT_FOR_HANDSHAKE+0x288>)
 8002346:	f009 f921 	bl	800b58c <memset>
					OBC_HANDSHAKE_FLAG = 0;
 800234a:	4b0f      	ldr	r3, [pc, #60]	; (8002388 <WAIT_FOR_HANDSHAKE+0x28c>)
 800234c:	2200      	movs	r2, #0
 800234e:	701a      	strb	r2, [r3, #0]
					WAIT_FOR_HANDSHAKE();
 8002350:	f7ff fed4 	bl	80020fc <WAIT_FOR_HANDSHAKE>
		if (MainCMDHs[0] == 0) {
 8002354:	e011      	b.n	800237a <WAIT_FOR_HANDSHAKE+0x27e>
				if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 8002356:	bf00      	nop
 8002358:	e00f      	b.n	800237a <WAIT_FOR_HANDSHAKE+0x27e>
				if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 800235a:	bf00      	nop
		if (MainCMDHs[0] == 0) {
 800235c:	e00d      	b.n	800237a <WAIT_FOR_HANDSHAKE+0x27e>
				}
			}
		}
	} else {
		OBC_HANDSHAKE_FLAG = 0;
 800235e:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <WAIT_FOR_HANDSHAKE+0x28c>)
 8002360:	2200      	movs	r2, #0
 8002362:	701a      	strb	r2, [r3, #0]
		myDebug("*** Handshake Command receive failed, try again!\n");
 8002364:	4812      	ldr	r0, [pc, #72]	; (80023b0 <WAIT_FOR_HANDSHAKE+0x2b4>)
 8002366:	f7fe fa51 	bl	800080c <myDebug>
		memset(MainCMDHs, '\0', sizeof(MainCMDHs));
 800236a:	2207      	movs	r2, #7
 800236c:	2100      	movs	r1, #0
 800236e:	4805      	ldr	r0, [pc, #20]	; (8002384 <WAIT_FOR_HANDSHAKE+0x288>)
 8002370:	f009 f90c 	bl	800b58c <memset>
		WAIT_FOR_HANDSHAKE();
 8002374:	f7ff fec2 	bl	80020fc <WAIT_FOR_HANDSHAKE>
	}
}
 8002378:	e000      	b.n	800237c <WAIT_FOR_HANDSHAKE+0x280>
		if (MainCMDHs[0] == 0) {
 800237a:	bf00      	nop
}
 800237c:	bf00      	nop
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	200004b0 	.word	0x200004b0
 8002388:	2000049c 	.word	0x2000049c
 800238c:	20000644 	.word	0x20000644
 8002390:	2000051c 	.word	0x2000051c
 8002394:	0800c63c 	.word	0x0800c63c
 8002398:	0800c66c 	.word	0x0800c66c
 800239c:	0800c674 	.word	0x0800c674
 80023a0:	0800c678 	.word	0x0800c678
 80023a4:	0800c6a0 	.word	0x0800c6a0
 80023a8:	0800c6cc 	.word	0x0800c6cc
 80023ac:	0800c6f8 	.word	0x0800c6f8
 80023b0:	0800c728 	.word	0x0800c728

080023b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr

080023c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023c4:	e7fe      	b.n	80023c4 <NMI_Handler+0x4>

080023c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ca:	e7fe      	b.n	80023ca <HardFault_Handler+0x4>

080023cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023d0:	e7fe      	b.n	80023d0 <MemManage_Handler+0x4>

080023d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023d6:	e7fe      	b.n	80023d6 <BusFault_Handler+0x4>

080023d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023dc:	e7fe      	b.n	80023dc <UsageFault_Handler+0x4>

080023de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023de:	b480      	push	{r7}
 80023e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr

080023ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr

080023f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr

08002402 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002406:	f000 fd43 	bl	8002e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002414:	4802      	ldr	r0, [pc, #8]	; (8002420 <DMA1_Channel1_IRQHandler+0x10>)
 8002416:	f001 f83d 	bl	8003494 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	200006d8 	.word	0x200006d8

08002424 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002428:	4802      	ldr	r0, [pc, #8]	; (8002434 <DMA1_Channel2_IRQHandler+0x10>)
 800242a:	f001 f833 	bl	8003494 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000738 	.word	0x20000738

08002438 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 3 Interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800243c:	4802      	ldr	r0, [pc, #8]	; (8002448 <DMA1_Channel3_IRQHandler+0x10>)
 800243e:	f001 f829 	bl	8003494 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000798 	.word	0x20000798

0800244c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 4 Interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002450:	4802      	ldr	r0, [pc, #8]	; (800245c <DMA1_Channel4_IRQHandler+0x10>)
 8002452:	f001 f81f 	bl	8003494 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	200007f8 	.word	0x200007f8

08002460 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002464:	4802      	ldr	r0, [pc, #8]	; (8002470 <USART1_IRQHandler+0x10>)
 8002466:	f003 ffd9 	bl	800641c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	200005b0 	.word	0x200005b0

08002474 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002478:	4802      	ldr	r0, [pc, #8]	; (8002484 <USART2_IRQHandler+0x10>)
 800247a:	f003 ffcf 	bl	800641c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000644 	.word	0x20000644

08002488 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800248c:	4802      	ldr	r0, [pc, #8]	; (8002498 <LPUART1_IRQHandler+0x10>)
 800248e:	f003 ffc5 	bl	800641c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	2000051c 	.word	0x2000051c

0800249c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80024a0:	4802      	ldr	r0, [pc, #8]	; (80024ac <SUBGHZ_Radio_IRQHandler+0x10>)
 80024a2:	f003 f957 	bl	8005754 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	200004b8 	.word	0x200004b8

080024b0 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80024b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024bc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80024be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80024c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4013      	ands	r3, r2
 80024d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024d4:	68fb      	ldr	r3, [r7, #12]
}
 80024d6:	bf00      	nop
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 80024e4:	4b06      	ldr	r3, [pc, #24]	; (8002500 <MX_SUBGHZ_Init+0x20>)
 80024e6:	2210      	movs	r2, #16
 80024e8:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80024ea:	4805      	ldr	r0, [pc, #20]	; (8002500 <MX_SUBGHZ_Init+0x20>)
 80024ec:	f002 feb0 	bl	8005250 <HAL_SUBGHZ_Init>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80024f6:	f7ff fdfb 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	200004b8 	.word	0x200004b8

08002504 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 800250c:	2001      	movs	r0, #1
 800250e:	f7ff ffcf 	bl	80024b0 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8002512:	2200      	movs	r2, #0
 8002514:	2100      	movs	r1, #0
 8002516:	2032      	movs	r0, #50	; 0x32
 8002518:	f000 fda3 	bl	8003062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 800251c:	2032      	movs	r0, #50	; 0x32
 800251e:	f000 fdba 	bl	8003096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 800252a:	b480      	push	{r7}
 800252c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 800252e:	bf00      	nop
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr
	...

08002538 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002542:	4b06      	ldr	r3, [pc, #24]	; (800255c <HAL_GetTick+0x24>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d002      	beq.n	8002550 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 800254a:	f000 f908 	bl	800275e <TIMER_IF_GetTimerValue>
 800254e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002550:	687b      	ldr	r3, [r7, #4]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	200004c4 	.word	0x200004c4

08002560 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4618      	mov	r0, r3
 800256c:	f000 f925 	bl	80027ba <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002570:	bf00      	nop
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002580:	4a14      	ldr	r2, [pc, #80]	; (80025d4 <_sbrk+0x5c>)
 8002582:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <_sbrk+0x60>)
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800258c:	4b13      	ldr	r3, [pc, #76]	; (80025dc <_sbrk+0x64>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002594:	4b11      	ldr	r3, [pc, #68]	; (80025dc <_sbrk+0x64>)
 8002596:	4a12      	ldr	r2, [pc, #72]	; (80025e0 <_sbrk+0x68>)
 8002598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800259a:	4b10      	ldr	r3, [pc, #64]	; (80025dc <_sbrk+0x64>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d207      	bcs.n	80025b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025a8:	f008 fff8 	bl	800b59c <__errno>
 80025ac:	4603      	mov	r3, r0
 80025ae:	220c      	movs	r2, #12
 80025b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025b6:	e009      	b.n	80025cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025b8:	4b08      	ldr	r3, [pc, #32]	; (80025dc <_sbrk+0x64>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025be:	4b07      	ldr	r3, [pc, #28]	; (80025dc <_sbrk+0x64>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	4a05      	ldr	r2, [pc, #20]	; (80025dc <_sbrk+0x64>)
 80025c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ca:	68fb      	ldr	r3, [r7, #12]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20010000 	.word	0x20010000
 80025d8:	00000400 	.word	0x00000400
 80025dc:	200004c8 	.word	0x200004c8
 80025e0:	20000b68 	.word	0x20000b68

080025e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr

080025f0 <LL_APB1_GRP1_EnableClock>:
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80025f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4313      	orrs	r3, r2
 8002606:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800260c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4013      	ands	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002614:	68fb      	ldr	r3, [r7, #12]
}
 8002616:	bf00      	nop
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002626:	f107 0310 	add.w	r3, r7, #16
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	605a      	str	r2, [r3, #4]
 8002630:	609a      	str	r2, [r3, #8]
 8002632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002634:	1d3b      	adds	r3, r7, #4
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	605a      	str	r2, [r3, #4]
 800263c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800263e:	4b1d      	ldr	r3, [pc, #116]	; (80026b4 <MX_TIM2_Init+0x94>)
 8002640:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002644:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8002646:	4b1b      	ldr	r3, [pc, #108]	; (80026b4 <MX_TIM2_Init+0x94>)
 8002648:	222f      	movs	r2, #47	; 0x2f
 800264a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800264c:	4b19      	ldr	r3, [pc, #100]	; (80026b4 <MX_TIM2_Init+0x94>)
 800264e:	2200      	movs	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000001-1;
 8002652:	4b18      	ldr	r3, [pc, #96]	; (80026b4 <MX_TIM2_Init+0x94>)
 8002654:	4a18      	ldr	r2, [pc, #96]	; (80026b8 <MX_TIM2_Init+0x98>)
 8002656:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002658:	4b16      	ldr	r3, [pc, #88]	; (80026b4 <MX_TIM2_Init+0x94>)
 800265a:	2200      	movs	r2, #0
 800265c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800265e:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <MX_TIM2_Init+0x94>)
 8002660:	2200      	movs	r2, #0
 8002662:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002664:	4813      	ldr	r0, [pc, #76]	; (80026b4 <MX_TIM2_Init+0x94>)
 8002666:	f003 fa13 	bl	8005a90 <HAL_TIM_Base_Init>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002670:	f7ff fd3e 	bl	80020f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002678:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800267a:	f107 0310 	add.w	r3, r7, #16
 800267e:	4619      	mov	r1, r3
 8002680:	480c      	ldr	r0, [pc, #48]	; (80026b4 <MX_TIM2_Init+0x94>)
 8002682:	f003 faa1 	bl	8005bc8 <HAL_TIM_ConfigClockSource>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800268c:	f7ff fd30 	bl	80020f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002690:	2300      	movs	r3, #0
 8002692:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002698:	1d3b      	adds	r3, r7, #4
 800269a:	4619      	mov	r1, r3
 800269c:	4805      	ldr	r0, [pc, #20]	; (80026b4 <MX_TIM2_Init+0x94>)
 800269e:	f003 fc57 	bl	8005f50 <HAL_TIMEx_MasterConfigSynchronization>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80026a8:	f7ff fd22 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80026ac:	bf00      	nop
 80026ae:	3720      	adds	r7, #32
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	200004cc 	.word	0x200004cc
 80026b8:	000f4240 	.word	0x000f4240

080026bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026cc:	d102      	bne.n	80026d4 <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026ce:	2001      	movs	r0, #1
 80026d0:	f7ff ff8e 	bl	80025f0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80026d4:	bf00      	nop
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 80026e6:	79fb      	ldrb	r3, [r7, #7]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr

080026f2 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b085      	sub	sp, #20
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr

0800270a <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002710:	2300      	movs	r3, #0
 8002712:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8002714:	79fb      	ldrb	r3, [r7, #7]
}
 8002716:	4618      	mov	r0, r3
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr

08002720 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8002724:	4b02      	ldr	r3, [pc, #8]	; (8002730 <TIMER_IF_SetTimerContext+0x10>)
 8002726:	681b      	ldr	r3, [r3, #0]
}
 8002728:	4618      	mov	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr
 8002730:	20000518 	.word	0x20000518

08002734 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8002738:	4b02      	ldr	r3, [pc, #8]	; (8002744 <TIMER_IF_GetTimerContext+0x10>)
 800273a:	681b      	ldr	r3, [r3, #0]
}
 800273c:	4618      	mov	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr
 8002744:	20000518 	.word	0x20000518

08002748 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8002752:	687b      	ldr	r3, [r7, #4]
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr

0800275e <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002764:	2300      	movs	r3, #0
 8002766:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8002768:	687b      	ldr	r3, [r7, #4]
}
 800276a:	4618      	mov	r0, r3
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 800277e:	687b      	ldr	r3, [r7, #4]
}
 8002780:	4618      	mov	r0, r3
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr

0800278a <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800278a:	b480      	push	{r7}
 800278c:	b085      	sub	sp, #20
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 8002796:	68fb      	ldr	r3, [r7, #12]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr

080027a2 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b085      	sub	sp, #20
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 80027ae:	68fb      	ldr	r3, [r7, #12]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr

080027ba <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr

080027cc <LL_AHB2_GRP1_EnableClock>:
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80027d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80027e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4013      	ands	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027f0:	68fb      	ldr	r3, [r7, #12]
}
 80027f2:	bf00      	nop
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr

080027fc <LL_APB1_GRP1_EnableClock>:
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002808:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800280a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4313      	orrs	r3, r2
 8002812:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002818:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4013      	ands	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002820:	68fb      	ldr	r3, [r7, #12]
}
 8002822:	bf00      	nop
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr

0800282c <LL_APB1_GRP2_EnableClock>:
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002838:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800283a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4313      	orrs	r3, r2
 8002842:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002848:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4013      	ands	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002850:	68fb      	ldr	r3, [r7, #12]
}
 8002852:	bf00      	nop
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <LL_APB2_GRP1_EnableClock>:
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002868:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800286a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4313      	orrs	r3, r2
 8002872:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002878:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4013      	ands	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002880:	68fb      	ldr	r3, [r7, #12]
}
 8002882:	bf00      	nop
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr

0800288c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002890:	4b22      	ldr	r3, [pc, #136]	; (800291c <MX_LPUART1_UART_Init+0x90>)
 8002892:	4a23      	ldr	r2, [pc, #140]	; (8002920 <MX_LPUART1_UART_Init+0x94>)
 8002894:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8002896:	4b21      	ldr	r3, [pc, #132]	; (800291c <MX_LPUART1_UART_Init+0x90>)
 8002898:	4a22      	ldr	r2, [pc, #136]	; (8002924 <MX_LPUART1_UART_Init+0x98>)
 800289a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800289c:	4b1f      	ldr	r3, [pc, #124]	; (800291c <MX_LPUART1_UART_Init+0x90>)
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80028a2:	4b1e      	ldr	r3, [pc, #120]	; (800291c <MX_LPUART1_UART_Init+0x90>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80028a8:	4b1c      	ldr	r3, [pc, #112]	; (800291c <MX_LPUART1_UART_Init+0x90>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80028ae:	4b1b      	ldr	r3, [pc, #108]	; (800291c <MX_LPUART1_UART_Init+0x90>)
 80028b0:	220c      	movs	r2, #12
 80028b2:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028b4:	4b19      	ldr	r3, [pc, #100]	; (800291c <MX_LPUART1_UART_Init+0x90>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028ba:	4b18      	ldr	r3, [pc, #96]	; (800291c <MX_LPUART1_UART_Init+0x90>)
 80028bc:	2200      	movs	r2, #0
 80028be:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028c0:	4b16      	ldr	r3, [pc, #88]	; (800291c <MX_LPUART1_UART_Init+0x90>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028c6:	4b15      	ldr	r3, [pc, #84]	; (800291c <MX_LPUART1_UART_Init+0x90>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80028cc:	4b13      	ldr	r3, [pc, #76]	; (800291c <MX_LPUART1_UART_Init+0x90>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80028d2:	4812      	ldr	r0, [pc, #72]	; (800291c <MX_LPUART1_UART_Init+0x90>)
 80028d4:	f003 fbbb 	bl	800604e <HAL_UART_Init>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80028de:	f7ff fc07 	bl	80020f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028e2:	2100      	movs	r1, #0
 80028e4:	480d      	ldr	r0, [pc, #52]	; (800291c <MX_LPUART1_UART_Init+0x90>)
 80028e6:	f004 ffe3 	bl	80078b0 <HAL_UARTEx_SetTxFifoThreshold>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80028f0:	f7ff fbfe 	bl	80020f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028f4:	2100      	movs	r1, #0
 80028f6:	4809      	ldr	r0, [pc, #36]	; (800291c <MX_LPUART1_UART_Init+0x90>)
 80028f8:	f005 f818 	bl	800792c <HAL_UARTEx_SetRxFifoThreshold>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8002902:	f7ff fbf5 	bl	80020f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002906:	4805      	ldr	r0, [pc, #20]	; (800291c <MX_LPUART1_UART_Init+0x90>)
 8002908:	f004 ff9a 	bl	8007840 <HAL_UARTEx_DisableFifoMode>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8002912:	f7ff fbed 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	2000051c 	.word	0x2000051c
 8002920:	40008000 	.word	0x40008000
 8002924:	00033324 	.word	0x00033324

08002928 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800292c:	4b22      	ldr	r3, [pc, #136]	; (80029b8 <MX_USART1_UART_Init+0x90>)
 800292e:	4a23      	ldr	r2, [pc, #140]	; (80029bc <MX_USART1_UART_Init+0x94>)
 8002930:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002932:	4b21      	ldr	r3, [pc, #132]	; (80029b8 <MX_USART1_UART_Init+0x90>)
 8002934:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002938:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800293a:	4b1f      	ldr	r3, [pc, #124]	; (80029b8 <MX_USART1_UART_Init+0x90>)
 800293c:	2200      	movs	r2, #0
 800293e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002940:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <MX_USART1_UART_Init+0x90>)
 8002942:	2200      	movs	r2, #0
 8002944:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002946:	4b1c      	ldr	r3, [pc, #112]	; (80029b8 <MX_USART1_UART_Init+0x90>)
 8002948:	2200      	movs	r2, #0
 800294a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800294c:	4b1a      	ldr	r3, [pc, #104]	; (80029b8 <MX_USART1_UART_Init+0x90>)
 800294e:	220c      	movs	r2, #12
 8002950:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002952:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <MX_USART1_UART_Init+0x90>)
 8002954:	2200      	movs	r2, #0
 8002956:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002958:	4b17      	ldr	r3, [pc, #92]	; (80029b8 <MX_USART1_UART_Init+0x90>)
 800295a:	2200      	movs	r2, #0
 800295c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800295e:	4b16      	ldr	r3, [pc, #88]	; (80029b8 <MX_USART1_UART_Init+0x90>)
 8002960:	2200      	movs	r2, #0
 8002962:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002964:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <MX_USART1_UART_Init+0x90>)
 8002966:	2200      	movs	r2, #0
 8002968:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800296a:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <MX_USART1_UART_Init+0x90>)
 800296c:	2200      	movs	r2, #0
 800296e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002970:	4811      	ldr	r0, [pc, #68]	; (80029b8 <MX_USART1_UART_Init+0x90>)
 8002972:	f003 fb6c 	bl	800604e <HAL_UART_Init>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800297c:	f7ff fbb8 	bl	80020f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002980:	2100      	movs	r1, #0
 8002982:	480d      	ldr	r0, [pc, #52]	; (80029b8 <MX_USART1_UART_Init+0x90>)
 8002984:	f004 ff94 	bl	80078b0 <HAL_UARTEx_SetTxFifoThreshold>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800298e:	f7ff fbaf 	bl	80020f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002992:	2100      	movs	r1, #0
 8002994:	4808      	ldr	r0, [pc, #32]	; (80029b8 <MX_USART1_UART_Init+0x90>)
 8002996:	f004 ffc9 	bl	800792c <HAL_UARTEx_SetRxFifoThreshold>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80029a0:	f7ff fba6 	bl	80020f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80029a4:	4804      	ldr	r0, [pc, #16]	; (80029b8 <MX_USART1_UART_Init+0x90>)
 80029a6:	f004 ff4b 	bl	8007840 <HAL_UARTEx_DisableFifoMode>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80029b0:	f7ff fb9e 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029b4:	bf00      	nop
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	200005b0 	.word	0x200005b0
 80029bc:	40013800 	.word	0x40013800

080029c0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029c4:	4b22      	ldr	r3, [pc, #136]	; (8002a50 <MX_USART2_UART_Init+0x90>)
 80029c6:	4a23      	ldr	r2, [pc, #140]	; (8002a54 <MX_USART2_UART_Init+0x94>)
 80029c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029ca:	4b21      	ldr	r3, [pc, #132]	; (8002a50 <MX_USART2_UART_Init+0x90>)
 80029cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029d2:	4b1f      	ldr	r3, [pc, #124]	; (8002a50 <MX_USART2_UART_Init+0x90>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029d8:	4b1d      	ldr	r3, [pc, #116]	; (8002a50 <MX_USART2_UART_Init+0x90>)
 80029da:	2200      	movs	r2, #0
 80029dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029de:	4b1c      	ldr	r3, [pc, #112]	; (8002a50 <MX_USART2_UART_Init+0x90>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029e4:	4b1a      	ldr	r3, [pc, #104]	; (8002a50 <MX_USART2_UART_Init+0x90>)
 80029e6:	220c      	movs	r2, #12
 80029e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ea:	4b19      	ldr	r3, [pc, #100]	; (8002a50 <MX_USART2_UART_Init+0x90>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029f0:	4b17      	ldr	r3, [pc, #92]	; (8002a50 <MX_USART2_UART_Init+0x90>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029f6:	4b16      	ldr	r3, [pc, #88]	; (8002a50 <MX_USART2_UART_Init+0x90>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029fc:	4b14      	ldr	r3, [pc, #80]	; (8002a50 <MX_USART2_UART_Init+0x90>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a02:	4b13      	ldr	r3, [pc, #76]	; (8002a50 <MX_USART2_UART_Init+0x90>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a08:	4811      	ldr	r0, [pc, #68]	; (8002a50 <MX_USART2_UART_Init+0x90>)
 8002a0a:	f003 fb20 	bl	800604e <HAL_UART_Init>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002a14:	f7ff fb6c 	bl	80020f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a18:	2100      	movs	r1, #0
 8002a1a:	480d      	ldr	r0, [pc, #52]	; (8002a50 <MX_USART2_UART_Init+0x90>)
 8002a1c:	f004 ff48 	bl	80078b0 <HAL_UARTEx_SetTxFifoThreshold>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002a26:	f7ff fb63 	bl	80020f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	4808      	ldr	r0, [pc, #32]	; (8002a50 <MX_USART2_UART_Init+0x90>)
 8002a2e:	f004 ff7d 	bl	800792c <HAL_UARTEx_SetRxFifoThreshold>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002a38:	f7ff fb5a 	bl	80020f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002a3c:	4804      	ldr	r0, [pc, #16]	; (8002a50 <MX_USART2_UART_Init+0x90>)
 8002a3e:	f004 feff 	bl	8007840 <HAL_UARTEx_DisableFifoMode>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002a48:	f7ff fb52 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a4c:	bf00      	nop
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	20000644 	.word	0x20000644
 8002a54:	40004400 	.word	0x40004400

08002a58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b096      	sub	sp, #88	; 0x58
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a60:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	609a      	str	r2, [r3, #8]
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a70:	f107 030c 	add.w	r3, r7, #12
 8002a74:	2238      	movs	r2, #56	; 0x38
 8002a76:	2100      	movs	r1, #0
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f008 fd87 	bl	800b58c <memset>
  if(uartHandle->Instance==LPUART1)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a66      	ldr	r2, [pc, #408]	; (8002c1c <HAL_UART_MspInit+0x1c4>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	f040 8092 	bne.w	8002bae <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002a8a:	2320      	movs	r3, #32
 8002a8c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a92:	f107 030c 	add.w	r3, r7, #12
 8002a96:	4618      	mov	r0, r3
 8002a98:	f002 fa26 	bl	8004ee8 <HAL_RCCEx_PeriphCLKConfig>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002aa2:	f7ff fb25 	bl	80020f0 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002aa6:	2001      	movs	r0, #1
 8002aa8:	f7ff fec0 	bl	800282c <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aac:	2004      	movs	r0, #4
 8002aae:	f7ff fe8d 	bl	80027cc <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    PC0     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aba:	2300      	movs	r3, #0
 8002abc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002ac2:	2308      	movs	r3, #8
 8002ac4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ac6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002aca:	4619      	mov	r1, r3
 8002acc:	4854      	ldr	r0, [pc, #336]	; (8002c20 <HAL_UART_MspInit+0x1c8>)
 8002ace:	f000 fe7f 	bl	80037d0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8002ad2:	4b54      	ldr	r3, [pc, #336]	; (8002c24 <HAL_UART_MspInit+0x1cc>)
 8002ad4:	4a54      	ldr	r2, [pc, #336]	; (8002c28 <HAL_UART_MspInit+0x1d0>)
 8002ad6:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8002ad8:	4b52      	ldr	r3, [pc, #328]	; (8002c24 <HAL_UART_MspInit+0x1cc>)
 8002ada:	2215      	movs	r2, #21
 8002adc:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ade:	4b51      	ldr	r3, [pc, #324]	; (8002c24 <HAL_UART_MspInit+0x1cc>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ae4:	4b4f      	ldr	r3, [pc, #316]	; (8002c24 <HAL_UART_MspInit+0x1cc>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002aea:	4b4e      	ldr	r3, [pc, #312]	; (8002c24 <HAL_UART_MspInit+0x1cc>)
 8002aec:	2280      	movs	r2, #128	; 0x80
 8002aee:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002af0:	4b4c      	ldr	r3, [pc, #304]	; (8002c24 <HAL_UART_MspInit+0x1cc>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002af6:	4b4b      	ldr	r3, [pc, #300]	; (8002c24 <HAL_UART_MspInit+0x1cc>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8002afc:	4b49      	ldr	r3, [pc, #292]	; (8002c24 <HAL_UART_MspInit+0x1cc>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b02:	4b48      	ldr	r3, [pc, #288]	; (8002c24 <HAL_UART_MspInit+0x1cc>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002b08:	4846      	ldr	r0, [pc, #280]	; (8002c24 <HAL_UART_MspInit+0x1cc>)
 8002b0a:	f000 fadf 	bl	80030cc <HAL_DMA_Init>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002b14:	f7ff faec 	bl	80020f0 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002b18:	2110      	movs	r1, #16
 8002b1a:	4842      	ldr	r0, [pc, #264]	; (8002c24 <HAL_UART_MspInit+0x1cc>)
 8002b1c:	f000 fd80 	bl	8003620 <HAL_DMA_ConfigChannelAttributes>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8002b26:	f7ff fae3 	bl	80020f0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a3d      	ldr	r2, [pc, #244]	; (8002c24 <HAL_UART_MspInit+0x1cc>)
 8002b2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002b32:	4a3c      	ldr	r2, [pc, #240]	; (8002c24 <HAL_UART_MspInit+0x1cc>)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8002b38:	4b3c      	ldr	r3, [pc, #240]	; (8002c2c <HAL_UART_MspInit+0x1d4>)
 8002b3a:	4a3d      	ldr	r2, [pc, #244]	; (8002c30 <HAL_UART_MspInit+0x1d8>)
 8002b3c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002b3e:	4b3b      	ldr	r3, [pc, #236]	; (8002c2c <HAL_UART_MspInit+0x1d4>)
 8002b40:	2216      	movs	r2, #22
 8002b42:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b44:	4b39      	ldr	r3, [pc, #228]	; (8002c2c <HAL_UART_MspInit+0x1d4>)
 8002b46:	2210      	movs	r2, #16
 8002b48:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b4a:	4b38      	ldr	r3, [pc, #224]	; (8002c2c <HAL_UART_MspInit+0x1d4>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b50:	4b36      	ldr	r3, [pc, #216]	; (8002c2c <HAL_UART_MspInit+0x1d4>)
 8002b52:	2280      	movs	r2, #128	; 0x80
 8002b54:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b56:	4b35      	ldr	r3, [pc, #212]	; (8002c2c <HAL_UART_MspInit+0x1d4>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b5c:	4b33      	ldr	r3, [pc, #204]	; (8002c2c <HAL_UART_MspInit+0x1d4>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002b62:	4b32      	ldr	r3, [pc, #200]	; (8002c2c <HAL_UART_MspInit+0x1d4>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b68:	4b30      	ldr	r3, [pc, #192]	; (8002c2c <HAL_UART_MspInit+0x1d4>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002b6e:	482f      	ldr	r0, [pc, #188]	; (8002c2c <HAL_UART_MspInit+0x1d4>)
 8002b70:	f000 faac 	bl	80030cc <HAL_DMA_Init>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_UART_MspInit+0x126>
    {
      Error_Handler();
 8002b7a:	f7ff fab9 	bl	80020f0 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002b7e:	2110      	movs	r1, #16
 8002b80:	482a      	ldr	r0, [pc, #168]	; (8002c2c <HAL_UART_MspInit+0x1d4>)
 8002b82:	f000 fd4d 	bl	8003620 <HAL_DMA_ConfigChannelAttributes>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8002b8c:	f7ff fab0 	bl	80020f0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a26      	ldr	r2, [pc, #152]	; (8002c2c <HAL_UART_MspInit+0x1d4>)
 8002b94:	67da      	str	r2, [r3, #124]	; 0x7c
 8002b96:	4a25      	ldr	r2, [pc, #148]	; (8002c2c <HAL_UART_MspInit+0x1d4>)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	2026      	movs	r0, #38	; 0x26
 8002ba2:	f000 fa5e 	bl	8003062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002ba6:	2026      	movs	r0, #38	; 0x26
 8002ba8:	f000 fa75 	bl	8003096 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002bac:	e0de      	b.n	8002d6c <HAL_UART_MspInit+0x314>
  else if(uartHandle->Instance==USART1)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a20      	ldr	r2, [pc, #128]	; (8002c34 <HAL_UART_MspInit+0x1dc>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d13f      	bne.n	8002c38 <HAL_UART_MspInit+0x1e0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002bbc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002bc0:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bc2:	f107 030c 	add.w	r3, r7, #12
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f002 f98e 	bl	8004ee8 <HAL_RCCEx_PeriphCLKConfig>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_UART_MspInit+0x17e>
      Error_Handler();
 8002bd2:	f7ff fa8d 	bl	80020f0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bd6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002bda:	f7ff fe3f 	bl	800285c <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bde:	2001      	movs	r0, #1
 8002be0:	f7ff fdf4 	bl	80027cc <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8002be4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002be8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bea:	2302      	movs	r3, #2
 8002bec:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bf6:	2307      	movs	r3, #7
 8002bf8:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002bfe:	4619      	mov	r1, r3
 8002c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c04:	f000 fde4 	bl	80037d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c08:	2200      	movs	r2, #0
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	2024      	movs	r0, #36	; 0x24
 8002c0e:	f000 fa28 	bl	8003062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c12:	2024      	movs	r0, #36	; 0x24
 8002c14:	f000 fa3f 	bl	8003096 <HAL_NVIC_EnableIRQ>
}
 8002c18:	e0a8      	b.n	8002d6c <HAL_UART_MspInit+0x314>
 8002c1a:	bf00      	nop
 8002c1c:	40008000 	.word	0x40008000
 8002c20:	48000800 	.word	0x48000800
 8002c24:	200006d8 	.word	0x200006d8
 8002c28:	40020008 	.word	0x40020008
 8002c2c:	20000738 	.word	0x20000738
 8002c30:	4002001c 	.word	0x4002001c
 8002c34:	40013800 	.word	0x40013800
  else if(uartHandle->Instance==USART2)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a4d      	ldr	r2, [pc, #308]	; (8002d74 <HAL_UART_MspInit+0x31c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	f040 8094 	bne.w	8002d6c <HAL_UART_MspInit+0x314>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002c44:	2302      	movs	r3, #2
 8002c46:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002c48:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8002c4c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c4e:	f107 030c 	add.w	r3, r7, #12
 8002c52:	4618      	mov	r0, r3
 8002c54:	f002 f948 	bl	8004ee8 <HAL_RCCEx_PeriphCLKConfig>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_UART_MspInit+0x20a>
      Error_Handler();
 8002c5e:	f7ff fa47 	bl	80020f0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c62:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002c66:	f7ff fdc9 	bl	80027fc <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c6a:	2001      	movs	r0, #1
 8002c6c:	f7ff fdae 	bl	80027cc <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8002c70:	230c      	movs	r3, #12
 8002c72:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c74:	2302      	movs	r3, #2
 8002c76:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c80:	2307      	movs	r3, #7
 8002c82:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c84:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c88:	4619      	mov	r1, r3
 8002c8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c8e:	f000 fd9f 	bl	80037d0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8002c92:	4b39      	ldr	r3, [pc, #228]	; (8002d78 <HAL_UART_MspInit+0x320>)
 8002c94:	4a39      	ldr	r2, [pc, #228]	; (8002d7c <HAL_UART_MspInit+0x324>)
 8002c96:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002c98:	4b37      	ldr	r3, [pc, #220]	; (8002d78 <HAL_UART_MspInit+0x320>)
 8002c9a:	2213      	movs	r2, #19
 8002c9c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c9e:	4b36      	ldr	r3, [pc, #216]	; (8002d78 <HAL_UART_MspInit+0x320>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ca4:	4b34      	ldr	r3, [pc, #208]	; (8002d78 <HAL_UART_MspInit+0x320>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002caa:	4b33      	ldr	r3, [pc, #204]	; (8002d78 <HAL_UART_MspInit+0x320>)
 8002cac:	2280      	movs	r2, #128	; 0x80
 8002cae:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cb0:	4b31      	ldr	r3, [pc, #196]	; (8002d78 <HAL_UART_MspInit+0x320>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cb6:	4b30      	ldr	r3, [pc, #192]	; (8002d78 <HAL_UART_MspInit+0x320>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002cbc:	4b2e      	ldr	r3, [pc, #184]	; (8002d78 <HAL_UART_MspInit+0x320>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002cc2:	4b2d      	ldr	r3, [pc, #180]	; (8002d78 <HAL_UART_MspInit+0x320>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002cc8:	482b      	ldr	r0, [pc, #172]	; (8002d78 <HAL_UART_MspInit+0x320>)
 8002cca:	f000 f9ff 	bl	80030cc <HAL_DMA_Init>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <HAL_UART_MspInit+0x280>
      Error_Handler();
 8002cd4:	f7ff fa0c 	bl	80020f0 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002cd8:	2110      	movs	r1, #16
 8002cda:	4827      	ldr	r0, [pc, #156]	; (8002d78 <HAL_UART_MspInit+0x320>)
 8002cdc:	f000 fca0 	bl	8003620 <HAL_DMA_ConfigChannelAttributes>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_UART_MspInit+0x292>
      Error_Handler();
 8002ce6:	f7ff fa03 	bl	80020f0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a22      	ldr	r2, [pc, #136]	; (8002d78 <HAL_UART_MspInit+0x320>)
 8002cee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002cf2:	4a21      	ldr	r2, [pc, #132]	; (8002d78 <HAL_UART_MspInit+0x320>)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8002cf8:	4b21      	ldr	r3, [pc, #132]	; (8002d80 <HAL_UART_MspInit+0x328>)
 8002cfa:	4a22      	ldr	r2, [pc, #136]	; (8002d84 <HAL_UART_MspInit+0x32c>)
 8002cfc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002cfe:	4b20      	ldr	r3, [pc, #128]	; (8002d80 <HAL_UART_MspInit+0x328>)
 8002d00:	2214      	movs	r2, #20
 8002d02:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d04:	4b1e      	ldr	r3, [pc, #120]	; (8002d80 <HAL_UART_MspInit+0x328>)
 8002d06:	2210      	movs	r2, #16
 8002d08:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d0a:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <HAL_UART_MspInit+0x328>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d10:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <HAL_UART_MspInit+0x328>)
 8002d12:	2280      	movs	r2, #128	; 0x80
 8002d14:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d16:	4b1a      	ldr	r3, [pc, #104]	; (8002d80 <HAL_UART_MspInit+0x328>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d1c:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <HAL_UART_MspInit+0x328>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002d22:	4b17      	ldr	r3, [pc, #92]	; (8002d80 <HAL_UART_MspInit+0x328>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d28:	4b15      	ldr	r3, [pc, #84]	; (8002d80 <HAL_UART_MspInit+0x328>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002d2e:	4814      	ldr	r0, [pc, #80]	; (8002d80 <HAL_UART_MspInit+0x328>)
 8002d30:	f000 f9cc 	bl	80030cc <HAL_DMA_Init>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_UART_MspInit+0x2e6>
      Error_Handler();
 8002d3a:	f7ff f9d9 	bl	80020f0 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002d3e:	2110      	movs	r1, #16
 8002d40:	480f      	ldr	r0, [pc, #60]	; (8002d80 <HAL_UART_MspInit+0x328>)
 8002d42:	f000 fc6d 	bl	8003620 <HAL_DMA_ConfigChannelAttributes>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <HAL_UART_MspInit+0x2f8>
      Error_Handler();
 8002d4c:	f7ff f9d0 	bl	80020f0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a0b      	ldr	r2, [pc, #44]	; (8002d80 <HAL_UART_MspInit+0x328>)
 8002d54:	67da      	str	r2, [r3, #124]	; 0x7c
 8002d56:	4a0a      	ldr	r2, [pc, #40]	; (8002d80 <HAL_UART_MspInit+0x328>)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	2100      	movs	r1, #0
 8002d60:	2025      	movs	r0, #37	; 0x25
 8002d62:	f000 f97e 	bl	8003062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d66:	2025      	movs	r0, #37	; 0x25
 8002d68:	f000 f995 	bl	8003096 <HAL_NVIC_EnableIRQ>
}
 8002d6c:	bf00      	nop
 8002d6e:	3758      	adds	r7, #88	; 0x58
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40004400 	.word	0x40004400
 8002d78:	20000798 	.word	0x20000798
 8002d7c:	40020030 	.word	0x40020030
 8002d80:	200007f8 	.word	0x200007f8
 8002d84:	40020044 	.word	0x40020044

08002d88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d88:	480d      	ldr	r0, [pc, #52]	; (8002dc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d8a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d8c:	f7ff fc2a 	bl	80025e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d90:	480c      	ldr	r0, [pc, #48]	; (8002dc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d92:	490d      	ldr	r1, [pc, #52]	; (8002dc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d94:	4a0d      	ldr	r2, [pc, #52]	; (8002dcc <LoopForever+0xe>)
  movs r3, #0
 8002d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d98:	e002      	b.n	8002da0 <LoopCopyDataInit>

08002d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d9e:	3304      	adds	r3, #4

08002da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002da4:	d3f9      	bcc.n	8002d9a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002da6:	4a0a      	ldr	r2, [pc, #40]	; (8002dd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002da8:	4c0a      	ldr	r4, [pc, #40]	; (8002dd4 <LoopForever+0x16>)
  movs r3, #0
 8002daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dac:	e001      	b.n	8002db2 <LoopFillZerobss>

08002dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002db0:	3204      	adds	r2, #4

08002db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002db4:	d3fb      	bcc.n	8002dae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002db6:	f008 fbf7 	bl	800b5a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002dba:	f7fd ffad 	bl	8000d18 <main>

08002dbe <LoopForever>:

LoopForever:
    b LoopForever
 8002dbe:	e7fe      	b.n	8002dbe <LoopForever>
  ldr   r0, =_estack
 8002dc0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dc8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002dcc:	0800ca14 	.word	0x0800ca14
  ldr r2, =_sbss
 8002dd0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8002dd4:	20000b64 	.word	0x20000b64

08002dd8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002dd8:	e7fe      	b.n	8002dd8 <ADC_IRQHandler>
	...

08002ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002de2:	2300      	movs	r3, #0
 8002de4:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002de6:	2003      	movs	r0, #3
 8002de8:	f000 f930 	bl	800304c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002dec:	f001 fe9e 	bl	8004b2c <HAL_RCC_GetHCLKFreq>
 8002df0:	4603      	mov	r3, r0
 8002df2:	4a09      	ldr	r2, [pc, #36]	; (8002e18 <HAL_Init+0x3c>)
 8002df4:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002df6:	2000      	movs	r0, #0
 8002df8:	f000 f810 	bl	8002e1c <HAL_InitTick>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	71fb      	strb	r3, [r7, #7]
 8002e06:	e001      	b.n	8002e0c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e08:	f7ff fad4 	bl	80023b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20000008 	.word	0x20000008

08002e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002e28:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <HAL_InitTick+0x6c>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d024      	beq.n	8002e7a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002e30:	f001 fe7c 	bl	8004b2c <HAL_RCC_GetHCLKFreq>
 8002e34:	4602      	mov	r2, r0
 8002e36:	4b14      	ldr	r3, [pc, #80]	; (8002e88 <HAL_InitTick+0x6c>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e40:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 f932 	bl	80030b2 <HAL_SYSTICK_Config>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10f      	bne.n	8002e74 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b0f      	cmp	r3, #15
 8002e58:	d809      	bhi.n	8002e6e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e62:	f000 f8fe 	bl	8003062 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e66:	4a09      	ldr	r2, [pc, #36]	; (8002e8c <HAL_InitTick+0x70>)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	e007      	b.n	8002e7e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	73fb      	strb	r3, [r7, #15]
 8002e72:	e004      	b.n	8002e7e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	73fb      	strb	r3, [r7, #15]
 8002e78:	e001      	b.n	8002e7e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	20000010 	.word	0x20000010
 8002e8c:	2000000c 	.word	0x2000000c

08002e90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e94:	4b05      	ldr	r3, [pc, #20]	; (8002eac <HAL_IncTick+0x1c>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <HAL_IncTick+0x20>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	4a03      	ldr	r2, [pc, #12]	; (8002eb0 <HAL_IncTick+0x20>)
 8002ea2:	6013      	str	r3, [r2, #0]
}
 8002ea4:	bf00      	nop
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr
 8002eac:	20000010 	.word	0x20000010
 8002eb0:	20000858 	.word	0x20000858

08002eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ec4:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ee6:	4a04      	ldr	r2, [pc, #16]	; (8002ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	60d3      	str	r3, [r2, #12]
}
 8002eec:	bf00      	nop
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	e000ed00 	.word	0xe000ed00

08002efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f00:	4b04      	ldr	r3, [pc, #16]	; (8002f14 <__NVIC_GetPriorityGrouping+0x18>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	0a1b      	lsrs	r3, r3, #8
 8002f06:	f003 0307 	and.w	r3, r3, #7
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	e000ed00 	.word	0xe000ed00

08002f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	db0b      	blt.n	8002f42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	f003 021f 	and.w	r2, r3, #31
 8002f30:	4906      	ldr	r1, [pc, #24]	; (8002f4c <__NVIC_EnableIRQ+0x34>)
 8002f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	2001      	movs	r0, #1
 8002f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr
 8002f4c:	e000e100 	.word	0xe000e100

08002f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	6039      	str	r1, [r7, #0]
 8002f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	db0a      	blt.n	8002f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	490c      	ldr	r1, [pc, #48]	; (8002f9c <__NVIC_SetPriority+0x4c>)
 8002f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6e:	0112      	lsls	r2, r2, #4
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	440b      	add	r3, r1
 8002f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f78:	e00a      	b.n	8002f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	4908      	ldr	r1, [pc, #32]	; (8002fa0 <__NVIC_SetPriority+0x50>)
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	3b04      	subs	r3, #4
 8002f88:	0112      	lsls	r2, r2, #4
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	761a      	strb	r2, [r3, #24]
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	e000e100 	.word	0xe000e100
 8002fa0:	e000ed00 	.word	0xe000ed00

08002fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b089      	sub	sp, #36	; 0x24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	f1c3 0307 	rsb	r3, r3, #7
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	bf28      	it	cs
 8002fc2:	2304      	movcs	r3, #4
 8002fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	3304      	adds	r3, #4
 8002fca:	2b06      	cmp	r3, #6
 8002fcc:	d902      	bls.n	8002fd4 <NVIC_EncodePriority+0x30>
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	3b03      	subs	r3, #3
 8002fd2:	e000      	b.n	8002fd6 <NVIC_EncodePriority+0x32>
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43da      	mvns	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	401a      	ands	r2, r3
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff6:	43d9      	mvns	r1, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ffc:	4313      	orrs	r3, r2
         );
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3724      	adds	r7, #36	; 0x24
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr

08003008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3b01      	subs	r3, #1
 8003014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003018:	d301      	bcc.n	800301e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800301a:	2301      	movs	r3, #1
 800301c:	e00f      	b.n	800303e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800301e:	4a0a      	ldr	r2, [pc, #40]	; (8003048 <SysTick_Config+0x40>)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3b01      	subs	r3, #1
 8003024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003026:	210f      	movs	r1, #15
 8003028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800302c:	f7ff ff90 	bl	8002f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003030:	4b05      	ldr	r3, [pc, #20]	; (8003048 <SysTick_Config+0x40>)
 8003032:	2200      	movs	r2, #0
 8003034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003036:	4b04      	ldr	r3, [pc, #16]	; (8003048 <SysTick_Config+0x40>)
 8003038:	2207      	movs	r2, #7
 800303a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	e000e010 	.word	0xe000e010

0800304c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff ff2d 	bl	8002eb4 <__NVIC_SetPriorityGrouping>
}
 800305a:	bf00      	nop
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b086      	sub	sp, #24
 8003066:	af00      	add	r7, sp, #0
 8003068:	4603      	mov	r3, r0
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	607a      	str	r2, [r7, #4]
 800306e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003070:	f7ff ff44 	bl	8002efc <__NVIC_GetPriorityGrouping>
 8003074:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	68b9      	ldr	r1, [r7, #8]
 800307a:	6978      	ldr	r0, [r7, #20]
 800307c:	f7ff ff92 	bl	8002fa4 <NVIC_EncodePriority>
 8003080:	4602      	mov	r2, r0
 8003082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff ff61 	bl	8002f50 <__NVIC_SetPriority>
}
 800308e:	bf00      	nop
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	4603      	mov	r3, r0
 800309e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff ff37 	bl	8002f18 <__NVIC_EnableIRQ>
}
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7ff ffa4 	bl	8003008 <SysTick_Config>
 80030c0:	4603      	mov	r3, r0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e08e      	b.n	80031fc <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	461a      	mov	r2, r3
 80030e4:	4b47      	ldr	r3, [pc, #284]	; (8003204 <HAL_DMA_Init+0x138>)
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d80f      	bhi.n	800310a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	4b45      	ldr	r3, [pc, #276]	; (8003208 <HAL_DMA_Init+0x13c>)
 80030f2:	4413      	add	r3, r2
 80030f4:	4a45      	ldr	r2, [pc, #276]	; (800320c <HAL_DMA_Init+0x140>)
 80030f6:	fba2 2303 	umull	r2, r3, r2, r3
 80030fa:	091b      	lsrs	r3, r3, #4
 80030fc:	009a      	lsls	r2, r3, #2
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a42      	ldr	r2, [pc, #264]	; (8003210 <HAL_DMA_Init+0x144>)
 8003106:	641a      	str	r2, [r3, #64]	; 0x40
 8003108:	e00e      	b.n	8003128 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	461a      	mov	r2, r3
 8003110:	4b40      	ldr	r3, [pc, #256]	; (8003214 <HAL_DMA_Init+0x148>)
 8003112:	4413      	add	r3, r2
 8003114:	4a3d      	ldr	r2, [pc, #244]	; (800320c <HAL_DMA_Init+0x140>)
 8003116:	fba2 2303 	umull	r2, r3, r2, r3
 800311a:	091b      	lsrs	r3, r3, #4
 800311c:	009a      	lsls	r2, r3, #2
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a3c      	ldr	r2, [pc, #240]	; (8003218 <HAL_DMA_Init+0x14c>)
 8003126:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6812      	ldr	r2, [r2, #0]
 800313a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800313e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003142:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6819      	ldr	r1, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 fabc 	bl	80036f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003188:	d102      	bne.n	8003190 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003198:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800319c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80031a6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d010      	beq.n	80031d2 <HAL_DMA_Init+0x106>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b04      	cmp	r3, #4
 80031b6:	d80c      	bhi.n	80031d2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 fae5 	bl	8003788 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80031ce:	605a      	str	r2, [r3, #4]
 80031d0:	e008      	b.n	80031e4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	40020407 	.word	0x40020407
 8003208:	bffdfff8 	.word	0xbffdfff8
 800320c:	cccccccd 	.word	0xcccccccd
 8003210:	40020000 	.word	0x40020000
 8003214:	bffdfbf8 	.word	0xbffdfbf8
 8003218:	40020400 	.word	0x40020400

0800321c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
 8003228:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800322a:	2300      	movs	r3, #0
 800322c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_DMA_Start_IT+0x20>
 8003238:	2302      	movs	r3, #2
 800323a:	e069      	b.n	8003310 <HAL_DMA_Start_IT+0xf4>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b01      	cmp	r3, #1
 800324e:	d155      	bne.n	80032fc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2202      	movs	r2, #2
 8003254:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0201 	bic.w	r2, r2, #1
 800326c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	68b9      	ldr	r1, [r7, #8]
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 fa02 	bl	800367e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	2b00      	cmp	r3, #0
 8003280:	d008      	beq.n	8003294 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f042 020e 	orr.w	r2, r2, #14
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	e00f      	b.n	80032b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0204 	bic.w	r2, r2, #4
 80032a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 020a 	orr.w	r2, r2, #10
 80032b2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d007      	beq.n	80032d2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032d0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d007      	beq.n	80032ea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032e8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 0201 	orr.w	r2, r2, #1
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	e008      	b.n	800330e <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2280      	movs	r2, #128	; 0x80
 8003300:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800330e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e04f      	b.n	80033ca <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d008      	beq.n	8003348 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2204      	movs	r2, #4
 800333a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e040      	b.n	80033ca <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 020e 	bic.w	r2, r2, #14
 8003356:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003362:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003366:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0201 	bic.w	r2, r2, #1
 8003376:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337c:	f003 021c 	and.w	r2, r3, #28
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	2101      	movs	r1, #1
 8003386:	fa01 f202 	lsl.w	r2, r1, r2
 800338a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003394:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00c      	beq.n	80033b8 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033ac:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80033b6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr

080033d4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033dc:	2300      	movs	r3, #0
 80033de:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d005      	beq.n	80033f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2204      	movs	r2, #4
 80033f0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	73fb      	strb	r3, [r7, #15]
 80033f6:	e047      	b.n	8003488 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 020e 	bic.w	r2, r2, #14
 8003406:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0201 	bic.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003422:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003426:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342c:	f003 021c 	and.w	r2, r3, #28
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	2101      	movs	r1, #1
 8003436:	fa01 f202 	lsl.w	r2, r1, r2
 800343a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003444:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00c      	beq.n	8003468 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003458:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800345c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003466:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	4798      	blx	r3
    }
  }
  return status;
 8003488:	7bfb      	ldrb	r3, [r7, #15]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
	...

08003494 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b0:	f003 031c 	and.w	r3, r3, #28
 80034b4:	2204      	movs	r2, #4
 80034b6:	409a      	lsls	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4013      	ands	r3, r2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d027      	beq.n	8003510 <HAL_DMA_IRQHandler+0x7c>
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d022      	beq.n	8003510 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0320 	and.w	r3, r3, #32
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d107      	bne.n	80034e8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0204 	bic.w	r2, r2, #4
 80034e6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ec:	f003 021c 	and.w	r2, r3, #28
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	2104      	movs	r1, #4
 80034f6:	fa01 f202 	lsl.w	r2, r1, r2
 80034fa:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 8081 	beq.w	8003608 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800350e:	e07b      	b.n	8003608 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003514:	f003 031c 	and.w	r3, r3, #28
 8003518:	2202      	movs	r2, #2
 800351a:	409a      	lsls	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4013      	ands	r3, r2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d03d      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x10c>
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d038      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0320 	and.w	r3, r3, #32
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10b      	bne.n	8003554 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 020a 	bic.w	r2, r2, #10
 800354a:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	461a      	mov	r2, r3
 800355a:	4b2e      	ldr	r3, [pc, #184]	; (8003614 <HAL_DMA_IRQHandler+0x180>)
 800355c:	429a      	cmp	r2, r3
 800355e:	d909      	bls.n	8003574 <HAL_DMA_IRQHandler+0xe0>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003564:	f003 031c 	and.w	r3, r3, #28
 8003568:	4a2b      	ldr	r2, [pc, #172]	; (8003618 <HAL_DMA_IRQHandler+0x184>)
 800356a:	2102      	movs	r1, #2
 800356c:	fa01 f303 	lsl.w	r3, r1, r3
 8003570:	6053      	str	r3, [r2, #4]
 8003572:	e008      	b.n	8003586 <HAL_DMA_IRQHandler+0xf2>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003578:	f003 031c 	and.w	r3, r3, #28
 800357c:	4a27      	ldr	r2, [pc, #156]	; (800361c <HAL_DMA_IRQHandler+0x188>)
 800357e:	2102      	movs	r1, #2
 8003580:	fa01 f303 	lsl.w	r3, r1, r3
 8003584:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	2b00      	cmp	r3, #0
 8003594:	d038      	beq.n	8003608 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800359e:	e033      	b.n	8003608 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a4:	f003 031c 	and.w	r3, r3, #28
 80035a8:	2208      	movs	r2, #8
 80035aa:	409a      	lsls	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d02a      	beq.n	800360a <HAL_DMA_IRQHandler+0x176>
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d025      	beq.n	800360a <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 020e 	bic.w	r2, r2, #14
 80035cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d2:	f003 021c 	and.w	r2, r3, #28
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	2101      	movs	r1, #1
 80035dc:	fa01 f202 	lsl.w	r2, r1, r2
 80035e0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d004      	beq.n	800360a <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003608:	bf00      	nop
 800360a:	bf00      	nop
}
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40020080 	.word	0x40020080
 8003618:	40020400 	.word	0x40020400
 800361c:	40020000 	.word	0x40020000

08003620 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800362a:	2300      	movs	r3, #0
 800362c:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d103      	bne.n	800363c <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	72fb      	strb	r3, [r7, #11]
    return status;
 8003638:	7afb      	ldrb	r3, [r7, #11]
 800363a:	e01b      	b.n	8003674 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	f003 0310 	and.w	r3, r3, #16
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00d      	beq.n	800366a <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d004      	beq.n	8003662 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	e003      	b.n	800366a <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003668:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	601a      	str	r2, [r3, #0]

  return status;
 8003672:	7afb      	ldrb	r3, [r7, #11]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	bc80      	pop	{r7}
 800367c:	4770      	bx	lr

0800367e <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800367e:	b480      	push	{r7}
 8003680:	b085      	sub	sp, #20
 8003682:	af00      	add	r7, sp, #0
 8003684:	60f8      	str	r0, [r7, #12]
 8003686:	60b9      	str	r1, [r7, #8]
 8003688:	607a      	str	r2, [r7, #4]
 800368a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003694:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369a:	2b00      	cmp	r3, #0
 800369c:	d004      	beq.n	80036a8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80036a6:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ac:	f003 021c 	and.w	r2, r3, #28
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	2101      	movs	r1, #1
 80036b6:	fa01 f202 	lsl.w	r2, r1, r2
 80036ba:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	2b10      	cmp	r3, #16
 80036ca:	d108      	bne.n	80036de <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80036dc:	e007      	b.n	80036ee <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	60da      	str	r2, [r3, #12]
}
 80036ee:	bf00      	nop
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr

080036f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	461a      	mov	r2, r3
 8003706:	4b1c      	ldr	r3, [pc, #112]	; (8003778 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8003708:	429a      	cmp	r2, r3
 800370a:	d813      	bhi.n	8003734 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003710:	089b      	lsrs	r3, r3, #2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003718:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	b2db      	uxtb	r3, r3
 8003726:	3b08      	subs	r3, #8
 8003728:	4a14      	ldr	r2, [pc, #80]	; (800377c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800372a:	fba2 2303 	umull	r2, r3, r2, r3
 800372e:	091b      	lsrs	r3, r3, #4
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	e011      	b.n	8003758 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003738:	089b      	lsrs	r3, r3, #2
 800373a:	009a      	lsls	r2, r3, #2
 800373c:	4b10      	ldr	r3, [pc, #64]	; (8003780 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800373e:	4413      	add	r3, r2
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	b2db      	uxtb	r3, r3
 800374a:	3b08      	subs	r3, #8
 800374c:	4a0b      	ldr	r2, [pc, #44]	; (800377c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800374e:	fba2 2303 	umull	r2, r3, r2, r3
 8003752:	091b      	lsrs	r3, r3, #4
 8003754:	3307      	adds	r3, #7
 8003756:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a0a      	ldr	r2, [pc, #40]	; (8003784 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 800375c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f003 031f 	and.w	r3, r3, #31
 8003764:	2201      	movs	r2, #1
 8003766:	409a      	lsls	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800376c:	bf00      	nop
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	bc80      	pop	{r7}
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40020407 	.word	0x40020407
 800377c:	cccccccd 	.word	0xcccccccd
 8003780:	4002081c 	.word	0x4002081c
 8003784:	40020880 	.word	0x40020880

08003788 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003798:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800379e:	4413      	add	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	461a      	mov	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a08      	ldr	r2, [pc, #32]	; (80037cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80037ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	3b01      	subs	r3, #1
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	2201      	movs	r2, #1
 80037b8:	409a      	lsls	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80037be:	bf00      	nop
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr
 80037c8:	1000823f 	.word	0x1000823f
 80037cc:	40020940 	.word	0x40020940

080037d0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037de:	e140      	b.n	8003a62 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	2101      	movs	r1, #1
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	fa01 f303 	lsl.w	r3, r1, r3
 80037ec:	4013      	ands	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 8132 	beq.w	8003a5c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f003 0303 	and.w	r3, r3, #3
 8003800:	2b01      	cmp	r3, #1
 8003802:	d005      	beq.n	8003810 <HAL_GPIO_Init+0x40>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f003 0303 	and.w	r3, r3, #3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d130      	bne.n	8003872 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	2203      	movs	r2, #3
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	43db      	mvns	r3, r3
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	4013      	ands	r3, r2
 8003826:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003846:	2201      	movs	r2, #1
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	43db      	mvns	r3, r3
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4013      	ands	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	091b      	lsrs	r3, r3, #4
 800385c:	f003 0201 	and.w	r2, r3, #1
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	2b03      	cmp	r3, #3
 800387c:	d017      	beq.n	80038ae <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	2203      	movs	r2, #3
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43db      	mvns	r3, r3
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	4013      	ands	r3, r2
 8003894:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d123      	bne.n	8003902 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	08da      	lsrs	r2, r3, #3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3208      	adds	r2, #8
 80038c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	220f      	movs	r2, #15
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43db      	mvns	r3, r3
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4013      	ands	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	691a      	ldr	r2, [r3, #16]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	08da      	lsrs	r2, r3, #3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3208      	adds	r2, #8
 80038fc:	6939      	ldr	r1, [r7, #16]
 80038fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	2203      	movs	r2, #3
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	43db      	mvns	r3, r3
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4013      	ands	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f003 0203 	and.w	r2, r3, #3
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	4313      	orrs	r3, r2
 800392e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 808c 	beq.w	8003a5c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003944:	4a4e      	ldr	r2, [pc, #312]	; (8003a80 <HAL_GPIO_Init+0x2b0>)
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	089b      	lsrs	r3, r3, #2
 800394a:	3302      	adds	r3, #2
 800394c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003950:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f003 0303 	and.w	r3, r3, #3
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	2207      	movs	r2, #7
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	43db      	mvns	r3, r3
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4013      	ands	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800396e:	d00d      	beq.n	800398c <HAL_GPIO_Init+0x1bc>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a44      	ldr	r2, [pc, #272]	; (8003a84 <HAL_GPIO_Init+0x2b4>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d007      	beq.n	8003988 <HAL_GPIO_Init+0x1b8>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a43      	ldr	r2, [pc, #268]	; (8003a88 <HAL_GPIO_Init+0x2b8>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d101      	bne.n	8003984 <HAL_GPIO_Init+0x1b4>
 8003980:	2302      	movs	r3, #2
 8003982:	e004      	b.n	800398e <HAL_GPIO_Init+0x1be>
 8003984:	2307      	movs	r3, #7
 8003986:	e002      	b.n	800398e <HAL_GPIO_Init+0x1be>
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <HAL_GPIO_Init+0x1be>
 800398c:	2300      	movs	r3, #0
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	f002 0203 	and.w	r2, r2, #3
 8003994:	0092      	lsls	r2, r2, #2
 8003996:	4093      	lsls	r3, r2
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	4313      	orrs	r3, r2
 800399c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800399e:	4938      	ldr	r1, [pc, #224]	; (8003a80 <HAL_GPIO_Init+0x2b0>)
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	089b      	lsrs	r3, r3, #2
 80039a4:	3302      	adds	r3, #2
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039ac:	4b37      	ldr	r3, [pc, #220]	; (8003a8c <HAL_GPIO_Init+0x2bc>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	43db      	mvns	r3, r3
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4013      	ands	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039d0:	4a2e      	ldr	r2, [pc, #184]	; (8003a8c <HAL_GPIO_Init+0x2bc>)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80039d6:	4b2d      	ldr	r3, [pc, #180]	; (8003a8c <HAL_GPIO_Init+0x2bc>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	43db      	mvns	r3, r3
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4013      	ands	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039fa:	4a24      	ldr	r2, [pc, #144]	; (8003a8c <HAL_GPIO_Init+0x2bc>)
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003a00:	4b22      	ldr	r3, [pc, #136]	; (8003a8c <HAL_GPIO_Init+0x2bc>)
 8003a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a06:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003a26:	4a19      	ldr	r2, [pc, #100]	; (8003a8c <HAL_GPIO_Init+0x2bc>)
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003a2e:	4b17      	ldr	r3, [pc, #92]	; (8003a8c <HAL_GPIO_Init+0x2bc>)
 8003a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a34:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003a54:	4a0d      	ldr	r2, [pc, #52]	; (8003a8c <HAL_GPIO_Init+0x2bc>)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	fa22 f303 	lsr.w	r3, r2, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f47f aeb7 	bne.w	80037e0 <HAL_GPIO_Init+0x10>
  }
}
 8003a72:	bf00      	nop
 8003a74:	bf00      	nop
 8003a76:	371c      	adds	r7, #28
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc80      	pop	{r7}
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40010000 	.word	0x40010000
 8003a84:	48000400 	.word	0x48000400
 8003a88:	48000800 	.word	0x48000800
 8003a8c:	58000800 	.word	0x58000800

08003a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	807b      	strh	r3, [r7, #2]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003aa0:	787b      	ldrb	r3, [r7, #1]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003aa6:	887a      	ldrh	r2, [r7, #2]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003aac:	e002      	b.n	8003ab4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003aae:	887a      	ldrh	r2, [r7, #2]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr
	...

08003ac0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ac4:	4b04      	ldr	r3, [pc, #16]	; (8003ad8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a03      	ldr	r2, [pc, #12]	; (8003ad8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ace:	6013      	str	r3, [r2, #0]
}
 8003ad0:	bf00      	nop
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr
 8003ad8:	58000400 	.word	0x58000400

08003adc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003ae0:	4b03      	ldr	r3, [pc, #12]	; (8003af0 <HAL_PWREx_GetVoltageRange+0x14>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr
 8003af0:	58000400 	.word	0x58000400

08003af4 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8003af8:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b04:	d101      	bne.n	8003b0a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <LL_PWR_IsEnabledBkUpAccess+0x18>
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bc80      	pop	{r7}
 8003b12:	4770      	bx	lr
 8003b14:	58000400 	.word	0x58000400

08003b18 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b2a:	6013      	str	r3, [r2, #0]
}
 8003b2c:	bf00      	nop
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr

08003b34 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b46:	6013      	str	r3, [r2, #0]
}
 8003b48:	bf00      	nop
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bc80      	pop	{r7}
 8003b4e:	4770      	bx	lr

08003b50 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b62:	d101      	bne.n	8003b68 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003b64:	2301      	movs	r3, #1
 8003b66:	e000      	b.n	8003b6a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bc80      	pop	{r7}
 8003b70:	4770      	bx	lr

08003b72 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003b72:	b480      	push	{r7}
 8003b74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b84:	6013      	str	r3, [r2, #0]
}
 8003b86:	bf00      	nop
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc80      	pop	{r7}
 8003b8c:	4770      	bx	lr

08003b8e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ba0:	6013      	str	r3, [r2, #0]
}
 8003ba2:	bf00      	nop
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bc80      	pop	{r7}
 8003ba8:	4770      	bx	lr

08003baa <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003baa:	b480      	push	{r7}
 8003bac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bbc:	d101      	bne.n	8003bc2 <LL_RCC_HSE_IsReady+0x18>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e000      	b.n	8003bc4 <LL_RCC_HSE_IsReady+0x1a>
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr

08003bcc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bde:	6013      	str	r3, [r2, #0]
}
 8003be0:	bf00      	nop
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bc80      	pop	{r7}
 8003be6:	4770      	bx	lr

08003be8 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bfa:	6013      	str	r3, [r2, #0]
}
 8003bfc:	bf00      	nop
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bc80      	pop	{r7}
 8003c02:	4770      	bx	lr

08003c04 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c16:	d101      	bne.n	8003c1c <LL_RCC_HSI_IsReady+0x18>
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e000      	b.n	8003c1e <LL_RCC_HSI_IsReady+0x1a>
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bc80      	pop	{r7}
 8003c24:	4770      	bx	lr

08003c26 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	061b      	lsls	r3, r3, #24
 8003c3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c40:	4313      	orrs	r3, r2
 8003c42:	604b      	str	r3, [r1, #4]
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bc80      	pop	{r7}
 8003c4c:	4770      	bx	lr

08003c4e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d101      	bne.n	8003c66 <LL_RCC_LSE_IsReady+0x18>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <LL_RCC_LSE_IsReady+0x1a>
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bc80      	pop	{r7}
 8003c6e:	4770      	bx	lr

08003c70 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8003c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c80:	f043 0301 	orr.w	r3, r3, #1
 8003c84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003c88:	bf00      	nop
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bc80      	pop	{r7}
 8003c8e:	4770      	bx	lr

08003c90 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ca0:	f023 0301 	bic.w	r3, r3, #1
 8003ca4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003ca8:	bf00      	nop
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bc80      	pop	{r7}
 8003cae:	4770      	bx	lr

08003cb0 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d101      	bne.n	8003cc8 <LL_RCC_LSI_IsReady+0x18>
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e000      	b.n	8003cca <LL_RCC_LSI_IsReady+0x1a>
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bc80      	pop	{r7}
 8003cd0:	4770      	bx	lr

08003cd2 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ce0:	f043 0301 	orr.w	r3, r3, #1
 8003ce4:	6013      	str	r3, [r2, #0]
}
 8003ce6:	bf00      	nop
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bc80      	pop	{r7}
 8003cec:	4770      	bx	lr

08003cee <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cfc:	f023 0301 	bic.w	r3, r3, #1
 8003d00:	6013      	str	r3, [r2, #0]
}
 8003d02:	bf00      	nop
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr

08003d0a <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d101      	bne.n	8003d20 <LL_RCC_MSI_IsReady+0x16>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e000      	b.n	8003d22 <LL_RCC_MSI_IsReady+0x18>
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bc80      	pop	{r7}
 8003d28:	4770      	bx	lr

08003d2a <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0308 	and.w	r3, r3, #8
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d101      	bne.n	8003d40 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e000      	b.n	8003d42 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bc80      	pop	{r7}
 8003d48:	4770      	bx	lr

08003d4a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr

08003d60 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d6c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr

08003d78 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	021b      	lsls	r3, r3, #8
 8003d8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d92:	4313      	orrs	r3, r2
 8003d94:	604b      	str	r3, [r1, #4]
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc80      	pop	{r7}
 8003d9e:	4770      	bx	lr

08003da0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f023 0203 	bic.w	r2, r3, #3
 8003db2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	608b      	str	r3, [r1, #8]
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc80      	pop	{r7}
 8003dc4:	4770      	bx	lr

08003dc6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 030c 	and.w	r3, r3, #12
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bc80      	pop	{r7}
 8003dda:	4770      	bx	lr

08003ddc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	608b      	str	r3, [r1, #8]
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bc80      	pop	{r7}
 8003e00:	4770      	bx	lr

08003e02 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e0e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003e12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr

08003e2c <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e38:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003e3c:	f023 020f 	bic.w	r2, r3, #15
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	091b      	lsrs	r3, r3, #4
 8003e44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bc80      	pop	{r7}
 8003e56:	4770      	bx	lr

08003e58 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	608b      	str	r3, [r1, #8]
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr

08003e7e <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	608b      	str	r3, [r1, #8]
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bc80      	pop	{r7}
 8003ea2:	4770      	bx	lr

08003ea4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bc80      	pop	{r7}
 8003eb8:	4770      	bx	lr

08003eba <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ec2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ec6:	011b      	lsls	r3, r3, #4
 8003ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bc80      	pop	{r7}
 8003ed2:	4770      	bx	lr

08003ed4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr

08003eea <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003eea:	b480      	push	{r7}
 8003eec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr

08003f00 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f12:	6013      	str	r3, [r2, #0]
}
 8003f14:	bf00      	nop
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bc80      	pop	{r7}
 8003f1a:	4770      	bx	lr

08003f1c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f2e:	6013      	str	r3, [r2, #0]
}
 8003f30:	bf00      	nop
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bc80      	pop	{r7}
 8003f36:	4770      	bx	lr

08003f38 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f4a:	d101      	bne.n	8003f50 <LL_RCC_PLL_IsReady+0x18>
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e000      	b.n	8003f52 <LL_RCC_PLL_IsReady+0x1a>
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bc80      	pop	{r7}
 8003f58:	4770      	bx	lr

08003f5a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	0a1b      	lsrs	r3, r3, #8
 8003f66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bc80      	pop	{r7}
 8003f70:	4770      	bx	lr

08003f72 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003f72:	b480      	push	{r7}
 8003f74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr

08003f88 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr

08003f9e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f003 0303 	and.w	r3, r3, #3
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr

08003fb4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc6:	d101      	bne.n	8003fcc <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e000      	b.n	8003fce <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bc80      	pop	{r7}
 8003fd4:	4770      	bx	lr

08003fd6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fde:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fea:	d101      	bne.n	8003ff0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003fec:	2301      	movs	r3, #1
 8003fee:	e000      	b.n	8003ff2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	4770      	bx	lr

08003ffa <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004002:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800400a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800400e:	d101      	bne.n	8004014 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004010:	2301      	movs	r3, #1
 8004012:	e000      	b.n	8004016 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr

0800401e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800401e:	b480      	push	{r7}
 8004020:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004030:	d101      	bne.n	8004036 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	bc80      	pop	{r7}
 800403e:	4770      	bx	lr

08004040 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800404e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004052:	d101      	bne.n	8004058 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004054:	2301      	movs	r3, #1
 8004056:	e000      	b.n	800405a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	46bd      	mov	sp, r7
 800405e:	bc80      	pop	{r7}
 8004060:	4770      	bx	lr
	...

08004064 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b088      	sub	sp, #32
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e36f      	b.n	8004756 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004076:	f7ff fea6 	bl	8003dc6 <LL_RCC_GetSysClkSource>
 800407a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800407c:	f7ff ff8f 	bl	8003f9e <LL_RCC_PLL_GetMainSource>
 8004080:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0320 	and.w	r3, r3, #32
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 80c4 	beq.w	8004218 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d005      	beq.n	80040a2 <HAL_RCC_OscConfig+0x3e>
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	2b0c      	cmp	r3, #12
 800409a:	d176      	bne.n	800418a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d173      	bne.n	800418a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e353      	b.n	8004756 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0308 	and.w	r3, r3, #8
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_RCC_OscConfig+0x68>
 80040c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040ca:	e006      	b.n	80040da <HAL_RCC_OscConfig+0x76>
 80040cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040d4:	091b      	lsrs	r3, r3, #4
 80040d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040da:	4293      	cmp	r3, r2
 80040dc:	d222      	bcs.n	8004124 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 fd5a 	bl	8004b9c <RCC_SetFlashLatencyFromMSIRange>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e331      	b.n	8004756 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040fc:	f043 0308 	orr.w	r3, r3, #8
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004110:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004114:	4313      	orrs	r3, r2
 8004116:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff fe2b 	bl	8003d78 <LL_RCC_MSI_SetCalibTrimming>
 8004122:	e021      	b.n	8004168 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800412e:	f043 0308 	orr.w	r3, r3, #8
 8004132:	6013      	str	r3, [r2, #0]
 8004134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004142:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004146:	4313      	orrs	r3, r2
 8004148:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	4618      	mov	r0, r3
 8004150:	f7ff fe12 	bl	8003d78 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004158:	4618      	mov	r0, r3
 800415a:	f000 fd1f 	bl	8004b9c <RCC_SetFlashLatencyFromMSIRange>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e2f6      	b.n	8004756 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004168:	f000 fce0 	bl	8004b2c <HAL_RCC_GetHCLKFreq>
 800416c:	4603      	mov	r3, r0
 800416e:	4aa7      	ldr	r2, [pc, #668]	; (800440c <HAL_RCC_OscConfig+0x3a8>)
 8004170:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8004172:	4ba7      	ldr	r3, [pc, #668]	; (8004410 <HAL_RCC_OscConfig+0x3ac>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4618      	mov	r0, r3
 8004178:	f7fe fe50 	bl	8002e1c <HAL_InitTick>
 800417c:	4603      	mov	r3, r0
 800417e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8004180:	7cfb      	ldrb	r3, [r7, #19]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d047      	beq.n	8004216 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8004186:	7cfb      	ldrb	r3, [r7, #19]
 8004188:	e2e5      	b.n	8004756 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d02c      	beq.n	80041ec <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004192:	f7ff fd9e 	bl	8003cd2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004196:	f7fe f9cf 	bl	8002538 <HAL_GetTick>
 800419a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800419c:	e008      	b.n	80041b0 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800419e:	f7fe f9cb 	bl	8002538 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d901      	bls.n	80041b0 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e2d2      	b.n	8004756 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80041b0:	f7ff fdab 	bl	8003d0a <LL_RCC_MSI_IsReady>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0f1      	beq.n	800419e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041c4:	f043 0308 	orr.w	r3, r3, #8
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041dc:	4313      	orrs	r3, r2
 80041de:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff fdc7 	bl	8003d78 <LL_RCC_MSI_SetCalibTrimming>
 80041ea:	e015      	b.n	8004218 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80041ec:	f7ff fd7f 	bl	8003cee <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041f0:	f7fe f9a2 	bl	8002538 <HAL_GetTick>
 80041f4:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041f8:	f7fe f99e 	bl	8002538 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e2a5      	b.n	8004756 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800420a:	f7ff fd7e 	bl	8003d0a <LL_RCC_MSI_IsReady>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1f1      	bne.n	80041f8 <HAL_RCC_OscConfig+0x194>
 8004214:	e000      	b.n	8004218 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004216:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d058      	beq.n	80042d6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	2b08      	cmp	r3, #8
 8004228:	d005      	beq.n	8004236 <HAL_RCC_OscConfig+0x1d2>
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	2b0c      	cmp	r3, #12
 800422e:	d108      	bne.n	8004242 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	2b03      	cmp	r3, #3
 8004234:	d105      	bne.n	8004242 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d14b      	bne.n	80042d6 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e289      	b.n	8004756 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8004242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004254:	4313      	orrs	r3, r2
 8004256:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004260:	d102      	bne.n	8004268 <HAL_RCC_OscConfig+0x204>
 8004262:	f7ff fc86 	bl	8003b72 <LL_RCC_HSE_Enable>
 8004266:	e00d      	b.n	8004284 <HAL_RCC_OscConfig+0x220>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004270:	d104      	bne.n	800427c <HAL_RCC_OscConfig+0x218>
 8004272:	f7ff fc51 	bl	8003b18 <LL_RCC_HSE_EnableTcxo>
 8004276:	f7ff fc7c 	bl	8003b72 <LL_RCC_HSE_Enable>
 800427a:	e003      	b.n	8004284 <HAL_RCC_OscConfig+0x220>
 800427c:	f7ff fc87 	bl	8003b8e <LL_RCC_HSE_Disable>
 8004280:	f7ff fc58 	bl	8003b34 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d012      	beq.n	80042b2 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800428c:	f7fe f954 	bl	8002538 <HAL_GetTick>
 8004290:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004294:	f7fe f950 	bl	8002538 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b64      	cmp	r3, #100	; 0x64
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e257      	b.n	8004756 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80042a6:	f7ff fc80 	bl	8003baa <LL_RCC_HSE_IsReady>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0f1      	beq.n	8004294 <HAL_RCC_OscConfig+0x230>
 80042b0:	e011      	b.n	80042d6 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b2:	f7fe f941 	bl	8002538 <HAL_GetTick>
 80042b6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042ba:	f7fe f93d 	bl	8002538 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b64      	cmp	r3, #100	; 0x64
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e244      	b.n	8004756 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80042cc:	f7ff fc6d 	bl	8003baa <LL_RCC_HSE_IsReady>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1f1      	bne.n	80042ba <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d046      	beq.n	8004370 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d005      	beq.n	80042f4 <HAL_RCC_OscConfig+0x290>
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	2b0c      	cmp	r3, #12
 80042ec:	d10e      	bne.n	800430c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d10b      	bne.n	800430c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e22a      	b.n	8004756 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff fc8e 	bl	8003c26 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800430a:	e031      	b.n	8004370 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d019      	beq.n	8004348 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004314:	f7ff fc5a 	bl	8003bcc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004318:	f7fe f90e 	bl	8002538 <HAL_GetTick>
 800431c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004320:	f7fe f90a 	bl	8002538 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e211      	b.n	8004756 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004332:	f7ff fc67 	bl	8003c04 <LL_RCC_HSI_IsReady>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0f1      	beq.n	8004320 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff fc70 	bl	8003c26 <LL_RCC_HSI_SetCalibTrimming>
 8004346:	e013      	b.n	8004370 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004348:	f7ff fc4e 	bl	8003be8 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434c:	f7fe f8f4 	bl	8002538 <HAL_GetTick>
 8004350:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004354:	f7fe f8f0 	bl	8002538 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e1f7      	b.n	8004756 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004366:	f7ff fc4d 	bl	8003c04 <LL_RCC_HSI_IsReady>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1f1      	bne.n	8004354 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0308 	and.w	r3, r3, #8
 8004378:	2b00      	cmp	r3, #0
 800437a:	d06e      	beq.n	800445a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d056      	beq.n	8004432 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8004384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004388:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800438c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69da      	ldr	r2, [r3, #28]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f003 0310 	and.w	r3, r3, #16
 8004398:	429a      	cmp	r2, r3
 800439a:	d031      	beq.n	8004400 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d006      	beq.n	80043b4 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e1d0      	b.n	8004756 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d013      	beq.n	80043e6 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80043be:	f7ff fc67 	bl	8003c90 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043c2:	f7fe f8b9 	bl	8002538 <HAL_GetTick>
 80043c6:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80043c8:	e008      	b.n	80043dc <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043ca:	f7fe f8b5 	bl	8002538 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b11      	cmp	r3, #17
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e1bc      	b.n	8004756 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80043dc:	f7ff fc68 	bl	8003cb0 <LL_RCC_LSI_IsReady>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f1      	bne.n	80043ca <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80043e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ee:	f023 0210 	bic.w	r2, r3, #16
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043fa:	4313      	orrs	r3, r2
 80043fc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004400:	f7ff fc36 	bl	8003c70 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004404:	f7fe f898 	bl	8002538 <HAL_GetTick>
 8004408:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800440a:	e00c      	b.n	8004426 <HAL_RCC_OscConfig+0x3c2>
 800440c:	20000008 	.word	0x20000008
 8004410:	2000000c 	.word	0x2000000c
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004414:	f7fe f890 	bl	8002538 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b11      	cmp	r3, #17
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e197      	b.n	8004756 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8004426:	f7ff fc43 	bl	8003cb0 <LL_RCC_LSI_IsReady>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0f1      	beq.n	8004414 <HAL_RCC_OscConfig+0x3b0>
 8004430:	e013      	b.n	800445a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004432:	f7ff fc2d 	bl	8003c90 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004436:	f7fe f87f 	bl	8002538 <HAL_GetTick>
 800443a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800443e:	f7fe f87b 	bl	8002538 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b11      	cmp	r3, #17
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e182      	b.n	8004756 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8004450:	f7ff fc2e 	bl	8003cb0 <LL_RCC_LSI_IsReady>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f1      	bne.n	800443e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0304 	and.w	r3, r3, #4
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 80d8 	beq.w	8004618 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004468:	f7ff fb44 	bl	8003af4 <LL_PWR_IsEnabledBkUpAccess>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d113      	bne.n	800449a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004472:	f7ff fb25 	bl	8003ac0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004476:	f7fe f85f 	bl	8002538 <HAL_GetTick>
 800447a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800447e:	f7fe f85b 	bl	8002538 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e162      	b.n	8004756 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004490:	f7ff fb30 	bl	8003af4 <LL_PWR_IsEnabledBkUpAccess>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d0f1      	beq.n	800447e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d07b      	beq.n	800459a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	2b85      	cmp	r3, #133	; 0x85
 80044a8:	d003      	beq.n	80044b2 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	2b05      	cmp	r3, #5
 80044b0:	d109      	bne.n	80044c6 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80044b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044be:	f043 0304 	orr.w	r3, r3, #4
 80044c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044c6:	f7fe f837 	bl	8002538 <HAL_GetTick>
 80044ca:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80044cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044d8:	f043 0301 	orr.w	r3, r3, #1
 80044dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80044e0:	e00a      	b.n	80044f8 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044e2:	f7fe f829 	bl	8002538 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e12e      	b.n	8004756 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80044f8:	f7ff fba9 	bl	8003c4e <LL_RCC_LSE_IsReady>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0ef      	beq.n	80044e2 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	2b81      	cmp	r3, #129	; 0x81
 8004508:	d003      	beq.n	8004512 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	2b85      	cmp	r3, #133	; 0x85
 8004510:	d121      	bne.n	8004556 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004512:	f7fe f811 	bl	8002538 <HAL_GetTick>
 8004516:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800451c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004520:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004528:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800452c:	e00a      	b.n	8004544 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800452e:	f7fe f803 	bl	8002538 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	f241 3288 	movw	r2, #5000	; 0x1388
 800453c:	4293      	cmp	r3, r2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e108      	b.n	8004756 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0ec      	beq.n	800452e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004554:	e060      	b.n	8004618 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004556:	f7fd ffef 	bl	8002538 <HAL_GetTick>
 800455a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800455c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004564:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004568:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800456c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004570:	e00a      	b.n	8004588 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004572:	f7fd ffe1 	bl	8002538 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004580:	4293      	cmp	r3, r2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e0e6      	b.n	8004756 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800458c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1ec      	bne.n	8004572 <HAL_RCC_OscConfig+0x50e>
 8004598:	e03e      	b.n	8004618 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800459a:	f7fd ffcd 	bl	8002538 <HAL_GetTick>
 800459e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80045a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80045b4:	e00a      	b.n	80045cc <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045b6:	f7fd ffbf 	bl	8002538 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d901      	bls.n	80045cc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e0c4      	b.n	8004756 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80045cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1ec      	bne.n	80045b6 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045dc:	f7fd ffac 	bl	8002538 <HAL_GetTick>
 80045e0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80045e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045ee:	f023 0301 	bic.w	r3, r3, #1
 80045f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80045f6:	e00a      	b.n	800460e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f8:	f7fd ff9e 	bl	8002538 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	f241 3288 	movw	r2, #5000	; 0x1388
 8004606:	4293      	cmp	r3, r2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e0a3      	b.n	8004756 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800460e:	f7ff fb1e 	bl	8003c4e <LL_RCC_LSE_IsReady>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1ef      	bne.n	80045f8 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 8099 	beq.w	8004754 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	2b0c      	cmp	r3, #12
 8004626:	d06c      	beq.n	8004702 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	2b02      	cmp	r3, #2
 800462e:	d14b      	bne.n	80046c8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004630:	f7ff fc74 	bl	8003f1c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004634:	f7fd ff80 	bl	8002538 <HAL_GetTick>
 8004638:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800463c:	f7fd ff7c 	bl	8002538 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b0a      	cmp	r3, #10
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e083      	b.n	8004756 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800464e:	f7ff fc73 	bl	8003f38 <LL_RCC_PLL_IsReady>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1f1      	bne.n	800463c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800465c:	68da      	ldr	r2, [r3, #12]
 800465e:	4b40      	ldr	r3, [pc, #256]	; (8004760 <HAL_RCC_OscConfig+0x6fc>)
 8004660:	4013      	ands	r3, r2
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800466a:	4311      	orrs	r1, r2
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004670:	0212      	lsls	r2, r2, #8
 8004672:	4311      	orrs	r1, r2
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004678:	4311      	orrs	r1, r2
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800467e:	4311      	orrs	r1, r2
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004684:	430a      	orrs	r2, r1
 8004686:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800468a:	4313      	orrs	r3, r2
 800468c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800468e:	f7ff fc37 	bl	8003f00 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800469c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a2:	f7fd ff49 	bl	8002538 <HAL_GetTick>
 80046a6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80046a8:	e008      	b.n	80046bc <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046aa:	f7fd ff45 	bl	8002538 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b0a      	cmp	r3, #10
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e04c      	b.n	8004756 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80046bc:	f7ff fc3c 	bl	8003f38 <LL_RCC_PLL_IsReady>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d0f1      	beq.n	80046aa <HAL_RCC_OscConfig+0x646>
 80046c6:	e045      	b.n	8004754 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c8:	f7ff fc28 	bl	8003f1c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046cc:	f7fd ff34 	bl	8002538 <HAL_GetTick>
 80046d0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d4:	f7fd ff30 	bl	8002538 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b0a      	cmp	r3, #10
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e037      	b.n	8004756 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80046e6:	f7ff fc27 	bl	8003f38 <LL_RCC_PLL_IsReady>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1f1      	bne.n	80046d4 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80046f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046fa:	4b1a      	ldr	r3, [pc, #104]	; (8004764 <HAL_RCC_OscConfig+0x700>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	60cb      	str	r3, [r1, #12]
 8004700:	e028      	b.n	8004754 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004706:	2b01      	cmp	r3, #1
 8004708:	d101      	bne.n	800470e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e023      	b.n	8004756 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800470e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	f003 0203 	and.w	r2, r3, #3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004720:	429a      	cmp	r2, r3
 8004722:	d115      	bne.n	8004750 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800472e:	429a      	cmp	r2, r3
 8004730:	d10e      	bne.n	8004750 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473c:	021b      	lsls	r3, r3, #8
 800473e:	429a      	cmp	r2, r3
 8004740:	d106      	bne.n	8004750 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474c:	429a      	cmp	r2, r3
 800474e:	d001      	beq.n	8004754 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e000      	b.n	8004756 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3720      	adds	r7, #32
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	11c1808c 	.word	0x11c1808c
 8004764:	eefefffc 	.word	0xeefefffc

08004768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e12c      	b.n	80049d6 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800477c:	4b98      	ldr	r3, [pc, #608]	; (80049e0 <HAL_RCC_ClockConfig+0x278>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0307 	and.w	r3, r3, #7
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	429a      	cmp	r2, r3
 8004788:	d91b      	bls.n	80047c2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478a:	4b95      	ldr	r3, [pc, #596]	; (80049e0 <HAL_RCC_ClockConfig+0x278>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f023 0207 	bic.w	r2, r3, #7
 8004792:	4993      	ldr	r1, [pc, #588]	; (80049e0 <HAL_RCC_ClockConfig+0x278>)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	4313      	orrs	r3, r2
 8004798:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800479a:	f7fd fecd 	bl	8002538 <HAL_GetTick>
 800479e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a0:	e008      	b.n	80047b4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80047a2:	f7fd fec9 	bl	8002538 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e110      	b.n	80049d6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047b4:	4b8a      	ldr	r3, [pc, #552]	; (80049e0 <HAL_RCC_ClockConfig+0x278>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d1ef      	bne.n	80047a2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d016      	beq.n	80047fc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7ff fb02 	bl	8003ddc <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80047d8:	f7fd feae 	bl	8002538 <HAL_GetTick>
 80047dc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80047e0:	f7fd feaa 	bl	8002538 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e0f1      	b.n	80049d6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80047f2:	f7ff fbdf 	bl	8003fb4 <LL_RCC_IsActiveFlag_HPRE>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0f1      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0320 	and.w	r3, r3, #32
 8004804:	2b00      	cmp	r3, #0
 8004806:	d016      	beq.n	8004836 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff faf8 	bl	8003e02 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004812:	f7fd fe91 	bl	8002538 <HAL_GetTick>
 8004816:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004818:	e008      	b.n	800482c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800481a:	f7fd fe8d 	bl	8002538 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d901      	bls.n	800482c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e0d4      	b.n	80049d6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800482c:	f7ff fbd3 	bl	8003fd6 <LL_RCC_IsActiveFlag_C2HPRE>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0f1      	beq.n	800481a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483e:	2b00      	cmp	r3, #0
 8004840:	d016      	beq.n	8004870 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff faf0 	bl	8003e2c <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800484c:	f7fd fe74 	bl	8002538 <HAL_GetTick>
 8004850:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004852:	e008      	b.n	8004866 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004854:	f7fd fe70 	bl	8002538 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e0b7      	b.n	80049d6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004866:	f7ff fbc8 	bl	8003ffa <LL_RCC_IsActiveFlag_SHDHPRE>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0f1      	beq.n	8004854 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d016      	beq.n	80048aa <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	4618      	mov	r0, r3
 8004882:	f7ff fae9 	bl	8003e58 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004886:	f7fd fe57 	bl	8002538 <HAL_GetTick>
 800488a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800488c:	e008      	b.n	80048a0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800488e:	f7fd fe53 	bl	8002538 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d901      	bls.n	80048a0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e09a      	b.n	80049d6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80048a0:	f7ff fbbd 	bl	800401e <LL_RCC_IsActiveFlag_PPRE1>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d0f1      	beq.n	800488e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0308 	and.w	r3, r3, #8
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d017      	beq.n	80048e6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	4618      	mov	r0, r3
 80048be:	f7ff fade 	bl	8003e7e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80048c2:	f7fd fe39 	bl	8002538 <HAL_GetTick>
 80048c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80048c8:	e008      	b.n	80048dc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048ca:	f7fd fe35 	bl	8002538 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e07c      	b.n	80049d6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80048dc:	f7ff fbb0 	bl	8004040 <LL_RCC_IsActiveFlag_PPRE2>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0f1      	beq.n	80048ca <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d043      	beq.n	800497a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d106      	bne.n	8004908 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80048fa:	f7ff f956 	bl	8003baa <LL_RCC_HSE_IsReady>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d11e      	bne.n	8004942 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e066      	b.n	80049d6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	2b03      	cmp	r3, #3
 800490e:	d106      	bne.n	800491e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004910:	f7ff fb12 	bl	8003f38 <LL_RCC_PLL_IsReady>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d113      	bne.n	8004942 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e05b      	b.n	80049d6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d106      	bne.n	8004934 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004926:	f7ff f9f0 	bl	8003d0a <LL_RCC_MSI_IsReady>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d108      	bne.n	8004942 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e050      	b.n	80049d6 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004934:	f7ff f966 	bl	8003c04 <LL_RCC_HSI_IsReady>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e049      	b.n	80049d6 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	4618      	mov	r0, r3
 8004948:	f7ff fa2a 	bl	8003da0 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800494c:	f7fd fdf4 	bl	8002538 <HAL_GetTick>
 8004950:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004952:	e00a      	b.n	800496a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004954:	f7fd fdf0 	bl	8002538 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004962:	4293      	cmp	r3, r2
 8004964:	d901      	bls.n	800496a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e035      	b.n	80049d6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496a:	f7ff fa2c 	bl	8003dc6 <LL_RCC_GetSysClkSource>
 800496e:	4602      	mov	r2, r0
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	429a      	cmp	r2, r3
 8004978:	d1ec      	bne.n	8004954 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800497a:	4b19      	ldr	r3, [pc, #100]	; (80049e0 <HAL_RCC_ClockConfig+0x278>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d21b      	bcs.n	80049c0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004988:	4b15      	ldr	r3, [pc, #84]	; (80049e0 <HAL_RCC_ClockConfig+0x278>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f023 0207 	bic.w	r2, r3, #7
 8004990:	4913      	ldr	r1, [pc, #76]	; (80049e0 <HAL_RCC_ClockConfig+0x278>)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	4313      	orrs	r3, r2
 8004996:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004998:	f7fd fdce 	bl	8002538 <HAL_GetTick>
 800499c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800499e:	e008      	b.n	80049b2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80049a0:	f7fd fdca 	bl	8002538 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e011      	b.n	80049d6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049b2:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <HAL_RCC_ClockConfig+0x278>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0307 	and.w	r3, r3, #7
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d1ef      	bne.n	80049a0 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80049c0:	f000 f8b4 	bl	8004b2c <HAL_RCC_GetHCLKFreq>
 80049c4:	4603      	mov	r3, r0
 80049c6:	4a07      	ldr	r2, [pc, #28]	; (80049e4 <HAL_RCC_ClockConfig+0x27c>)
 80049c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80049ca:	4b07      	ldr	r3, [pc, #28]	; (80049e8 <HAL_RCC_ClockConfig+0x280>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fe fa24 	bl	8002e1c <HAL_InitTick>
 80049d4:	4603      	mov	r3, r0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	58004000 	.word	0x58004000
 80049e4:	20000008 	.word	0x20000008
 80049e8:	2000000c 	.word	0x2000000c

080049ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049ec:	b590      	push	{r4, r7, lr}
 80049ee:	b087      	sub	sp, #28
 80049f0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049fa:	f7ff f9e4 	bl	8003dc6 <LL_RCC_GetSysClkSource>
 80049fe:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a00:	f7ff facd 	bl	8003f9e <LL_RCC_PLL_GetMainSource>
 8004a04:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d005      	beq.n	8004a18 <HAL_RCC_GetSysClockFreq+0x2c>
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	2b0c      	cmp	r3, #12
 8004a10:	d139      	bne.n	8004a86 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d136      	bne.n	8004a86 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004a18:	f7ff f987 	bl	8003d2a <LL_RCC_MSI_IsEnabledRangeSelect>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d115      	bne.n	8004a4e <HAL_RCC_GetSysClockFreq+0x62>
 8004a22:	f7ff f982 	bl	8003d2a <LL_RCC_MSI_IsEnabledRangeSelect>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d106      	bne.n	8004a3a <HAL_RCC_GetSysClockFreq+0x4e>
 8004a2c:	f7ff f98d 	bl	8003d4a <LL_RCC_MSI_GetRange>
 8004a30:	4603      	mov	r3, r0
 8004a32:	0a1b      	lsrs	r3, r3, #8
 8004a34:	f003 030f 	and.w	r3, r3, #15
 8004a38:	e005      	b.n	8004a46 <HAL_RCC_GetSysClockFreq+0x5a>
 8004a3a:	f7ff f991 	bl	8003d60 <LL_RCC_MSI_GetRangeAfterStandby>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	0a1b      	lsrs	r3, r3, #8
 8004a42:	f003 030f 	and.w	r3, r3, #15
 8004a46:	4a36      	ldr	r2, [pc, #216]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x134>)
 8004a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a4c:	e014      	b.n	8004a78 <HAL_RCC_GetSysClockFreq+0x8c>
 8004a4e:	f7ff f96c 	bl	8003d2a <LL_RCC_MSI_IsEnabledRangeSelect>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d106      	bne.n	8004a66 <HAL_RCC_GetSysClockFreq+0x7a>
 8004a58:	f7ff f977 	bl	8003d4a <LL_RCC_MSI_GetRange>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	091b      	lsrs	r3, r3, #4
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	e005      	b.n	8004a72 <HAL_RCC_GetSysClockFreq+0x86>
 8004a66:	f7ff f97b 	bl	8003d60 <LL_RCC_MSI_GetRangeAfterStandby>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	091b      	lsrs	r3, r3, #4
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	4a2b      	ldr	r2, [pc, #172]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x134>)
 8004a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a78:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d115      	bne.n	8004aac <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a84:	e012      	b.n	8004aac <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	2b04      	cmp	r3, #4
 8004a8a:	d102      	bne.n	8004a92 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a8c:	4b25      	ldr	r3, [pc, #148]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x138>)
 8004a8e:	617b      	str	r3, [r7, #20]
 8004a90:	e00c      	b.n	8004aac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d109      	bne.n	8004aac <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004a98:	f7ff f85a 	bl	8003b50 <LL_RCC_HSE_IsEnabledDiv2>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d102      	bne.n	8004aa8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004aa2:	4b20      	ldr	r3, [pc, #128]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x138>)
 8004aa4:	617b      	str	r3, [r7, #20]
 8004aa6:	e001      	b.n	8004aac <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004aa8:	4b1f      	ldr	r3, [pc, #124]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004aaa:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004aac:	f7ff f98b 	bl	8003dc6 <LL_RCC_GetSysClkSource>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b0c      	cmp	r3, #12
 8004ab4:	d12f      	bne.n	8004b16 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004ab6:	f7ff fa72 	bl	8003f9e <LL_RCC_PLL_GetMainSource>
 8004aba:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d003      	beq.n	8004aca <HAL_RCC_GetSysClockFreq+0xde>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b03      	cmp	r3, #3
 8004ac6:	d003      	beq.n	8004ad0 <HAL_RCC_GetSysClockFreq+0xe4>
 8004ac8:	e00d      	b.n	8004ae6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004aca:	4b16      	ldr	r3, [pc, #88]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x138>)
 8004acc:	60fb      	str	r3, [r7, #12]
        break;
 8004ace:	e00d      	b.n	8004aec <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004ad0:	f7ff f83e 	bl	8003b50 <LL_RCC_HSE_IsEnabledDiv2>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d102      	bne.n	8004ae0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004ada:	4b12      	ldr	r3, [pc, #72]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x138>)
 8004adc:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004ade:	e005      	b.n	8004aec <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8004ae0:	4b11      	ldr	r3, [pc, #68]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004ae2:	60fb      	str	r3, [r7, #12]
        break;
 8004ae4:	e002      	b.n	8004aec <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	60fb      	str	r3, [r7, #12]
        break;
 8004aea:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004aec:	f7ff fa35 	bl	8003f5a <LL_RCC_PLL_GetN>
 8004af0:	4602      	mov	r2, r0
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	fb03 f402 	mul.w	r4, r3, r2
 8004af8:	f7ff fa46 	bl	8003f88 <LL_RCC_PLL_GetDivider>
 8004afc:	4603      	mov	r3, r0
 8004afe:	091b      	lsrs	r3, r3, #4
 8004b00:	3301      	adds	r3, #1
 8004b02:	fbb4 f4f3 	udiv	r4, r4, r3
 8004b06:	f7ff fa34 	bl	8003f72 <LL_RCC_PLL_GetR>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	0f5b      	lsrs	r3, r3, #29
 8004b0e:	3301      	adds	r3, #1
 8004b10:	fbb4 f3f3 	udiv	r3, r4, r3
 8004b14:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004b16:	697b      	ldr	r3, [r7, #20]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	371c      	adds	r7, #28
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd90      	pop	{r4, r7, pc}
 8004b20:	0800c7fc 	.word	0x0800c7fc
 8004b24:	00f42400 	.word	0x00f42400
 8004b28:	01e84800 	.word	0x01e84800

08004b2c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b2c:	b598      	push	{r3, r4, r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004b30:	f7ff ff5c 	bl	80049ec <HAL_RCC_GetSysClockFreq>
 8004b34:	4604      	mov	r4, r0
 8004b36:	f7ff f9b5 	bl	8003ea4 <LL_RCC_GetAHBPrescaler>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	091b      	lsrs	r3, r3, #4
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	4a03      	ldr	r2, [pc, #12]	; (8004b50 <HAL_RCC_GetHCLKFreq+0x24>)
 8004b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b48:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	bd98      	pop	{r3, r4, r7, pc}
 8004b50:	0800c79c 	.word	0x0800c79c

08004b54 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b54:	b598      	push	{r3, r4, r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004b58:	f7ff ffe8 	bl	8004b2c <HAL_RCC_GetHCLKFreq>
 8004b5c:	4604      	mov	r4, r0
 8004b5e:	f7ff f9b9 	bl	8003ed4 <LL_RCC_GetAPB1Prescaler>
 8004b62:	4603      	mov	r3, r0
 8004b64:	0a1b      	lsrs	r3, r3, #8
 8004b66:	4a03      	ldr	r2, [pc, #12]	; (8004b74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b6c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	bd98      	pop	{r3, r4, r7, pc}
 8004b74:	0800c7dc 	.word	0x0800c7dc

08004b78 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b78:	b598      	push	{r3, r4, r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004b7c:	f7ff ffd6 	bl	8004b2c <HAL_RCC_GetHCLKFreq>
 8004b80:	4604      	mov	r4, r0
 8004b82:	f7ff f9b2 	bl	8003eea <LL_RCC_GetAPB2Prescaler>
 8004b86:	4603      	mov	r3, r0
 8004b88:	0adb      	lsrs	r3, r3, #11
 8004b8a:	4a03      	ldr	r2, [pc, #12]	; (8004b98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b90:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	bd98      	pop	{r3, r4, r7, pc}
 8004b98:	0800c7dc 	.word	0x0800c7dc

08004b9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004b9c:	b590      	push	{r4, r7, lr}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	091b      	lsrs	r3, r3, #4
 8004ba8:	f003 030f 	and.w	r3, r3, #15
 8004bac:	4a10      	ldr	r2, [pc, #64]	; (8004bf0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8004bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bb2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8004bb4:	f7ff f981 	bl	8003eba <LL_RCC_GetAHB3Prescaler>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	091b      	lsrs	r3, r3, #4
 8004bbc:	f003 030f 	and.w	r3, r3, #15
 8004bc0:	4a0c      	ldr	r2, [pc, #48]	; (8004bf4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8004bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bcc:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	4a09      	ldr	r2, [pc, #36]	; (8004bf8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8004bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd6:	0c9c      	lsrs	r4, r3, #18
 8004bd8:	f7fe ff80 	bl	8003adc <HAL_PWREx_GetVoltageRange>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	4619      	mov	r1, r3
 8004be0:	4620      	mov	r0, r4
 8004be2:	f000 f80b 	bl	8004bfc <RCC_SetFlashLatency>
 8004be6:	4603      	mov	r3, r0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd90      	pop	{r4, r7, pc}
 8004bf0:	0800c7fc 	.word	0x0800c7fc
 8004bf4:	0800c79c 	.word	0x0800c79c
 8004bf8:	431bde83 	.word	0x431bde83

08004bfc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08e      	sub	sp, #56	; 0x38
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8004c06:	4a3a      	ldr	r2, [pc, #232]	; (8004cf0 <RCC_SetFlashLatency+0xf4>)
 8004c08:	f107 0320 	add.w	r3, r7, #32
 8004c0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c10:	6018      	str	r0, [r3, #0]
 8004c12:	3304      	adds	r3, #4
 8004c14:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8004c16:	4a37      	ldr	r2, [pc, #220]	; (8004cf4 <RCC_SetFlashLatency+0xf8>)
 8004c18:	f107 0318 	add.w	r3, r7, #24
 8004c1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c20:	6018      	str	r0, [r3, #0]
 8004c22:	3304      	adds	r3, #4
 8004c24:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8004c26:	4a34      	ldr	r2, [pc, #208]	; (8004cf8 <RCC_SetFlashLatency+0xfc>)
 8004c28:	f107 030c 	add.w	r3, r7, #12
 8004c2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8004c2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004c32:	2300      	movs	r3, #0
 8004c34:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c3c:	d11b      	bne.n	8004c76 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004c3e:	2300      	movs	r3, #0
 8004c40:	633b      	str	r3, [r7, #48]	; 0x30
 8004c42:	e014      	b.n	8004c6e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c46:	005b      	lsls	r3, r3, #1
 8004c48:	3338      	adds	r3, #56	; 0x38
 8004c4a:	443b      	add	r3, r7
 8004c4c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004c50:	461a      	mov	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d807      	bhi.n	8004c68 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	3338      	adds	r3, #56	; 0x38
 8004c5e:	443b      	add	r3, r7
 8004c60:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004c64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c66:	e021      	b.n	8004cac <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	633b      	str	r3, [r7, #48]	; 0x30
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d9e7      	bls.n	8004c44 <RCC_SetFlashLatency+0x48>
 8004c74:	e01a      	b.n	8004cac <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004c76:	2300      	movs	r3, #0
 8004c78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c7a:	e014      	b.n	8004ca6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	3338      	adds	r3, #56	; 0x38
 8004c82:	443b      	add	r3, r7
 8004c84:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d807      	bhi.n	8004ca0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	3338      	adds	r3, #56	; 0x38
 8004c96:	443b      	add	r3, r7
 8004c98:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004c9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c9e:	e005      	b.n	8004cac <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d9e7      	bls.n	8004c7c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004cac:	4b13      	ldr	r3, [pc, #76]	; (8004cfc <RCC_SetFlashLatency+0x100>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f023 0207 	bic.w	r2, r3, #7
 8004cb4:	4911      	ldr	r1, [pc, #68]	; (8004cfc <RCC_SetFlashLatency+0x100>)
 8004cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004cbc:	f7fd fc3c 	bl	8002538 <HAL_GetTick>
 8004cc0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004cc2:	e008      	b.n	8004cd6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004cc4:	f7fd fc38 	bl	8002538 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e007      	b.n	8004ce6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004cd6:	4b09      	ldr	r3, [pc, #36]	; (8004cfc <RCC_SetFlashLatency+0x100>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0307 	and.w	r3, r3, #7
 8004cde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d1ef      	bne.n	8004cc4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3738      	adds	r7, #56	; 0x38
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	0800c75c 	.word	0x0800c75c
 8004cf4:	0800c764 	.word	0x0800c764
 8004cf8:	0800c76c 	.word	0x0800c76c
 8004cfc:	58004000 	.word	0x58004000

08004d00 <LL_RCC_LSE_IsReady>:
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d101      	bne.n	8004d18 <LL_RCC_LSE_IsReady+0x18>
 8004d14:	2301      	movs	r3, #1
 8004d16:	e000      	b.n	8004d1a <LL_RCC_LSE_IsReady+0x1a>
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bc80      	pop	{r7}
 8004d20:	4770      	bx	lr

08004d22 <LL_RCC_SetUSARTClockSource>:
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d2e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	0c1b      	lsrs	r3, r3, #16
 8004d36:	43db      	mvns	r3, r3
 8004d38:	401a      	ands	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d42:	4313      	orrs	r3, r2
 8004d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bc80      	pop	{r7}
 8004d50:	4770      	bx	lr

08004d52 <LL_RCC_SetI2SClockSource>:
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bc80      	pop	{r7}
 8004d7a:	4770      	bx	lr

08004d7c <LL_RCC_SetLPUARTClockSource>:
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bc80      	pop	{r7}
 8004da4:	4770      	bx	lr

08004da6 <LL_RCC_SetI2CClockSource>:
{
 8004da6:	b480      	push	{r7}
 8004da8:	b083      	sub	sp, #12
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004db2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	091b      	lsrs	r3, r3, #4
 8004dba:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004dbe:	43db      	mvns	r3, r3
 8004dc0:	401a      	ands	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	011b      	lsls	r3, r3, #4
 8004dc6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004dca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bc80      	pop	{r7}
 8004ddc:	4770      	bx	lr

08004dde <LL_RCC_SetLPTIMClockSource>:
{
 8004dde:	b480      	push	{r7}
 8004de0:	b083      	sub	sp, #12
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	0c1b      	lsrs	r3, r3, #16
 8004df2:	041b      	lsls	r3, r3, #16
 8004df4:	43db      	mvns	r3, r3
 8004df6:	401a      	ands	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	041b      	lsls	r3, r3, #16
 8004dfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e00:	4313      	orrs	r3, r2
 8004e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bc80      	pop	{r7}
 8004e0e:	4770      	bx	lr

08004e10 <LL_RCC_SetRNGClockSource>:
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e20:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004e24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bc80      	pop	{r7}
 8004e38:	4770      	bx	lr

08004e3a <LL_RCC_SetADCClockSource>:
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bc80      	pop	{r7}
 8004e62:	4770      	bx	lr

08004e64 <LL_RCC_SetRTCClockSource>:
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bc80      	pop	{r7}
 8004e8c:	4770      	bx	lr

08004e8e <LL_RCC_GetRTCClockSource>:
{
 8004e8e:	b480      	push	{r7}
 8004e90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bc80      	pop	{r7}
 8004ea4:	4770      	bx	lr

08004ea6 <LL_RCC_ForceBackupDomainReset>:
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004ebe:	bf00      	nop
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc80      	pop	{r7}
 8004ec4:	4770      	bx	lr

08004ec6 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004ede:	bf00      	nop
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bc80      	pop	{r7}
 8004ee4:	4770      	bx	lr
	...

08004ee8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004ef8:	2300      	movs	r3, #0
 8004efa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d058      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8004f08:	f7fe fdda 	bl	8003ac0 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f0c:	f7fd fb14 	bl	8002538 <HAL_GetTick>
 8004f10:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004f12:	e009      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f14:	f7fd fb10 	bl	8002538 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d902      	bls.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	74fb      	strb	r3, [r7, #19]
        break;
 8004f26:	e006      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004f28:	4b7b      	ldr	r3, [pc, #492]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f34:	d1ee      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8004f36:	7cfb      	ldrb	r3, [r7, #19]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d13c      	bne.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004f3c:	f7ff ffa7 	bl	8004e8e <LL_RCC_GetRTCClockSource>
 8004f40:	4602      	mov	r2, r0
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d00f      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f56:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f58:	f7ff ffa5 	bl	8004ea6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f5c:	f7ff ffb3 	bl	8004ec6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d014      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f74:	f7fd fae0 	bl	8002538 <HAL_GetTick>
 8004f78:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8004f7a:	e00b      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f7c:	f7fd fadc 	bl	8002538 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d902      	bls.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	74fb      	strb	r3, [r7, #19]
            break;
 8004f92:	e004      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8004f94:	f7ff feb4 	bl	8004d00 <LL_RCC_LSE_IsReady>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d1ee      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8004f9e:	7cfb      	ldrb	r3, [r7, #19]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d105      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7ff ff5b 	bl	8004e64 <LL_RCC_SetRTCClockSource>
 8004fae:	e004      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fb0:	7cfb      	ldrb	r3, [r7, #19]
 8004fb2:	74bb      	strb	r3, [r7, #18]
 8004fb4:	e001      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb6:	7cfb      	ldrb	r3, [r7, #19]
 8004fb8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d004      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff fea9 	bl	8004d22 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d004      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7ff fe9e 	bl	8004d22 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0320 	and.w	r3, r3, #32
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d004      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7ff fec0 	bl	8004d7c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005004:	2b00      	cmp	r3, #0
 8005006:	d004      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	4618      	mov	r0, r3
 800500e:	f7ff fee6 	bl	8004dde <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800501a:	2b00      	cmp	r3, #0
 800501c:	d004      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	4618      	mov	r0, r3
 8005024:	f7ff fedb 	bl	8004dde <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005030:	2b00      	cmp	r3, #0
 8005032:	d004      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005038:	4618      	mov	r0, r3
 800503a:	f7ff fed0 	bl	8004dde <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005046:	2b00      	cmp	r3, #0
 8005048:	d004      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	4618      	mov	r0, r3
 8005050:	f7ff fea9 	bl	8004da6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505c:	2b00      	cmp	r3, #0
 800505e:	d004      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	4618      	mov	r0, r3
 8005066:	f7ff fe9e 	bl	8004da6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005072:	2b00      	cmp	r3, #0
 8005074:	d004      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff fe93 	bl	8004da6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0310 	and.w	r3, r3, #16
 8005088:	2b00      	cmp	r3, #0
 800508a:	d011      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	4618      	mov	r0, r3
 8005092:	f7ff fe5e 	bl	8004d52 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800509e:	d107      	bne.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80050a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d010      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7ff fea5 	bl	8004e10 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d107      	bne.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80050ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050dc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d011      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7ff fea3 	bl	8004e3a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050fc:	d107      	bne.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80050fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800510c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800510e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3718      	adds	r7, #24
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	58000400 	.word	0x58000400

0800511c <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8005124:	4b06      	ldr	r3, [pc, #24]	; (8005140 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800512c:	4904      	ldr	r1, [pc, #16]	; (8005140 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4313      	orrs	r3, r2
 8005132:	608b      	str	r3, [r1, #8]
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	bc80      	pop	{r7}
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	58000400 	.word	0x58000400

08005144 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8005144:	b480      	push	{r7}
 8005146:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005148:	4b05      	ldr	r3, [pc, #20]	; (8005160 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800514a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800514e:	4a04      	ldr	r2, [pc, #16]	; (8005160 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8005150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005154:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005158:	bf00      	nop
 800515a:	46bd      	mov	sp, r7
 800515c:	bc80      	pop	{r7}
 800515e:	4770      	bx	lr
 8005160:	58000400 	.word	0x58000400

08005164 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8005164:	b480      	push	{r7}
 8005166:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005168:	4b05      	ldr	r3, [pc, #20]	; (8005180 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800516a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516e:	4a04      	ldr	r2, [pc, #16]	; (8005180 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8005170:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005174:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005178:	bf00      	nop
 800517a:	46bd      	mov	sp, r7
 800517c:	bc80      	pop	{r7}
 800517e:	4770      	bx	lr
 8005180:	58000400 	.word	0x58000400

08005184 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8005188:	4b03      	ldr	r3, [pc, #12]	; (8005198 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800518a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800518e:	619a      	str	r2, [r3, #24]
}
 8005190:	bf00      	nop
 8005192:	46bd      	mov	sp, r7
 8005194:	bc80      	pop	{r7}
 8005196:	4770      	bx	lr
 8005198:	58000400 	.word	0x58000400

0800519c <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80051a0:	4b06      	ldr	r3, [pc, #24]	; (80051bc <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d101      	bne.n	80051b0 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80051ac:	2301      	movs	r3, #1
 80051ae:	e000      	b.n	80051b2 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bc80      	pop	{r7}
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	58000400 	.word	0x58000400

080051c0 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 80051c0:	b480      	push	{r7}
 80051c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80051c4:	4b06      	ldr	r3, [pc, #24]	; (80051e0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b04      	cmp	r3, #4
 80051ce:	d101      	bne.n	80051d4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80051d0:	2301      	movs	r3, #1
 80051d2:	e000      	b.n	80051d6 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	46bd      	mov	sp, r7
 80051da:	bc80      	pop	{r7}
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	58000400 	.word	0x58000400

080051e4 <LL_RCC_RF_DisableReset>:
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80051e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80051fc:	bf00      	nop
 80051fe:	46bd      	mov	sp, r7
 8005200:	bc80      	pop	{r7}
 8005202:	4770      	bx	lr

08005204 <LL_RCC_IsRFUnderReset>:
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8005208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800520c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005214:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005218:	d101      	bne.n	800521e <LL_RCC_IsRFUnderReset+0x1a>
 800521a:	2301      	movs	r3, #1
 800521c:	e000      	b.n	8005220 <LL_RCC_IsRFUnderReset+0x1c>
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	46bd      	mov	sp, r7
 8005224:	bc80      	pop	{r7}
 8005226:	4770      	bx	lr

08005228 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005230:	4b06      	ldr	r3, [pc, #24]	; (800524c <LL_EXTI_EnableIT_32_63+0x24>)
 8005232:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005236:	4905      	ldr	r1, [pc, #20]	; (800524c <LL_EXTI_EnableIT_32_63+0x24>)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4313      	orrs	r3, r2
 800523c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	bc80      	pop	{r7}
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	58000800 	.word	0x58000800

08005250 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d103      	bne.n	8005266 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	73fb      	strb	r3, [r7, #15]
    return status;
 8005262:	7bfb      	ldrb	r3, [r7, #15]
 8005264:	e052      	b.n	800530c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	799b      	ldrb	r3, [r3, #6]
 800526e:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8005270:	7bbb      	ldrb	r3, [r7, #14]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d002      	beq.n	800527c <HAL_SUBGHZ_Init+0x2c>
 8005276:	7bbb      	ldrb	r3, [r7, #14]
 8005278:	2b03      	cmp	r3, #3
 800527a:	d109      	bne.n	8005290 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7fd f93e 	bl	8002504 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8005288:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800528c:	f7ff ffcc 	bl	8005228 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8005290:	7bbb      	ldrb	r3, [r7, #14]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d126      	bne.n	80052e4 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2202      	movs	r2, #2
 800529a:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 800529c:	f7ff ffa2 	bl	80051e4 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80052a0:	4b1c      	ldr	r3, [pc, #112]	; (8005314 <HAL_SUBGHZ_Init+0xc4>)
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	4613      	mov	r3, r2
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	1a9b      	subs	r3, r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	0cdb      	lsrs	r3, r3, #19
 80052ae:	2264      	movs	r2, #100	; 0x64
 80052b0:	fb02 f303 	mul.w	r3, r2, r3
 80052b4:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d105      	bne.n	80052c8 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	609a      	str	r2, [r3, #8]
        break;
 80052c6:	e007      	b.n	80052d8 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80052ce:	f7ff ff99 	bl	8005204 <LL_RCC_IsRFUnderReset>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1ee      	bne.n	80052b6 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80052d8:	f7ff ff34 	bl	8005144 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80052dc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80052e0:	f7ff ff1c 	bl	800511c <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80052e4:	f7ff ff4e 	bl	8005184 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80052e8:	7bfb      	ldrb	r3, [r7, #15]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10a      	bne.n	8005304 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 faac 	bl	8005850 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	719a      	strb	r2, [r3, #6]

  return status;
 800530a:	7bfb      	ldrb	r3, [r7, #15]
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	20000008 	.word	0x20000008

08005318 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	607a      	str	r2, [r7, #4]
 8005322:	461a      	mov	r2, r3
 8005324:	460b      	mov	r3, r1
 8005326:	817b      	strh	r3, [r7, #10]
 8005328:	4613      	mov	r3, r2
 800532a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	799b      	ldrb	r3, [r3, #6]
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b01      	cmp	r3, #1
 8005334:	d14a      	bne.n	80053cc <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	795b      	ldrb	r3, [r3, #5]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d101      	bne.n	8005342 <HAL_SUBGHZ_WriteRegisters+0x2a>
 800533e:	2302      	movs	r3, #2
 8005340:	e045      	b.n	80053ce <HAL_SUBGHZ_WriteRegisters+0xb6>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2201      	movs	r2, #1
 8005346:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2202      	movs	r2, #2
 800534c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 fb4c 	bl	80059ec <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005354:	f7ff ff06 	bl	8005164 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8005358:	210d      	movs	r1, #13
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 fa98 	bl	8005890 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005360:	897b      	ldrh	r3, [r7, #10]
 8005362:	0a1b      	lsrs	r3, r3, #8
 8005364:	b29b      	uxth	r3, r3
 8005366:	b2db      	uxtb	r3, r3
 8005368:	4619      	mov	r1, r3
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f000 fa90 	bl	8005890 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005370:	897b      	ldrh	r3, [r7, #10]
 8005372:	b2db      	uxtb	r3, r3
 8005374:	4619      	mov	r1, r3
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 fa8a 	bl	8005890 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800537c:	2300      	movs	r3, #0
 800537e:	82bb      	strh	r3, [r7, #20]
 8005380:	e00a      	b.n	8005398 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005382:	8abb      	ldrh	r3, [r7, #20]
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	4413      	add	r3, r2
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	4619      	mov	r1, r3
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f000 fa7f 	bl	8005890 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005392:	8abb      	ldrh	r3, [r7, #20]
 8005394:	3301      	adds	r3, #1
 8005396:	82bb      	strh	r3, [r7, #20]
 8005398:	8aba      	ldrh	r2, [r7, #20]
 800539a:	893b      	ldrh	r3, [r7, #8]
 800539c:	429a      	cmp	r2, r3
 800539e:	d3f0      	bcc.n	8005382 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80053a0:	f7ff fed0 	bl	8005144 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 fb45 	bl	8005a34 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d002      	beq.n	80053b8 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	75fb      	strb	r3, [r7, #23]
 80053b6:	e001      	b.n	80053bc <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2201      	movs	r2, #1
 80053c0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	715a      	strb	r2, [r3, #5]

    return status;
 80053c8:	7dfb      	ldrb	r3, [r7, #23]
 80053ca:	e000      	b.n	80053ce <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80053cc:	2302      	movs	r3, #2
  }
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b088      	sub	sp, #32
 80053da:	af00      	add	r7, sp, #0
 80053dc:	60f8      	str	r0, [r7, #12]
 80053de:	607a      	str	r2, [r7, #4]
 80053e0:	461a      	mov	r2, r3
 80053e2:	460b      	mov	r3, r1
 80053e4:	817b      	strh	r3, [r7, #10]
 80053e6:	4613      	mov	r3, r2
 80053e8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	799b      	ldrb	r3, [r3, #6]
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d14a      	bne.n	800548e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	795b      	ldrb	r3, [r3, #5]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d101      	bne.n	8005404 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8005400:	2302      	movs	r3, #2
 8005402:	e045      	b.n	8005490 <HAL_SUBGHZ_ReadRegisters+0xba>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2201      	movs	r2, #1
 8005408:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 faee 	bl	80059ec <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005410:	f7ff fea8 	bl	8005164 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8005414:	211d      	movs	r1, #29
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f000 fa3a 	bl	8005890 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800541c:	897b      	ldrh	r3, [r7, #10]
 800541e:	0a1b      	lsrs	r3, r3, #8
 8005420:	b29b      	uxth	r3, r3
 8005422:	b2db      	uxtb	r3, r3
 8005424:	4619      	mov	r1, r3
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 fa32 	bl	8005890 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800542c:	897b      	ldrh	r3, [r7, #10]
 800542e:	b2db      	uxtb	r3, r3
 8005430:	4619      	mov	r1, r3
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f000 fa2c 	bl	8005890 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8005438:	2100      	movs	r1, #0
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f000 fa28 	bl	8005890 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005440:	2300      	movs	r3, #0
 8005442:	82fb      	strh	r3, [r7, #22]
 8005444:	e009      	b.n	800545a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005446:	69b9      	ldr	r1, [r7, #24]
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 fa77 	bl	800593c <SUBGHZSPI_Receive>
      pData++;
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	3301      	adds	r3, #1
 8005452:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005454:	8afb      	ldrh	r3, [r7, #22]
 8005456:	3301      	adds	r3, #1
 8005458:	82fb      	strh	r3, [r7, #22]
 800545a:	8afa      	ldrh	r2, [r7, #22]
 800545c:	893b      	ldrh	r3, [r7, #8]
 800545e:	429a      	cmp	r2, r3
 8005460:	d3f1      	bcc.n	8005446 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005462:	f7ff fe6f 	bl	8005144 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 fae4 	bl	8005a34 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d002      	beq.n	800547a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	77fb      	strb	r3, [r7, #31]
 8005478:	e001      	b.n	800547e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800547a:	2300      	movs	r3, #0
 800547c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2201      	movs	r2, #1
 8005482:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	715a      	strb	r2, [r3, #5]

    return status;
 800548a:	7ffb      	ldrb	r3, [r7, #31]
 800548c:	e000      	b.n	8005490 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800548e:	2302      	movs	r3, #2
  }
}
 8005490:	4618      	mov	r0, r3
 8005492:	3720      	adds	r7, #32
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	607a      	str	r2, [r7, #4]
 80054a2:	461a      	mov	r2, r3
 80054a4:	460b      	mov	r3, r1
 80054a6:	72fb      	strb	r3, [r7, #11]
 80054a8:	4613      	mov	r3, r2
 80054aa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	799b      	ldrb	r3, [r3, #6]
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d14a      	bne.n	800554c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	795b      	ldrb	r3, [r3, #5]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d101      	bne.n	80054c2 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80054be:	2302      	movs	r3, #2
 80054c0:	e045      	b.n	800554e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2201      	movs	r2, #1
 80054c6:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 fa8f 	bl	80059ec <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80054ce:	7afb      	ldrb	r3, [r7, #11]
 80054d0:	2b84      	cmp	r3, #132	; 0x84
 80054d2:	d002      	beq.n	80054da <HAL_SUBGHZ_ExecSetCmd+0x42>
 80054d4:	7afb      	ldrb	r3, [r7, #11]
 80054d6:	2b94      	cmp	r3, #148	; 0x94
 80054d8:	d103      	bne.n	80054e2 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2201      	movs	r2, #1
 80054de:	711a      	strb	r2, [r3, #4]
 80054e0:	e002      	b.n	80054e8 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80054e8:	f7ff fe3c 	bl	8005164 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80054ec:	7afb      	ldrb	r3, [r7, #11]
 80054ee:	4619      	mov	r1, r3
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f000 f9cd 	bl	8005890 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80054f6:	2300      	movs	r3, #0
 80054f8:	82bb      	strh	r3, [r7, #20]
 80054fa:	e00a      	b.n	8005512 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80054fc:	8abb      	ldrh	r3, [r7, #20]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	4413      	add	r3, r2
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	4619      	mov	r1, r3
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 f9c2 	bl	8005890 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800550c:	8abb      	ldrh	r3, [r7, #20]
 800550e:	3301      	adds	r3, #1
 8005510:	82bb      	strh	r3, [r7, #20]
 8005512:	8aba      	ldrh	r2, [r7, #20]
 8005514:	893b      	ldrh	r3, [r7, #8]
 8005516:	429a      	cmp	r2, r3
 8005518:	d3f0      	bcc.n	80054fc <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800551a:	f7ff fe13 	bl	8005144 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800551e:	7afb      	ldrb	r3, [r7, #11]
 8005520:	2b84      	cmp	r3, #132	; 0x84
 8005522:	d002      	beq.n	800552a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f000 fa85 	bl	8005a34 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	75fb      	strb	r3, [r7, #23]
 8005536:	e001      	b.n	800553c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8005538:	2300      	movs	r3, #0
 800553a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2201      	movs	r2, #1
 8005540:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	715a      	strb	r2, [r3, #5]

    return status;
 8005548:	7dfb      	ldrb	r3, [r7, #23]
 800554a:	e000      	b.n	800554e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800554c:	2302      	movs	r3, #2
  }
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b088      	sub	sp, #32
 800555a:	af00      	add	r7, sp, #0
 800555c:	60f8      	str	r0, [r7, #12]
 800555e:	607a      	str	r2, [r7, #4]
 8005560:	461a      	mov	r2, r3
 8005562:	460b      	mov	r3, r1
 8005564:	72fb      	strb	r3, [r7, #11]
 8005566:	4613      	mov	r3, r2
 8005568:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	799b      	ldrb	r3, [r3, #6]
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b01      	cmp	r3, #1
 8005576:	d13d      	bne.n	80055f4 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	795b      	ldrb	r3, [r3, #5]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d101      	bne.n	8005584 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8005580:	2302      	movs	r3, #2
 8005582:	e038      	b.n	80055f6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2201      	movs	r2, #1
 8005588:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f000 fa2e 	bl	80059ec <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005590:	f7ff fde8 	bl	8005164 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005594:	7afb      	ldrb	r3, [r7, #11]
 8005596:	4619      	mov	r1, r3
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 f979 	bl	8005890 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800559e:	2100      	movs	r1, #0
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f000 f975 	bl	8005890 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80055a6:	2300      	movs	r3, #0
 80055a8:	82fb      	strh	r3, [r7, #22]
 80055aa:	e009      	b.n	80055c0 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80055ac:	69b9      	ldr	r1, [r7, #24]
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 f9c4 	bl	800593c <SUBGHZSPI_Receive>
      pData++;
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	3301      	adds	r3, #1
 80055b8:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80055ba:	8afb      	ldrh	r3, [r7, #22]
 80055bc:	3301      	adds	r3, #1
 80055be:	82fb      	strh	r3, [r7, #22]
 80055c0:	8afa      	ldrh	r2, [r7, #22]
 80055c2:	893b      	ldrh	r3, [r7, #8]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d3f1      	bcc.n	80055ac <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80055c8:	f7ff fdbc 	bl	8005144 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 fa31 	bl	8005a34 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	77fb      	strb	r3, [r7, #31]
 80055de:	e001      	b.n	80055e4 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80055e0:	2300      	movs	r3, #0
 80055e2:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2201      	movs	r2, #1
 80055e8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	715a      	strb	r2, [r3, #5]

    return status;
 80055f0:	7ffb      	ldrb	r3, [r7, #31]
 80055f2:	e000      	b.n	80055f6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80055f4:	2302      	movs	r3, #2
  }
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3720      	adds	r7, #32
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b086      	sub	sp, #24
 8005602:	af00      	add	r7, sp, #0
 8005604:	60f8      	str	r0, [r7, #12]
 8005606:	607a      	str	r2, [r7, #4]
 8005608:	461a      	mov	r2, r3
 800560a:	460b      	mov	r3, r1
 800560c:	72fb      	strb	r3, [r7, #11]
 800560e:	4613      	mov	r3, r2
 8005610:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	799b      	ldrb	r3, [r3, #6]
 8005616:	b2db      	uxtb	r3, r3
 8005618:	2b01      	cmp	r3, #1
 800561a:	d13e      	bne.n	800569a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	795b      	ldrb	r3, [r3, #5]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d101      	bne.n	8005628 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8005624:	2302      	movs	r3, #2
 8005626:	e039      	b.n	800569c <HAL_SUBGHZ_WriteBuffer+0x9e>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2201      	movs	r2, #1
 800562c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f000 f9dc 	bl	80059ec <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005634:	f7ff fd96 	bl	8005164 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8005638:	210e      	movs	r1, #14
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 f928 	bl	8005890 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005640:	7afb      	ldrb	r3, [r7, #11]
 8005642:	4619      	mov	r1, r3
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 f923 	bl	8005890 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800564a:	2300      	movs	r3, #0
 800564c:	82bb      	strh	r3, [r7, #20]
 800564e:	e00a      	b.n	8005666 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005650:	8abb      	ldrh	r3, [r7, #20]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	4413      	add	r3, r2
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	4619      	mov	r1, r3
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 f918 	bl	8005890 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005660:	8abb      	ldrh	r3, [r7, #20]
 8005662:	3301      	adds	r3, #1
 8005664:	82bb      	strh	r3, [r7, #20]
 8005666:	8aba      	ldrh	r2, [r7, #20]
 8005668:	893b      	ldrh	r3, [r7, #8]
 800566a:	429a      	cmp	r2, r3
 800566c:	d3f0      	bcc.n	8005650 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800566e:	f7ff fd69 	bl	8005144 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f000 f9de 	bl	8005a34 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	75fb      	strb	r3, [r7, #23]
 8005684:	e001      	b.n	800568a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8005686:	2300      	movs	r3, #0
 8005688:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2201      	movs	r2, #1
 800568e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	715a      	strb	r2, [r3, #5]

    return status;
 8005696:	7dfb      	ldrb	r3, [r7, #23]
 8005698:	e000      	b.n	800569c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800569a:	2302      	movs	r3, #2
  }
}
 800569c:	4618      	mov	r0, r3
 800569e:	3718      	adds	r7, #24
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b088      	sub	sp, #32
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	607a      	str	r2, [r7, #4]
 80056ae:	461a      	mov	r2, r3
 80056b0:	460b      	mov	r3, r1
 80056b2:	72fb      	strb	r3, [r7, #11]
 80056b4:	4613      	mov	r3, r2
 80056b6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	799b      	ldrb	r3, [r3, #6]
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d141      	bne.n	800574a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	795b      	ldrb	r3, [r3, #5]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d101      	bne.n	80056d2 <HAL_SUBGHZ_ReadBuffer+0x2e>
 80056ce:	2302      	movs	r3, #2
 80056d0:	e03c      	b.n	800574c <HAL_SUBGHZ_ReadBuffer+0xa8>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2201      	movs	r2, #1
 80056d6:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f000 f987 	bl	80059ec <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80056de:	f7ff fd41 	bl	8005164 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80056e2:	211e      	movs	r1, #30
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f000 f8d3 	bl	8005890 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80056ea:	7afb      	ldrb	r3, [r7, #11]
 80056ec:	4619      	mov	r1, r3
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 f8ce 	bl	8005890 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80056f4:	2100      	movs	r1, #0
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 f8ca 	bl	8005890 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80056fc:	2300      	movs	r3, #0
 80056fe:	82fb      	strh	r3, [r7, #22]
 8005700:	e009      	b.n	8005716 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005702:	69b9      	ldr	r1, [r7, #24]
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f000 f919 	bl	800593c <SUBGHZSPI_Receive>
      pData++;
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	3301      	adds	r3, #1
 800570e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005710:	8afb      	ldrh	r3, [r7, #22]
 8005712:	3301      	adds	r3, #1
 8005714:	82fb      	strh	r3, [r7, #22]
 8005716:	8afa      	ldrh	r2, [r7, #22]
 8005718:	893b      	ldrh	r3, [r7, #8]
 800571a:	429a      	cmp	r2, r3
 800571c:	d3f1      	bcc.n	8005702 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800571e:	f7ff fd11 	bl	8005144 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 f986 	bl	8005a34 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	77fb      	strb	r3, [r7, #31]
 8005734:	e001      	b.n	800573a <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8005736:	2300      	movs	r3, #0
 8005738:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2201      	movs	r2, #1
 800573e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	715a      	strb	r2, [r3, #5]

    return status;
 8005746:	7ffb      	ldrb	r3, [r7, #31]
 8005748:	e000      	b.n	800574c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800574a:	2302      	movs	r3, #2
  }
}
 800574c:	4618      	mov	r0, r3
 800574e:	3720      	adds	r7, #32
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800575c:	2300      	movs	r3, #0
 800575e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8005760:	f107 020c 	add.w	r2, r7, #12
 8005764:	2302      	movs	r3, #2
 8005766:	2112      	movs	r1, #18
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7ff fef4 	bl	8005556 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800576e:	7b3b      	ldrb	r3, [r7, #12]
 8005770:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8005772:	89fb      	ldrh	r3, [r7, #14]
 8005774:	021b      	lsls	r3, r3, #8
 8005776:	b21a      	sxth	r2, r3
 8005778:	7b7b      	ldrb	r3, [r7, #13]
 800577a:	b21b      	sxth	r3, r3
 800577c:	4313      	orrs	r3, r2
 800577e:	b21b      	sxth	r3, r3
 8005780:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8005782:	f107 020c 	add.w	r2, r7, #12
 8005786:	2302      	movs	r3, #2
 8005788:	2102      	movs	r1, #2
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7ff fe84 	bl	8005498 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8005790:	89fb      	ldrh	r3, [r7, #14]
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	2b00      	cmp	r3, #0
 8005798:	d002      	beq.n	80057a0 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f005 f95c 	bl	800aa58 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80057a0:	89fb      	ldrh	r3, [r7, #14]
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d002      	beq.n	80057b0 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f005 f962 	bl	800aa74 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80057b0:	89fb      	ldrh	r3, [r7, #14]
 80057b2:	f003 0304 	and.w	r3, r3, #4
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d002      	beq.n	80057c0 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f005 f9b2 	bl	800ab24 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80057c0:	89fb      	ldrh	r3, [r7, #14]
 80057c2:	f003 0308 	and.w	r3, r3, #8
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d002      	beq.n	80057d0 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f005 f9b8 	bl	800ab40 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80057d0:	89fb      	ldrh	r3, [r7, #14]
 80057d2:	f003 0310 	and.w	r3, r3, #16
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d002      	beq.n	80057e0 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f005 f9be 	bl	800ab5c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80057e0:	89fb      	ldrh	r3, [r7, #14]
 80057e2:	f003 0320 	and.w	r3, r3, #32
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d002      	beq.n	80057f0 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f005 f98c 	bl	800ab08 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80057f0:	89fb      	ldrh	r3, [r7, #14]
 80057f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d002      	beq.n	8005800 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f005 f948 	bl	800aa90 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8005800:	89fb      	ldrh	r3, [r7, #14]
 8005802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00d      	beq.n	8005826 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800580a:	89fb      	ldrh	r3, [r7, #14]
 800580c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005810:	2b00      	cmp	r3, #0
 8005812:	d004      	beq.n	800581e <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8005814:	2101      	movs	r1, #1
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f005 f948 	bl	800aaac <HAL_SUBGHZ_CADStatusCallback>
 800581c:	e003      	b.n	8005826 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800581e:	2100      	movs	r1, #0
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f005 f943 	bl	800aaac <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8005826:	89fb      	ldrh	r3, [r7, #14]
 8005828:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800582c:	2b00      	cmp	r3, #0
 800582e:	d002      	beq.n	8005836 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f005 f959 	bl	800aae8 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8005836:	89fb      	ldrh	r3, [r7, #14]
 8005838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d002      	beq.n	8005846 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f005 f999 	bl	800ab78 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8005846:	bf00      	nop
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
	...

08005850 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005858:	4b0c      	ldr	r3, [pc, #48]	; (800588c <SUBGHZSPI_Init+0x3c>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a0b      	ldr	r2, [pc, #44]	; (800588c <SUBGHZSPI_Init+0x3c>)
 800585e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005862:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8005864:	4a09      	ldr	r2, [pc, #36]	; (800588c <SUBGHZSPI_Init+0x3c>)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 800586c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800586e:	4b07      	ldr	r3, [pc, #28]	; (800588c <SUBGHZSPI_Init+0x3c>)
 8005870:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8005874:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005876:	4b05      	ldr	r3, [pc, #20]	; (800588c <SUBGHZSPI_Init+0x3c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a04      	ldr	r2, [pc, #16]	; (800588c <SUBGHZSPI_Init+0x3c>)
 800587c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005880:	6013      	str	r3, [r2, #0]
}
 8005882:	bf00      	nop
 8005884:	370c      	adds	r7, #12
 8005886:	46bd      	mov	sp, r7
 8005888:	bc80      	pop	{r7}
 800588a:	4770      	bx	lr
 800588c:	58010000 	.word	0x58010000

08005890 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8005890:	b480      	push	{r7}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	460b      	mov	r3, r1
 800589a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800589c:	2300      	movs	r3, #0
 800589e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80058a0:	4b23      	ldr	r3, [pc, #140]	; (8005930 <SUBGHZSPI_Transmit+0xa0>)
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	4613      	mov	r3, r2
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	1a9b      	subs	r3, r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	0cdb      	lsrs	r3, r3, #19
 80058ae:	2264      	movs	r2, #100	; 0x64
 80058b0:	fb02 f303 	mul.w	r3, r2, r3
 80058b4:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d105      	bne.n	80058c8 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	609a      	str	r2, [r3, #8]
      break;
 80058c6:	e008      	b.n	80058da <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	3b01      	subs	r3, #1
 80058cc:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80058ce:	4b19      	ldr	r3, [pc, #100]	; (8005934 <SUBGHZSPI_Transmit+0xa4>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d1ed      	bne.n	80058b6 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80058da:	4b17      	ldr	r3, [pc, #92]	; (8005938 <SUBGHZSPI_Transmit+0xa8>)
 80058dc:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	78fa      	ldrb	r2, [r7, #3]
 80058e2:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80058e4:	4b12      	ldr	r3, [pc, #72]	; (8005930 <SUBGHZSPI_Transmit+0xa0>)
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	4613      	mov	r3, r2
 80058ea:	00db      	lsls	r3, r3, #3
 80058ec:	1a9b      	subs	r3, r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	0cdb      	lsrs	r3, r3, #19
 80058f2:	2264      	movs	r2, #100	; 0x64
 80058f4:	fb02 f303 	mul.w	r3, r2, r3
 80058f8:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d105      	bne.n	800590c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	609a      	str	r2, [r3, #8]
      break;
 800590a:	e008      	b.n	800591e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3b01      	subs	r3, #1
 8005910:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005912:	4b08      	ldr	r3, [pc, #32]	; (8005934 <SUBGHZSPI_Transmit+0xa4>)
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b01      	cmp	r3, #1
 800591c:	d1ed      	bne.n	80058fa <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800591e:	4b05      	ldr	r3, [pc, #20]	; (8005934 <SUBGHZSPI_Transmit+0xa4>)
 8005920:	68db      	ldr	r3, [r3, #12]

  return status;
 8005922:	7dfb      	ldrb	r3, [r7, #23]
}
 8005924:	4618      	mov	r0, r3
 8005926:	371c      	adds	r7, #28
 8005928:	46bd      	mov	sp, r7
 800592a:	bc80      	pop	{r7}
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	20000008 	.word	0x20000008
 8005934:	58010000 	.word	0x58010000
 8005938:	5801000c 	.word	0x5801000c

0800593c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800593c:	b480      	push	{r7}
 800593e:	b087      	sub	sp, #28
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800594a:	4b25      	ldr	r3, [pc, #148]	; (80059e0 <SUBGHZSPI_Receive+0xa4>)
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	4613      	mov	r3, r2
 8005950:	00db      	lsls	r3, r3, #3
 8005952:	1a9b      	subs	r3, r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	0cdb      	lsrs	r3, r3, #19
 8005958:	2264      	movs	r2, #100	; 0x64
 800595a:	fb02 f303 	mul.w	r3, r2, r3
 800595e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d105      	bne.n	8005972 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	609a      	str	r2, [r3, #8]
      break;
 8005970:	e008      	b.n	8005984 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	3b01      	subs	r3, #1
 8005976:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005978:	4b1a      	ldr	r3, [pc, #104]	; (80059e4 <SUBGHZSPI_Receive+0xa8>)
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f003 0302 	and.w	r3, r3, #2
 8005980:	2b02      	cmp	r3, #2
 8005982:	d1ed      	bne.n	8005960 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8005984:	4b18      	ldr	r3, [pc, #96]	; (80059e8 <SUBGHZSPI_Receive+0xac>)
 8005986:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	22ff      	movs	r2, #255	; 0xff
 800598c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800598e:	4b14      	ldr	r3, [pc, #80]	; (80059e0 <SUBGHZSPI_Receive+0xa4>)
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	4613      	mov	r3, r2
 8005994:	00db      	lsls	r3, r3, #3
 8005996:	1a9b      	subs	r3, r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	0cdb      	lsrs	r3, r3, #19
 800599c:	2264      	movs	r2, #100	; 0x64
 800599e:	fb02 f303 	mul.w	r3, r2, r3
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d105      	bne.n	80059b6 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	609a      	str	r2, [r3, #8]
      break;
 80059b4:	e008      	b.n	80059c8 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	3b01      	subs	r3, #1
 80059ba:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80059bc:	4b09      	ldr	r3, [pc, #36]	; (80059e4 <SUBGHZSPI_Receive+0xa8>)
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d1ed      	bne.n	80059a4 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80059c8:	4b06      	ldr	r3, [pc, #24]	; (80059e4 <SUBGHZSPI_Receive+0xa8>)
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	701a      	strb	r2, [r3, #0]

  return status;
 80059d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	371c      	adds	r7, #28
 80059d8:	46bd      	mov	sp, r7
 80059da:	bc80      	pop	{r7}
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	20000008 	.word	0x20000008
 80059e4:	58010000 	.word	0x58010000
 80059e8:	5801000c 	.word	0x5801000c

080059ec <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	791b      	ldrb	r3, [r3, #4]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d111      	bne.n	8005a20 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80059fc:	4b0c      	ldr	r3, [pc, #48]	; (8005a30 <SUBGHZ_CheckDeviceReady+0x44>)
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	4613      	mov	r3, r2
 8005a02:	005b      	lsls	r3, r3, #1
 8005a04:	4413      	add	r3, r2
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	0c1b      	lsrs	r3, r3, #16
 8005a0a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005a0c:	f7ff fbaa 	bl	8005164 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	3b01      	subs	r3, #1
 8005a14:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1f9      	bne.n	8005a10 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005a1c:	f7ff fb92 	bl	8005144 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 f807 	bl	8005a34 <SUBGHZ_WaitOnBusy>
 8005a26:	4603      	mov	r3, r0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	20000008 	.word	0x20000008

08005a34 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8005a40:	4b12      	ldr	r3, [pc, #72]	; (8005a8c <SUBGHZ_WaitOnBusy+0x58>)
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	4613      	mov	r3, r2
 8005a46:	005b      	lsls	r3, r3, #1
 8005a48:	4413      	add	r3, r2
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	0d1b      	lsrs	r3, r3, #20
 8005a4e:	2264      	movs	r2, #100	; 0x64
 8005a50:	fb02 f303 	mul.w	r3, r2, r3
 8005a54:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8005a56:	f7ff fbb3 	bl	80051c0 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8005a5a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d105      	bne.n	8005a6e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2202      	movs	r2, #2
 8005a6a:	609a      	str	r2, [r3, #8]
      break;
 8005a6c:	e009      	b.n	8005a82 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	3b01      	subs	r3, #1
 8005a72:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8005a74:	f7ff fb92 	bl	800519c <LL_PWR_IsActiveFlag_RFBUSYS>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d0e9      	beq.n	8005a56 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8005a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	20000008 	.word	0x20000008

08005a90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e049      	b.n	8005b36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d106      	bne.n	8005abc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7fc fe00 	bl	80026bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	3304      	adds	r3, #4
 8005acc:	4619      	mov	r1, r3
 8005ace:	4610      	mov	r0, r2
 8005ad0:	f000 f944 	bl	8005d5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
	...

08005b40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d001      	beq.n	8005b58 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e02e      	b.n	8005bb6 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a16      	ldr	r2, [pc, #88]	; (8005bc0 <HAL_TIM_Base_Start+0x80>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d004      	beq.n	8005b74 <HAL_TIM_Base_Start+0x34>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b72:	d115      	bne.n	8005ba0 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689a      	ldr	r2, [r3, #8]
 8005b7a:	4b12      	ldr	r3, [pc, #72]	; (8005bc4 <HAL_TIM_Base_Start+0x84>)
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2b06      	cmp	r3, #6
 8005b84:	d015      	beq.n	8005bb2 <HAL_TIM_Base_Start+0x72>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b8c:	d011      	beq.n	8005bb2 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f042 0201 	orr.w	r2, r2, #1
 8005b9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b9e:	e008      	b.n	8005bb2 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f042 0201 	orr.w	r2, r2, #1
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	e000      	b.n	8005bb4 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bb2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bc80      	pop	{r7}
 8005bbe:	4770      	bx	lr
 8005bc0:	40012c00 	.word	0x40012c00
 8005bc4:	00010007 	.word	0x00010007

08005bc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d101      	bne.n	8005be4 <HAL_TIM_ConfigClockSource+0x1c>
 8005be0:	2302      	movs	r3, #2
 8005be2:	e0b6      	b.n	8005d52 <HAL_TIM_ConfigClockSource+0x18a>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005c02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c20:	d03e      	beq.n	8005ca0 <HAL_TIM_ConfigClockSource+0xd8>
 8005c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c26:	f200 8087 	bhi.w	8005d38 <HAL_TIM_ConfigClockSource+0x170>
 8005c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c2e:	f000 8086 	beq.w	8005d3e <HAL_TIM_ConfigClockSource+0x176>
 8005c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c36:	d87f      	bhi.n	8005d38 <HAL_TIM_ConfigClockSource+0x170>
 8005c38:	2b70      	cmp	r3, #112	; 0x70
 8005c3a:	d01a      	beq.n	8005c72 <HAL_TIM_ConfigClockSource+0xaa>
 8005c3c:	2b70      	cmp	r3, #112	; 0x70
 8005c3e:	d87b      	bhi.n	8005d38 <HAL_TIM_ConfigClockSource+0x170>
 8005c40:	2b60      	cmp	r3, #96	; 0x60
 8005c42:	d050      	beq.n	8005ce6 <HAL_TIM_ConfigClockSource+0x11e>
 8005c44:	2b60      	cmp	r3, #96	; 0x60
 8005c46:	d877      	bhi.n	8005d38 <HAL_TIM_ConfigClockSource+0x170>
 8005c48:	2b50      	cmp	r3, #80	; 0x50
 8005c4a:	d03c      	beq.n	8005cc6 <HAL_TIM_ConfigClockSource+0xfe>
 8005c4c:	2b50      	cmp	r3, #80	; 0x50
 8005c4e:	d873      	bhi.n	8005d38 <HAL_TIM_ConfigClockSource+0x170>
 8005c50:	2b40      	cmp	r3, #64	; 0x40
 8005c52:	d058      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0x13e>
 8005c54:	2b40      	cmp	r3, #64	; 0x40
 8005c56:	d86f      	bhi.n	8005d38 <HAL_TIM_ConfigClockSource+0x170>
 8005c58:	2b30      	cmp	r3, #48	; 0x30
 8005c5a:	d064      	beq.n	8005d26 <HAL_TIM_ConfigClockSource+0x15e>
 8005c5c:	2b30      	cmp	r3, #48	; 0x30
 8005c5e:	d86b      	bhi.n	8005d38 <HAL_TIM_ConfigClockSource+0x170>
 8005c60:	2b20      	cmp	r3, #32
 8005c62:	d060      	beq.n	8005d26 <HAL_TIM_ConfigClockSource+0x15e>
 8005c64:	2b20      	cmp	r3, #32
 8005c66:	d867      	bhi.n	8005d38 <HAL_TIM_ConfigClockSource+0x170>
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d05c      	beq.n	8005d26 <HAL_TIM_ConfigClockSource+0x15e>
 8005c6c:	2b10      	cmp	r3, #16
 8005c6e:	d05a      	beq.n	8005d26 <HAL_TIM_ConfigClockSource+0x15e>
 8005c70:	e062      	b.n	8005d38 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c82:	f000 f946 	bl	8005f12 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	609a      	str	r2, [r3, #8]
      break;
 8005c9e:	e04f      	b.n	8005d40 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cb0:	f000 f92f 	bl	8005f12 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689a      	ldr	r2, [r3, #8]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cc2:	609a      	str	r2, [r3, #8]
      break;
 8005cc4:	e03c      	b.n	8005d40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	f000 f8a4 	bl	8005e20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2150      	movs	r1, #80	; 0x50
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 f8fb 	bl	8005eda <TIM_ITRx_SetConfig>
      break;
 8005ce4:	e02c      	b.n	8005d40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	f000 f8c2 	bl	8005e7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2160      	movs	r1, #96	; 0x60
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 f8eb 	bl	8005eda <TIM_ITRx_SetConfig>
      break;
 8005d04:	e01c      	b.n	8005d40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d12:	461a      	mov	r2, r3
 8005d14:	f000 f884 	bl	8005e20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2140      	movs	r1, #64	; 0x40
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 f8db 	bl	8005eda <TIM_ITRx_SetConfig>
      break;
 8005d24:	e00c      	b.n	8005d40 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4619      	mov	r1, r3
 8005d30:	4610      	mov	r0, r2
 8005d32:	f000 f8d2 	bl	8005eda <TIM_ITRx_SetConfig>
      break;
 8005d36:	e003      	b.n	8005d40 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d3c:	e000      	b.n	8005d40 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005d3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
	...

08005d5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a29      	ldr	r2, [pc, #164]	; (8005e14 <TIM_Base_SetConfig+0xb8>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d003      	beq.n	8005d7c <TIM_Base_SetConfig+0x20>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d7a:	d108      	bne.n	8005d8e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a20      	ldr	r2, [pc, #128]	; (8005e14 <TIM_Base_SetConfig+0xb8>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d00b      	beq.n	8005dae <TIM_Base_SetConfig+0x52>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d9c:	d007      	beq.n	8005dae <TIM_Base_SetConfig+0x52>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a1d      	ldr	r2, [pc, #116]	; (8005e18 <TIM_Base_SetConfig+0xbc>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d003      	beq.n	8005dae <TIM_Base_SetConfig+0x52>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a1c      	ldr	r2, [pc, #112]	; (8005e1c <TIM_Base_SetConfig+0xc0>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d108      	bne.n	8005dc0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005db4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	689a      	ldr	r2, [r3, #8]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a0b      	ldr	r2, [pc, #44]	; (8005e14 <TIM_Base_SetConfig+0xb8>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d007      	beq.n	8005dfc <TIM_Base_SetConfig+0xa0>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a0a      	ldr	r2, [pc, #40]	; (8005e18 <TIM_Base_SetConfig+0xbc>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d003      	beq.n	8005dfc <TIM_Base_SetConfig+0xa0>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a09      	ldr	r2, [pc, #36]	; (8005e1c <TIM_Base_SetConfig+0xc0>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d103      	bne.n	8005e04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	691a      	ldr	r2, [r3, #16]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	615a      	str	r2, [r3, #20]
}
 8005e0a:	bf00      	nop
 8005e0c:	3714      	adds	r7, #20
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bc80      	pop	{r7}
 8005e12:	4770      	bx	lr
 8005e14:	40012c00 	.word	0x40012c00
 8005e18:	40014400 	.word	0x40014400
 8005e1c:	40014800 	.word	0x40014800

08005e20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	f023 0201 	bic.w	r2, r3, #1
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	011b      	lsls	r3, r3, #4
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f023 030a 	bic.w	r3, r3, #10
 8005e5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	621a      	str	r2, [r3, #32]
}
 8005e72:	bf00      	nop
 8005e74:	371c      	adds	r7, #28
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bc80      	pop	{r7}
 8005e7a:	4770      	bx	lr

08005e7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b087      	sub	sp, #28
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	f023 0210 	bic.w	r2, r3, #16
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ea6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	031b      	lsls	r3, r3, #12
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005eb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	011b      	lsls	r3, r3, #4
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	621a      	str	r2, [r3, #32]
}
 8005ed0:	bf00      	nop
 8005ed2:	371c      	adds	r7, #28
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bc80      	pop	{r7}
 8005ed8:	4770      	bx	lr

08005eda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b085      	sub	sp, #20
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
 8005ee2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	f043 0307 	orr.w	r3, r3, #7
 8005f00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	609a      	str	r2, [r3, #8]
}
 8005f08:	bf00      	nop
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bc80      	pop	{r7}
 8005f10:	4770      	bx	lr

08005f12 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b087      	sub	sp, #28
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	60f8      	str	r0, [r7, #12]
 8005f1a:	60b9      	str	r1, [r7, #8]
 8005f1c:	607a      	str	r2, [r7, #4]
 8005f1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f2c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	021a      	lsls	r2, r3, #8
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	431a      	orrs	r2, r3
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	609a      	str	r2, [r3, #8]
}
 8005f46:	bf00      	nop
 8005f48:	371c      	adds	r7, #28
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bc80      	pop	{r7}
 8005f4e:	4770      	bx	lr

08005f50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d101      	bne.n	8005f68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f64:	2302      	movs	r3, #2
 8005f66:	e04a      	b.n	8005ffe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2202      	movs	r2, #2
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a1e      	ldr	r2, [pc, #120]	; (8006008 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d108      	bne.n	8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f98:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005faa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a11      	ldr	r2, [pc, #68]	; (8006008 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d004      	beq.n	8005fd2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd0:	d10c      	bne.n	8005fec <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	bc80      	pop	{r7}
 8006006:	4770      	bx	lr
 8006008:	40012c00 	.word	0x40012c00

0800600c <LL_RCC_GetUSARTClockSource>:
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8006014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006018:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	401a      	ands	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	041b      	lsls	r3, r3, #16
 8006024:	4313      	orrs	r3, r2
}
 8006026:	4618      	mov	r0, r3
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	bc80      	pop	{r7}
 800602e:	4770      	bx	lr

08006030 <LL_RCC_GetLPUARTClockSource>:
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800603c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4013      	ands	r3, r2
}
 8006044:	4618      	mov	r0, r3
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	bc80      	pop	{r7}
 800604c:	4770      	bx	lr

0800604e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b082      	sub	sp, #8
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d101      	bne.n	8006060 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e042      	b.n	80060e6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006066:	2b00      	cmp	r3, #0
 8006068:	d106      	bne.n	8006078 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7fc fcf0 	bl	8002a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2224      	movs	r2, #36	; 0x24
 800607c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 0201 	bic.w	r2, r2, #1
 800608e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 fd0d 	bl	8006ab0 <UART_SetConfig>
 8006096:	4603      	mov	r3, r0
 8006098:	2b01      	cmp	r3, #1
 800609a:	d101      	bne.n	80060a0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e022      	b.n	80060e6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d002      	beq.n	80060ae <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 ff75 	bl	8006f98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f042 0201 	orr.w	r2, r2, #1
 80060dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fffb 	bl	80070da <UART_CheckIdleState>
 80060e4:	4603      	mov	r3, r0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b08a      	sub	sp, #40	; 0x28
 80060f2:	af02      	add	r7, sp, #8
 80060f4:	60f8      	str	r0, [r7, #12]
 80060f6:	60b9      	str	r1, [r7, #8]
 80060f8:	603b      	str	r3, [r7, #0]
 80060fa:	4613      	mov	r3, r2
 80060fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006104:	2b20      	cmp	r3, #32
 8006106:	d173      	bne.n	80061f0 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d002      	beq.n	8006114 <HAL_UART_Transmit+0x26>
 800610e:	88fb      	ldrh	r3, [r7, #6]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e06c      	b.n	80061f2 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2221      	movs	r2, #33	; 0x21
 8006124:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006128:	f7fc fa06 	bl	8002538 <HAL_GetTick>
 800612c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	88fa      	ldrh	r2, [r7, #6]
 8006132:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	88fa      	ldrh	r2, [r7, #6]
 800613a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006146:	d108      	bne.n	800615a <HAL_UART_Transmit+0x6c>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d104      	bne.n	800615a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006150:	2300      	movs	r3, #0
 8006152:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	61bb      	str	r3, [r7, #24]
 8006158:	e003      	b.n	8006162 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800615e:	2300      	movs	r3, #0
 8006160:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006162:	e02c      	b.n	80061be <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	9300      	str	r3, [sp, #0]
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	2200      	movs	r2, #0
 800616c:	2180      	movs	r1, #128	; 0x80
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f001 f801 	bl	8007176 <UART_WaitOnFlagUntilTimeout>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d001      	beq.n	800617e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e039      	b.n	80061f2 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10b      	bne.n	800619c <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	461a      	mov	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006192:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	3302      	adds	r3, #2
 8006198:	61bb      	str	r3, [r7, #24]
 800619a:	e007      	b.n	80061ac <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	781a      	ldrb	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	3301      	adds	r3, #1
 80061aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	3b01      	subs	r3, #1
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1cc      	bne.n	8006164 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2200      	movs	r2, #0
 80061d2:	2140      	movs	r1, #64	; 0x40
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f000 ffce 	bl	8007176 <UART_WaitOnFlagUntilTimeout>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d001      	beq.n	80061e4 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e006      	b.n	80061f2 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2220      	movs	r2, #32
 80061e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80061ec:	2300      	movs	r3, #0
 80061ee:	e000      	b.n	80061f2 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 80061f0:	2302      	movs	r3, #2
  }
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3720      	adds	r7, #32
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b08a      	sub	sp, #40	; 0x28
 80061fe:	af02      	add	r7, sp, #8
 8006200:	60f8      	str	r0, [r7, #12]
 8006202:	60b9      	str	r1, [r7, #8]
 8006204:	603b      	str	r3, [r7, #0]
 8006206:	4613      	mov	r3, r2
 8006208:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006210:	2b20      	cmp	r3, #32
 8006212:	f040 80b1 	bne.w	8006378 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d002      	beq.n	8006222 <HAL_UART_Receive+0x28>
 800621c:	88fb      	ldrh	r3, [r7, #6]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e0a9      	b.n	800637a <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2222      	movs	r2, #34	; 0x22
 8006232:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800623c:	f7fc f97c 	bl	8002538 <HAL_GetTick>
 8006240:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	88fa      	ldrh	r2, [r7, #6]
 8006246:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	88fa      	ldrh	r2, [r7, #6]
 800624e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800625a:	d10e      	bne.n	800627a <HAL_UART_Receive+0x80>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d105      	bne.n	8006270 <HAL_UART_Receive+0x76>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f240 12ff 	movw	r2, #511	; 0x1ff
 800626a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800626e:	e02d      	b.n	80062cc <HAL_UART_Receive+0xd2>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	22ff      	movs	r2, #255	; 0xff
 8006274:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006278:	e028      	b.n	80062cc <HAL_UART_Receive+0xd2>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10d      	bne.n	800629e <HAL_UART_Receive+0xa4>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d104      	bne.n	8006294 <HAL_UART_Receive+0x9a>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	22ff      	movs	r2, #255	; 0xff
 800628e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006292:	e01b      	b.n	80062cc <HAL_UART_Receive+0xd2>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	227f      	movs	r2, #127	; 0x7f
 8006298:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800629c:	e016      	b.n	80062cc <HAL_UART_Receive+0xd2>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062a6:	d10d      	bne.n	80062c4 <HAL_UART_Receive+0xca>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d104      	bne.n	80062ba <HAL_UART_Receive+0xc0>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	227f      	movs	r2, #127	; 0x7f
 80062b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80062b8:	e008      	b.n	80062cc <HAL_UART_Receive+0xd2>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	223f      	movs	r2, #63	; 0x3f
 80062be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80062c2:	e003      	b.n	80062cc <HAL_UART_Receive+0xd2>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80062d2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062dc:	d108      	bne.n	80062f0 <HAL_UART_Receive+0xf6>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d104      	bne.n	80062f0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	61bb      	str	r3, [r7, #24]
 80062ee:	e003      	b.n	80062f8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062f4:	2300      	movs	r3, #0
 80062f6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80062f8:	e032      	b.n	8006360 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	2200      	movs	r2, #0
 8006302:	2120      	movs	r1, #32
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f000 ff36 	bl	8007176 <UART_WaitOnFlagUntilTimeout>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d001      	beq.n	8006314 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e032      	b.n	800637a <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10c      	bne.n	8006334 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	b29a      	uxth	r2, r3
 8006322:	8a7b      	ldrh	r3, [r7, #18]
 8006324:	4013      	ands	r3, r2
 8006326:	b29a      	uxth	r2, r3
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	3302      	adds	r3, #2
 8006330:	61bb      	str	r3, [r7, #24]
 8006332:	e00c      	b.n	800634e <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633a:	b2da      	uxtb	r2, r3
 800633c:	8a7b      	ldrh	r3, [r7, #18]
 800633e:	b2db      	uxtb	r3, r3
 8006340:	4013      	ands	r3, r2
 8006342:	b2da      	uxtb	r2, r3
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	3301      	adds	r3, #1
 800634c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006354:	b29b      	uxth	r3, r3
 8006356:	3b01      	subs	r3, #1
 8006358:	b29a      	uxth	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006366:	b29b      	uxth	r3, r3
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1c6      	bne.n	80062fa <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2220      	movs	r2, #32
 8006370:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8006374:	2300      	movs	r3, #0
 8006376:	e000      	b.n	800637a <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8006378:	2302      	movs	r3, #2
  }
}
 800637a:	4618      	mov	r0, r3
 800637c:	3720      	adds	r7, #32
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
	...

08006384 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b08a      	sub	sp, #40	; 0x28
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	4613      	mov	r3, r2
 8006390:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006398:	2b20      	cmp	r3, #32
 800639a:	d137      	bne.n	800640c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d002      	beq.n	80063a8 <HAL_UART_Receive_DMA+0x24>
 80063a2:	88fb      	ldrh	r3, [r7, #6]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d101      	bne.n	80063ac <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e030      	b.n	800640e <HAL_UART_Receive_DMA+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a18      	ldr	r2, [pc, #96]	; (8006418 <HAL_UART_Receive_DMA+0x94>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d01f      	beq.n	80063fc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d018      	beq.n	80063fc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	e853 3f00 	ldrex	r3, [r3]
 80063d6:	613b      	str	r3, [r7, #16]
   return(result);
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80063de:	627b      	str	r3, [r7, #36]	; 0x24
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	461a      	mov	r2, r3
 80063e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e8:	623b      	str	r3, [r7, #32]
 80063ea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ec:	69f9      	ldr	r1, [r7, #28]
 80063ee:	6a3a      	ldr	r2, [r7, #32]
 80063f0:	e841 2300 	strex	r3, r2, [r1]
 80063f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1e6      	bne.n	80063ca <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80063fc:	88fb      	ldrh	r3, [r7, #6]
 80063fe:	461a      	mov	r2, r3
 8006400:	68b9      	ldr	r1, [r7, #8]
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f000 ff80 	bl	8007308 <UART_Start_Receive_DMA>
 8006408:	4603      	mov	r3, r0
 800640a:	e000      	b.n	800640e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800640c:	2302      	movs	r3, #2
  }
}
 800640e:	4618      	mov	r0, r3
 8006410:	3728      	adds	r7, #40	; 0x28
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	40008000 	.word	0x40008000

0800641c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b0ba      	sub	sp, #232	; 0xe8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	69db      	ldr	r3, [r3, #28]
 800642a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006442:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006446:	f640 030f 	movw	r3, #2063	; 0x80f
 800644a:	4013      	ands	r3, r2
 800644c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006450:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006454:	2b00      	cmp	r3, #0
 8006456:	d11b      	bne.n	8006490 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800645c:	f003 0320 	and.w	r3, r3, #32
 8006460:	2b00      	cmp	r3, #0
 8006462:	d015      	beq.n	8006490 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006468:	f003 0320 	and.w	r3, r3, #32
 800646c:	2b00      	cmp	r3, #0
 800646e:	d105      	bne.n	800647c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d009      	beq.n	8006490 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 82e3 	beq.w	8006a4c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	4798      	blx	r3
      }
      return;
 800648e:	e2dd      	b.n	8006a4c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006490:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 8123 	beq.w	80066e0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800649a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800649e:	4b8d      	ldr	r3, [pc, #564]	; (80066d4 <HAL_UART_IRQHandler+0x2b8>)
 80064a0:	4013      	ands	r3, r2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d106      	bne.n	80064b4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80064a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80064aa:	4b8b      	ldr	r3, [pc, #556]	; (80066d8 <HAL_UART_IRQHandler+0x2bc>)
 80064ac:	4013      	ands	r3, r2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 8116 	beq.w	80066e0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80064b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b8:	f003 0301 	and.w	r3, r3, #1
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d011      	beq.n	80064e4 <HAL_UART_IRQHandler+0xc8>
 80064c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00b      	beq.n	80064e4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2201      	movs	r2, #1
 80064d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064da:	f043 0201 	orr.w	r2, r3, #1
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064e8:	f003 0302 	and.w	r3, r3, #2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d011      	beq.n	8006514 <HAL_UART_IRQHandler+0xf8>
 80064f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064f4:	f003 0301 	and.w	r3, r3, #1
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00b      	beq.n	8006514 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2202      	movs	r2, #2
 8006502:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800650a:	f043 0204 	orr.w	r2, r3, #4
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006518:	f003 0304 	and.w	r3, r3, #4
 800651c:	2b00      	cmp	r3, #0
 800651e:	d011      	beq.n	8006544 <HAL_UART_IRQHandler+0x128>
 8006520:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00b      	beq.n	8006544 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2204      	movs	r2, #4
 8006532:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800653a:	f043 0202 	orr.w	r2, r3, #2
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006548:	f003 0308 	and.w	r3, r3, #8
 800654c:	2b00      	cmp	r3, #0
 800654e:	d017      	beq.n	8006580 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006554:	f003 0320 	and.w	r3, r3, #32
 8006558:	2b00      	cmp	r3, #0
 800655a:	d105      	bne.n	8006568 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800655c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006560:	4b5c      	ldr	r3, [pc, #368]	; (80066d4 <HAL_UART_IRQHandler+0x2b8>)
 8006562:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00b      	beq.n	8006580 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2208      	movs	r2, #8
 800656e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006576:	f043 0208 	orr.w	r2, r3, #8
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006584:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006588:	2b00      	cmp	r3, #0
 800658a:	d012      	beq.n	80065b2 <HAL_UART_IRQHandler+0x196>
 800658c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006590:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00c      	beq.n	80065b2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a8:	f043 0220 	orr.w	r2, r3, #32
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 8249 	beq.w	8006a50 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80065be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c2:	f003 0320 	and.w	r3, r3, #32
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d013      	beq.n	80065f2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80065ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065ce:	f003 0320 	and.w	r3, r3, #32
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d105      	bne.n	80065e2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80065d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d007      	beq.n	80065f2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006606:	2b40      	cmp	r3, #64	; 0x40
 8006608:	d005      	beq.n	8006616 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800660a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800660e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006612:	2b00      	cmp	r3, #0
 8006614:	d054      	beq.n	80066c0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 ff5c 	bl	80074d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006626:	2b40      	cmp	r3, #64	; 0x40
 8006628:	d146      	bne.n	80066b8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	3308      	adds	r3, #8
 8006630:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006634:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006638:	e853 3f00 	ldrex	r3, [r3]
 800663c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006640:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006644:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006648:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	3308      	adds	r3, #8
 8006652:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006656:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800665a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006662:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006666:	e841 2300 	strex	r3, r2, [r1]
 800666a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800666e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1d9      	bne.n	800662a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800667c:	2b00      	cmp	r3, #0
 800667e:	d017      	beq.n	80066b0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006686:	4a15      	ldr	r2, [pc, #84]	; (80066dc <HAL_UART_IRQHandler+0x2c0>)
 8006688:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006690:	4618      	mov	r0, r3
 8006692:	f7fc fe9f 	bl	80033d4 <HAL_DMA_Abort_IT>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d019      	beq.n	80066d0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80066aa:	4610      	mov	r0, r2
 80066ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ae:	e00f      	b.n	80066d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f9e9 	bl	8006a88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b6:	e00b      	b.n	80066d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f9e5 	bl	8006a88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066be:	e007      	b.n	80066d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f9e1 	bl	8006a88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80066ce:	e1bf      	b.n	8006a50 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066d0:	bf00      	nop
    return;
 80066d2:	e1bd      	b.n	8006a50 <HAL_UART_IRQHandler+0x634>
 80066d4:	10000001 	.word	0x10000001
 80066d8:	04000120 	.word	0x04000120
 80066dc:	08007789 	.word	0x08007789

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	f040 8153 	bne.w	8006990 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80066ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ee:	f003 0310 	and.w	r3, r3, #16
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 814c 	beq.w	8006990 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80066f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066fc:	f003 0310 	and.w	r3, r3, #16
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 8145 	beq.w	8006990 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2210      	movs	r2, #16
 800670c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006718:	2b40      	cmp	r3, #64	; 0x40
 800671a:	f040 80bb 	bne.w	8006894 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800672c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006730:	2b00      	cmp	r3, #0
 8006732:	f000 818f 	beq.w	8006a54 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800673c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006740:	429a      	cmp	r2, r3
 8006742:	f080 8187 	bcs.w	8006a54 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800674c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0320 	and.w	r3, r3, #32
 800675e:	2b00      	cmp	r3, #0
 8006760:	f040 8087 	bne.w	8006872 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006770:	e853 3f00 	ldrex	r3, [r3]
 8006774:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006778:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800677c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006780:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	461a      	mov	r2, r3
 800678a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800678e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006792:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006796:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800679a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800679e:	e841 2300 	strex	r3, r2, [r1]
 80067a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80067a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1da      	bne.n	8006764 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	3308      	adds	r3, #8
 80067b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067b8:	e853 3f00 	ldrex	r3, [r3]
 80067bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80067be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067c0:	f023 0301 	bic.w	r3, r3, #1
 80067c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	3308      	adds	r3, #8
 80067ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80067d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80067d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80067da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80067de:	e841 2300 	strex	r3, r2, [r1]
 80067e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80067e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1e1      	bne.n	80067ae <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	3308      	adds	r3, #8
 80067f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067f4:	e853 3f00 	ldrex	r3, [r3]
 80067f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80067fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006800:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	3308      	adds	r3, #8
 800680a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800680e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006810:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006812:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006814:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006816:	e841 2300 	strex	r3, r2, [r1]
 800681a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800681c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1e3      	bne.n	80067ea <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2220      	movs	r2, #32
 8006826:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006838:	e853 3f00 	ldrex	r3, [r3]
 800683c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800683e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006840:	f023 0310 	bic.w	r3, r3, #16
 8006844:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	461a      	mov	r2, r3
 800684e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006852:	65bb      	str	r3, [r7, #88]	; 0x58
 8006854:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006856:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006858:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800685a:	e841 2300 	strex	r3, r2, [r1]
 800685e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1e4      	bne.n	8006830 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800686c:	4618      	mov	r0, r3
 800686e:	f7fc fd53 	bl	8003318 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2202      	movs	r2, #2
 8006876:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006884:	b29b      	uxth	r3, r3
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	b29b      	uxth	r3, r3
 800688a:	4619      	mov	r1, r3
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f904 	bl	8006a9a <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006892:	e0df      	b.n	8006a54 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 80d1 	beq.w	8006a58 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80068b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f000 80cc 	beq.w	8006a58 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c8:	e853 3f00 	ldrex	r3, [r3]
 80068cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	461a      	mov	r2, r3
 80068de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068e2:	647b      	str	r3, [r7, #68]	; 0x44
 80068e4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068ea:	e841 2300 	strex	r3, r2, [r1]
 80068ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1e4      	bne.n	80068c0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	3308      	adds	r3, #8
 80068fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	e853 3f00 	ldrex	r3, [r3]
 8006904:	623b      	str	r3, [r7, #32]
   return(result);
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800690c:	f023 0301 	bic.w	r3, r3, #1
 8006910:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	3308      	adds	r3, #8
 800691a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800691e:	633a      	str	r2, [r7, #48]	; 0x30
 8006920:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006922:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006926:	e841 2300 	strex	r3, r2, [r1]
 800692a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800692c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1e1      	bne.n	80068f6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2220      	movs	r2, #32
 8006936:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	e853 3f00 	ldrex	r3, [r3]
 8006952:	60fb      	str	r3, [r7, #12]
   return(result);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f023 0310 	bic.w	r3, r3, #16
 800695a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	461a      	mov	r2, r3
 8006964:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006968:	61fb      	str	r3, [r7, #28]
 800696a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696c:	69b9      	ldr	r1, [r7, #24]
 800696e:	69fa      	ldr	r2, [r7, #28]
 8006970:	e841 2300 	strex	r3, r2, [r1]
 8006974:	617b      	str	r3, [r7, #20]
   return(result);
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1e4      	bne.n	8006946 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2202      	movs	r2, #2
 8006980:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006982:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006986:	4619      	mov	r1, r3
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f886 	bl	8006a9a <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800698e:	e063      	b.n	8006a58 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006994:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00e      	beq.n	80069ba <HAL_UART_IRQHandler+0x59e>
 800699c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d008      	beq.n	80069ba <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80069b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 ff29 	bl	800780a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069b8:	e051      	b.n	8006a5e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80069ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d014      	beq.n	80069f0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80069c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d105      	bne.n	80069de <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80069d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d008      	beq.n	80069f0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d03a      	beq.n	8006a5c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	4798      	blx	r3
    }
    return;
 80069ee:	e035      	b.n	8006a5c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80069f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d009      	beq.n	8006a10 <HAL_UART_IRQHandler+0x5f4>
 80069fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d003      	beq.n	8006a10 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fed3 	bl	80077b4 <UART_EndTransmit_IT>
    return;
 8006a0e:	e026      	b.n	8006a5e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d009      	beq.n	8006a30 <HAL_UART_IRQHandler+0x614>
 8006a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d003      	beq.n	8006a30 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 ff00 	bl	800782e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a2e:	e016      	b.n	8006a5e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d010      	beq.n	8006a5e <HAL_UART_IRQHandler+0x642>
 8006a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	da0c      	bge.n	8006a5e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 fee9 	bl	800781c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a4a:	e008      	b.n	8006a5e <HAL_UART_IRQHandler+0x642>
      return;
 8006a4c:	bf00      	nop
 8006a4e:	e006      	b.n	8006a5e <HAL_UART_IRQHandler+0x642>
    return;
 8006a50:	bf00      	nop
 8006a52:	e004      	b.n	8006a5e <HAL_UART_IRQHandler+0x642>
      return;
 8006a54:	bf00      	nop
 8006a56:	e002      	b.n	8006a5e <HAL_UART_IRQHandler+0x642>
      return;
 8006a58:	bf00      	nop
 8006a5a:	e000      	b.n	8006a5e <HAL_UART_IRQHandler+0x642>
    return;
 8006a5c:	bf00      	nop
  }
}
 8006a5e:	37e8      	adds	r7, #232	; 0xe8
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bc80      	pop	{r7}
 8006a74:	4770      	bx	lr

08006a76 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b083      	sub	sp, #12
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006a7e:	bf00      	nop
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bc80      	pop	{r7}
 8006a86:	4770      	bx	lr

08006a88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bc80      	pop	{r7}
 8006a98:	4770      	bx	lr

08006a9a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b083      	sub	sp, #12
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006aa6:	bf00      	nop
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bc80      	pop	{r7}
 8006aae:	4770      	bx	lr

08006ab0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ab4:	b08c      	sub	sp, #48	; 0x30
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006aba:	2300      	movs	r3, #0
 8006abc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	689a      	ldr	r2, [r3, #8]
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	431a      	orrs	r2, r3
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	431a      	orrs	r2, r3
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	69db      	ldr	r3, [r3, #28]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	4b94      	ldr	r3, [pc, #592]	; (8006d30 <UART_SetConfig+0x280>)
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	6812      	ldr	r2, [r2, #0]
 8006ae6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ae8:	430b      	orrs	r3, r1
 8006aea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	68da      	ldr	r2, [r3, #12]
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	430a      	orrs	r2, r1
 8006b00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a89      	ldr	r2, [pc, #548]	; (8006d34 <UART_SetConfig+0x284>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d004      	beq.n	8006b1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006b26:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	6812      	ldr	r2, [r2, #0]
 8006b2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b30:	430b      	orrs	r3, r1
 8006b32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3a:	f023 010f 	bic.w	r1, r3, #15
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	430a      	orrs	r2, r1
 8006b48:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a7a      	ldr	r2, [pc, #488]	; (8006d38 <UART_SetConfig+0x288>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d127      	bne.n	8006ba4 <UART_SetConfig+0xf4>
 8006b54:	2003      	movs	r0, #3
 8006b56:	f7ff fa59 	bl	800600c <LL_RCC_GetUSARTClockSource>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8006b60:	2b03      	cmp	r3, #3
 8006b62:	d81b      	bhi.n	8006b9c <UART_SetConfig+0xec>
 8006b64:	a201      	add	r2, pc, #4	; (adr r2, 8006b6c <UART_SetConfig+0xbc>)
 8006b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6a:	bf00      	nop
 8006b6c:	08006b7d 	.word	0x08006b7d
 8006b70:	08006b8d 	.word	0x08006b8d
 8006b74:	08006b85 	.word	0x08006b85
 8006b78:	08006b95 	.word	0x08006b95
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b82:	e080      	b.n	8006c86 <UART_SetConfig+0x1d6>
 8006b84:	2302      	movs	r3, #2
 8006b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b8a:	e07c      	b.n	8006c86 <UART_SetConfig+0x1d6>
 8006b8c:	2304      	movs	r3, #4
 8006b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b92:	e078      	b.n	8006c86 <UART_SetConfig+0x1d6>
 8006b94:	2308      	movs	r3, #8
 8006b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b9a:	e074      	b.n	8006c86 <UART_SetConfig+0x1d6>
 8006b9c:	2310      	movs	r3, #16
 8006b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ba2:	e070      	b.n	8006c86 <UART_SetConfig+0x1d6>
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a64      	ldr	r2, [pc, #400]	; (8006d3c <UART_SetConfig+0x28c>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d138      	bne.n	8006c20 <UART_SetConfig+0x170>
 8006bae:	200c      	movs	r0, #12
 8006bb0:	f7ff fa2c 	bl	800600c <LL_RCC_GetUSARTClockSource>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8006bba:	2b0c      	cmp	r3, #12
 8006bbc:	d82c      	bhi.n	8006c18 <UART_SetConfig+0x168>
 8006bbe:	a201      	add	r2, pc, #4	; (adr r2, 8006bc4 <UART_SetConfig+0x114>)
 8006bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc4:	08006bf9 	.word	0x08006bf9
 8006bc8:	08006c19 	.word	0x08006c19
 8006bcc:	08006c19 	.word	0x08006c19
 8006bd0:	08006c19 	.word	0x08006c19
 8006bd4:	08006c09 	.word	0x08006c09
 8006bd8:	08006c19 	.word	0x08006c19
 8006bdc:	08006c19 	.word	0x08006c19
 8006be0:	08006c19 	.word	0x08006c19
 8006be4:	08006c01 	.word	0x08006c01
 8006be8:	08006c19 	.word	0x08006c19
 8006bec:	08006c19 	.word	0x08006c19
 8006bf0:	08006c19 	.word	0x08006c19
 8006bf4:	08006c11 	.word	0x08006c11
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bfe:	e042      	b.n	8006c86 <UART_SetConfig+0x1d6>
 8006c00:	2302      	movs	r3, #2
 8006c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c06:	e03e      	b.n	8006c86 <UART_SetConfig+0x1d6>
 8006c08:	2304      	movs	r3, #4
 8006c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c0e:	e03a      	b.n	8006c86 <UART_SetConfig+0x1d6>
 8006c10:	2308      	movs	r3, #8
 8006c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c16:	e036      	b.n	8006c86 <UART_SetConfig+0x1d6>
 8006c18:	2310      	movs	r3, #16
 8006c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c1e:	e032      	b.n	8006c86 <UART_SetConfig+0x1d6>
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a43      	ldr	r2, [pc, #268]	; (8006d34 <UART_SetConfig+0x284>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d12a      	bne.n	8006c80 <UART_SetConfig+0x1d0>
 8006c2a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8006c2e:	f7ff f9ff 	bl	8006030 <LL_RCC_GetLPUARTClockSource>
 8006c32:	4603      	mov	r3, r0
 8006c34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c38:	d01a      	beq.n	8006c70 <UART_SetConfig+0x1c0>
 8006c3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c3e:	d81b      	bhi.n	8006c78 <UART_SetConfig+0x1c8>
 8006c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c44:	d00c      	beq.n	8006c60 <UART_SetConfig+0x1b0>
 8006c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c4a:	d815      	bhi.n	8006c78 <UART_SetConfig+0x1c8>
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d003      	beq.n	8006c58 <UART_SetConfig+0x1a8>
 8006c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c54:	d008      	beq.n	8006c68 <UART_SetConfig+0x1b8>
 8006c56:	e00f      	b.n	8006c78 <UART_SetConfig+0x1c8>
 8006c58:	2300      	movs	r3, #0
 8006c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c5e:	e012      	b.n	8006c86 <UART_SetConfig+0x1d6>
 8006c60:	2302      	movs	r3, #2
 8006c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c66:	e00e      	b.n	8006c86 <UART_SetConfig+0x1d6>
 8006c68:	2304      	movs	r3, #4
 8006c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c6e:	e00a      	b.n	8006c86 <UART_SetConfig+0x1d6>
 8006c70:	2308      	movs	r3, #8
 8006c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c76:	e006      	b.n	8006c86 <UART_SetConfig+0x1d6>
 8006c78:	2310      	movs	r3, #16
 8006c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c7e:	e002      	b.n	8006c86 <UART_SetConfig+0x1d6>
 8006c80:	2310      	movs	r3, #16
 8006c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a2a      	ldr	r2, [pc, #168]	; (8006d34 <UART_SetConfig+0x284>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	f040 80a4 	bne.w	8006dda <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006c96:	2b08      	cmp	r3, #8
 8006c98:	d823      	bhi.n	8006ce2 <UART_SetConfig+0x232>
 8006c9a:	a201      	add	r2, pc, #4	; (adr r2, 8006ca0 <UART_SetConfig+0x1f0>)
 8006c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca0:	08006cc5 	.word	0x08006cc5
 8006ca4:	08006ce3 	.word	0x08006ce3
 8006ca8:	08006ccd 	.word	0x08006ccd
 8006cac:	08006ce3 	.word	0x08006ce3
 8006cb0:	08006cd3 	.word	0x08006cd3
 8006cb4:	08006ce3 	.word	0x08006ce3
 8006cb8:	08006ce3 	.word	0x08006ce3
 8006cbc:	08006ce3 	.word	0x08006ce3
 8006cc0:	08006cdb 	.word	0x08006cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cc4:	f7fd ff46 	bl	8004b54 <HAL_RCC_GetPCLK1Freq>
 8006cc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006cca:	e010      	b.n	8006cee <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ccc:	4b1c      	ldr	r3, [pc, #112]	; (8006d40 <UART_SetConfig+0x290>)
 8006cce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006cd0:	e00d      	b.n	8006cee <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cd2:	f7fd fe8b 	bl	80049ec <HAL_RCC_GetSysClockFreq>
 8006cd6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006cd8:	e009      	b.n	8006cee <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ce0:	e005      	b.n	8006cee <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006cec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 8137 	beq.w	8006f64 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfa:	4a12      	ldr	r2, [pc, #72]	; (8006d44 <UART_SetConfig+0x294>)
 8006cfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d00:	461a      	mov	r2, r3
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d08:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	685a      	ldr	r2, [r3, #4]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	4413      	add	r3, r2
 8006d14:	69ba      	ldr	r2, [r7, #24]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d305      	bcc.n	8006d26 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d20:	69ba      	ldr	r2, [r7, #24]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d910      	bls.n	8006d48 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006d2c:	e11a      	b.n	8006f64 <UART_SetConfig+0x4b4>
 8006d2e:	bf00      	nop
 8006d30:	cfff69f3 	.word	0xcfff69f3
 8006d34:	40008000 	.word	0x40008000
 8006d38:	40013800 	.word	0x40013800
 8006d3c:	40004400 	.word	0x40004400
 8006d40:	00f42400 	.word	0x00f42400
 8006d44:	0800c868 	.word	0x0800c868
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	60bb      	str	r3, [r7, #8]
 8006d4e:	60fa      	str	r2, [r7, #12]
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d54:	4a8e      	ldr	r2, [pc, #568]	; (8006f90 <UART_SetConfig+0x4e0>)
 8006d56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	603b      	str	r3, [r7, #0]
 8006d60:	607a      	str	r2, [r7, #4]
 8006d62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d6a:	f7f9 fa59 	bl	8000220 <__aeabi_uldivmod>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	460b      	mov	r3, r1
 8006d72:	4610      	mov	r0, r2
 8006d74:	4619      	mov	r1, r3
 8006d76:	f04f 0200 	mov.w	r2, #0
 8006d7a:	f04f 0300 	mov.w	r3, #0
 8006d7e:	020b      	lsls	r3, r1, #8
 8006d80:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d84:	0202      	lsls	r2, r0, #8
 8006d86:	6979      	ldr	r1, [r7, #20]
 8006d88:	6849      	ldr	r1, [r1, #4]
 8006d8a:	0849      	lsrs	r1, r1, #1
 8006d8c:	2000      	movs	r0, #0
 8006d8e:	460c      	mov	r4, r1
 8006d90:	4605      	mov	r5, r0
 8006d92:	eb12 0804 	adds.w	r8, r2, r4
 8006d96:	eb43 0905 	adc.w	r9, r3, r5
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	469a      	mov	sl, r3
 8006da2:	4693      	mov	fp, r2
 8006da4:	4652      	mov	r2, sl
 8006da6:	465b      	mov	r3, fp
 8006da8:	4640      	mov	r0, r8
 8006daa:	4649      	mov	r1, r9
 8006dac:	f7f9 fa38 	bl	8000220 <__aeabi_uldivmod>
 8006db0:	4602      	mov	r2, r0
 8006db2:	460b      	mov	r3, r1
 8006db4:	4613      	mov	r3, r2
 8006db6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006db8:	6a3b      	ldr	r3, [r7, #32]
 8006dba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dbe:	d308      	bcc.n	8006dd2 <UART_SetConfig+0x322>
 8006dc0:	6a3b      	ldr	r3, [r7, #32]
 8006dc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dc6:	d204      	bcs.n	8006dd2 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6a3a      	ldr	r2, [r7, #32]
 8006dce:	60da      	str	r2, [r3, #12]
 8006dd0:	e0c8      	b.n	8006f64 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006dd8:	e0c4      	b.n	8006f64 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006de2:	d167      	bne.n	8006eb4 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8006de4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006de8:	2b08      	cmp	r3, #8
 8006dea:	d828      	bhi.n	8006e3e <UART_SetConfig+0x38e>
 8006dec:	a201      	add	r2, pc, #4	; (adr r2, 8006df4 <UART_SetConfig+0x344>)
 8006dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df2:	bf00      	nop
 8006df4:	08006e19 	.word	0x08006e19
 8006df8:	08006e21 	.word	0x08006e21
 8006dfc:	08006e29 	.word	0x08006e29
 8006e00:	08006e3f 	.word	0x08006e3f
 8006e04:	08006e2f 	.word	0x08006e2f
 8006e08:	08006e3f 	.word	0x08006e3f
 8006e0c:	08006e3f 	.word	0x08006e3f
 8006e10:	08006e3f 	.word	0x08006e3f
 8006e14:	08006e37 	.word	0x08006e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e18:	f7fd fe9c 	bl	8004b54 <HAL_RCC_GetPCLK1Freq>
 8006e1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e1e:	e014      	b.n	8006e4a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e20:	f7fd feaa 	bl	8004b78 <HAL_RCC_GetPCLK2Freq>
 8006e24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e26:	e010      	b.n	8006e4a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e28:	4b5a      	ldr	r3, [pc, #360]	; (8006f94 <UART_SetConfig+0x4e4>)
 8006e2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e2c:	e00d      	b.n	8006e4a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e2e:	f7fd fddd 	bl	80049ec <HAL_RCC_GetSysClockFreq>
 8006e32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e34:	e009      	b.n	8006e4a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e3c:	e005      	b.n	8006e4a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006e48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f000 8089 	beq.w	8006f64 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e56:	4a4e      	ldr	r2, [pc, #312]	; (8006f90 <UART_SetConfig+0x4e0>)
 8006e58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e60:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e64:	005a      	lsls	r2, r3, #1
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	085b      	lsrs	r3, r3, #1
 8006e6c:	441a      	add	r2, r3
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e78:	6a3b      	ldr	r3, [r7, #32]
 8006e7a:	2b0f      	cmp	r3, #15
 8006e7c:	d916      	bls.n	8006eac <UART_SetConfig+0x3fc>
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e84:	d212      	bcs.n	8006eac <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e86:	6a3b      	ldr	r3, [r7, #32]
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	f023 030f 	bic.w	r3, r3, #15
 8006e8e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e90:	6a3b      	ldr	r3, [r7, #32]
 8006e92:	085b      	lsrs	r3, r3, #1
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	f003 0307 	and.w	r3, r3, #7
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	8bfb      	ldrh	r3, [r7, #30]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	8bfa      	ldrh	r2, [r7, #30]
 8006ea8:	60da      	str	r2, [r3, #12]
 8006eaa:	e05b      	b.n	8006f64 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006eb2:	e057      	b.n	8006f64 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006eb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006eb8:	2b08      	cmp	r3, #8
 8006eba:	d828      	bhi.n	8006f0e <UART_SetConfig+0x45e>
 8006ebc:	a201      	add	r2, pc, #4	; (adr r2, 8006ec4 <UART_SetConfig+0x414>)
 8006ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec2:	bf00      	nop
 8006ec4:	08006ee9 	.word	0x08006ee9
 8006ec8:	08006ef1 	.word	0x08006ef1
 8006ecc:	08006ef9 	.word	0x08006ef9
 8006ed0:	08006f0f 	.word	0x08006f0f
 8006ed4:	08006eff 	.word	0x08006eff
 8006ed8:	08006f0f 	.word	0x08006f0f
 8006edc:	08006f0f 	.word	0x08006f0f
 8006ee0:	08006f0f 	.word	0x08006f0f
 8006ee4:	08006f07 	.word	0x08006f07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ee8:	f7fd fe34 	bl	8004b54 <HAL_RCC_GetPCLK1Freq>
 8006eec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006eee:	e014      	b.n	8006f1a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ef0:	f7fd fe42 	bl	8004b78 <HAL_RCC_GetPCLK2Freq>
 8006ef4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ef6:	e010      	b.n	8006f1a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ef8:	4b26      	ldr	r3, [pc, #152]	; (8006f94 <UART_SetConfig+0x4e4>)
 8006efa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006efc:	e00d      	b.n	8006f1a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006efe:	f7fd fd75 	bl	80049ec <HAL_RCC_GetSysClockFreq>
 8006f02:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f04:	e009      	b.n	8006f1a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f0c:	e005      	b.n	8006f1a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006f18:	bf00      	nop
    }

    if (pclk != 0U)
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d021      	beq.n	8006f64 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f24:	4a1a      	ldr	r2, [pc, #104]	; (8006f90 <UART_SetConfig+0x4e0>)
 8006f26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	085b      	lsrs	r3, r3, #1
 8006f38:	441a      	add	r2, r3
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f42:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	2b0f      	cmp	r3, #15
 8006f48:	d909      	bls.n	8006f5e <UART_SetConfig+0x4ae>
 8006f4a:	6a3b      	ldr	r3, [r7, #32]
 8006f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f50:	d205      	bcs.n	8006f5e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f52:	6a3b      	ldr	r3, [r7, #32]
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	60da      	str	r2, [r3, #12]
 8006f5c:	e002      	b.n	8006f64 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	2200      	movs	r2, #0
 8006f78:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006f80:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3730      	adds	r7, #48	; 0x30
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f8e:	bf00      	nop
 8006f90:	0800c868 	.word	0x0800c868
 8006f94:	00f42400 	.word	0x00f42400

08006f98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa4:	f003 0301 	and.w	r3, r3, #1
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00a      	beq.n	8006fc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	430a      	orrs	r2, r1
 8006fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc6:	f003 0302 	and.w	r3, r3, #2
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00a      	beq.n	8006fe4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	430a      	orrs	r2, r1
 8006fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe8:	f003 0304 	and.w	r3, r3, #4
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00a      	beq.n	8007006 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	430a      	orrs	r2, r1
 8007004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700a:	f003 0308 	and.w	r3, r3, #8
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00a      	beq.n	8007028 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	430a      	orrs	r2, r1
 8007026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702c:	f003 0310 	and.w	r3, r3, #16
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00a      	beq.n	800704a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	430a      	orrs	r2, r1
 8007048:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704e:	f003 0320 	and.w	r3, r3, #32
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00a      	beq.n	800706c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	430a      	orrs	r2, r1
 800706a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007074:	2b00      	cmp	r3, #0
 8007076:	d01a      	beq.n	80070ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	430a      	orrs	r2, r1
 800708c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007092:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007096:	d10a      	bne.n	80070ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	430a      	orrs	r2, r1
 80070ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00a      	beq.n	80070d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	430a      	orrs	r2, r1
 80070ce:	605a      	str	r2, [r3, #4]
  }
}
 80070d0:	bf00      	nop
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bc80      	pop	{r7}
 80070d8:	4770      	bx	lr

080070da <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b086      	sub	sp, #24
 80070de:	af02      	add	r7, sp, #8
 80070e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070ea:	f7fb fa25 	bl	8002538 <HAL_GetTick>
 80070ee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0308 	and.w	r3, r3, #8
 80070fa:	2b08      	cmp	r3, #8
 80070fc:	d10e      	bne.n	800711c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007102:	9300      	str	r3, [sp, #0]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f832 	bl	8007176 <UART_WaitOnFlagUntilTimeout>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d001      	beq.n	800711c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e028      	b.n	800716e <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 0304 	and.w	r3, r3, #4
 8007126:	2b04      	cmp	r3, #4
 8007128:	d10e      	bne.n	8007148 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800712a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f81c 	bl	8007176 <UART_WaitOnFlagUntilTimeout>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d001      	beq.n	8007148 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e012      	b.n	800716e <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2220      	movs	r2, #32
 800714c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2220      	movs	r2, #32
 8007154:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b09c      	sub	sp, #112	; 0x70
 800717a:	af00      	add	r7, sp, #0
 800717c:	60f8      	str	r0, [r7, #12]
 800717e:	60b9      	str	r1, [r7, #8]
 8007180:	603b      	str	r3, [r7, #0]
 8007182:	4613      	mov	r3, r2
 8007184:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007186:	e0a9      	b.n	80072dc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007188:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800718a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800718e:	f000 80a5 	beq.w	80072dc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007192:	f7fb f9d1 	bl	8002538 <HAL_GetTick>
 8007196:	4602      	mov	r2, r0
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800719e:	429a      	cmp	r2, r3
 80071a0:	d302      	bcc.n	80071a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80071a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d140      	bne.n	800722a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071b0:	e853 3f00 	ldrex	r3, [r3]
 80071b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80071b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071bc:	667b      	str	r3, [r7, #100]	; 0x64
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	461a      	mov	r2, r3
 80071c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071c8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80071cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80071ce:	e841 2300 	strex	r3, r2, [r1]
 80071d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80071d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1e6      	bne.n	80071a8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	3308      	adds	r3, #8
 80071e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e4:	e853 3f00 	ldrex	r3, [r3]
 80071e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ec:	f023 0301 	bic.w	r3, r3, #1
 80071f0:	663b      	str	r3, [r7, #96]	; 0x60
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	3308      	adds	r3, #8
 80071f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80071fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80071fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007200:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007202:	e841 2300 	strex	r3, r2, [r1]
 8007206:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1e5      	bne.n	80071da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2220      	movs	r2, #32
 8007212:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2220      	movs	r2, #32
 800721a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e069      	b.n	80072fe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0304 	and.w	r3, r3, #4
 8007234:	2b00      	cmp	r3, #0
 8007236:	d051      	beq.n	80072dc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	69db      	ldr	r3, [r3, #28]
 800723e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007246:	d149      	bne.n	80072dc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007250:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725a:	e853 3f00 	ldrex	r3, [r3]
 800725e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007262:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007266:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	461a      	mov	r2, r3
 800726e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007270:	637b      	str	r3, [r7, #52]	; 0x34
 8007272:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007274:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007278:	e841 2300 	strex	r3, r2, [r1]
 800727c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800727e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007280:	2b00      	cmp	r3, #0
 8007282:	d1e6      	bne.n	8007252 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	3308      	adds	r3, #8
 800728a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	e853 3f00 	ldrex	r3, [r3]
 8007292:	613b      	str	r3, [r7, #16]
   return(result);
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	f023 0301 	bic.w	r3, r3, #1
 800729a:	66bb      	str	r3, [r7, #104]	; 0x68
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	3308      	adds	r3, #8
 80072a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80072a4:	623a      	str	r2, [r7, #32]
 80072a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a8:	69f9      	ldr	r1, [r7, #28]
 80072aa:	6a3a      	ldr	r2, [r7, #32]
 80072ac:	e841 2300 	strex	r3, r2, [r1]
 80072b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1e5      	bne.n	8007284 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2220      	movs	r2, #32
 80072bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2220      	movs	r2, #32
 80072c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2220      	movs	r2, #32
 80072cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e010      	b.n	80072fe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	69da      	ldr	r2, [r3, #28]
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	4013      	ands	r3, r2
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	bf0c      	ite	eq
 80072ec:	2301      	moveq	r3, #1
 80072ee:	2300      	movne	r3, #0
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	461a      	mov	r2, r3
 80072f4:	79fb      	ldrb	r3, [r7, #7]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	f43f af46 	beq.w	8007188 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3770      	adds	r7, #112	; 0x70
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
	...

08007308 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b096      	sub	sp, #88	; 0x58
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	4613      	mov	r3, r2
 8007314:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	88fa      	ldrh	r2, [r7, #6]
 8007320:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2222      	movs	r2, #34	; 0x22
 8007330:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800733a:	2b00      	cmp	r3, #0
 800733c:	d02d      	beq.n	800739a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007344:	4a40      	ldr	r2, [pc, #256]	; (8007448 <UART_Start_Receive_DMA+0x140>)
 8007346:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800734e:	4a3f      	ldr	r2, [pc, #252]	; (800744c <UART_Start_Receive_DMA+0x144>)
 8007350:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007358:	4a3d      	ldr	r2, [pc, #244]	; (8007450 <UART_Start_Receive_DMA+0x148>)
 800735a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007362:	2200      	movs	r2, #0
 8007364:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3324      	adds	r3, #36	; 0x24
 8007372:	4619      	mov	r1, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007378:	461a      	mov	r2, r3
 800737a:	88fb      	ldrh	r3, [r7, #6]
 800737c:	f7fb ff4e 	bl	800321c <HAL_DMA_Start_IT>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d009      	beq.n	800739a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2210      	movs	r2, #16
 800738a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2220      	movs	r2, #32
 8007392:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e051      	b.n	800743e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d018      	beq.n	80073d4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073aa:	e853 3f00 	ldrex	r3, [r3]
 80073ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073b6:	657b      	str	r3, [r7, #84]	; 0x54
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	461a      	mov	r2, r3
 80073be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80073c2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073c8:	e841 2300 	strex	r3, r2, [r1]
 80073cc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80073ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1e6      	bne.n	80073a2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	3308      	adds	r3, #8
 80073da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073de:	e853 3f00 	ldrex	r3, [r3]
 80073e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	f043 0301 	orr.w	r3, r3, #1
 80073ea:	653b      	str	r3, [r7, #80]	; 0x50
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	3308      	adds	r3, #8
 80073f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80073f4:	637a      	str	r2, [r7, #52]	; 0x34
 80073f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073fc:	e841 2300 	strex	r3, r2, [r1]
 8007400:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1e5      	bne.n	80073d4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3308      	adds	r3, #8
 800740e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	e853 3f00 	ldrex	r3, [r3]
 8007416:	613b      	str	r3, [r7, #16]
   return(result);
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800741e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3308      	adds	r3, #8
 8007426:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007428:	623a      	str	r2, [r7, #32]
 800742a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742c:	69f9      	ldr	r1, [r7, #28]
 800742e:	6a3a      	ldr	r2, [r7, #32]
 8007430:	e841 2300 	strex	r3, r2, [r1]
 8007434:	61bb      	str	r3, [r7, #24]
   return(result);
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1e5      	bne.n	8007408 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3758      	adds	r7, #88	; 0x58
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	0800759f 	.word	0x0800759f
 800744c:	080076cb 	.word	0x080076cb
 8007450:	08007709 	.word	0x08007709

08007454 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007454:	b480      	push	{r7}
 8007456:	b08f      	sub	sp, #60	; 0x3c
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007462:	6a3b      	ldr	r3, [r7, #32]
 8007464:	e853 3f00 	ldrex	r3, [r3]
 8007468:	61fb      	str	r3, [r7, #28]
   return(result);
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007470:	637b      	str	r3, [r7, #52]	; 0x34
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	461a      	mov	r2, r3
 8007478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800747a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800747c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007482:	e841 2300 	strex	r3, r2, [r1]
 8007486:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1e6      	bne.n	800745c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	3308      	adds	r3, #8
 8007494:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	e853 3f00 	ldrex	r3, [r3]
 800749c:	60bb      	str	r3, [r7, #8]
   return(result);
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80074a4:	633b      	str	r3, [r7, #48]	; 0x30
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	3308      	adds	r3, #8
 80074ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074ae:	61ba      	str	r2, [r7, #24]
 80074b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b2:	6979      	ldr	r1, [r7, #20]
 80074b4:	69ba      	ldr	r2, [r7, #24]
 80074b6:	e841 2300 	strex	r3, r2, [r1]
 80074ba:	613b      	str	r3, [r7, #16]
   return(result);
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1e5      	bne.n	800748e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2220      	movs	r2, #32
 80074c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80074ca:	bf00      	nop
 80074cc:	373c      	adds	r7, #60	; 0x3c
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bc80      	pop	{r7}
 80074d2:	4770      	bx	lr

080074d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b095      	sub	sp, #84	; 0x54
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e4:	e853 3f00 	ldrex	r3, [r3]
 80074e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80074ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	461a      	mov	r2, r3
 80074f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074fa:	643b      	str	r3, [r7, #64]	; 0x40
 80074fc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007500:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007502:	e841 2300 	strex	r3, r2, [r1]
 8007506:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1e6      	bne.n	80074dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3308      	adds	r3, #8
 8007514:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007516:	6a3b      	ldr	r3, [r7, #32]
 8007518:	e853 3f00 	ldrex	r3, [r3]
 800751c:	61fb      	str	r3, [r7, #28]
   return(result);
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007524:	f023 0301 	bic.w	r3, r3, #1
 8007528:	64bb      	str	r3, [r7, #72]	; 0x48
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3308      	adds	r3, #8
 8007530:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007532:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007534:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007536:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800753a:	e841 2300 	strex	r3, r2, [r1]
 800753e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1e3      	bne.n	800750e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800754a:	2b01      	cmp	r3, #1
 800754c:	d118      	bne.n	8007580 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	e853 3f00 	ldrex	r3, [r3]
 800755a:	60bb      	str	r3, [r7, #8]
   return(result);
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	f023 0310 	bic.w	r3, r3, #16
 8007562:	647b      	str	r3, [r7, #68]	; 0x44
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	461a      	mov	r2, r3
 800756a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800756c:	61bb      	str	r3, [r7, #24]
 800756e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007570:	6979      	ldr	r1, [r7, #20]
 8007572:	69ba      	ldr	r2, [r7, #24]
 8007574:	e841 2300 	strex	r3, r2, [r1]
 8007578:	613b      	str	r3, [r7, #16]
   return(result);
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1e6      	bne.n	800754e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2220      	movs	r2, #32
 8007584:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007594:	bf00      	nop
 8007596:	3754      	adds	r7, #84	; 0x54
 8007598:	46bd      	mov	sp, r7
 800759a:	bc80      	pop	{r7}
 800759c:	4770      	bx	lr

0800759e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b09c      	sub	sp, #112	; 0x70
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075aa:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 0320 	and.w	r3, r3, #32
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d171      	bne.n	800769e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80075ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075bc:	2200      	movs	r2, #0
 80075be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075ca:	e853 3f00 	ldrex	r3, [r3]
 80075ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80075d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80075d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	461a      	mov	r2, r3
 80075de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80075e2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075e8:	e841 2300 	strex	r3, r2, [r1]
 80075ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80075ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1e6      	bne.n	80075c2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	3308      	adds	r3, #8
 80075fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fe:	e853 3f00 	ldrex	r3, [r3]
 8007602:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007606:	f023 0301 	bic.w	r3, r3, #1
 800760a:	667b      	str	r3, [r7, #100]	; 0x64
 800760c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	3308      	adds	r3, #8
 8007612:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007614:	647a      	str	r2, [r7, #68]	; 0x44
 8007616:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007618:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800761a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800761c:	e841 2300 	strex	r3, r2, [r1]
 8007620:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007624:	2b00      	cmp	r3, #0
 8007626:	d1e5      	bne.n	80075f4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	3308      	adds	r3, #8
 800762e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007632:	e853 3f00 	ldrex	r3, [r3]
 8007636:	623b      	str	r3, [r7, #32]
   return(result);
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800763e:	663b      	str	r3, [r7, #96]	; 0x60
 8007640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	3308      	adds	r3, #8
 8007646:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007648:	633a      	str	r2, [r7, #48]	; 0x30
 800764a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800764e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007650:	e841 2300 	strex	r3, r2, [r1]
 8007654:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1e5      	bne.n	8007628 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800765c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800765e:	2220      	movs	r2, #32
 8007660:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007668:	2b01      	cmp	r3, #1
 800766a:	d118      	bne.n	800769e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800766c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	e853 3f00 	ldrex	r3, [r3]
 8007678:	60fb      	str	r3, [r7, #12]
   return(result);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f023 0310 	bic.w	r3, r3, #16
 8007680:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	461a      	mov	r2, r3
 8007688:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800768a:	61fb      	str	r3, [r7, #28]
 800768c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768e:	69b9      	ldr	r1, [r7, #24]
 8007690:	69fa      	ldr	r2, [r7, #28]
 8007692:	e841 2300 	strex	r3, r2, [r1]
 8007696:	617b      	str	r3, [r7, #20]
   return(result);
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1e6      	bne.n	800766c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800769e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076a0:	2200      	movs	r2, #0
 80076a2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d107      	bne.n	80076bc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80076b2:	4619      	mov	r1, r3
 80076b4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80076b6:	f7ff f9f0 	bl	8006a9a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076ba:	e002      	b.n	80076c2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80076bc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80076be:	f7f9 fdfd 	bl	80012bc <HAL_UART_RxCpltCallback>
}
 80076c2:	bf00      	nop
 80076c4:	3770      	adds	r7, #112	; 0x70
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b084      	sub	sp, #16
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2201      	movs	r2, #1
 80076dc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d109      	bne.n	80076fa <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80076ec:	085b      	lsrs	r3, r3, #1
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	4619      	mov	r1, r3
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f7ff f9d1 	bl	8006a9a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076f8:	e002      	b.n	8007700 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f7ff f9bb 	bl	8006a76 <HAL_UART_RxHalfCpltCallback>
}
 8007700:	bf00      	nop
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b086      	sub	sp, #24
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007714:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800771c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007724:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007730:	2b80      	cmp	r3, #128	; 0x80
 8007732:	d109      	bne.n	8007748 <UART_DMAError+0x40>
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	2b21      	cmp	r3, #33	; 0x21
 8007738:	d106      	bne.n	8007748 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	2200      	movs	r2, #0
 800773e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007742:	6978      	ldr	r0, [r7, #20]
 8007744:	f7ff fe86 	bl	8007454 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007752:	2b40      	cmp	r3, #64	; 0x40
 8007754:	d109      	bne.n	800776a <UART_DMAError+0x62>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2b22      	cmp	r3, #34	; 0x22
 800775a:	d106      	bne.n	800776a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	2200      	movs	r2, #0
 8007760:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007764:	6978      	ldr	r0, [r7, #20]
 8007766:	f7ff feb5 	bl	80074d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007770:	f043 0210 	orr.w	r2, r3, #16
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800777a:	6978      	ldr	r0, [r7, #20]
 800777c:	f7ff f984 	bl	8006a88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007780:	bf00      	nop
 8007782:	3718      	adds	r7, #24
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007794:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f7ff f96e 	bl	8006a88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077ac:	bf00      	nop
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b088      	sub	sp, #32
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	e853 3f00 	ldrex	r3, [r3]
 80077c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077d0:	61fb      	str	r3, [r7, #28]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	461a      	mov	r2, r3
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	61bb      	str	r3, [r7, #24]
 80077dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077de:	6979      	ldr	r1, [r7, #20]
 80077e0:	69ba      	ldr	r2, [r7, #24]
 80077e2:	e841 2300 	strex	r3, r2, [r1]
 80077e6:	613b      	str	r3, [r7, #16]
   return(result);
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1e6      	bne.n	80077bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2220      	movs	r2, #32
 80077f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f7ff f931 	bl	8006a64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007802:	bf00      	nop
 8007804:	3720      	adds	r7, #32
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800780a:	b480      	push	{r7}
 800780c:	b083      	sub	sp, #12
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007812:	bf00      	nop
 8007814:	370c      	adds	r7, #12
 8007816:	46bd      	mov	sp, r7
 8007818:	bc80      	pop	{r7}
 800781a:	4770      	bx	lr

0800781c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	bc80      	pop	{r7}
 800782c:	4770      	bx	lr

0800782e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800782e:	b480      	push	{r7}
 8007830:	b083      	sub	sp, #12
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007836:	bf00      	nop
 8007838:	370c      	adds	r7, #12
 800783a:	46bd      	mov	sp, r7
 800783c:	bc80      	pop	{r7}
 800783e:	4770      	bx	lr

08007840 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800784e:	2b01      	cmp	r3, #1
 8007850:	d101      	bne.n	8007856 <HAL_UARTEx_DisableFifoMode+0x16>
 8007852:	2302      	movs	r3, #2
 8007854:	e027      	b.n	80078a6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2224      	movs	r2, #36	; 0x24
 8007862:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f022 0201 	bic.w	r2, r2, #1
 800787c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007884:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2220      	movs	r2, #32
 8007898:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3714      	adds	r7, #20
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bc80      	pop	{r7}
 80078ae:	4770      	bx	lr

080078b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d101      	bne.n	80078c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80078c4:	2302      	movs	r3, #2
 80078c6:	e02d      	b.n	8007924 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2224      	movs	r2, #36	; 0x24
 80078d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f022 0201 	bic.w	r2, r2, #1
 80078ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	683a      	ldr	r2, [r7, #0]
 8007900:	430a      	orrs	r2, r1
 8007902:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 f84f 	bl	80079a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2220      	movs	r2, #32
 8007916:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800793c:	2b01      	cmp	r3, #1
 800793e:	d101      	bne.n	8007944 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007940:	2302      	movs	r3, #2
 8007942:	e02d      	b.n	80079a0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2224      	movs	r2, #36	; 0x24
 8007950:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f022 0201 	bic.w	r2, r2, #1
 800796a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	430a      	orrs	r2, r1
 800797e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 f811 	bl	80079a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2220      	movs	r2, #32
 8007992:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d108      	bne.n	80079ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80079c8:	e031      	b.n	8007a2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80079ca:	2308      	movs	r3, #8
 80079cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80079ce:	2308      	movs	r3, #8
 80079d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	0e5b      	lsrs	r3, r3, #25
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	f003 0307 	and.w	r3, r3, #7
 80079e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	0f5b      	lsrs	r3, r3, #29
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	f003 0307 	and.w	r3, r3, #7
 80079f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079f2:	7bbb      	ldrb	r3, [r7, #14]
 80079f4:	7b3a      	ldrb	r2, [r7, #12]
 80079f6:	4910      	ldr	r1, [pc, #64]	; (8007a38 <UARTEx_SetNbDataToProcess+0x90>)
 80079f8:	5c8a      	ldrb	r2, [r1, r2]
 80079fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80079fe:	7b3a      	ldrb	r2, [r7, #12]
 8007a00:	490e      	ldr	r1, [pc, #56]	; (8007a3c <UARTEx_SetNbDataToProcess+0x94>)
 8007a02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a04:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a10:	7bfb      	ldrb	r3, [r7, #15]
 8007a12:	7b7a      	ldrb	r2, [r7, #13]
 8007a14:	4908      	ldr	r1, [pc, #32]	; (8007a38 <UARTEx_SetNbDataToProcess+0x90>)
 8007a16:	5c8a      	ldrb	r2, [r1, r2]
 8007a18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a1c:	7b7a      	ldrb	r2, [r7, #13]
 8007a1e:	4907      	ldr	r1, [pc, #28]	; (8007a3c <UARTEx_SetNbDataToProcess+0x94>)
 8007a20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a22:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007a2e:	bf00      	nop
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bc80      	pop	{r7}
 8007a36:	4770      	bx	lr
 8007a38:	0800c880 	.word	0x0800c880
 8007a3c:	0800c888 	.word	0x0800c888

08007a40 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af02      	add	r7, sp, #8
 8007a46:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8007a48:	4a24      	ldr	r2, [pc, #144]	; (8007adc <RadioInit+0x9c>)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8007a4e:	4b24      	ldr	r3, [pc, #144]	; (8007ae0 <RadioInit+0xa0>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8007a54:	4b22      	ldr	r3, [pc, #136]	; (8007ae0 <RadioInit+0xa0>)
 8007a56:	2200      	movs	r2, #0
 8007a58:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8007a5a:	4b21      	ldr	r3, [pc, #132]	; (8007ae0 <RadioInit+0xa0>)
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007a60:	4b1f      	ldr	r3, [pc, #124]	; (8007ae0 <RadioInit+0xa0>)
 8007a62:	2200      	movs	r2, #0
 8007a64:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8007a66:	481f      	ldr	r0, [pc, #124]	; (8007ae4 <RadioInit+0xa4>)
 8007a68:	f001 ff88 	bl	800997c <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8007a6c:	4b1c      	ldr	r3, [pc, #112]	; (8007ae0 <RadioInit+0xa0>)
 8007a6e:	2200      	movs	r2, #0
 8007a70:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8007a72:	4b1b      	ldr	r3, [pc, #108]	; (8007ae0 <RadioInit+0xa0>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8007a78:	f002 fa1c 	bl	8009eb4 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	2000      	movs	r0, #0
 8007a80:	f002 fde8 	bl	800a654 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8007a84:	2204      	movs	r2, #4
 8007a86:	2100      	movs	r1, #0
 8007a88:	2001      	movs	r0, #1
 8007a8a:	f002 fba5 	bl	800a1d8 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8007a8e:	2300      	movs	r3, #0
 8007a90:	2200      	movs	r2, #0
 8007a92:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007a96:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007a9a:	f002 fad5 	bl	800a048 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8007a9e:	f000 fe91 	bl	80087c4 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	9300      	str	r3, [sp, #0]
 8007aa6:	4b10      	ldr	r3, [pc, #64]	; (8007ae8 <RadioInit+0xa8>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007aae:	480f      	ldr	r0, [pc, #60]	; (8007aec <RadioInit+0xac>)
 8007ab0:	f003 fb32 	bl	800b118 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	9300      	str	r3, [sp, #0]
 8007ab8:	4b0d      	ldr	r3, [pc, #52]	; (8007af0 <RadioInit+0xb0>)
 8007aba:	2200      	movs	r2, #0
 8007abc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007ac0:	480c      	ldr	r0, [pc, #48]	; (8007af4 <RadioInit+0xb4>)
 8007ac2:	f003 fb29 	bl	800b118 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8007ac6:	4809      	ldr	r0, [pc, #36]	; (8007aec <RadioInit+0xac>)
 8007ac8:	f003 fbca 	bl	800b260 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8007acc:	4809      	ldr	r0, [pc, #36]	; (8007af4 <RadioInit+0xb4>)
 8007ace:	f003 fbc7 	bl	800b260 <UTIL_TIMER_Stop>
}
 8007ad2:	bf00      	nop
 8007ad4:	3708      	adds	r7, #8
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	2000095c 	.word	0x2000095c
 8007ae0:	20000960 	.word	0x20000960
 8007ae4:	08008bbd 	.word	0x08008bbd
 8007ae8:	08008b45 	.word	0x08008b45
 8007aec:	200009bc 	.word	0x200009bc
 8007af0:	08008b59 	.word	0x08008b59
 8007af4:	200009d4 	.word	0x200009d4

08007af8 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8007afc:	f001 ff86 	bl	8009a0c <SUBGRF_GetOperatingMode>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b07      	cmp	r3, #7
 8007b04:	d00a      	beq.n	8007b1c <RadioGetStatus+0x24>
 8007b06:	2b07      	cmp	r3, #7
 8007b08:	dc0a      	bgt.n	8007b20 <RadioGetStatus+0x28>
 8007b0a:	2b04      	cmp	r3, #4
 8007b0c:	d002      	beq.n	8007b14 <RadioGetStatus+0x1c>
 8007b0e:	2b05      	cmp	r3, #5
 8007b10:	d002      	beq.n	8007b18 <RadioGetStatus+0x20>
 8007b12:	e005      	b.n	8007b20 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8007b14:	2302      	movs	r3, #2
 8007b16:	e004      	b.n	8007b22 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e002      	b.n	8007b22 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e000      	b.n	8007b22 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8007b20:	2300      	movs	r3, #0
    }
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	bd80      	pop	{r7, pc}
	...

08007b28 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	4603      	mov	r3, r0
 8007b30:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8007b32:	4a2a      	ldr	r2, [pc, #168]	; (8007bdc <RadioSetModem+0xb4>)
 8007b34:	79fb      	ldrb	r3, [r7, #7]
 8007b36:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8007b38:	79fb      	ldrb	r3, [r7, #7]
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f003 f95d 	bl	800adfa <RFW_SetRadioModem>
    switch( modem )
 8007b40:	79fb      	ldrb	r3, [r7, #7]
 8007b42:	2b05      	cmp	r3, #5
 8007b44:	d80e      	bhi.n	8007b64 <RadioSetModem+0x3c>
 8007b46:	a201      	add	r2, pc, #4	; (adr r2, 8007b4c <RadioSetModem+0x24>)
 8007b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4c:	08007b73 	.word	0x08007b73
 8007b50:	08007b81 	.word	0x08007b81
 8007b54:	08007b65 	.word	0x08007b65
 8007b58:	08007ba7 	.word	0x08007ba7
 8007b5c:	08007bb5 	.word	0x08007bb5
 8007b60:	08007bc3 	.word	0x08007bc3
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8007b64:	2003      	movs	r0, #3
 8007b66:	f002 fb11 	bl	800a18c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007b6a:	4b1c      	ldr	r3, [pc, #112]	; (8007bdc <RadioSetModem+0xb4>)
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	735a      	strb	r2, [r3, #13]
        break;
 8007b70:	e02f      	b.n	8007bd2 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8007b72:	2000      	movs	r0, #0
 8007b74:	f002 fb0a 	bl	800a18c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007b78:	4b18      	ldr	r3, [pc, #96]	; (8007bdc <RadioSetModem+0xb4>)
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	735a      	strb	r2, [r3, #13]
        break;
 8007b7e:	e028      	b.n	8007bd2 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8007b80:	2001      	movs	r0, #1
 8007b82:	f002 fb03 	bl	800a18c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8007b86:	4b15      	ldr	r3, [pc, #84]	; (8007bdc <RadioSetModem+0xb4>)
 8007b88:	7b5a      	ldrb	r2, [r3, #13]
 8007b8a:	4b14      	ldr	r3, [pc, #80]	; (8007bdc <RadioSetModem+0xb4>)
 8007b8c:	7b1b      	ldrb	r3, [r3, #12]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d01e      	beq.n	8007bd0 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8007b92:	4b12      	ldr	r3, [pc, #72]	; (8007bdc <RadioSetModem+0xb4>)
 8007b94:	7b1a      	ldrb	r2, [r3, #12]
 8007b96:	4b11      	ldr	r3, [pc, #68]	; (8007bdc <RadioSetModem+0xb4>)
 8007b98:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8007b9a:	4b10      	ldr	r3, [pc, #64]	; (8007bdc <RadioSetModem+0xb4>)
 8007b9c:	7b5b      	ldrb	r3, [r3, #13]
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f000 ff9a 	bl	8008ad8 <RadioSetPublicNetwork>
        }
        break;
 8007ba4:	e014      	b.n	8007bd0 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8007ba6:	2002      	movs	r0, #2
 8007ba8:	f002 faf0 	bl	800a18c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007bac:	4b0b      	ldr	r3, [pc, #44]	; (8007bdc <RadioSetModem+0xb4>)
 8007bae:	2200      	movs	r2, #0
 8007bb0:	735a      	strb	r2, [r3, #13]
        break;
 8007bb2:	e00e      	b.n	8007bd2 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8007bb4:	2002      	movs	r0, #2
 8007bb6:	f002 fae9 	bl	800a18c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007bba:	4b08      	ldr	r3, [pc, #32]	; (8007bdc <RadioSetModem+0xb4>)
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	735a      	strb	r2, [r3, #13]
        break;
 8007bc0:	e007      	b.n	8007bd2 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8007bc2:	2000      	movs	r0, #0
 8007bc4:	f002 fae2 	bl	800a18c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007bc8:	4b04      	ldr	r3, [pc, #16]	; (8007bdc <RadioSetModem+0xb4>)
 8007bca:	2200      	movs	r2, #0
 8007bcc:	735a      	strb	r2, [r3, #13]
        break;
 8007bce:	e000      	b.n	8007bd2 <RadioSetModem+0xaa>
        break;
 8007bd0:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8007bd2:	bf00      	nop
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	20000960 	.word	0x20000960

08007be0 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f002 fa89 	bl	800a100 <SUBGRF_SetRfFrequency>
}
 8007bee:	bf00      	nop
 8007bf0:	3708      	adds	r7, #8
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b090      	sub	sp, #64	; 0x40
 8007bfa:	af0a      	add	r7, sp, #40	; 0x28
 8007bfc:	60f8      	str	r0, [r7, #12]
 8007bfe:	60b9      	str	r1, [r7, #8]
 8007c00:	603b      	str	r3, [r7, #0]
 8007c02:	4613      	mov	r3, r2
 8007c04:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8007c06:	2301      	movs	r3, #1
 8007c08:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8007c12:	f000 fdea 	bl	80087ea <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8007c16:	2000      	movs	r0, #0
 8007c18:	f7ff ff86 	bl	8007b28 <RadioSetModem>

    RadioSetChannel( freq );
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f7ff ffdf 	bl	8007be0 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8007c22:	2301      	movs	r3, #1
 8007c24:	9309      	str	r3, [sp, #36]	; 0x24
 8007c26:	2300      	movs	r3, #0
 8007c28:	9308      	str	r3, [sp, #32]
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	9307      	str	r3, [sp, #28]
 8007c2e:	2300      	movs	r3, #0
 8007c30:	9306      	str	r3, [sp, #24]
 8007c32:	2300      	movs	r3, #0
 8007c34:	9305      	str	r3, [sp, #20]
 8007c36:	2300      	movs	r3, #0
 8007c38:	9304      	str	r3, [sp, #16]
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	9303      	str	r3, [sp, #12]
 8007c3e:	2300      	movs	r3, #0
 8007c40:	9302      	str	r3, [sp, #8]
 8007c42:	2303      	movs	r3, #3
 8007c44:	9301      	str	r3, [sp, #4]
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007c50:	68b9      	ldr	r1, [r7, #8]
 8007c52:	2000      	movs	r0, #0
 8007c54:	f000 f83c 	bl	8007cd0 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8007c58:	2000      	movs	r0, #0
 8007c5a:	f000 fdcd 	bl	80087f8 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8007c5e:	f000 ff69 	bl	8008b34 <RadioGetWakeupTime>
 8007c62:	4603      	mov	r3, r0
 8007c64:	4618      	mov	r0, r3
 8007c66:	f7fa fc7b 	bl	8002560 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8007c6a:	f003 fb93 	bl	800b394 <UTIL_TIMER_GetCurrentTime>
 8007c6e:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8007c70:	e00d      	b.n	8007c8e <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8007c72:	2000      	movs	r0, #0
 8007c74:	f000 feae 	bl	80089d4 <RadioRssi>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8007c7c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8007c80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	dd02      	ble.n	8007c8e <RadioIsChannelFree+0x98>
        {
            status = false;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	75fb      	strb	r3, [r7, #23]
            break;
 8007c8c:	e006      	b.n	8007c9c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8007c8e:	6938      	ldr	r0, [r7, #16]
 8007c90:	f003 fb92 	bl	800b3b8 <UTIL_TIMER_GetElapsedTime>
 8007c94:	4602      	mov	r2, r0
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d8ea      	bhi.n	8007c72 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8007c9c:	f000 fda5 	bl	80087ea <RadioStandby>

    return status;
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3718      	adds	r7, #24
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b082      	sub	sp, #8
 8007cae:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	2100      	movs	r1, #0
 8007cba:	2000      	movs	r0, #0
 8007cbc:	f002 f9c4 	bl	800a048 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8007cc0:	f001 ff75 	bl	8009bae <SUBGRF_GetRandom>
 8007cc4:	6078      	str	r0, [r7, #4]

    return rnd;
 8007cc6:	687b      	ldr	r3, [r7, #4]
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b08a      	sub	sp, #40	; 0x28
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60b9      	str	r1, [r7, #8]
 8007cd8:	607a      	str	r2, [r7, #4]
 8007cda:	461a      	mov	r2, r3
 8007cdc:	4603      	mov	r3, r0
 8007cde:	73fb      	strb	r3, [r7, #15]
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8007ce4:	4ab9      	ldr	r2, [pc, #740]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007ce6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8007cea:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8007cec:	f003 f843 	bl	800ad76 <RFW_DeInit>
    if( rxContinuous == true )
 8007cf0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d001      	beq.n	8007cfc <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8007cfc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d004      	beq.n	8007d0e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8007d04:	4ab2      	ldr	r2, [pc, #712]	; (8007fd0 <RadioSetRxConfig+0x300>)
 8007d06:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8007d0a:	7013      	strb	r3, [r2, #0]
 8007d0c:	e002      	b.n	8007d14 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8007d0e:	4bb0      	ldr	r3, [pc, #704]	; (8007fd0 <RadioSetRxConfig+0x300>)
 8007d10:	22ff      	movs	r2, #255	; 0xff
 8007d12:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8007d14:	7bfb      	ldrb	r3, [r7, #15]
 8007d16:	2b05      	cmp	r3, #5
 8007d18:	d009      	beq.n	8007d2e <RadioSetRxConfig+0x5e>
 8007d1a:	2b05      	cmp	r3, #5
 8007d1c:	f300 81d7 	bgt.w	80080ce <RadioSetRxConfig+0x3fe>
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f000 80bf 	beq.w	8007ea4 <RadioSetRxConfig+0x1d4>
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	f000 8124 	beq.w	8007f74 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8007d2c:	e1cf      	b.n	80080ce <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8007d2e:	2001      	movs	r0, #1
 8007d30:	f002 f882 	bl	8009e38 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007d34:	4ba5      	ldr	r3, [pc, #660]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007d3c:	4aa3      	ldr	r2, [pc, #652]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8007d42:	4ba2      	ldr	r3, [pc, #648]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007d44:	2209      	movs	r2, #9
 8007d46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8007d4a:	4ba0      	ldr	r3, [pc, #640]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007d4c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007d50:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8007d52:	68b8      	ldr	r0, [r7, #8]
 8007d54:	f002 ff42 	bl	800abdc <SUBGRF_GetFskBandwidthRegValue>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	4b9b      	ldr	r3, [pc, #620]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007d5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007d62:	4b9a      	ldr	r3, [pc, #616]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007d64:	2200      	movs	r2, #0
 8007d66:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007d68:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007d6a:	00db      	lsls	r3, r3, #3
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	4b97      	ldr	r3, [pc, #604]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007d70:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8007d72:	4b96      	ldr	r3, [pc, #600]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007d74:	2200      	movs	r2, #0
 8007d76:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8007d78:	4b94      	ldr	r3, [pc, #592]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007d7a:	2210      	movs	r2, #16
 8007d7c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007d7e:	4b93      	ldr	r3, [pc, #588]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007d80:	2200      	movs	r2, #0
 8007d82:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8007d84:	4b91      	ldr	r3, [pc, #580]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007d86:	2200      	movs	r2, #0
 8007d88:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8007d8a:	4b91      	ldr	r3, [pc, #580]	; (8007fd0 <RadioSetRxConfig+0x300>)
 8007d8c:	781a      	ldrb	r2, [r3, #0]
 8007d8e:	4b8f      	ldr	r3, [pc, #572]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007d90:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007d92:	4b8e      	ldr	r3, [pc, #568]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007d94:	2201      	movs	r2, #1
 8007d96:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8007d98:	4b8c      	ldr	r3, [pc, #560]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8007d9e:	2005      	movs	r0, #5
 8007da0:	f7ff fec2 	bl	8007b28 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007da4:	488b      	ldr	r0, [pc, #556]	; (8007fd4 <RadioSetRxConfig+0x304>)
 8007da6:	f002 fae5 	bl	800a374 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007daa:	488b      	ldr	r0, [pc, #556]	; (8007fd8 <RadioSetRxConfig+0x308>)
 8007dac:	f002 fbb4 	bl	800a518 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007db0:	4a8a      	ldr	r2, [pc, #552]	; (8007fdc <RadioSetRxConfig+0x30c>)
 8007db2:	f107 031c 	add.w	r3, r7, #28
 8007db6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007dba:	e883 0003 	stmia.w	r3, {r0, r1}
 8007dbe:	f107 031c 	add.w	r3, r7, #28
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f001 fe71 	bl	8009aaa <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007dc8:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007dcc:	f001 febc 	bl	8009b48 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8007dd0:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8007dd4:	f000 fe1d 	bl	8008a12 <RadioRead>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8007dde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007de2:	f023 0310 	bic.w	r3, r3, #16
 8007de6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8007dea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007dee:	4619      	mov	r1, r3
 8007df0:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8007df4:	f000 fdfb 	bl	80089ee <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8007df8:	2104      	movs	r1, #4
 8007dfa:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8007dfe:	f000 fdf6 	bl	80089ee <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8007e02:	f640 009b 	movw	r0, #2203	; 0x89b
 8007e06:	f000 fe04 	bl	8008a12 <RadioRead>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8007e10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e14:	f023 031c 	bic.w	r3, r3, #28
 8007e18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8007e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e20:	f043 0308 	orr.w	r3, r3, #8
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	4619      	mov	r1, r3
 8007e28:	f640 009b 	movw	r0, #2203	; 0x89b
 8007e2c:	f000 fddf 	bl	80089ee <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8007e30:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8007e34:	f000 fded 	bl	8008a12 <RadioRead>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8007e3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e42:	f023 0318 	bic.w	r3, r3, #24
 8007e46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8007e4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e4e:	f043 0318 	orr.w	r3, r3, #24
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	4619      	mov	r1, r3
 8007e56:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8007e5a:	f000 fdc8 	bl	80089ee <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8007e5e:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8007e62:	f000 fdd6 	bl	8008a12 <RadioRead>
 8007e66:	4603      	mov	r3, r0
 8007e68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8007e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8007e78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e7c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	4619      	mov	r1, r3
 8007e84:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8007e88:	f000 fdb1 	bl	80089ee <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8007e8c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007e8e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007e92:	fb02 f303 	mul.w	r3, r2, r3
 8007e96:	461a      	mov	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e9e:	4a4b      	ldr	r2, [pc, #300]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007ea0:	6093      	str	r3, [r2, #8]
            break;
 8007ea2:	e115      	b.n	80080d0 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8007ea4:	2000      	movs	r0, #0
 8007ea6:	f001 ffc7 	bl	8009e38 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007eaa:	4b48      	ldr	r3, [pc, #288]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007eb2:	4a46      	ldr	r2, [pc, #280]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8007eb8:	4b44      	ldr	r3, [pc, #272]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007eba:	220b      	movs	r2, #11
 8007ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8007ec0:	68b8      	ldr	r0, [r7, #8]
 8007ec2:	f002 fe8b 	bl	800abdc <SUBGRF_GetFskBandwidthRegValue>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	461a      	mov	r2, r3
 8007eca:	4b40      	ldr	r3, [pc, #256]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007ed0:	4b3e      	ldr	r3, [pc, #248]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007ed6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007ed8:	00db      	lsls	r3, r3, #3
 8007eda:	b29a      	uxth	r2, r3
 8007edc:	4b3b      	ldr	r3, [pc, #236]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007ede:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8007ee0:	4b3a      	ldr	r3, [pc, #232]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007ee2:	2204      	movs	r2, #4
 8007ee4:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8007ee6:	4b39      	ldr	r3, [pc, #228]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007ee8:	2218      	movs	r2, #24
 8007eea:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007eec:	4b37      	ldr	r3, [pc, #220]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007eee:	2200      	movs	r2, #0
 8007ef0:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8007ef2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007ef6:	f083 0301 	eor.w	r3, r3, #1
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	461a      	mov	r2, r3
 8007efe:	4b33      	ldr	r3, [pc, #204]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007f00:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8007f02:	4b33      	ldr	r3, [pc, #204]	; (8007fd0 <RadioSetRxConfig+0x300>)
 8007f04:	781a      	ldrb	r2, [r3, #0]
 8007f06:	4b31      	ldr	r3, [pc, #196]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007f08:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8007f0a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d003      	beq.n	8007f1a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8007f12:	4b2e      	ldr	r3, [pc, #184]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007f14:	22f2      	movs	r2, #242	; 0xf2
 8007f16:	75da      	strb	r2, [r3, #23]
 8007f18:	e002      	b.n	8007f20 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007f1a:	4b2c      	ldr	r3, [pc, #176]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8007f20:	4b2a      	ldr	r3, [pc, #168]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007f22:	2201      	movs	r2, #1
 8007f24:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8007f26:	f000 fc60 	bl	80087ea <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8007f2a:	2000      	movs	r0, #0
 8007f2c:	f7ff fdfc 	bl	8007b28 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007f30:	4828      	ldr	r0, [pc, #160]	; (8007fd4 <RadioSetRxConfig+0x304>)
 8007f32:	f002 fa1f 	bl	800a374 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007f36:	4828      	ldr	r0, [pc, #160]	; (8007fd8 <RadioSetRxConfig+0x308>)
 8007f38:	f002 faee 	bl	800a518 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007f3c:	4a28      	ldr	r2, [pc, #160]	; (8007fe0 <RadioSetRxConfig+0x310>)
 8007f3e:	f107 0314 	add.w	r3, r7, #20
 8007f42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007f46:	e883 0003 	stmia.w	r3, {r0, r1}
 8007f4a:	f107 0314 	add.w	r3, r7, #20
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f001 fdab 	bl	8009aaa <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007f54:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007f58:	f001 fdf6 	bl	8009b48 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8007f5c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007f5e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007f62:	fb02 f303 	mul.w	r3, r2, r3
 8007f66:	461a      	mov	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f6e:	4a17      	ldr	r2, [pc, #92]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007f70:	6093      	str	r3, [r2, #8]
            break;
 8007f72:	e0ad      	b.n	80080d0 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8007f74:	2000      	movs	r0, #0
 8007f76:	f001 ff5f 	bl	8009e38 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007f7a:	4b14      	ldr	r3, [pc, #80]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	b2da      	uxtb	r2, r3
 8007f86:	4b11      	ldr	r3, [pc, #68]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007f88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8007f8c:	4a15      	ldr	r2, [pc, #84]	; (8007fe4 <RadioSetRxConfig+0x314>)
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	4413      	add	r3, r2
 8007f92:	781a      	ldrb	r2, [r3, #0]
 8007f94:	4b0d      	ldr	r3, [pc, #52]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007f96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8007f9a:	4a0c      	ldr	r2, [pc, #48]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007f9c:	7bbb      	ldrb	r3, [r7, #14]
 8007f9e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d105      	bne.n	8007fb4 <RadioSetRxConfig+0x2e4>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b0b      	cmp	r3, #11
 8007fac:	d008      	beq.n	8007fc0 <RadioSetRxConfig+0x2f0>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2b0c      	cmp	r3, #12
 8007fb2:	d005      	beq.n	8007fc0 <RadioSetRxConfig+0x2f0>
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d116      	bne.n	8007fe8 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2b0c      	cmp	r3, #12
 8007fbe:	d113      	bne.n	8007fe8 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8007fc0:	4b02      	ldr	r3, [pc, #8]	; (8007fcc <RadioSetRxConfig+0x2fc>)
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007fc8:	e012      	b.n	8007ff0 <RadioSetRxConfig+0x320>
 8007fca:	bf00      	nop
 8007fcc:	20000960 	.word	0x20000960
 8007fd0:	20000011 	.word	0x20000011
 8007fd4:	20000998 	.word	0x20000998
 8007fd8:	2000096e 	.word	0x2000096e
 8007fdc:	0800c778 	.word	0x0800c778
 8007fe0:	0800c780 	.word	0x0800c780
 8007fe4:	0800c91c 	.word	0x0800c91c
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8007fe8:	4b3b      	ldr	r3, [pc, #236]	; (80080d8 <RadioSetRxConfig+0x408>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007ff0:	4b39      	ldr	r3, [pc, #228]	; (80080d8 <RadioSetRxConfig+0x408>)
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007ff6:	4b38      	ldr	r3, [pc, #224]	; (80080d8 <RadioSetRxConfig+0x408>)
 8007ff8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007ffc:	2b05      	cmp	r3, #5
 8007ffe:	d004      	beq.n	800800a <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8008000:	4b35      	ldr	r3, [pc, #212]	; (80080d8 <RadioSetRxConfig+0x408>)
 8008002:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008006:	2b06      	cmp	r3, #6
 8008008:	d10a      	bne.n	8008020 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 800800a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800800c:	2b0b      	cmp	r3, #11
 800800e:	d803      	bhi.n	8008018 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8008010:	4b31      	ldr	r3, [pc, #196]	; (80080d8 <RadioSetRxConfig+0x408>)
 8008012:	220c      	movs	r2, #12
 8008014:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8008016:	e006      	b.n	8008026 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008018:	4a2f      	ldr	r2, [pc, #188]	; (80080d8 <RadioSetRxConfig+0x408>)
 800801a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800801c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800801e:	e002      	b.n	8008026 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008020:	4a2d      	ldr	r2, [pc, #180]	; (80080d8 <RadioSetRxConfig+0x408>)
 8008022:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008024:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8008026:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800802a:	4b2b      	ldr	r3, [pc, #172]	; (80080d8 <RadioSetRxConfig+0x408>)
 800802c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800802e:	4b2b      	ldr	r3, [pc, #172]	; (80080dc <RadioSetRxConfig+0x40c>)
 8008030:	781a      	ldrb	r2, [r3, #0]
 8008032:	4b29      	ldr	r3, [pc, #164]	; (80080d8 <RadioSetRxConfig+0x408>)
 8008034:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8008036:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800803a:	4b27      	ldr	r3, [pc, #156]	; (80080d8 <RadioSetRxConfig+0x408>)
 800803c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8008040:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8008044:	4b24      	ldr	r3, [pc, #144]	; (80080d8 <RadioSetRxConfig+0x408>)
 8008046:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800804a:	f000 fbce 	bl	80087ea <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800804e:	2001      	movs	r0, #1
 8008050:	f7ff fd6a 	bl	8007b28 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008054:	4822      	ldr	r0, [pc, #136]	; (80080e0 <RadioSetRxConfig+0x410>)
 8008056:	f002 f98d 	bl	800a374 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800805a:	4822      	ldr	r0, [pc, #136]	; (80080e4 <RadioSetRxConfig+0x414>)
 800805c:	f002 fa5c 	bl	800a518 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8008060:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008062:	b2db      	uxtb	r3, r3
 8008064:	4618      	mov	r0, r3
 8008066:	f001 fef6 	bl	8009e56 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 800806a:	f640 00a3 	movw	r0, #2211	; 0x8a3
 800806e:	f002 fbaf 	bl	800a7d0 <SUBGRF_ReadRegister>
 8008072:	4603      	mov	r3, r0
 8008074:	f003 0301 	and.w	r3, r3, #1
 8008078:	b2db      	uxtb	r3, r3
 800807a:	4619      	mov	r1, r3
 800807c:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8008080:	f002 fb92 	bl	800a7a8 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8008084:	4b14      	ldr	r3, [pc, #80]	; (80080d8 <RadioSetRxConfig+0x408>)
 8008086:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800808a:	2b01      	cmp	r3, #1
 800808c:	d10d      	bne.n	80080aa <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800808e:	f240 7036 	movw	r0, #1846	; 0x736
 8008092:	f002 fb9d 	bl	800a7d0 <SUBGRF_ReadRegister>
 8008096:	4603      	mov	r3, r0
 8008098:	f023 0304 	bic.w	r3, r3, #4
 800809c:	b2db      	uxtb	r3, r3
 800809e:	4619      	mov	r1, r3
 80080a0:	f240 7036 	movw	r0, #1846	; 0x736
 80080a4:	f002 fb80 	bl	800a7a8 <SUBGRF_WriteRegister>
 80080a8:	e00c      	b.n	80080c4 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80080aa:	f240 7036 	movw	r0, #1846	; 0x736
 80080ae:	f002 fb8f 	bl	800a7d0 <SUBGRF_ReadRegister>
 80080b2:	4603      	mov	r3, r0
 80080b4:	f043 0304 	orr.w	r3, r3, #4
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	4619      	mov	r1, r3
 80080bc:	f240 7036 	movw	r0, #1846	; 0x736
 80080c0:	f002 fb72 	bl	800a7a8 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80080c4:	4b04      	ldr	r3, [pc, #16]	; (80080d8 <RadioSetRxConfig+0x408>)
 80080c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080ca:	609a      	str	r2, [r3, #8]
            break;
 80080cc:	e000      	b.n	80080d0 <RadioSetRxConfig+0x400>
            break;
 80080ce:	bf00      	nop
    }
}
 80080d0:	bf00      	nop
 80080d2:	3728      	adds	r7, #40	; 0x28
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	20000960 	.word	0x20000960
 80080dc:	20000011 	.word	0x20000011
 80080e0:	20000998 	.word	0x20000998
 80080e4:	2000096e 	.word	0x2000096e

080080e8 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b086      	sub	sp, #24
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60ba      	str	r2, [r7, #8]
 80080f0:	607b      	str	r3, [r7, #4]
 80080f2:	4603      	mov	r3, r0
 80080f4:	73fb      	strb	r3, [r7, #15]
 80080f6:	460b      	mov	r3, r1
 80080f8:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 80080fa:	f002 fe3c 	bl	800ad76 <RFW_DeInit>
    switch( modem )
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
 8008100:	2b04      	cmp	r3, #4
 8008102:	f000 80c7 	beq.w	8008294 <RadioSetTxConfig+0x1ac>
 8008106:	2b04      	cmp	r3, #4
 8008108:	f300 80d6 	bgt.w	80082b8 <RadioSetTxConfig+0x1d0>
 800810c:	2b00      	cmp	r3, #0
 800810e:	d002      	beq.n	8008116 <RadioSetTxConfig+0x2e>
 8008110:	2b01      	cmp	r3, #1
 8008112:	d059      	beq.n	80081c8 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8008114:	e0d0      	b.n	80082b8 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008116:	4b77      	ldr	r3, [pc, #476]	; (80082f4 <RadioSetTxConfig+0x20c>)
 8008118:	2200      	movs	r2, #0
 800811a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800811e:	4a75      	ldr	r2, [pc, #468]	; (80082f4 <RadioSetTxConfig+0x20c>)
 8008120:	6a3b      	ldr	r3, [r7, #32]
 8008122:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8008124:	4b73      	ldr	r3, [pc, #460]	; (80082f4 <RadioSetTxConfig+0x20c>)
 8008126:	220b      	movs	r2, #11
 8008128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f002 fd55 	bl	800abdc <SUBGRF_GetFskBandwidthRegValue>
 8008132:	4603      	mov	r3, r0
 8008134:	461a      	mov	r2, r3
 8008136:	4b6f      	ldr	r3, [pc, #444]	; (80082f4 <RadioSetTxConfig+0x20c>)
 8008138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800813c:	4a6d      	ldr	r2, [pc, #436]	; (80082f4 <RadioSetTxConfig+0x20c>)
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008142:	4b6c      	ldr	r3, [pc, #432]	; (80082f4 <RadioSetTxConfig+0x20c>)
 8008144:	2200      	movs	r2, #0
 8008146:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8008148:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800814a:	00db      	lsls	r3, r3, #3
 800814c:	b29a      	uxth	r2, r3
 800814e:	4b69      	ldr	r3, [pc, #420]	; (80082f4 <RadioSetTxConfig+0x20c>)
 8008150:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8008152:	4b68      	ldr	r3, [pc, #416]	; (80082f4 <RadioSetTxConfig+0x20c>)
 8008154:	2204      	movs	r2, #4
 8008156:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8008158:	4b66      	ldr	r3, [pc, #408]	; (80082f4 <RadioSetTxConfig+0x20c>)
 800815a:	2218      	movs	r2, #24
 800815c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800815e:	4b65      	ldr	r3, [pc, #404]	; (80082f4 <RadioSetTxConfig+0x20c>)
 8008160:	2200      	movs	r2, #0
 8008162:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8008164:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008168:	f083 0301 	eor.w	r3, r3, #1
 800816c:	b2db      	uxtb	r3, r3
 800816e:	461a      	mov	r2, r3
 8008170:	4b60      	ldr	r3, [pc, #384]	; (80082f4 <RadioSetTxConfig+0x20c>)
 8008172:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8008174:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008178:	2b00      	cmp	r3, #0
 800817a:	d003      	beq.n	8008184 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800817c:	4b5d      	ldr	r3, [pc, #372]	; (80082f4 <RadioSetTxConfig+0x20c>)
 800817e:	22f2      	movs	r2, #242	; 0xf2
 8008180:	75da      	strb	r2, [r3, #23]
 8008182:	e002      	b.n	800818a <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8008184:	4b5b      	ldr	r3, [pc, #364]	; (80082f4 <RadioSetTxConfig+0x20c>)
 8008186:	2201      	movs	r2, #1
 8008188:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800818a:	4b5a      	ldr	r3, [pc, #360]	; (80082f4 <RadioSetTxConfig+0x20c>)
 800818c:	2201      	movs	r2, #1
 800818e:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8008190:	f000 fb2b 	bl	80087ea <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8008194:	2000      	movs	r0, #0
 8008196:	f7ff fcc7 	bl	8007b28 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800819a:	4857      	ldr	r0, [pc, #348]	; (80082f8 <RadioSetTxConfig+0x210>)
 800819c:	f002 f8ea 	bl	800a374 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80081a0:	4856      	ldr	r0, [pc, #344]	; (80082fc <RadioSetTxConfig+0x214>)
 80081a2:	f002 f9b9 	bl	800a518 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80081a6:	4a56      	ldr	r2, [pc, #344]	; (8008300 <RadioSetTxConfig+0x218>)
 80081a8:	f107 0310 	add.w	r3, r7, #16
 80081ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80081b0:	e883 0003 	stmia.w	r3, {r0, r1}
 80081b4:	f107 0310 	add.w	r3, r7, #16
 80081b8:	4618      	mov	r0, r3
 80081ba:	f001 fc76 	bl	8009aaa <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80081be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80081c2:	f001 fcc1 	bl	8009b48 <SUBGRF_SetWhiteningSeed>
            break;
 80081c6:	e078      	b.n	80082ba <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80081c8:	4b4a      	ldr	r3, [pc, #296]	; (80082f4 <RadioSetTxConfig+0x20c>)
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80081d0:	6a3b      	ldr	r3, [r7, #32]
 80081d2:	b2da      	uxtb	r2, r3
 80081d4:	4b47      	ldr	r3, [pc, #284]	; (80082f4 <RadioSetTxConfig+0x20c>)
 80081d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80081da:	4a4a      	ldr	r2, [pc, #296]	; (8008304 <RadioSetTxConfig+0x21c>)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4413      	add	r3, r2
 80081e0:	781a      	ldrb	r2, [r3, #0]
 80081e2:	4b44      	ldr	r3, [pc, #272]	; (80082f4 <RadioSetTxConfig+0x20c>)
 80081e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80081e8:	4a42      	ldr	r2, [pc, #264]	; (80082f4 <RadioSetTxConfig+0x20c>)
 80081ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80081ee:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d105      	bne.n	8008204 <RadioSetTxConfig+0x11c>
 80081f8:	6a3b      	ldr	r3, [r7, #32]
 80081fa:	2b0b      	cmp	r3, #11
 80081fc:	d008      	beq.n	8008210 <RadioSetTxConfig+0x128>
 80081fe:	6a3b      	ldr	r3, [r7, #32]
 8008200:	2b0c      	cmp	r3, #12
 8008202:	d005      	beq.n	8008210 <RadioSetTxConfig+0x128>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2b01      	cmp	r3, #1
 8008208:	d107      	bne.n	800821a <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800820a:	6a3b      	ldr	r3, [r7, #32]
 800820c:	2b0c      	cmp	r3, #12
 800820e:	d104      	bne.n	800821a <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8008210:	4b38      	ldr	r3, [pc, #224]	; (80082f4 <RadioSetTxConfig+0x20c>)
 8008212:	2201      	movs	r2, #1
 8008214:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8008218:	e003      	b.n	8008222 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800821a:	4b36      	ldr	r3, [pc, #216]	; (80082f4 <RadioSetTxConfig+0x20c>)
 800821c:	2200      	movs	r2, #0
 800821e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008222:	4b34      	ldr	r3, [pc, #208]	; (80082f4 <RadioSetTxConfig+0x20c>)
 8008224:	2201      	movs	r2, #1
 8008226:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008228:	4b32      	ldr	r3, [pc, #200]	; (80082f4 <RadioSetTxConfig+0x20c>)
 800822a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800822e:	2b05      	cmp	r3, #5
 8008230:	d004      	beq.n	800823c <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8008232:	4b30      	ldr	r3, [pc, #192]	; (80082f4 <RadioSetTxConfig+0x20c>)
 8008234:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008238:	2b06      	cmp	r3, #6
 800823a:	d10a      	bne.n	8008252 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 800823c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800823e:	2b0b      	cmp	r3, #11
 8008240:	d803      	bhi.n	800824a <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8008242:	4b2c      	ldr	r3, [pc, #176]	; (80082f4 <RadioSetTxConfig+0x20c>)
 8008244:	220c      	movs	r2, #12
 8008246:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8008248:	e006      	b.n	8008258 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800824a:	4a2a      	ldr	r2, [pc, #168]	; (80082f4 <RadioSetTxConfig+0x20c>)
 800824c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800824e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8008250:	e002      	b.n	8008258 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008252:	4a28      	ldr	r2, [pc, #160]	; (80082f4 <RadioSetTxConfig+0x20c>)
 8008254:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008256:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8008258:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800825c:	4b25      	ldr	r3, [pc, #148]	; (80082f4 <RadioSetTxConfig+0x20c>)
 800825e:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8008260:	4b29      	ldr	r3, [pc, #164]	; (8008308 <RadioSetTxConfig+0x220>)
 8008262:	781a      	ldrb	r2, [r3, #0]
 8008264:	4b23      	ldr	r3, [pc, #140]	; (80082f4 <RadioSetTxConfig+0x20c>)
 8008266:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8008268:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800826c:	4b21      	ldr	r3, [pc, #132]	; (80082f4 <RadioSetTxConfig+0x20c>)
 800826e:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8008272:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8008276:	4b1f      	ldr	r3, [pc, #124]	; (80082f4 <RadioSetTxConfig+0x20c>)
 8008278:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800827c:	f000 fab5 	bl	80087ea <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8008280:	2001      	movs	r0, #1
 8008282:	f7ff fc51 	bl	8007b28 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008286:	481c      	ldr	r0, [pc, #112]	; (80082f8 <RadioSetTxConfig+0x210>)
 8008288:	f002 f874 	bl	800a374 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800828c:	481b      	ldr	r0, [pc, #108]	; (80082fc <RadioSetTxConfig+0x214>)
 800828e:	f002 f943 	bl	800a518 <SUBGRF_SetPacketParams>
            break;
 8008292:	e012      	b.n	80082ba <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8008294:	2004      	movs	r0, #4
 8008296:	f7ff fc47 	bl	8007b28 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800829a:	4b16      	ldr	r3, [pc, #88]	; (80082f4 <RadioSetTxConfig+0x20c>)
 800829c:	2202      	movs	r2, #2
 800829e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80082a2:	4a14      	ldr	r2, [pc, #80]	; (80082f4 <RadioSetTxConfig+0x20c>)
 80082a4:	6a3b      	ldr	r3, [r7, #32]
 80082a6:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80082a8:	4b12      	ldr	r3, [pc, #72]	; (80082f4 <RadioSetTxConfig+0x20c>)
 80082aa:	2216      	movs	r2, #22
 80082ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80082b0:	4811      	ldr	r0, [pc, #68]	; (80082f8 <RadioSetTxConfig+0x210>)
 80082b2:	f002 f85f 	bl	800a374 <SUBGRF_SetModulationParams>
            break;
 80082b6:	e000      	b.n	80082ba <RadioSetTxConfig+0x1d2>
            break;
 80082b8:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80082ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082be:	4618      	mov	r0, r3
 80082c0:	f002 fb8e 	bl	800a9e0 <SUBGRF_SetRfTxPower>
 80082c4:	4603      	mov	r3, r0
 80082c6:	461a      	mov	r2, r3
 80082c8:	4b0a      	ldr	r3, [pc, #40]	; (80082f4 <RadioSetTxConfig+0x20c>)
 80082ca:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80082ce:	210e      	movs	r1, #14
 80082d0:	f640 101f 	movw	r0, #2335	; 0x91f
 80082d4:	f002 fa68 	bl	800a7a8 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80082d8:	4b06      	ldr	r3, [pc, #24]	; (80082f4 <RadioSetTxConfig+0x20c>)
 80082da:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80082de:	4618      	mov	r0, r3
 80082e0:	f002 fd5d 	bl	800ad9e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80082e4:	4a03      	ldr	r2, [pc, #12]	; (80082f4 <RadioSetTxConfig+0x20c>)
 80082e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082e8:	6053      	str	r3, [r2, #4]
}
 80082ea:	bf00      	nop
 80082ec:	3718      	adds	r7, #24
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	20000960 	.word	0x20000960
 80082f8:	20000998 	.word	0x20000998
 80082fc:	2000096e 	.word	0x2000096e
 8008300:	0800c780 	.word	0x0800c780
 8008304:	0800c91c 	.word	0x0800c91c
 8008308:	20000011 	.word	0x20000011

0800830c <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
    return true;
 8008314:	2301      	movs	r3, #1
}
 8008316:	4618      	mov	r0, r3
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	bc80      	pop	{r7}
 800831e:	4770      	bx	lr

08008320 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	4603      	mov	r3, r0
 8008328:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 800832a:	2300      	movs	r3, #0
 800832c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800832e:	79fb      	ldrb	r3, [r7, #7]
 8008330:	2b0a      	cmp	r3, #10
 8008332:	d83e      	bhi.n	80083b2 <RadioGetLoRaBandwidthInHz+0x92>
 8008334:	a201      	add	r2, pc, #4	; (adr r2, 800833c <RadioGetLoRaBandwidthInHz+0x1c>)
 8008336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833a:	bf00      	nop
 800833c:	08008369 	.word	0x08008369
 8008340:	08008379 	.word	0x08008379
 8008344:	08008389 	.word	0x08008389
 8008348:	08008399 	.word	0x08008399
 800834c:	080083a1 	.word	0x080083a1
 8008350:	080083a7 	.word	0x080083a7
 8008354:	080083ad 	.word	0x080083ad
 8008358:	080083b3 	.word	0x080083b3
 800835c:	08008371 	.word	0x08008371
 8008360:	08008381 	.word	0x08008381
 8008364:	08008391 	.word	0x08008391
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8008368:	f641 6384 	movw	r3, #7812	; 0x1e84
 800836c:	60fb      	str	r3, [r7, #12]
        break;
 800836e:	e020      	b.n	80083b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8008370:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8008374:	60fb      	str	r3, [r7, #12]
        break;
 8008376:	e01c      	b.n	80083b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8008378:	f643 5309 	movw	r3, #15625	; 0x3d09
 800837c:	60fb      	str	r3, [r7, #12]
        break;
 800837e:	e018      	b.n	80083b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8008380:	f245 1361 	movw	r3, #20833	; 0x5161
 8008384:	60fb      	str	r3, [r7, #12]
        break;
 8008386:	e014      	b.n	80083b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8008388:	f647 2312 	movw	r3, #31250	; 0x7a12
 800838c:	60fb      	str	r3, [r7, #12]
        break;
 800838e:	e010      	b.n	80083b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8008390:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8008394:	60fb      	str	r3, [r7, #12]
        break;
 8008396:	e00c      	b.n	80083b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8008398:	f24f 4324 	movw	r3, #62500	; 0xf424
 800839c:	60fb      	str	r3, [r7, #12]
        break;
 800839e:	e008      	b.n	80083b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80083a0:	4b07      	ldr	r3, [pc, #28]	; (80083c0 <RadioGetLoRaBandwidthInHz+0xa0>)
 80083a2:	60fb      	str	r3, [r7, #12]
        break;
 80083a4:	e005      	b.n	80083b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80083a6:	4b07      	ldr	r3, [pc, #28]	; (80083c4 <RadioGetLoRaBandwidthInHz+0xa4>)
 80083a8:	60fb      	str	r3, [r7, #12]
        break;
 80083aa:	e002      	b.n	80083b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80083ac:	4b06      	ldr	r3, [pc, #24]	; (80083c8 <RadioGetLoRaBandwidthInHz+0xa8>)
 80083ae:	60fb      	str	r3, [r7, #12]
        break;
 80083b0:	bf00      	nop
    }

    return bandwidthInHz;
 80083b2:	68fb      	ldr	r3, [r7, #12]
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3714      	adds	r7, #20
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bc80      	pop	{r7}
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	0001e848 	.word	0x0001e848
 80083c4:	0003d090 	.word	0x0003d090
 80083c8:	0007a120 	.word	0x0007a120

080083cc <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	4608      	mov	r0, r1
 80083d6:	4611      	mov	r1, r2
 80083d8:	461a      	mov	r2, r3
 80083da:	4603      	mov	r3, r0
 80083dc:	70fb      	strb	r3, [r7, #3]
 80083de:	460b      	mov	r3, r1
 80083e0:	803b      	strh	r3, [r7, #0]
 80083e2:	4613      	mov	r3, r2
 80083e4:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 80083e6:	883b      	ldrh	r3, [r7, #0]
 80083e8:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80083ea:	78ba      	ldrb	r2, [r7, #2]
 80083ec:	f082 0201 	eor.w	r2, r2, #1
 80083f0:	b2d2      	uxtb	r2, r2
 80083f2:	2a00      	cmp	r2, #0
 80083f4:	d001      	beq.n	80083fa <RadioGetGfskTimeOnAirNumerator+0x2e>
 80083f6:	2208      	movs	r2, #8
 80083f8:	e000      	b.n	80083fc <RadioGetGfskTimeOnAirNumerator+0x30>
 80083fa:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80083fc:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80083fe:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8008402:	7c3b      	ldrb	r3, [r7, #16]
 8008404:	7d39      	ldrb	r1, [r7, #20]
 8008406:	2900      	cmp	r1, #0
 8008408:	d001      	beq.n	800840e <RadioGetGfskTimeOnAirNumerator+0x42>
 800840a:	2102      	movs	r1, #2
 800840c:	e000      	b.n	8008410 <RadioGetGfskTimeOnAirNumerator+0x44>
 800840e:	2100      	movs	r1, #0
 8008410:	440b      	add	r3, r1
 8008412:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008414:	4413      	add	r3, r2
}
 8008416:	4618      	mov	r0, r3
 8008418:	370c      	adds	r7, #12
 800841a:	46bd      	mov	sp, r7
 800841c:	bc80      	pop	{r7}
 800841e:	4770      	bx	lr

08008420 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8008420:	b480      	push	{r7}
 8008422:	b08b      	sub	sp, #44	; 0x2c
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	4611      	mov	r1, r2
 800842c:	461a      	mov	r2, r3
 800842e:	460b      	mov	r3, r1
 8008430:	71fb      	strb	r3, [r7, #7]
 8008432:	4613      	mov	r3, r2
 8008434:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8008436:	79fb      	ldrb	r3, [r7, #7]
 8008438:	3304      	adds	r3, #4
 800843a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 800843c:	2300      	movs	r3, #0
 800843e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	2b05      	cmp	r3, #5
 8008446:	d002      	beq.n	800844e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	2b06      	cmp	r3, #6
 800844c:	d104      	bne.n	8008458 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 800844e:	88bb      	ldrh	r3, [r7, #4]
 8008450:	2b0b      	cmp	r3, #11
 8008452:	d801      	bhi.n	8008458 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8008454:	230c      	movs	r3, #12
 8008456:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d105      	bne.n	800846a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	2b0b      	cmp	r3, #11
 8008462:	d008      	beq.n	8008476 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2b0c      	cmp	r3, #12
 8008468:	d005      	beq.n	8008476 <RadioGetLoRaTimeOnAirNumerator+0x56>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d105      	bne.n	800847c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	2b0c      	cmp	r3, #12
 8008474:	d102      	bne.n	800847c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8008476:	2301      	movs	r3, #1
 8008478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800847c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008480:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8008482:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008486:	2a00      	cmp	r2, #0
 8008488:	d001      	beq.n	800848e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 800848a:	2210      	movs	r2, #16
 800848c:	e000      	b.n	8008490 <RadioGetLoRaTimeOnAirNumerator+0x70>
 800848e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008490:	4413      	add	r3, r2
 8008492:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8008498:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 800849a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800849e:	2a00      	cmp	r2, #0
 80084a0:	d001      	beq.n	80084a6 <RadioGetLoRaTimeOnAirNumerator+0x86>
 80084a2:	2200      	movs	r2, #0
 80084a4:	e000      	b.n	80084a8 <RadioGetLoRaTimeOnAirNumerator+0x88>
 80084a6:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80084a8:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80084aa:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	2b06      	cmp	r3, #6
 80084b0:	d803      	bhi.n	80084ba <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	623b      	str	r3, [r7, #32]
 80084b8:	e00e      	b.n	80084d8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	3308      	adds	r3, #8
 80084be:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80084c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d004      	beq.n	80084d2 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	3b02      	subs	r3, #2
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	623b      	str	r3, [r7, #32]
 80084d0:	e002      	b.n	80084d8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	da01      	bge.n	80084e2 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80084de:	2300      	movs	r3, #0
 80084e0:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80084e2:	69fa      	ldr	r2, [r7, #28]
 80084e4:	6a3b      	ldr	r3, [r7, #32]
 80084e6:	4413      	add	r3, r2
 80084e8:	1e5a      	subs	r2, r3, #1
 80084ea:	6a3b      	ldr	r3, [r7, #32]
 80084ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80084f0:	697a      	ldr	r2, [r7, #20]
 80084f2:	fb03 f202 	mul.w	r2, r3, r2
 80084f6:	88bb      	ldrh	r3, [r7, #4]
 80084f8:	4413      	add	r3, r2
    int32_t intermediate =
 80084fa:	330c      	adds	r3, #12
 80084fc:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	2b06      	cmp	r3, #6
 8008502:	d802      	bhi.n	800850a <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	3302      	adds	r3, #2
 8008508:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	1c5a      	adds	r2, r3, #1
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	3b02      	subs	r3, #2
 8008514:	fa02 f303 	lsl.w	r3, r2, r3
}
 8008518:	4618      	mov	r0, r3
 800851a:	372c      	adds	r7, #44	; 0x2c
 800851c:	46bd      	mov	sp, r7
 800851e:	bc80      	pop	{r7}
 8008520:	4770      	bx	lr
	...

08008524 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b08a      	sub	sp, #40	; 0x28
 8008528:	af04      	add	r7, sp, #16
 800852a:	60b9      	str	r1, [r7, #8]
 800852c:	607a      	str	r2, [r7, #4]
 800852e:	461a      	mov	r2, r3
 8008530:	4603      	mov	r3, r0
 8008532:	73fb      	strb	r3, [r7, #15]
 8008534:	4613      	mov	r3, r2
 8008536:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8008538:	2300      	movs	r3, #0
 800853a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 800853c:	2301      	movs	r3, #1
 800853e:	613b      	str	r3, [r7, #16]

    switch( modem )
 8008540:	7bfb      	ldrb	r3, [r7, #15]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d002      	beq.n	800854c <RadioTimeOnAir+0x28>
 8008546:	2b01      	cmp	r3, #1
 8008548:	d017      	beq.n	800857a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 800854a:	e035      	b.n	80085b8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800854c:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8008550:	8c3a      	ldrh	r2, [r7, #32]
 8008552:	7bb9      	ldrb	r1, [r7, #14]
 8008554:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008558:	9301      	str	r3, [sp, #4]
 800855a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800855e:	9300      	str	r3, [sp, #0]
 8008560:	4603      	mov	r3, r0
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f7ff ff32 	bl	80083cc <RadioGetGfskTimeOnAirNumerator>
 8008568:	4603      	mov	r3, r0
 800856a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800856e:	fb02 f303 	mul.w	r3, r2, r3
 8008572:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	613b      	str	r3, [r7, #16]
        break;
 8008578:	e01e      	b.n	80085b8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800857a:	8c39      	ldrh	r1, [r7, #32]
 800857c:	7bba      	ldrb	r2, [r7, #14]
 800857e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008582:	9302      	str	r3, [sp, #8]
 8008584:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008588:	9301      	str	r3, [sp, #4]
 800858a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	460b      	mov	r3, r1
 8008592:	6879      	ldr	r1, [r7, #4]
 8008594:	68b8      	ldr	r0, [r7, #8]
 8008596:	f7ff ff43 	bl	8008420 <RadioGetLoRaTimeOnAirNumerator>
 800859a:	4603      	mov	r3, r0
 800859c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80085a0:	fb02 f303 	mul.w	r3, r2, r3
 80085a4:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80085a6:	4a0a      	ldr	r2, [pc, #40]	; (80085d0 <RadioTimeOnAir+0xac>)
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	4413      	add	r3, r2
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7ff feb6 	bl	8008320 <RadioGetLoRaBandwidthInHz>
 80085b4:	6138      	str	r0, [r7, #16]
        break;
 80085b6:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 80085b8:	697a      	ldr	r2, [r7, #20]
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	4413      	add	r3, r2
 80085be:	1e5a      	subs	r2, r3, #1
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3718      	adds	r7, #24
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	0800c91c 	.word	0x0800c91c

080085d4 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	460b      	mov	r3, r1
 80085de:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80085e0:	2300      	movs	r3, #0
 80085e2:	2200      	movs	r2, #0
 80085e4:	f240 2101 	movw	r1, #513	; 0x201
 80085e8:	f240 2001 	movw	r0, #513	; 0x201
 80085ec:	f001 fd2c 	bl	800a048 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80085f0:	4b70      	ldr	r3, [pc, #448]	; (80087b4 <RadioSend+0x1e0>)
 80085f2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80085f6:	2101      	movs	r1, #1
 80085f8:	4618      	mov	r0, r3
 80085fa:	f002 f9c9 	bl	800a990 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80085fe:	4b6d      	ldr	r3, [pc, #436]	; (80087b4 <RadioSend+0x1e0>)
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d112      	bne.n	800862c <RadioSend+0x58>
 8008606:	4b6b      	ldr	r3, [pc, #428]	; (80087b4 <RadioSend+0x1e0>)
 8008608:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800860c:	2b06      	cmp	r3, #6
 800860e:	d10d      	bne.n	800862c <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8008610:	f640 0089 	movw	r0, #2185	; 0x889
 8008614:	f002 f8dc 	bl	800a7d0 <SUBGRF_ReadRegister>
 8008618:	4603      	mov	r3, r0
 800861a:	f023 0304 	bic.w	r3, r3, #4
 800861e:	b2db      	uxtb	r3, r3
 8008620:	4619      	mov	r1, r3
 8008622:	f640 0089 	movw	r0, #2185	; 0x889
 8008626:	f002 f8bf 	bl	800a7a8 <SUBGRF_WriteRegister>
 800862a:	e00c      	b.n	8008646 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800862c:	f640 0089 	movw	r0, #2185	; 0x889
 8008630:	f002 f8ce 	bl	800a7d0 <SUBGRF_ReadRegister>
 8008634:	4603      	mov	r3, r0
 8008636:	f043 0304 	orr.w	r3, r3, #4
 800863a:	b2db      	uxtb	r3, r3
 800863c:	4619      	mov	r1, r3
 800863e:	f640 0089 	movw	r0, #2185	; 0x889
 8008642:	f002 f8b1 	bl	800a7a8 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8008646:	4b5b      	ldr	r3, [pc, #364]	; (80087b4 <RadioSend+0x1e0>)
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	2b04      	cmp	r3, #4
 800864c:	f200 80a2 	bhi.w	8008794 <RadioSend+0x1c0>
 8008650:	a201      	add	r2, pc, #4	; (adr r2, 8008658 <RadioSend+0x84>)
 8008652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008656:	bf00      	nop
 8008658:	08008687 	.word	0x08008687
 800865c:	0800866d 	.word	0x0800866d
 8008660:	08008687 	.word	0x08008687
 8008664:	080086dd 	.word	0x080086dd
 8008668:	080086fd 	.word	0x080086fd
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800866c:	4a51      	ldr	r2, [pc, #324]	; (80087b4 <RadioSend+0x1e0>)
 800866e:	78fb      	ldrb	r3, [r7, #3]
 8008670:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008672:	4851      	ldr	r0, [pc, #324]	; (80087b8 <RadioSend+0x1e4>)
 8008674:	f001 ff50 	bl	800a518 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8008678:	78fb      	ldrb	r3, [r7, #3]
 800867a:	2200      	movs	r2, #0
 800867c:	4619      	mov	r1, r3
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f001 fa00 	bl	8009a84 <SUBGRF_SendPayload>
            break;
 8008684:	e087      	b.n	8008796 <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8008686:	f002 fb7c 	bl	800ad82 <RFW_Is_Init>
 800868a:	4603      	mov	r3, r0
 800868c:	2b01      	cmp	r3, #1
 800868e:	d118      	bne.n	80086c2 <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8008690:	f107 020d 	add.w	r2, r7, #13
 8008694:	78fb      	ldrb	r3, [r7, #3]
 8008696:	4619      	mov	r1, r3
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f002 fb8a 	bl	800adb2 <RFW_TransmitInit>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10c      	bne.n	80086be <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80086a4:	7b7a      	ldrb	r2, [r7, #13]
 80086a6:	4b43      	ldr	r3, [pc, #268]	; (80087b4 <RadioSend+0x1e0>)
 80086a8:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80086aa:	4843      	ldr	r0, [pc, #268]	; (80087b8 <RadioSend+0x1e4>)
 80086ac:	f001 ff34 	bl	800a518 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 80086b0:	7b7b      	ldrb	r3, [r7, #13]
 80086b2:	2200      	movs	r2, #0
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f001 f9e4 	bl	8009a84 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80086bc:	e06b      	b.n	8008796 <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 80086be:	2303      	movs	r3, #3
 80086c0:	e073      	b.n	80087aa <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80086c2:	4a3c      	ldr	r2, [pc, #240]	; (80087b4 <RadioSend+0x1e0>)
 80086c4:	78fb      	ldrb	r3, [r7, #3]
 80086c6:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80086c8:	483b      	ldr	r0, [pc, #236]	; (80087b8 <RadioSend+0x1e4>)
 80086ca:	f001 ff25 	bl	800a518 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 80086ce:	78fb      	ldrb	r3, [r7, #3]
 80086d0:	2200      	movs	r2, #0
 80086d2:	4619      	mov	r1, r3
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f001 f9d5 	bl	8009a84 <SUBGRF_SendPayload>
            break;
 80086da:	e05c      	b.n	8008796 <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80086dc:	4b35      	ldr	r3, [pc, #212]	; (80087b4 <RadioSend+0x1e0>)
 80086de:	2202      	movs	r2, #2
 80086e0:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80086e2:	4a34      	ldr	r2, [pc, #208]	; (80087b4 <RadioSend+0x1e0>)
 80086e4:	78fb      	ldrb	r3, [r7, #3]
 80086e6:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80086e8:	4833      	ldr	r0, [pc, #204]	; (80087b8 <RadioSend+0x1e4>)
 80086ea:	f001 ff15 	bl	800a518 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80086ee:	78fb      	ldrb	r3, [r7, #3]
 80086f0:	2200      	movs	r2, #0
 80086f2:	4619      	mov	r1, r3
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f001 f9c5 	bl	8009a84 <SUBGRF_SendPayload>
            break;
 80086fa:	e04c      	b.n	8008796 <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 80086fc:	78fb      	ldrb	r3, [r7, #3]
 80086fe:	461a      	mov	r2, r3
 8008700:	6879      	ldr	r1, [r7, #4]
 8008702:	482e      	ldr	r0, [pc, #184]	; (80087bc <RadioSend+0x1e8>)
 8008704:	f000 fc98 	bl	8009038 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8008708:	4b2a      	ldr	r3, [pc, #168]	; (80087b4 <RadioSend+0x1e0>)
 800870a:	2202      	movs	r2, #2
 800870c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 800870e:	78fb      	ldrb	r3, [r7, #3]
 8008710:	3301      	adds	r3, #1
 8008712:	b2da      	uxtb	r2, r3
 8008714:	4b27      	ldr	r3, [pc, #156]	; (80087b4 <RadioSend+0x1e0>)
 8008716:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008718:	4827      	ldr	r0, [pc, #156]	; (80087b8 <RadioSend+0x1e4>)
 800871a:	f001 fefd 	bl	800a518 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 800871e:	2100      	movs	r1, #0
 8008720:	20f1      	movs	r0, #241	; 0xf1
 8008722:	f000 f964 	bl	80089ee <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8008726:	2100      	movs	r1, #0
 8008728:	20f0      	movs	r0, #240	; 0xf0
 800872a:	f000 f960 	bl	80089ee <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 800872e:	4b21      	ldr	r3, [pc, #132]	; (80087b4 <RadioSend+0x1e0>)
 8008730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008732:	2b64      	cmp	r3, #100	; 0x64
 8008734:	d108      	bne.n	8008748 <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8008736:	2170      	movs	r1, #112	; 0x70
 8008738:	20f3      	movs	r0, #243	; 0xf3
 800873a:	f000 f958 	bl	80089ee <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 800873e:	211d      	movs	r1, #29
 8008740:	20f2      	movs	r0, #242	; 0xf2
 8008742:	f000 f954 	bl	80089ee <RadioWrite>
 8008746:	e007      	b.n	8008758 <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8008748:	21e1      	movs	r1, #225	; 0xe1
 800874a:	20f3      	movs	r0, #243	; 0xf3
 800874c:	f000 f94f 	bl	80089ee <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8008750:	2104      	movs	r1, #4
 8008752:	20f2      	movs	r0, #242	; 0xf2
 8008754:	f000 f94b 	bl	80089ee <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8008758:	78fb      	ldrb	r3, [r7, #3]
 800875a:	b29b      	uxth	r3, r3
 800875c:	00db      	lsls	r3, r3, #3
 800875e:	b29b      	uxth	r3, r3
 8008760:	3302      	adds	r3, #2
 8008762:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8008764:	89fb      	ldrh	r3, [r7, #14]
 8008766:	0a1b      	lsrs	r3, r3, #8
 8008768:	b29b      	uxth	r3, r3
 800876a:	b2db      	uxtb	r3, r3
 800876c:	4619      	mov	r1, r3
 800876e:	20f4      	movs	r0, #244	; 0xf4
 8008770:	f000 f93d 	bl	80089ee <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8008774:	89fb      	ldrh	r3, [r7, #14]
 8008776:	b2db      	uxtb	r3, r3
 8008778:	4619      	mov	r1, r3
 800877a:	20f5      	movs	r0, #245	; 0xf5
 800877c:	f000 f937 	bl	80089ee <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8008780:	78fb      	ldrb	r3, [r7, #3]
 8008782:	3301      	adds	r3, #1
 8008784:	b2db      	uxtb	r3, r3
 8008786:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800878a:	4619      	mov	r1, r3
 800878c:	480b      	ldr	r0, [pc, #44]	; (80087bc <RadioSend+0x1e8>)
 800878e:	f001 f979 	bl	8009a84 <SUBGRF_SendPayload>
            break;
 8008792:	e000      	b.n	8008796 <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8008794:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8008796:	4b07      	ldr	r3, [pc, #28]	; (80087b4 <RadioSend+0x1e0>)
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	4619      	mov	r1, r3
 800879c:	4808      	ldr	r0, [pc, #32]	; (80087c0 <RadioSend+0x1ec>)
 800879e:	f002 fdcf 	bl	800b340 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 80087a2:	4807      	ldr	r0, [pc, #28]	; (80087c0 <RadioSend+0x1ec>)
 80087a4:	f002 fcee 	bl	800b184 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	20000960 	.word	0x20000960
 80087b8:	2000096e 	.word	0x2000096e
 80087bc:	2000085c 	.word	0x2000085c
 80087c0:	200009bc 	.word	0x200009bc

080087c4 <RadioSleep>:

static void RadioSleep( void )
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80087ca:	2300      	movs	r3, #0
 80087cc:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80087ce:	793b      	ldrb	r3, [r7, #4]
 80087d0:	f043 0304 	orr.w	r3, r3, #4
 80087d4:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80087d6:	7938      	ldrb	r0, [r7, #4]
 80087d8:	f001 fa30 	bl	8009c3c <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80087dc:	2002      	movs	r0, #2
 80087de:	f7f9 febf 	bl	8002560 <HAL_Delay>
}
 80087e2:	bf00      	nop
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <RadioStandby>:

static void RadioStandby( void )
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80087ee:	2000      	movs	r0, #0
 80087f0:	f001 fa56 	bl	8009ca0 <SUBGRF_SetStandby>
}
 80087f4:	bf00      	nop
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8008800:	f002 fabf 	bl	800ad82 <RFW_Is_Init>
 8008804:	4603      	mov	r3, r0
 8008806:	2b01      	cmp	r3, #1
 8008808:	d102      	bne.n	8008810 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 800880a:	f002 fae2 	bl	800add2 <RFW_ReceiveInit>
 800880e:	e007      	b.n	8008820 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008810:	2300      	movs	r3, #0
 8008812:	2200      	movs	r2, #0
 8008814:	f240 2162 	movw	r1, #610	; 0x262
 8008818:	f240 2062 	movw	r0, #610	; 0x262
 800881c:	f001 fc14 	bl	800a048 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d006      	beq.n	8008834 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008826:	6879      	ldr	r1, [r7, #4]
 8008828:	4811      	ldr	r0, [pc, #68]	; (8008870 <RadioRx+0x78>)
 800882a:	f002 fd89 	bl	800b340 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800882e:	4810      	ldr	r0, [pc, #64]	; (8008870 <RadioRx+0x78>)
 8008830:	f002 fca8 	bl	800b184 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008834:	4b0f      	ldr	r3, [pc, #60]	; (8008874 <RadioRx+0x7c>)
 8008836:	2200      	movs	r2, #0
 8008838:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800883a:	4b0e      	ldr	r3, [pc, #56]	; (8008874 <RadioRx+0x7c>)
 800883c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008840:	2100      	movs	r1, #0
 8008842:	4618      	mov	r0, r3
 8008844:	f002 f8a4 	bl	800a990 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8008848:	4b0a      	ldr	r3, [pc, #40]	; (8008874 <RadioRx+0x7c>)
 800884a:	785b      	ldrb	r3, [r3, #1]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d004      	beq.n	800885a <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8008850:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008854:	f001 fa60 	bl	8009d18 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8008858:	e005      	b.n	8008866 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800885a:	4b06      	ldr	r3, [pc, #24]	; (8008874 <RadioRx+0x7c>)
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	019b      	lsls	r3, r3, #6
 8008860:	4618      	mov	r0, r3
 8008862:	f001 fa59 	bl	8009d18 <SUBGRF_SetRx>
}
 8008866:	bf00      	nop
 8008868:	3708      	adds	r7, #8
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	200009d4 	.word	0x200009d4
 8008874:	20000960 	.word	0x20000960

08008878 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8008880:	f002 fa7f 	bl	800ad82 <RFW_Is_Init>
 8008884:	4603      	mov	r3, r0
 8008886:	2b01      	cmp	r3, #1
 8008888:	d102      	bne.n	8008890 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 800888a:	f002 faa2 	bl	800add2 <RFW_ReceiveInit>
 800888e:	e007      	b.n	80088a0 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008890:	2300      	movs	r3, #0
 8008892:	2200      	movs	r2, #0
 8008894:	f240 2162 	movw	r1, #610	; 0x262
 8008898:	f240 2062 	movw	r0, #610	; 0x262
 800889c:	f001 fbd4 	bl	800a048 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d006      	beq.n	80088b4 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80088a6:	6879      	ldr	r1, [r7, #4]
 80088a8:	4811      	ldr	r0, [pc, #68]	; (80088f0 <RadioRxBoosted+0x78>)
 80088aa:	f002 fd49 	bl	800b340 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80088ae:	4810      	ldr	r0, [pc, #64]	; (80088f0 <RadioRxBoosted+0x78>)
 80088b0:	f002 fc68 	bl	800b184 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80088b4:	4b0f      	ldr	r3, [pc, #60]	; (80088f4 <RadioRxBoosted+0x7c>)
 80088b6:	2200      	movs	r2, #0
 80088b8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80088ba:	4b0e      	ldr	r3, [pc, #56]	; (80088f4 <RadioRxBoosted+0x7c>)
 80088bc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80088c0:	2100      	movs	r1, #0
 80088c2:	4618      	mov	r0, r3
 80088c4:	f002 f864 	bl	800a990 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80088c8:	4b0a      	ldr	r3, [pc, #40]	; (80088f4 <RadioRxBoosted+0x7c>)
 80088ca:	785b      	ldrb	r3, [r3, #1]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d004      	beq.n	80088da <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80088d0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80088d4:	f001 fa40 	bl	8009d58 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80088d8:	e005      	b.n	80088e6 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80088da:	4b06      	ldr	r3, [pc, #24]	; (80088f4 <RadioRxBoosted+0x7c>)
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	019b      	lsls	r3, r3, #6
 80088e0:	4618      	mov	r0, r3
 80088e2:	f001 fa39 	bl	8009d58 <SUBGRF_SetRxBoosted>
}
 80088e6:	bf00      	nop
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	200009d4 	.word	0x200009d4
 80088f4:	20000960 	.word	0x20000960

080088f8 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	005a      	lsls	r2, r3, #1
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	4413      	add	r3, r2
 800890a:	4a0c      	ldr	r2, [pc, #48]	; (800893c <RadioSetRxDutyCycle+0x44>)
 800890c:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800890e:	2300      	movs	r3, #0
 8008910:	2200      	movs	r2, #0
 8008912:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008916:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800891a:	f001 fb95 	bl	800a048 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800891e:	4b07      	ldr	r3, [pc, #28]	; (800893c <RadioSetRxDutyCycle+0x44>)
 8008920:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008924:	2100      	movs	r1, #0
 8008926:	4618      	mov	r0, r3
 8008928:	f002 f832 	bl	800a990 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800892c:	6839      	ldr	r1, [r7, #0]
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f001 fa36 	bl	8009da0 <SUBGRF_SetRxDutyCycle>
}
 8008934:	bf00      	nop
 8008936:	3708      	adds	r7, #8
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	20000960 	.word	0x20000960

08008940 <RadioStartCad>:

static void RadioStartCad( void )
{
 8008940:	b580      	push	{r7, lr}
 8008942:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008944:	4b09      	ldr	r3, [pc, #36]	; (800896c <RadioStartCad+0x2c>)
 8008946:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800894a:	2100      	movs	r1, #0
 800894c:	4618      	mov	r0, r3
 800894e:	f002 f81f 	bl	800a990 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8008952:	2300      	movs	r3, #0
 8008954:	2200      	movs	r2, #0
 8008956:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800895a:	f44f 70c0 	mov.w	r0, #384	; 0x180
 800895e:	f001 fb73 	bl	800a048 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8008962:	f001 fa49 	bl	8009df8 <SUBGRF_SetCad>
}
 8008966:	bf00      	nop
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	20000960 	.word	0x20000960

08008970 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	460b      	mov	r3, r1
 800897a:	70fb      	strb	r3, [r7, #3]
 800897c:	4613      	mov	r3, r2
 800897e:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8008980:	883b      	ldrh	r3, [r7, #0]
 8008982:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008986:	fb02 f303 	mul.w	r3, r2, r3
 800898a:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f001 fbb7 	bl	800a100 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8008992:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008996:	4618      	mov	r0, r3
 8008998:	f002 f822 	bl	800a9e0 <SUBGRF_SetRfTxPower>
 800899c:	4603      	mov	r3, r0
 800899e:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80089a0:	210e      	movs	r1, #14
 80089a2:	f640 101f 	movw	r0, #2335	; 0x91f
 80089a6:	f001 feff 	bl	800a7a8 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80089aa:	7afb      	ldrb	r3, [r7, #11]
 80089ac:	2101      	movs	r1, #1
 80089ae:	4618      	mov	r0, r3
 80089b0:	f001 ffee 	bl	800a990 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 80089b4:	f001 fa2e 	bl	8009e14 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80089b8:	68f9      	ldr	r1, [r7, #12]
 80089ba:	4805      	ldr	r0, [pc, #20]	; (80089d0 <RadioSetTxContinuousWave+0x60>)
 80089bc:	f002 fcc0 	bl	800b340 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80089c0:	4803      	ldr	r0, [pc, #12]	; (80089d0 <RadioSetTxContinuousWave+0x60>)
 80089c2:	f002 fbdf 	bl	800b184 <UTIL_TIMER_Start>
}
 80089c6:	bf00      	nop
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	200009bc 	.word	0x200009bc

080089d4 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	4603      	mov	r3, r0
 80089dc:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 80089de:	f001 fe50 	bl	800a682 <SUBGRF_GetRssiInst>
 80089e2:	4603      	mov	r3, r0
 80089e4:	b21b      	sxth	r3, r3
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b082      	sub	sp, #8
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	4603      	mov	r3, r0
 80089f6:	460a      	mov	r2, r1
 80089f8:	80fb      	strh	r3, [r7, #6]
 80089fa:	4613      	mov	r3, r2
 80089fc:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 80089fe:	797a      	ldrb	r2, [r7, #5]
 8008a00:	88fb      	ldrh	r3, [r7, #6]
 8008a02:	4611      	mov	r1, r2
 8008a04:	4618      	mov	r0, r3
 8008a06:	f001 fecf 	bl	800a7a8 <SUBGRF_WriteRegister>
}
 8008a0a:	bf00      	nop
 8008a0c:	3708      	adds	r7, #8
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b082      	sub	sp, #8
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	4603      	mov	r3, r0
 8008a1a:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8008a1c:	88fb      	ldrh	r3, [r7, #6]
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f001 fed6 	bl	800a7d0 <SUBGRF_ReadRegister>
 8008a24:	4603      	mov	r3, r0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3708      	adds	r7, #8
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b082      	sub	sp, #8
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	4603      	mov	r3, r0
 8008a36:	6039      	str	r1, [r7, #0]
 8008a38:	80fb      	strh	r3, [r7, #6]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8008a3e:	797b      	ldrb	r3, [r7, #5]
 8008a40:	b29a      	uxth	r2, r3
 8008a42:	88fb      	ldrh	r3, [r7, #6]
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	4618      	mov	r0, r3
 8008a48:	f001 fed6 	bl	800a7f8 <SUBGRF_WriteRegisters>
}
 8008a4c:	bf00      	nop
 8008a4e:	3708      	adds	r7, #8
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	6039      	str	r1, [r7, #0]
 8008a5e:	80fb      	strh	r3, [r7, #6]
 8008a60:	4613      	mov	r3, r2
 8008a62:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8008a64:	797b      	ldrb	r3, [r7, #5]
 8008a66:	b29a      	uxth	r2, r3
 8008a68:	88fb      	ldrh	r3, [r7, #6]
 8008a6a:	6839      	ldr	r1, [r7, #0]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f001 fee5 	bl	800a83c <SUBGRF_ReadRegisters>
}
 8008a72:	bf00      	nop
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
	...

08008a7c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	4603      	mov	r3, r0
 8008a84:	460a      	mov	r2, r1
 8008a86:	71fb      	strb	r3, [r7, #7]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8008a8c:	79fb      	ldrb	r3, [r7, #7]
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d10a      	bne.n	8008aa8 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8008a92:	4a0e      	ldr	r2, [pc, #56]	; (8008acc <RadioSetMaxPayloadLength+0x50>)
 8008a94:	79bb      	ldrb	r3, [r7, #6]
 8008a96:	7013      	strb	r3, [r2, #0]
 8008a98:	4b0c      	ldr	r3, [pc, #48]	; (8008acc <RadioSetMaxPayloadLength+0x50>)
 8008a9a:	781a      	ldrb	r2, [r3, #0]
 8008a9c:	4b0c      	ldr	r3, [pc, #48]	; (8008ad0 <RadioSetMaxPayloadLength+0x54>)
 8008a9e:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008aa0:	480c      	ldr	r0, [pc, #48]	; (8008ad4 <RadioSetMaxPayloadLength+0x58>)
 8008aa2:	f001 fd39 	bl	800a518 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8008aa6:	e00d      	b.n	8008ac4 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8008aa8:	4b09      	ldr	r3, [pc, #36]	; (8008ad0 <RadioSetMaxPayloadLength+0x54>)
 8008aaa:	7d5b      	ldrb	r3, [r3, #21]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d109      	bne.n	8008ac4 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8008ab0:	4a06      	ldr	r2, [pc, #24]	; (8008acc <RadioSetMaxPayloadLength+0x50>)
 8008ab2:	79bb      	ldrb	r3, [r7, #6]
 8008ab4:	7013      	strb	r3, [r2, #0]
 8008ab6:	4b05      	ldr	r3, [pc, #20]	; (8008acc <RadioSetMaxPayloadLength+0x50>)
 8008ab8:	781a      	ldrb	r2, [r3, #0]
 8008aba:	4b05      	ldr	r3, [pc, #20]	; (8008ad0 <RadioSetMaxPayloadLength+0x54>)
 8008abc:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008abe:	4805      	ldr	r0, [pc, #20]	; (8008ad4 <RadioSetMaxPayloadLength+0x58>)
 8008ac0:	f001 fd2a 	bl	800a518 <SUBGRF_SetPacketParams>
}
 8008ac4:	bf00      	nop
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	20000011 	.word	0x20000011
 8008ad0:	20000960 	.word	0x20000960
 8008ad4:	2000096e 	.word	0x2000096e

08008ad8 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	4603      	mov	r3, r0
 8008ae0:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8008ae2:	4a13      	ldr	r2, [pc, #76]	; (8008b30 <RadioSetPublicNetwork+0x58>)
 8008ae4:	79fb      	ldrb	r3, [r7, #7]
 8008ae6:	7313      	strb	r3, [r2, #12]
 8008ae8:	4b11      	ldr	r3, [pc, #68]	; (8008b30 <RadioSetPublicNetwork+0x58>)
 8008aea:	7b1a      	ldrb	r2, [r3, #12]
 8008aec:	4b10      	ldr	r3, [pc, #64]	; (8008b30 <RadioSetPublicNetwork+0x58>)
 8008aee:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8008af0:	2001      	movs	r0, #1
 8008af2:	f7ff f819 	bl	8007b28 <RadioSetModem>
    if( enable == true )
 8008af6:	79fb      	ldrb	r3, [r7, #7]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d00a      	beq.n	8008b12 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8008afc:	2134      	movs	r1, #52	; 0x34
 8008afe:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8008b02:	f001 fe51 	bl	800a7a8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8008b06:	2144      	movs	r1, #68	; 0x44
 8008b08:	f240 7041 	movw	r0, #1857	; 0x741
 8008b0c:	f001 fe4c 	bl	800a7a8 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8008b10:	e009      	b.n	8008b26 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8008b12:	2114      	movs	r1, #20
 8008b14:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8008b18:	f001 fe46 	bl	800a7a8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8008b1c:	2124      	movs	r1, #36	; 0x24
 8008b1e:	f240 7041 	movw	r0, #1857	; 0x741
 8008b22:	f001 fe41 	bl	800a7a8 <SUBGRF_WriteRegister>
}
 8008b26:	bf00      	nop
 8008b28:	3708      	adds	r7, #8
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	20000960 	.word	0x20000960

08008b34 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8008b38:	f001 ff86 	bl	800aa48 <SUBGRF_GetRadioWakeUpTime>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	3303      	adds	r3, #3
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8008b4c:	f000 f80e 	bl	8008b6c <RadioOnTxTimeoutProcess>
}
 8008b50:	bf00      	nop
 8008b52:	3708      	adds	r7, #8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8008b60:	f000 f818 	bl	8008b94 <RadioOnRxTimeoutProcess>
}
 8008b64:	bf00      	nop
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8008b70:	4b07      	ldr	r3, [pc, #28]	; (8008b90 <RadioOnTxTimeoutProcess+0x24>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d008      	beq.n	8008b8a <RadioOnTxTimeoutProcess+0x1e>
 8008b78:	4b05      	ldr	r3, [pc, #20]	; (8008b90 <RadioOnTxTimeoutProcess+0x24>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d003      	beq.n	8008b8a <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8008b82:	4b03      	ldr	r3, [pc, #12]	; (8008b90 <RadioOnTxTimeoutProcess+0x24>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	4798      	blx	r3
    }
}
 8008b8a:	bf00      	nop
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	2000095c 	.word	0x2000095c

08008b94 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008b98:	4b07      	ldr	r3, [pc, #28]	; (8008bb8 <RadioOnRxTimeoutProcess+0x24>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d008      	beq.n	8008bb2 <RadioOnRxTimeoutProcess+0x1e>
 8008ba0:	4b05      	ldr	r3, [pc, #20]	; (8008bb8 <RadioOnRxTimeoutProcess+0x24>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d003      	beq.n	8008bb2 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8008baa:	4b03      	ldr	r3, [pc, #12]	; (8008bb8 <RadioOnRxTimeoutProcess+0x24>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	4798      	blx	r3
    }
}
 8008bb2:	bf00      	nop
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	2000095c 	.word	0x2000095c

08008bbc <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8008bc6:	4a05      	ldr	r2, [pc, #20]	; (8008bdc <RadioOnDioIrq+0x20>)
 8008bc8:	88fb      	ldrh	r3, [r7, #6]
 8008bca:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8008bce:	f000 f807 	bl	8008be0 <RadioIrqProcess>
}
 8008bd2:	bf00      	nop
 8008bd4:	3708      	adds	r7, #8
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	20000960 	.word	0x20000960

08008be0 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8008be0:	b5b0      	push	{r4, r5, r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8008be6:	2300      	movs	r3, #0
 8008be8:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8008bea:	2300      	movs	r3, #0
 8008bec:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8008bee:	4ba5      	ldr	r3, [pc, #660]	; (8008e84 <RadioIrqProcess+0x2a4>)
 8008bf0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bf8:	f000 810d 	beq.w	8008e16 <RadioIrqProcess+0x236>
 8008bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c00:	f300 81c0 	bgt.w	8008f84 <RadioIrqProcess+0x3a4>
 8008c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c08:	f000 80f1 	beq.w	8008dee <RadioIrqProcess+0x20e>
 8008c0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c10:	f300 81b8 	bgt.w	8008f84 <RadioIrqProcess+0x3a4>
 8008c14:	2b80      	cmp	r3, #128	; 0x80
 8008c16:	f000 80d6 	beq.w	8008dc6 <RadioIrqProcess+0x1e6>
 8008c1a:	2b80      	cmp	r3, #128	; 0x80
 8008c1c:	f300 81b2 	bgt.w	8008f84 <RadioIrqProcess+0x3a4>
 8008c20:	2b20      	cmp	r3, #32
 8008c22:	dc49      	bgt.n	8008cb8 <RadioIrqProcess+0xd8>
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	f340 81ad 	ble.w	8008f84 <RadioIrqProcess+0x3a4>
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	2b1f      	cmp	r3, #31
 8008c2e:	f200 81a9 	bhi.w	8008f84 <RadioIrqProcess+0x3a4>
 8008c32:	a201      	add	r2, pc, #4	; (adr r2, 8008c38 <RadioIrqProcess+0x58>)
 8008c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c38:	08008cc1 	.word	0x08008cc1
 8008c3c:	08008cfb 	.word	0x08008cfb
 8008c40:	08008f85 	.word	0x08008f85
 8008c44:	08008ea1 	.word	0x08008ea1
 8008c48:	08008f85 	.word	0x08008f85
 8008c4c:	08008f85 	.word	0x08008f85
 8008c50:	08008f85 	.word	0x08008f85
 8008c54:	08008f0f 	.word	0x08008f0f
 8008c58:	08008f85 	.word	0x08008f85
 8008c5c:	08008f85 	.word	0x08008f85
 8008c60:	08008f85 	.word	0x08008f85
 8008c64:	08008f85 	.word	0x08008f85
 8008c68:	08008f85 	.word	0x08008f85
 8008c6c:	08008f85 	.word	0x08008f85
 8008c70:	08008f85 	.word	0x08008f85
 8008c74:	08008f85 	.word	0x08008f85
 8008c78:	08008f85 	.word	0x08008f85
 8008c7c:	08008f85 	.word	0x08008f85
 8008c80:	08008f85 	.word	0x08008f85
 8008c84:	08008f85 	.word	0x08008f85
 8008c88:	08008f85 	.word	0x08008f85
 8008c8c:	08008f85 	.word	0x08008f85
 8008c90:	08008f85 	.word	0x08008f85
 8008c94:	08008f85 	.word	0x08008f85
 8008c98:	08008f85 	.word	0x08008f85
 8008c9c:	08008f85 	.word	0x08008f85
 8008ca0:	08008f85 	.word	0x08008f85
 8008ca4:	08008f85 	.word	0x08008f85
 8008ca8:	08008f85 	.word	0x08008f85
 8008cac:	08008f85 	.word	0x08008f85
 8008cb0:	08008f85 	.word	0x08008f85
 8008cb4:	08008f1f 	.word	0x08008f1f
 8008cb8:	2b40      	cmp	r3, #64	; 0x40
 8008cba:	f000 814b 	beq.w	8008f54 <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8008cbe:	e161      	b.n	8008f84 <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 8008cc0:	4871      	ldr	r0, [pc, #452]	; (8008e88 <RadioIrqProcess+0x2a8>)
 8008cc2:	f002 facd 	bl	800b260 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8008cc6:	2000      	movs	r0, #0
 8008cc8:	f000 ffea 	bl	8009ca0 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8008ccc:	f002 f860 	bl	800ad90 <RFW_Is_LongPacketModeEnabled>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d101      	bne.n	8008cda <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8008cd6:	f002 f884 	bl	800ade2 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8008cda:	4b6c      	ldr	r3, [pc, #432]	; (8008e8c <RadioIrqProcess+0x2ac>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f000 8152 	beq.w	8008f88 <RadioIrqProcess+0x3a8>
 8008ce4:	4b69      	ldr	r3, [pc, #420]	; (8008e8c <RadioIrqProcess+0x2ac>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f000 814c 	beq.w	8008f88 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 8008cf0:	4b66      	ldr	r3, [pc, #408]	; (8008e8c <RadioIrqProcess+0x2ac>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4798      	blx	r3
        break;
 8008cf8:	e146      	b.n	8008f88 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 8008cfa:	4865      	ldr	r0, [pc, #404]	; (8008e90 <RadioIrqProcess+0x2b0>)
 8008cfc:	f002 fab0 	bl	800b260 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8008d00:	4b60      	ldr	r3, [pc, #384]	; (8008e84 <RadioIrqProcess+0x2a4>)
 8008d02:	785b      	ldrb	r3, [r3, #1]
 8008d04:	f083 0301 	eor.w	r3, r3, #1
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d014      	beq.n	8008d38 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8008d0e:	2000      	movs	r0, #0
 8008d10:	f000 ffc6 	bl	8009ca0 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8008d14:	2100      	movs	r1, #0
 8008d16:	f640 1002 	movw	r0, #2306	; 0x902
 8008d1a:	f001 fd45 	bl	800a7a8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8008d1e:	f640 1044 	movw	r0, #2372	; 0x944
 8008d22:	f001 fd55 	bl	800a7d0 <SUBGRF_ReadRegister>
 8008d26:	4603      	mov	r3, r0
 8008d28:	f043 0302 	orr.w	r3, r3, #2
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	4619      	mov	r1, r3
 8008d30:	f640 1044 	movw	r0, #2372	; 0x944
 8008d34:	f001 fd38 	bl	800a7a8 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8008d38:	1dfb      	adds	r3, r7, #7
 8008d3a:	22ff      	movs	r2, #255	; 0xff
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	4855      	ldr	r0, [pc, #340]	; (8008e94 <RadioIrqProcess+0x2b4>)
 8008d40:	f000 fe7e 	bl	8009a40 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8008d44:	4854      	ldr	r0, [pc, #336]	; (8008e98 <RadioIrqProcess+0x2b8>)
 8008d46:	f001 fcdd 	bl	800a704 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8008d4a:	4b50      	ldr	r3, [pc, #320]	; (8008e8c <RadioIrqProcess+0x2ac>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	f000 811c 	beq.w	8008f8c <RadioIrqProcess+0x3ac>
 8008d54:	4b4d      	ldr	r3, [pc, #308]	; (8008e8c <RadioIrqProcess+0x2ac>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	f000 8116 	beq.w	8008f8c <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 8008d60:	4b48      	ldr	r3, [pc, #288]	; (8008e84 <RadioIrqProcess+0x2a4>)
 8008d62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d10e      	bne.n	8008d88 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8008d6a:	4b48      	ldr	r3, [pc, #288]	; (8008e8c <RadioIrqProcess+0x2ac>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	689c      	ldr	r4, [r3, #8]
 8008d70:	79fb      	ldrb	r3, [r7, #7]
 8008d72:	b299      	uxth	r1, r3
 8008d74:	4b43      	ldr	r3, [pc, #268]	; (8008e84 <RadioIrqProcess+0x2a4>)
 8008d76:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8008d7a:	b21a      	sxth	r2, r3
 8008d7c:	4b41      	ldr	r3, [pc, #260]	; (8008e84 <RadioIrqProcess+0x2a4>)
 8008d7e:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8008d82:	4844      	ldr	r0, [pc, #272]	; (8008e94 <RadioIrqProcess+0x2b4>)
 8008d84:	47a0      	blx	r4
                break;
 8008d86:	e01d      	b.n	8008dc4 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8008d88:	4b3e      	ldr	r3, [pc, #248]	; (8008e84 <RadioIrqProcess+0x2a4>)
 8008d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d8c:	463a      	mov	r2, r7
 8008d8e:	4611      	mov	r1, r2
 8008d90:	4618      	mov	r0, r3
 8008d92:	f001 ff4b 	bl	800ac2c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8008d96:	4b3d      	ldr	r3, [pc, #244]	; (8008e8c <RadioIrqProcess+0x2ac>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	689c      	ldr	r4, [r3, #8]
 8008d9c:	79fb      	ldrb	r3, [r7, #7]
 8008d9e:	b299      	uxth	r1, r3
 8008da0:	4b38      	ldr	r3, [pc, #224]	; (8008e84 <RadioIrqProcess+0x2a4>)
 8008da2:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8008da6:	b218      	sxth	r0, r3
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008dae:	4a3b      	ldr	r2, [pc, #236]	; (8008e9c <RadioIrqProcess+0x2bc>)
 8008db0:	fb82 5203 	smull	r5, r2, r2, r3
 8008db4:	1192      	asrs	r2, r2, #6
 8008db6:	17db      	asrs	r3, r3, #31
 8008db8:	1ad3      	subs	r3, r2, r3
 8008dba:	b25b      	sxtb	r3, r3
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	4835      	ldr	r0, [pc, #212]	; (8008e94 <RadioIrqProcess+0x2b4>)
 8008dc0:	47a0      	blx	r4
                break;
 8008dc2:	bf00      	nop
        break;
 8008dc4:	e0e2      	b.n	8008f8c <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 8008dc6:	2000      	movs	r0, #0
 8008dc8:	f000 ff6a 	bl	8009ca0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8008dcc:	4b2f      	ldr	r3, [pc, #188]	; (8008e8c <RadioIrqProcess+0x2ac>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f000 80dd 	beq.w	8008f90 <RadioIrqProcess+0x3b0>
 8008dd6:	4b2d      	ldr	r3, [pc, #180]	; (8008e8c <RadioIrqProcess+0x2ac>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	699b      	ldr	r3, [r3, #24]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	f000 80d7 	beq.w	8008f90 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 8008de2:	4b2a      	ldr	r3, [pc, #168]	; (8008e8c <RadioIrqProcess+0x2ac>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	699b      	ldr	r3, [r3, #24]
 8008de8:	2000      	movs	r0, #0
 8008dea:	4798      	blx	r3
        break;
 8008dec:	e0d0      	b.n	8008f90 <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 8008dee:	2000      	movs	r0, #0
 8008df0:	f000 ff56 	bl	8009ca0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8008df4:	4b25      	ldr	r3, [pc, #148]	; (8008e8c <RadioIrqProcess+0x2ac>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	f000 80cb 	beq.w	8008f94 <RadioIrqProcess+0x3b4>
 8008dfe:	4b23      	ldr	r3, [pc, #140]	; (8008e8c <RadioIrqProcess+0x2ac>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f000 80c5 	beq.w	8008f94 <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 8008e0a:	4b20      	ldr	r3, [pc, #128]	; (8008e8c <RadioIrqProcess+0x2ac>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	699b      	ldr	r3, [r3, #24]
 8008e10:	2001      	movs	r0, #1
 8008e12:	4798      	blx	r3
        break;
 8008e14:	e0be      	b.n	8008f94 <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8008e16:	f000 fdf9 	bl	8009a0c <SUBGRF_GetOperatingMode>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b04      	cmp	r3, #4
 8008e1e:	d115      	bne.n	8008e4c <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 8008e20:	4819      	ldr	r0, [pc, #100]	; (8008e88 <RadioIrqProcess+0x2a8>)
 8008e22:	f002 fa1d 	bl	800b260 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8008e26:	2000      	movs	r0, #0
 8008e28:	f000 ff3a 	bl	8009ca0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8008e2c:	4b17      	ldr	r3, [pc, #92]	; (8008e8c <RadioIrqProcess+0x2ac>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f000 80b1 	beq.w	8008f98 <RadioIrqProcess+0x3b8>
 8008e36:	4b15      	ldr	r3, [pc, #84]	; (8008e8c <RadioIrqProcess+0x2ac>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	f000 80ab 	beq.w	8008f98 <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 8008e42:	4b12      	ldr	r3, [pc, #72]	; (8008e8c <RadioIrqProcess+0x2ac>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	4798      	blx	r3
        break;
 8008e4a:	e0a5      	b.n	8008f98 <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8008e4c:	f000 fdde 	bl	8009a0c <SUBGRF_GetOperatingMode>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b05      	cmp	r3, #5
 8008e54:	f040 80a0 	bne.w	8008f98 <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 8008e58:	480d      	ldr	r0, [pc, #52]	; (8008e90 <RadioIrqProcess+0x2b0>)
 8008e5a:	f002 fa01 	bl	800b260 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8008e5e:	2000      	movs	r0, #0
 8008e60:	f000 ff1e 	bl	8009ca0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008e64:	4b09      	ldr	r3, [pc, #36]	; (8008e8c <RadioIrqProcess+0x2ac>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f000 8095 	beq.w	8008f98 <RadioIrqProcess+0x3b8>
 8008e6e:	4b07      	ldr	r3, [pc, #28]	; (8008e8c <RadioIrqProcess+0x2ac>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	f000 808f 	beq.w	8008f98 <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 8008e7a:	4b04      	ldr	r3, [pc, #16]	; (8008e8c <RadioIrqProcess+0x2ac>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	4798      	blx	r3
        break;
 8008e82:	e089      	b.n	8008f98 <RadioIrqProcess+0x3b8>
 8008e84:	20000960 	.word	0x20000960
 8008e88:	200009bc 	.word	0x200009bc
 8008e8c:	2000095c 	.word	0x2000095c
 8008e90:	200009d4 	.word	0x200009d4
 8008e94:	2000085c 	.word	0x2000085c
 8008e98:	20000984 	.word	0x20000984
 8008e9c:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8008ea0:	4b44      	ldr	r3, [pc, #272]	; (8008fb4 <RadioIrqProcess+0x3d4>)
 8008ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d079      	beq.n	8008f9c <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8008ea8:	4a43      	ldr	r2, [pc, #268]	; (8008fb8 <RadioIrqProcess+0x3d8>)
 8008eaa:	4b42      	ldr	r3, [pc, #264]	; (8008fb4 <RadioIrqProcess+0x3d4>)
 8008eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eae:	0c1b      	lsrs	r3, r3, #16
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	f640 1003 	movw	r0, #2307	; 0x903
 8008eb8:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8008eba:	4a3f      	ldr	r2, [pc, #252]	; (8008fb8 <RadioIrqProcess+0x3d8>)
 8008ebc:	4b3d      	ldr	r3, [pc, #244]	; (8008fb4 <RadioIrqProcess+0x3d4>)
 8008ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ec0:	0a1b      	lsrs	r3, r3, #8
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	f640 1004 	movw	r0, #2308	; 0x904
 8008eca:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8008ecc:	4a3a      	ldr	r2, [pc, #232]	; (8008fb8 <RadioIrqProcess+0x3d8>)
 8008ece:	4b39      	ldr	r3, [pc, #228]	; (8008fb4 <RadioIrqProcess+0x3d4>)
 8008ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	f640 1005 	movw	r0, #2309	; 0x905
 8008eda:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8008edc:	4c36      	ldr	r4, [pc, #216]	; (8008fb8 <RadioIrqProcess+0x3d8>)
 8008ede:	4b37      	ldr	r3, [pc, #220]	; (8008fbc <RadioIrqProcess+0x3dc>)
 8008ee0:	f640 1002 	movw	r0, #2306	; 0x902
 8008ee4:	4798      	blx	r3
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	f043 0301 	orr.w	r3, r3, #1
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	4619      	mov	r1, r3
 8008ef0:	f640 1002 	movw	r0, #2306	; 0x902
 8008ef4:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8008ef6:	4b2f      	ldr	r3, [pc, #188]	; (8008fb4 <RadioIrqProcess+0x3d4>)
 8008ef8:	2200      	movs	r2, #0
 8008efa:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008efc:	2300      	movs	r3, #0
 8008efe:	2200      	movs	r2, #0
 8008f00:	f240 2162 	movw	r1, #610	; 0x262
 8008f04:	f240 2062 	movw	r0, #610	; 0x262
 8008f08:	f001 f89e 	bl	800a048 <SUBGRF_SetDioIrqParams>
        break;
 8008f0c:	e046      	b.n	8008f9c <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 8008f0e:	f001 ff38 	bl	800ad82 <RFW_Is_Init>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d143      	bne.n	8008fa0 <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 8008f18:	f001 ff69 	bl	800adee <RFW_ReceivePayload>
        break;
 8008f1c:	e040      	b.n	8008fa0 <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 8008f1e:	4828      	ldr	r0, [pc, #160]	; (8008fc0 <RadioIrqProcess+0x3e0>)
 8008f20:	f002 f99e 	bl	800b260 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8008f24:	4b23      	ldr	r3, [pc, #140]	; (8008fb4 <RadioIrqProcess+0x3d4>)
 8008f26:	785b      	ldrb	r3, [r3, #1]
 8008f28:	f083 0301 	eor.w	r3, r3, #1
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d002      	beq.n	8008f38 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 8008f32:	2000      	movs	r0, #0
 8008f34:	f000 feb4 	bl	8009ca0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008f38:	4b22      	ldr	r3, [pc, #136]	; (8008fc4 <RadioIrqProcess+0x3e4>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d031      	beq.n	8008fa4 <RadioIrqProcess+0x3c4>
 8008f40:	4b20      	ldr	r3, [pc, #128]	; (8008fc4 <RadioIrqProcess+0x3e4>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d02c      	beq.n	8008fa4 <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 8008f4a:	4b1e      	ldr	r3, [pc, #120]	; (8008fc4 <RadioIrqProcess+0x3e4>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	4798      	blx	r3
        break;
 8008f52:	e027      	b.n	8008fa4 <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 8008f54:	4b17      	ldr	r3, [pc, #92]	; (8008fb4 <RadioIrqProcess+0x3d4>)
 8008f56:	785b      	ldrb	r3, [r3, #1]
 8008f58:	f083 0301 	eor.w	r3, r3, #1
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d002      	beq.n	8008f68 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 8008f62:	2000      	movs	r0, #0
 8008f64:	f000 fe9c 	bl	8009ca0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8008f68:	4b16      	ldr	r3, [pc, #88]	; (8008fc4 <RadioIrqProcess+0x3e4>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d01b      	beq.n	8008fa8 <RadioIrqProcess+0x3c8>
 8008f70:	4b14      	ldr	r3, [pc, #80]	; (8008fc4 <RadioIrqProcess+0x3e4>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	691b      	ldr	r3, [r3, #16]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d016      	beq.n	8008fa8 <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 8008f7a:	4b12      	ldr	r3, [pc, #72]	; (8008fc4 <RadioIrqProcess+0x3e4>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	4798      	blx	r3
        break;
 8008f82:	e011      	b.n	8008fa8 <RadioIrqProcess+0x3c8>
        break;
 8008f84:	bf00      	nop
 8008f86:	e010      	b.n	8008faa <RadioIrqProcess+0x3ca>
        break;
 8008f88:	bf00      	nop
 8008f8a:	e00e      	b.n	8008faa <RadioIrqProcess+0x3ca>
        break;
 8008f8c:	bf00      	nop
 8008f8e:	e00c      	b.n	8008faa <RadioIrqProcess+0x3ca>
        break;
 8008f90:	bf00      	nop
 8008f92:	e00a      	b.n	8008faa <RadioIrqProcess+0x3ca>
        break;
 8008f94:	bf00      	nop
 8008f96:	e008      	b.n	8008faa <RadioIrqProcess+0x3ca>
        break;
 8008f98:	bf00      	nop
 8008f9a:	e006      	b.n	8008faa <RadioIrqProcess+0x3ca>
        break;
 8008f9c:	bf00      	nop
 8008f9e:	e004      	b.n	8008faa <RadioIrqProcess+0x3ca>
        break;
 8008fa0:	bf00      	nop
 8008fa2:	e002      	b.n	8008faa <RadioIrqProcess+0x3ca>
        break;
 8008fa4:	bf00      	nop
 8008fa6:	e000      	b.n	8008faa <RadioIrqProcess+0x3ca>
        break;
 8008fa8:	bf00      	nop
    }
}
 8008faa:	bf00      	nop
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bdb0      	pop	{r4, r5, r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	20000960 	.word	0x20000960
 8008fb8:	080089ef 	.word	0x080089ef
 8008fbc:	08008a13 	.word	0x08008a13
 8008fc0:	200009d4 	.word	0x200009d4
 8008fc4:	2000095c 	.word	0x2000095c

08008fc8 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8008fcc:	4b09      	ldr	r3, [pc, #36]	; (8008ff4 <RadioTxPrbs+0x2c>)
 8008fce:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008fd2:	2101      	movs	r1, #1
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f001 fcdb 	bl	800a990 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8008fda:	4b07      	ldr	r3, [pc, #28]	; (8008ff8 <RadioTxPrbs+0x30>)
 8008fdc:	212d      	movs	r1, #45	; 0x2d
 8008fde:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8008fe2:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8008fe4:	f000 ff1f 	bl	8009e26 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8008fe8:	4804      	ldr	r0, [pc, #16]	; (8008ffc <RadioTxPrbs+0x34>)
 8008fea:	f000 fe75 	bl	8009cd8 <SUBGRF_SetTx>
}
 8008fee:	bf00      	nop
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	20000960 	.word	0x20000960
 8008ff8:	080089ef 	.word	0x080089ef
 8008ffc:	000fffff 	.word	0x000fffff

08009000 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	4603      	mov	r3, r0
 8009008:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800900a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800900e:	4618      	mov	r0, r3
 8009010:	f001 fce6 	bl	800a9e0 <SUBGRF_SetRfTxPower>
 8009014:	4603      	mov	r3, r0
 8009016:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009018:	210e      	movs	r1, #14
 800901a:	f640 101f 	movw	r0, #2335	; 0x91f
 800901e:	f001 fbc3 	bl	800a7a8 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8009022:	7bfb      	ldrb	r3, [r7, #15]
 8009024:	2101      	movs	r1, #1
 8009026:	4618      	mov	r0, r3
 8009028:	f001 fcb2 	bl	800a990 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800902c:	f000 fef2 	bl	8009e14 <SUBGRF_SetTxContinuousWave>
}
 8009030:	bf00      	nop
 8009032:	3710      	adds	r7, #16
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8009038:	b480      	push	{r7}
 800903a:	b089      	sub	sp, #36	; 0x24
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	4613      	mov	r3, r2
 8009044:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8009046:	2300      	movs	r3, #0
 8009048:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 800904a:	2300      	movs	r3, #0
 800904c:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 800904e:	2300      	movs	r3, #0
 8009050:	61bb      	str	r3, [r7, #24]
 8009052:	e011      	b.n	8009078 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8009054:	69bb      	ldr	r3, [r7, #24]
 8009056:	68ba      	ldr	r2, [r7, #8]
 8009058:	4413      	add	r3, r2
 800905a:	781a      	ldrb	r2, [r3, #0]
 800905c:	69bb      	ldr	r3, [r7, #24]
 800905e:	68b9      	ldr	r1, [r7, #8]
 8009060:	440b      	add	r3, r1
 8009062:	43d2      	mvns	r2, r2
 8009064:	b2d2      	uxtb	r2, r2
 8009066:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8009068:	69bb      	ldr	r3, [r7, #24]
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	4413      	add	r3, r2
 800906e:	2200      	movs	r2, #0
 8009070:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	3301      	adds	r3, #1
 8009076:	61bb      	str	r3, [r7, #24]
 8009078:	79fb      	ldrb	r3, [r7, #7]
 800907a:	69ba      	ldr	r2, [r7, #24]
 800907c:	429a      	cmp	r2, r3
 800907e:	dbe9      	blt.n	8009054 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8009080:	2300      	movs	r3, #0
 8009082:	61bb      	str	r3, [r7, #24]
 8009084:	e049      	b.n	800911a <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	425a      	negs	r2, r3
 800908a:	f003 0307 	and.w	r3, r3, #7
 800908e:	f002 0207 	and.w	r2, r2, #7
 8009092:	bf58      	it	pl
 8009094:	4253      	negpl	r3, r2
 8009096:	b2db      	uxtb	r3, r3
 8009098:	f1c3 0307 	rsb	r3, r3, #7
 800909c:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	da00      	bge.n	80090a6 <payload_integration+0x6e>
 80090a4:	3307      	adds	r3, #7
 80090a6:	10db      	asrs	r3, r3, #3
 80090a8:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	3301      	adds	r3, #1
 80090ae:	425a      	negs	r2, r3
 80090b0:	f003 0307 	and.w	r3, r3, #7
 80090b4:	f002 0207 	and.w	r2, r2, #7
 80090b8:	bf58      	it	pl
 80090ba:	4253      	negpl	r3, r2
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	f1c3 0307 	rsb	r3, r3, #7
 80090c2:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 80090c4:	69bb      	ldr	r3, [r7, #24]
 80090c6:	3301      	adds	r3, #1
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	da00      	bge.n	80090ce <payload_integration+0x96>
 80090cc:	3307      	adds	r3, #7
 80090ce:	10db      	asrs	r3, r3, #3
 80090d0:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80090d2:	7dbb      	ldrb	r3, [r7, #22]
 80090d4:	68ba      	ldr	r2, [r7, #8]
 80090d6:	4413      	add	r3, r2
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	461a      	mov	r2, r3
 80090dc:	7dfb      	ldrb	r3, [r7, #23]
 80090de:	fa42 f303 	asr.w	r3, r2, r3
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	f003 0301 	and.w	r3, r3, #1
 80090e8:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 80090ea:	7ffa      	ldrb	r2, [r7, #31]
 80090ec:	7cfb      	ldrb	r3, [r7, #19]
 80090ee:	4053      	eors	r3, r2
 80090f0:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 80090f2:	7d3b      	ldrb	r3, [r7, #20]
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	4413      	add	r3, r2
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	b25a      	sxtb	r2, r3
 80090fc:	7ff9      	ldrb	r1, [r7, #31]
 80090fe:	7d7b      	ldrb	r3, [r7, #21]
 8009100:	fa01 f303 	lsl.w	r3, r1, r3
 8009104:	b25b      	sxtb	r3, r3
 8009106:	4313      	orrs	r3, r2
 8009108:	b259      	sxtb	r1, r3
 800910a:	7d3b      	ldrb	r3, [r7, #20]
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	4413      	add	r3, r2
 8009110:	b2ca      	uxtb	r2, r1
 8009112:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	3301      	adds	r3, #1
 8009118:	61bb      	str	r3, [r7, #24]
 800911a:	79fb      	ldrb	r3, [r7, #7]
 800911c:	00db      	lsls	r3, r3, #3
 800911e:	69ba      	ldr	r2, [r7, #24]
 8009120:	429a      	cmp	r2, r3
 8009122:	dbb0      	blt.n	8009086 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8009124:	7ffb      	ldrb	r3, [r7, #31]
 8009126:	01db      	lsls	r3, r3, #7
 8009128:	b25a      	sxtb	r2, r3
 800912a:	7ffb      	ldrb	r3, [r7, #31]
 800912c:	019b      	lsls	r3, r3, #6
 800912e:	b25b      	sxtb	r3, r3
 8009130:	4313      	orrs	r3, r2
 8009132:	b25b      	sxtb	r3, r3
 8009134:	7ffa      	ldrb	r2, [r7, #31]
 8009136:	2a00      	cmp	r2, #0
 8009138:	d101      	bne.n	800913e <payload_integration+0x106>
 800913a:	2220      	movs	r2, #32
 800913c:	e000      	b.n	8009140 <payload_integration+0x108>
 800913e:	2200      	movs	r2, #0
 8009140:	4313      	orrs	r3, r2
 8009142:	b259      	sxtb	r1, r3
 8009144:	79fb      	ldrb	r3, [r7, #7]
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	4413      	add	r3, r2
 800914a:	b2ca      	uxtb	r2, r1
 800914c:	701a      	strb	r2, [r3, #0]
}
 800914e:	bf00      	nop
 8009150:	3724      	adds	r7, #36	; 0x24
 8009152:	46bd      	mov	sp, r7
 8009154:	bc80      	pop	{r7}
 8009156:	4770      	bx	lr

08009158 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b08c      	sub	sp, #48	; 0x30
 800915c:	af00      	add	r7, sp, #0
 800915e:	60b9      	str	r1, [r7, #8]
 8009160:	607a      	str	r2, [r7, #4]
 8009162:	603b      	str	r3, [r7, #0]
 8009164:	4603      	mov	r3, r0
 8009166:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8009168:	2300      	movs	r3, #0
 800916a:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 800916c:	2300      	movs	r3, #0
 800916e:	623b      	str	r3, [r7, #32]
 8009170:	2300      	movs	r3, #0
 8009172:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8009174:	f001 fdff 	bl	800ad76 <RFW_DeInit>

    if( rxContinuous != 0 )
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d001      	beq.n	8009182 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800917e:	2300      	movs	r3, #0
 8009180:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2b00      	cmp	r3, #0
 8009186:	bf14      	ite	ne
 8009188:	2301      	movne	r3, #1
 800918a:	2300      	moveq	r3, #0
 800918c:	b2da      	uxtb	r2, r3
 800918e:	4ba3      	ldr	r3, [pc, #652]	; (800941c <RadioSetRxGenericConfig+0x2c4>)
 8009190:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8009192:	7bfb      	ldrb	r3, [r7, #15]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d003      	beq.n	80091a0 <RadioSetRxGenericConfig+0x48>
 8009198:	2b01      	cmp	r3, #1
 800919a:	f000 80dc 	beq.w	8009356 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800919e:	e194      	b.n	80094ca <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d003      	beq.n	80091b0 <RadioSetRxGenericConfig+0x58>
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d102      	bne.n	80091b6 <RadioSetRxGenericConfig+0x5e>
            return -1;
 80091b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091b4:	e18a      	b.n	80094cc <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	7f9b      	ldrb	r3, [r3, #30]
 80091ba:	2b08      	cmp	r3, #8
 80091bc:	d902      	bls.n	80091c4 <RadioSetRxGenericConfig+0x6c>
            return -1;
 80091be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091c2:	e183      	b.n	80094cc <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	6919      	ldr	r1, [r3, #16]
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	7f9b      	ldrb	r3, [r3, #30]
 80091cc:	b29a      	uxth	r2, r3
 80091ce:	f107 0320 	add.w	r3, r7, #32
 80091d2:	4618      	mov	r0, r3
 80091d4:	f001 ff66 	bl	800b0a4 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	bf14      	ite	ne
 80091e0:	2301      	movne	r3, #1
 80091e2:	2300      	moveq	r3, #0
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	4618      	mov	r0, r3
 80091e8:	f000 fe26 	bl	8009e38 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80091ec:	4b8b      	ldr	r3, [pc, #556]	; (800941c <RadioSetRxGenericConfig+0x2c4>)
 80091ee:	2200      	movs	r2, #0
 80091f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	4a88      	ldr	r2, [pc, #544]	; (800941c <RadioSetRxGenericConfig+0x2c4>)
 80091fa:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	f893 2020 	ldrb.w	r2, [r3, #32]
 8009202:	4b86      	ldr	r3, [pc, #536]	; (800941c <RadioSetRxGenericConfig+0x2c4>)
 8009204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	4618      	mov	r0, r3
 800920e:	f001 fce5 	bl	800abdc <SUBGRF_GetFskBandwidthRegValue>
 8009212:	4603      	mov	r3, r0
 8009214:	461a      	mov	r2, r3
 8009216:	4b81      	ldr	r3, [pc, #516]	; (800941c <RadioSetRxGenericConfig+0x2c4>)
 8009218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800921c:	4b7f      	ldr	r3, [pc, #508]	; (800941c <RadioSetRxGenericConfig+0x2c4>)
 800921e:	2200      	movs	r2, #0
 8009220:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	68db      	ldr	r3, [r3, #12]
 8009226:	b29b      	uxth	r3, r3
 8009228:	00db      	lsls	r3, r3, #3
 800922a:	b29a      	uxth	r2, r3
 800922c:	4b7b      	ldr	r3, [pc, #492]	; (800941c <RadioSetRxGenericConfig+0x2c4>)
 800922e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	7fda      	ldrb	r2, [r3, #31]
 8009234:	4b79      	ldr	r3, [pc, #484]	; (800941c <RadioSetRxGenericConfig+0x2c4>)
 8009236:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	7f9b      	ldrb	r3, [r3, #30]
 800923c:	00db      	lsls	r3, r3, #3
 800923e:	b2da      	uxtb	r2, r3
 8009240:	4b76      	ldr	r3, [pc, #472]	; (800941c <RadioSetRxGenericConfig+0x2c4>)
 8009242:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800924a:	4b74      	ldr	r3, [pc, #464]	; (800941c <RadioSetRxGenericConfig+0x2c4>)
 800924c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009254:	2b00      	cmp	r3, #0
 8009256:	d105      	bne.n	8009264 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	695b      	ldr	r3, [r3, #20]
 800925c:	b2da      	uxtb	r2, r3
 800925e:	4b6f      	ldr	r3, [pc, #444]	; (800941c <RadioSetRxGenericConfig+0x2c4>)
 8009260:	759a      	strb	r2, [r3, #22]
 8009262:	e00b      	b.n	800927c <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800926a:	2b02      	cmp	r3, #2
 800926c:	d103      	bne.n	8009276 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800926e:	4b6b      	ldr	r3, [pc, #428]	; (800941c <RadioSetRxGenericConfig+0x2c4>)
 8009270:	22ff      	movs	r2, #255	; 0xff
 8009272:	759a      	strb	r2, [r3, #22]
 8009274:	e002      	b.n	800927c <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8009276:	4b69      	ldr	r3, [pc, #420]	; (800941c <RadioSetRxGenericConfig+0x2c4>)
 8009278:	22ff      	movs	r2, #255	; 0xff
 800927a:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009282:	2b02      	cmp	r3, #2
 8009284:	d004      	beq.n	8009290 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800928c:	2b02      	cmp	r3, #2
 800928e:	d12d      	bne.n	80092ec <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009296:	2bf1      	cmp	r3, #241	; 0xf1
 8009298:	d00c      	beq.n	80092b4 <RadioSetRxGenericConfig+0x15c>
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80092a0:	2bf2      	cmp	r3, #242	; 0xf2
 80092a2:	d007      	beq.n	80092b4 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d002      	beq.n	80092b4 <RadioSetRxGenericConfig+0x15c>
                return -1;
 80092ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092b2:	e10b      	b.n	80094cc <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 80092b4:	2300      	movs	r3, #0
 80092b6:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80092bc:	4b58      	ldr	r3, [pc, #352]	; (8009420 <RadioSetRxGenericConfig+0x2c8>)
 80092be:	6819      	ldr	r1, [r3, #0]
 80092c0:	f107 0314 	add.w	r3, r7, #20
 80092c4:	4a57      	ldr	r2, [pc, #348]	; (8009424 <RadioSetRxGenericConfig+0x2cc>)
 80092c6:	4618      	mov	r0, r3
 80092c8:	f001 fd48 	bl	800ad5c <RFW_Init>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d002      	beq.n	80092d8 <RadioSetRxGenericConfig+0x180>
                return -1;
 80092d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092d6:	e0f9      	b.n	80094cc <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80092d8:	4b50      	ldr	r3, [pc, #320]	; (800941c <RadioSetRxGenericConfig+0x2c4>)
 80092da:	2200      	movs	r2, #0
 80092dc:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80092de:	4b4f      	ldr	r3, [pc, #316]	; (800941c <RadioSetRxGenericConfig+0x2c4>)
 80092e0:	2201      	movs	r2, #1
 80092e2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80092e4:	4b4d      	ldr	r3, [pc, #308]	; (800941c <RadioSetRxGenericConfig+0x2c4>)
 80092e6:	2200      	movs	r2, #0
 80092e8:	755a      	strb	r2, [r3, #21]
        {
 80092ea:	e00e      	b.n	800930a <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80092f2:	4b4a      	ldr	r3, [pc, #296]	; (800941c <RadioSetRxGenericConfig+0x2c4>)
 80092f4:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80092fc:	4b47      	ldr	r3, [pc, #284]	; (800941c <RadioSetRxGenericConfig+0x2c4>)
 80092fe:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8009306:	4b45      	ldr	r3, [pc, #276]	; (800941c <RadioSetRxGenericConfig+0x2c4>)
 8009308:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800930a:	f7ff fa6e 	bl	80087ea <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800930e:	2000      	movs	r0, #0
 8009310:	f7fe fc0a 	bl	8007b28 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009314:	4844      	ldr	r0, [pc, #272]	; (8009428 <RadioSetRxGenericConfig+0x2d0>)
 8009316:	f001 f82d 	bl	800a374 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800931a:	4844      	ldr	r0, [pc, #272]	; (800942c <RadioSetRxGenericConfig+0x2d4>)
 800931c:	f001 f8fc 	bl	800a518 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009320:	f107 0320 	add.w	r3, r7, #32
 8009324:	4618      	mov	r0, r3
 8009326:	f000 fbc0 	bl	8009aaa <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	8b9b      	ldrh	r3, [r3, #28]
 800932e:	4618      	mov	r0, r3
 8009330:	f000 fc0a 	bl	8009b48 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	8b1b      	ldrh	r3, [r3, #24]
 8009338:	4618      	mov	r0, r3
 800933a:	f000 fbe5 	bl	8009b08 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8009344:	fb03 f202 	mul.w	r2, r3, r2
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009350:	4a32      	ldr	r2, [pc, #200]	; (800941c <RadioSetRxGenericConfig+0x2c4>)
 8009352:	6093      	str	r3, [r2, #8]
        break;
 8009354:	e0b9      	b.n	80094ca <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800935a:	2b00      	cmp	r3, #0
 800935c:	d102      	bne.n	8009364 <RadioSetRxGenericConfig+0x20c>
            return -1;
 800935e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009362:	e0b3      	b.n	80094cc <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800936a:	2b01      	cmp	r3, #1
 800936c:	d104      	bne.n	8009378 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	695b      	ldr	r3, [r3, #20]
 8009372:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009376:	e002      	b.n	800937e <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8009378:	23ff      	movs	r3, #255	; 0xff
 800937a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009382:	2b00      	cmp	r3, #0
 8009384:	bf14      	ite	ne
 8009386:	2301      	movne	r3, #1
 8009388:	2300      	moveq	r3, #0
 800938a:	b2db      	uxtb	r3, r3
 800938c:	4618      	mov	r0, r3
 800938e:	f000 fd53 	bl	8009e38 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	b2db      	uxtb	r3, r3
 8009396:	4618      	mov	r0, r3
 8009398:	f000 fd5d 	bl	8009e56 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800939c:	4b1f      	ldr	r3, [pc, #124]	; (800941c <RadioSetRxGenericConfig+0x2c4>)
 800939e:	2201      	movs	r2, #1
 80093a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80093aa:	4b1c      	ldr	r3, [pc, #112]	; (800941c <RadioSetRxGenericConfig+0x2c4>)
 80093ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80093b6:	4b19      	ldr	r3, [pc, #100]	; (800941c <RadioSetRxGenericConfig+0x2c4>)
 80093b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80093c2:	4b16      	ldr	r3, [pc, #88]	; (800941c <RadioSetRxGenericConfig+0x2c4>)
 80093c4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	d010      	beq.n	80093f4 <RadioSetRxGenericConfig+0x29c>
 80093d2:	2b02      	cmp	r3, #2
 80093d4:	dc2c      	bgt.n	8009430 <RadioSetRxGenericConfig+0x2d8>
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d002      	beq.n	80093e0 <RadioSetRxGenericConfig+0x288>
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d005      	beq.n	80093ea <RadioSetRxGenericConfig+0x292>
            break;
 80093de:	e027      	b.n	8009430 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80093e0:	4b0e      	ldr	r3, [pc, #56]	; (800941c <RadioSetRxGenericConfig+0x2c4>)
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80093e8:	e023      	b.n	8009432 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80093ea:	4b0c      	ldr	r3, [pc, #48]	; (800941c <RadioSetRxGenericConfig+0x2c4>)
 80093ec:	2201      	movs	r2, #1
 80093ee:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80093f2:	e01e      	b.n	8009432 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80093fa:	2b0b      	cmp	r3, #11
 80093fc:	d004      	beq.n	8009408 <RadioSetRxGenericConfig+0x2b0>
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009404:	2b0c      	cmp	r3, #12
 8009406:	d104      	bne.n	8009412 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009408:	4b04      	ldr	r3, [pc, #16]	; (800941c <RadioSetRxGenericConfig+0x2c4>)
 800940a:	2201      	movs	r2, #1
 800940c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009410:	e00f      	b.n	8009432 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009412:	4b02      	ldr	r3, [pc, #8]	; (800941c <RadioSetRxGenericConfig+0x2c4>)
 8009414:	2200      	movs	r2, #0
 8009416:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800941a:	e00a      	b.n	8009432 <RadioSetRxGenericConfig+0x2da>
 800941c:	20000960 	.word	0x20000960
 8009420:	2000095c 	.word	0x2000095c
 8009424:	200009d4 	.word	0x200009d4
 8009428:	20000998 	.word	0x20000998
 800942c:	2000096e 	.word	0x2000096e
            break;
 8009430:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009432:	4b28      	ldr	r3, [pc, #160]	; (80094d4 <RadioSetRxGenericConfig+0x37c>)
 8009434:	2201      	movs	r2, #1
 8009436:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800943c:	4b25      	ldr	r3, [pc, #148]	; (80094d4 <RadioSetRxGenericConfig+0x37c>)
 800943e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8009446:	4b23      	ldr	r3, [pc, #140]	; (80094d4 <RadioSetRxGenericConfig+0x37c>)
 8009448:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800944a:	4a22      	ldr	r2, [pc, #136]	; (80094d4 <RadioSetRxGenericConfig+0x37c>)
 800944c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009450:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8009458:	4b1e      	ldr	r3, [pc, #120]	; (80094d4 <RadioSetRxGenericConfig+0x37c>)
 800945a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8009464:	4b1b      	ldr	r3, [pc, #108]	; (80094d4 <RadioSetRxGenericConfig+0x37c>)
 8009466:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 800946a:	f7ff f9be 	bl	80087ea <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800946e:	2001      	movs	r0, #1
 8009470:	f7fe fb5a 	bl	8007b28 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009474:	4818      	ldr	r0, [pc, #96]	; (80094d8 <RadioSetRxGenericConfig+0x380>)
 8009476:	f000 ff7d 	bl	800a374 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800947a:	4818      	ldr	r0, [pc, #96]	; (80094dc <RadioSetRxGenericConfig+0x384>)
 800947c:	f001 f84c 	bl	800a518 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8009480:	4b14      	ldr	r3, [pc, #80]	; (80094d4 <RadioSetRxGenericConfig+0x37c>)
 8009482:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009486:	2b01      	cmp	r3, #1
 8009488:	d10d      	bne.n	80094a6 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800948a:	f240 7036 	movw	r0, #1846	; 0x736
 800948e:	f001 f99f 	bl	800a7d0 <SUBGRF_ReadRegister>
 8009492:	4603      	mov	r3, r0
 8009494:	f023 0304 	bic.w	r3, r3, #4
 8009498:	b2db      	uxtb	r3, r3
 800949a:	4619      	mov	r1, r3
 800949c:	f240 7036 	movw	r0, #1846	; 0x736
 80094a0:	f001 f982 	bl	800a7a8 <SUBGRF_WriteRegister>
 80094a4:	e00c      	b.n	80094c0 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80094a6:	f240 7036 	movw	r0, #1846	; 0x736
 80094aa:	f001 f991 	bl	800a7d0 <SUBGRF_ReadRegister>
 80094ae:	4603      	mov	r3, r0
 80094b0:	f043 0304 	orr.w	r3, r3, #4
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	4619      	mov	r1, r3
 80094b8:	f240 7036 	movw	r0, #1846	; 0x736
 80094bc:	f001 f974 	bl	800a7a8 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 80094c0:	4b04      	ldr	r3, [pc, #16]	; (80094d4 <RadioSetRxGenericConfig+0x37c>)
 80094c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094c6:	609a      	str	r2, [r3, #8]
        break;
 80094c8:	bf00      	nop
    }
    return status;
 80094ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3730      	adds	r7, #48	; 0x30
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	20000960 	.word	0x20000960
 80094d8:	20000998 	.word	0x20000998
 80094dc:	2000096e 	.word	0x2000096e

080094e0 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b08e      	sub	sp, #56	; 0x38
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	60b9      	str	r1, [r7, #8]
 80094e8:	607b      	str	r3, [r7, #4]
 80094ea:	4603      	mov	r3, r0
 80094ec:	73fb      	strb	r3, [r7, #15]
 80094ee:	4613      	mov	r3, r2
 80094f0:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 80094f2:	2300      	movs	r3, #0
 80094f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094f6:	2300      	movs	r3, #0
 80094f8:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80094fa:	f001 fc3c 	bl	800ad76 <RFW_DeInit>
    switch( modem )
 80094fe:	7bfb      	ldrb	r3, [r7, #15]
 8009500:	2b03      	cmp	r3, #3
 8009502:	f200 8204 	bhi.w	800990e <RadioSetTxGenericConfig+0x42e>
 8009506:	a201      	add	r2, pc, #4	; (adr r2, 800950c <RadioSetTxGenericConfig+0x2c>)
 8009508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800950c:	08009691 	.word	0x08009691
 8009510:	080097d9 	.word	0x080097d9
 8009514:	080098d1 	.word	0x080098d1
 8009518:	0800951d 	.word	0x0800951d
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	7c9b      	ldrb	r3, [r3, #18]
 8009520:	2b08      	cmp	r3, #8
 8009522:	d902      	bls.n	800952a <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8009524:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009528:	e206      	b.n	8009938 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	6899      	ldr	r1, [r3, #8]
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	7c9b      	ldrb	r3, [r3, #18]
 8009532:	b29a      	uxth	r2, r3
 8009534:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009538:	4618      	mov	r0, r3
 800953a:	f001 fdb3 	bl	800b0a4 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d102      	bne.n	800954c <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8009546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800954a:	e1f5      	b.n	8009938 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f242 7210 	movw	r2, #10000	; 0x2710
 8009554:	4293      	cmp	r3, r2
 8009556:	d813      	bhi.n	8009580 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8009558:	2302      	movs	r3, #2
 800955a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 800955e:	4b99      	ldr	r3, [pc, #612]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 8009560:	2203      	movs	r2, #3
 8009562:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8009564:	4b97      	ldr	r3, [pc, #604]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 8009566:	2203      	movs	r2, #3
 8009568:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a94      	ldr	r2, [pc, #592]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 8009572:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	7cda      	ldrb	r2, [r3, #19]
 8009578:	4b92      	ldr	r3, [pc, #584]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 800957a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800957e:	e017      	b.n	80095b0 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8009580:	2300      	movs	r3, #0
 8009582:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009586:	4b8f      	ldr	r3, [pc, #572]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 8009588:	2200      	movs	r2, #0
 800958a:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800958c:	4b8d      	ldr	r3, [pc, #564]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 800958e:	2200      	movs	r2, #0
 8009590:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a8a      	ldr	r2, [pc, #552]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 800959a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	7cda      	ldrb	r2, [r3, #19]
 80095a0:	4b88      	ldr	r3, [pc, #544]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 80095a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	089b      	lsrs	r3, r3, #2
 80095ac:	4a85      	ldr	r2, [pc, #532]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 80095ae:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	00db      	lsls	r3, r3, #3
 80095b8:	b29a      	uxth	r2, r3
 80095ba:	4b82      	ldr	r3, [pc, #520]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 80095bc:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80095be:	4b81      	ldr	r3, [pc, #516]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 80095c0:	2204      	movs	r2, #4
 80095c2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	7c9b      	ldrb	r3, [r3, #18]
 80095c8:	00db      	lsls	r3, r3, #3
 80095ca:	b2da      	uxtb	r2, r3
 80095cc:	4b7d      	ldr	r3, [pc, #500]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 80095ce:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80095d0:	4b7c      	ldr	r3, [pc, #496]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 80095d2:	2200      	movs	r2, #0
 80095d4:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	7d9b      	ldrb	r3, [r3, #22]
 80095da:	2b02      	cmp	r3, #2
 80095dc:	d003      	beq.n	80095e6 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	7d1b      	ldrb	r3, [r3, #20]
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	d12b      	bne.n	800963e <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	7d5b      	ldrb	r3, [r3, #21]
 80095ea:	2bf1      	cmp	r3, #241	; 0xf1
 80095ec:	d00a      	beq.n	8009604 <RadioSetTxGenericConfig+0x124>
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	7d5b      	ldrb	r3, [r3, #21]
 80095f2:	2bf2      	cmp	r3, #242	; 0xf2
 80095f4:	d006      	beq.n	8009604 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	7d5b      	ldrb	r3, [r3, #21]
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d002      	beq.n	8009604 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 80095fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009602:	e199      	b.n	8009938 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8009608:	2301      	movs	r3, #1
 800960a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800960e:	4b6e      	ldr	r3, [pc, #440]	; (80097c8 <RadioSetTxGenericConfig+0x2e8>)
 8009610:	6819      	ldr	r1, [r3, #0]
 8009612:	f107 0320 	add.w	r3, r7, #32
 8009616:	4a6d      	ldr	r2, [pc, #436]	; (80097cc <RadioSetTxGenericConfig+0x2ec>)
 8009618:	4618      	mov	r0, r3
 800961a:	f001 fb9f 	bl	800ad5c <RFW_Init>
 800961e:	4603      	mov	r3, r0
 8009620:	2b00      	cmp	r3, #0
 8009622:	d002      	beq.n	800962a <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8009624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009628:	e186      	b.n	8009938 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800962a:	4b66      	ldr	r3, [pc, #408]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 800962c:	2200      	movs	r2, #0
 800962e:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009630:	4b64      	ldr	r3, [pc, #400]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 8009632:	2201      	movs	r2, #1
 8009634:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009636:	4b63      	ldr	r3, [pc, #396]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 8009638:	2200      	movs	r2, #0
 800963a:	755a      	strb	r2, [r3, #21]
        {
 800963c:	e00b      	b.n	8009656 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	7d5a      	ldrb	r2, [r3, #21]
 8009642:	4b60      	ldr	r3, [pc, #384]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 8009644:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	7d9a      	ldrb	r2, [r3, #22]
 800964a:	4b5e      	ldr	r3, [pc, #376]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 800964c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	7d1a      	ldrb	r2, [r3, #20]
 8009652:	4b5c      	ldr	r3, [pc, #368]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 8009654:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8009656:	f7ff f8c8 	bl	80087ea <RadioStandby>
        RadioSetModem( radio_modem );
 800965a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800965e:	4618      	mov	r0, r3
 8009660:	f7fe fa62 	bl	8007b28 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009664:	485a      	ldr	r0, [pc, #360]	; (80097d0 <RadioSetTxGenericConfig+0x2f0>)
 8009666:	f000 fe85 	bl	800a374 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800966a:	485a      	ldr	r0, [pc, #360]	; (80097d4 <RadioSetTxGenericConfig+0x2f4>)
 800966c:	f000 ff54 	bl	800a518 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009670:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009674:	4618      	mov	r0, r3
 8009676:	f000 fa18 	bl	8009aaa <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	8a1b      	ldrh	r3, [r3, #16]
 800967e:	4618      	mov	r0, r3
 8009680:	f000 fa62 	bl	8009b48 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	899b      	ldrh	r3, [r3, #12]
 8009688:	4618      	mov	r0, r3
 800968a:	f000 fa3d 	bl	8009b08 <SUBGRF_SetCrcPolynomial>
        break;
 800968e:	e13f      	b.n	8009910 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d102      	bne.n	800969e <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8009698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800969c:	e14c      	b.n	8009938 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	7c9b      	ldrb	r3, [r3, #18]
 80096a2:	2b08      	cmp	r3, #8
 80096a4:	d902      	bls.n	80096ac <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 80096a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096aa:	e145      	b.n	8009938 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	6899      	ldr	r1, [r3, #8]
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	7c9b      	ldrb	r3, [r3, #18]
 80096b4:	b29a      	uxth	r2, r3
 80096b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80096ba:	4618      	mov	r0, r3
 80096bc:	f001 fcf2 	bl	800b0a4 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80096c0:	4b40      	ldr	r3, [pc, #256]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 80096c2:	2200      	movs	r2, #0
 80096c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a3d      	ldr	r2, [pc, #244]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 80096ce:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	7cda      	ldrb	r2, [r3, #19]
 80096d4:	4b3b      	ldr	r3, [pc, #236]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 80096d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	4a39      	ldr	r2, [pc, #228]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 80096e0:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80096e2:	4b38      	ldr	r3, [pc, #224]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 80096e4:	2200      	movs	r2, #0
 80096e6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	00db      	lsls	r3, r3, #3
 80096f0:	b29a      	uxth	r2, r3
 80096f2:	4b34      	ldr	r3, [pc, #208]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 80096f4:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80096f6:	4b33      	ldr	r3, [pc, #204]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 80096f8:	2204      	movs	r2, #4
 80096fa:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	7c9b      	ldrb	r3, [r3, #18]
 8009700:	00db      	lsls	r3, r3, #3
 8009702:	b2da      	uxtb	r2, r3
 8009704:	4b2f      	ldr	r3, [pc, #188]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 8009706:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8009708:	4b2e      	ldr	r3, [pc, #184]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 800970a:	2200      	movs	r2, #0
 800970c:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	7d9b      	ldrb	r3, [r3, #22]
 8009712:	2b02      	cmp	r3, #2
 8009714:	d003      	beq.n	800971e <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	7d1b      	ldrb	r3, [r3, #20]
 800971a:	2b02      	cmp	r3, #2
 800971c:	d12a      	bne.n	8009774 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	7d5b      	ldrb	r3, [r3, #21]
 8009722:	2bf1      	cmp	r3, #241	; 0xf1
 8009724:	d00a      	beq.n	800973c <RadioSetTxGenericConfig+0x25c>
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	7d5b      	ldrb	r3, [r3, #21]
 800972a:	2bf2      	cmp	r3, #242	; 0xf2
 800972c:	d006      	beq.n	800973c <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	7d5b      	ldrb	r3, [r3, #21]
 8009732:	2b01      	cmp	r3, #1
 8009734:	d002      	beq.n	800973c <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8009736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800973a:	e0fd      	b.n	8009938 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 800973c:	2301      	movs	r3, #1
 800973e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8009744:	4b20      	ldr	r3, [pc, #128]	; (80097c8 <RadioSetTxGenericConfig+0x2e8>)
 8009746:	6819      	ldr	r1, [r3, #0]
 8009748:	f107 0314 	add.w	r3, r7, #20
 800974c:	4a1f      	ldr	r2, [pc, #124]	; (80097cc <RadioSetTxGenericConfig+0x2ec>)
 800974e:	4618      	mov	r0, r3
 8009750:	f001 fb04 	bl	800ad5c <RFW_Init>
 8009754:	4603      	mov	r3, r0
 8009756:	2b00      	cmp	r3, #0
 8009758:	d002      	beq.n	8009760 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 800975a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800975e:	e0eb      	b.n	8009938 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009760:	4b18      	ldr	r3, [pc, #96]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 8009762:	2200      	movs	r2, #0
 8009764:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009766:	4b17      	ldr	r3, [pc, #92]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 8009768:	2201      	movs	r2, #1
 800976a:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800976c:	4b15      	ldr	r3, [pc, #84]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 800976e:	2200      	movs	r2, #0
 8009770:	755a      	strb	r2, [r3, #21]
        {
 8009772:	e00b      	b.n	800978c <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	7d5a      	ldrb	r2, [r3, #21]
 8009778:	4b12      	ldr	r3, [pc, #72]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 800977a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	7d9a      	ldrb	r2, [r3, #22]
 8009780:	4b10      	ldr	r3, [pc, #64]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 8009782:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	7d1a      	ldrb	r2, [r3, #20]
 8009788:	4b0e      	ldr	r3, [pc, #56]	; (80097c4 <RadioSetTxGenericConfig+0x2e4>)
 800978a:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800978c:	f7ff f82d 	bl	80087ea <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8009790:	2000      	movs	r0, #0
 8009792:	f7fe f9c9 	bl	8007b28 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009796:	480e      	ldr	r0, [pc, #56]	; (80097d0 <RadioSetTxGenericConfig+0x2f0>)
 8009798:	f000 fdec 	bl	800a374 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800979c:	480d      	ldr	r0, [pc, #52]	; (80097d4 <RadioSetTxGenericConfig+0x2f4>)
 800979e:	f000 febb 	bl	800a518 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80097a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 f97f 	bl	8009aaa <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	8a1b      	ldrh	r3, [r3, #16]
 80097b0:	4618      	mov	r0, r3
 80097b2:	f000 f9c9 	bl	8009b48 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	899b      	ldrh	r3, [r3, #12]
 80097ba:	4618      	mov	r0, r3
 80097bc:	f000 f9a4 	bl	8009b08 <SUBGRF_SetCrcPolynomial>
        break;
 80097c0:	e0a6      	b.n	8009910 <RadioSetTxGenericConfig+0x430>
 80097c2:	bf00      	nop
 80097c4:	20000960 	.word	0x20000960
 80097c8:	2000095c 	.word	0x2000095c
 80097cc:	200009bc 	.word	0x200009bc
 80097d0:	20000998 	.word	0x20000998
 80097d4:	2000096e 	.word	0x2000096e
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80097d8:	4b59      	ldr	r3, [pc, #356]	; (8009940 <RadioSetTxGenericConfig+0x460>)
 80097da:	2201      	movs	r2, #1
 80097dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	781a      	ldrb	r2, [r3, #0]
 80097e4:	4b56      	ldr	r3, [pc, #344]	; (8009940 <RadioSetTxGenericConfig+0x460>)
 80097e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	785a      	ldrb	r2, [r3, #1]
 80097ee:	4b54      	ldr	r3, [pc, #336]	; (8009940 <RadioSetTxGenericConfig+0x460>)
 80097f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	789a      	ldrb	r2, [r3, #2]
 80097f8:	4b51      	ldr	r3, [pc, #324]	; (8009940 <RadioSetTxGenericConfig+0x460>)
 80097fa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	78db      	ldrb	r3, [r3, #3]
 8009802:	2b02      	cmp	r3, #2
 8009804:	d010      	beq.n	8009828 <RadioSetTxGenericConfig+0x348>
 8009806:	2b02      	cmp	r3, #2
 8009808:	dc20      	bgt.n	800984c <RadioSetTxGenericConfig+0x36c>
 800980a:	2b00      	cmp	r3, #0
 800980c:	d002      	beq.n	8009814 <RadioSetTxGenericConfig+0x334>
 800980e:	2b01      	cmp	r3, #1
 8009810:	d005      	beq.n	800981e <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 8009812:	e01b      	b.n	800984c <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009814:	4b4a      	ldr	r3, [pc, #296]	; (8009940 <RadioSetTxGenericConfig+0x460>)
 8009816:	2200      	movs	r2, #0
 8009818:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800981c:	e017      	b.n	800984e <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800981e:	4b48      	ldr	r3, [pc, #288]	; (8009940 <RadioSetTxGenericConfig+0x460>)
 8009820:	2201      	movs	r2, #1
 8009822:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009826:	e012      	b.n	800984e <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	2b0b      	cmp	r3, #11
 800982e:	d003      	beq.n	8009838 <RadioSetTxGenericConfig+0x358>
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	2b0c      	cmp	r3, #12
 8009836:	d104      	bne.n	8009842 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009838:	4b41      	ldr	r3, [pc, #260]	; (8009940 <RadioSetTxGenericConfig+0x460>)
 800983a:	2201      	movs	r2, #1
 800983c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009840:	e005      	b.n	800984e <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009842:	4b3f      	ldr	r3, [pc, #252]	; (8009940 <RadioSetTxGenericConfig+0x460>)
 8009844:	2200      	movs	r2, #0
 8009846:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800984a:	e000      	b.n	800984e <RadioSetTxGenericConfig+0x36e>
            break;
 800984c:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800984e:	4b3c      	ldr	r3, [pc, #240]	; (8009940 <RadioSetTxGenericConfig+0x460>)
 8009850:	2201      	movs	r2, #1
 8009852:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	889a      	ldrh	r2, [r3, #4]
 8009858:	4b39      	ldr	r3, [pc, #228]	; (8009940 <RadioSetTxGenericConfig+0x460>)
 800985a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	799a      	ldrb	r2, [r3, #6]
 8009860:	4b37      	ldr	r3, [pc, #220]	; (8009940 <RadioSetTxGenericConfig+0x460>)
 8009862:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	79da      	ldrb	r2, [r3, #7]
 8009868:	4b35      	ldr	r3, [pc, #212]	; (8009940 <RadioSetTxGenericConfig+0x460>)
 800986a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	7a1a      	ldrb	r2, [r3, #8]
 8009872:	4b33      	ldr	r3, [pc, #204]	; (8009940 <RadioSetTxGenericConfig+0x460>)
 8009874:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 8009878:	f7fe ffb7 	bl	80087ea <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800987c:	2001      	movs	r0, #1
 800987e:	f7fe f953 	bl	8007b28 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009882:	4830      	ldr	r0, [pc, #192]	; (8009944 <RadioSetTxGenericConfig+0x464>)
 8009884:	f000 fd76 	bl	800a374 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009888:	482f      	ldr	r0, [pc, #188]	; (8009948 <RadioSetTxGenericConfig+0x468>)
 800988a:	f000 fe45 	bl	800a518 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800988e:	4b2c      	ldr	r3, [pc, #176]	; (8009940 <RadioSetTxGenericConfig+0x460>)
 8009890:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009894:	2b06      	cmp	r3, #6
 8009896:	d10d      	bne.n	80098b4 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8009898:	f640 0089 	movw	r0, #2185	; 0x889
 800989c:	f000 ff98 	bl	800a7d0 <SUBGRF_ReadRegister>
 80098a0:	4603      	mov	r3, r0
 80098a2:	f023 0304 	bic.w	r3, r3, #4
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	4619      	mov	r1, r3
 80098aa:	f640 0089 	movw	r0, #2185	; 0x889
 80098ae:	f000 ff7b 	bl	800a7a8 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 80098b2:	e02d      	b.n	8009910 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80098b4:	f640 0089 	movw	r0, #2185	; 0x889
 80098b8:	f000 ff8a 	bl	800a7d0 <SUBGRF_ReadRegister>
 80098bc:	4603      	mov	r3, r0
 80098be:	f043 0304 	orr.w	r3, r3, #4
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	4619      	mov	r1, r3
 80098c6:	f640 0089 	movw	r0, #2185	; 0x889
 80098ca:	f000 ff6d 	bl	800a7a8 <SUBGRF_WriteRegister>
        break;
 80098ce:	e01f      	b.n	8009910 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d004      	beq.n	80098e2 <RadioSetTxGenericConfig+0x402>
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80098e0:	d902      	bls.n	80098e8 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 80098e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098e6:	e027      	b.n	8009938 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 80098e8:	2003      	movs	r0, #3
 80098ea:	f7fe f91d 	bl	8007b28 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80098ee:	4b14      	ldr	r3, [pc, #80]	; (8009940 <RadioSetTxGenericConfig+0x460>)
 80098f0:	2202      	movs	r2, #2
 80098f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a11      	ldr	r2, [pc, #68]	; (8009940 <RadioSetTxGenericConfig+0x460>)
 80098fc:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80098fe:	4b10      	ldr	r3, [pc, #64]	; (8009940 <RadioSetTxGenericConfig+0x460>)
 8009900:	2216      	movs	r2, #22
 8009902:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009906:	480f      	ldr	r0, [pc, #60]	; (8009944 <RadioSetTxGenericConfig+0x464>)
 8009908:	f000 fd34 	bl	800a374 <SUBGRF_SetModulationParams>
        break;
 800990c:	e000      	b.n	8009910 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 800990e:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8009910:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009914:	4618      	mov	r0, r3
 8009916:	f001 f863 	bl	800a9e0 <SUBGRF_SetRfTxPower>
 800991a:	4603      	mov	r3, r0
 800991c:	461a      	mov	r2, r3
 800991e:	4b08      	ldr	r3, [pc, #32]	; (8009940 <RadioSetTxGenericConfig+0x460>)
 8009920:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8009924:	4b06      	ldr	r3, [pc, #24]	; (8009940 <RadioSetTxGenericConfig+0x460>)
 8009926:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800992a:	4618      	mov	r0, r3
 800992c:	f001 fa37 	bl	800ad9e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8009930:	4a03      	ldr	r2, [pc, #12]	; (8009940 <RadioSetTxGenericConfig+0x460>)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6053      	str	r3, [r2, #4]
    return 0;
 8009936:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8009938:	4618      	mov	r0, r3
 800993a:	3738      	adds	r7, #56	; 0x38
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}
 8009940:	20000960 	.word	0x20000960
 8009944:	20000998 	.word	0x20000998
 8009948:	2000096e 	.word	0x2000096e

0800994c <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009954:	2301      	movs	r3, #1
 8009956:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8009958:	7bfb      	ldrb	r3, [r7, #15]
}
 800995a:	4618      	mov	r0, r3
 800995c:	3714      	adds	r7, #20
 800995e:	46bd      	mov	sp, r7
 8009960:	bc80      	pop	{r7}
 8009962:	4770      	bx	lr

08009964 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 800996e:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8009970:	4618      	mov	r0, r3
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	bc80      	pop	{r7}
 8009978:	4770      	bx	lr
	...

0800997c <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d002      	beq.n	8009990 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800998a:	4a1d      	ldr	r2, [pc, #116]	; (8009a00 <SUBGRF_Init+0x84>)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8009990:	f7f8 fda6 	bl	80024e0 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8009994:	2002      	movs	r0, #2
 8009996:	f001 f8ff 	bl	800ab98 <Radio_SMPS_Set>

    ImageCalibrated = false;
 800999a:	4b1a      	ldr	r3, [pc, #104]	; (8009a04 <SUBGRF_Init+0x88>)
 800999c:	2200      	movs	r2, #0
 800999e:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 80099a0:	2000      	movs	r0, #0
 80099a2:	f000 f97d 	bl	8009ca0 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 80099a6:	f001 fb52 	bl	800b04e <RBI_IsTCXO>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d10e      	bne.n	80099ce <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80099b0:	2140      	movs	r1, #64	; 0x40
 80099b2:	2001      	movs	r0, #1
 80099b4:	f000 fb82 	bl	800a0bc <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80099b8:	2100      	movs	r1, #0
 80099ba:	f640 1011 	movw	r0, #2321	; 0x911
 80099be:	f000 fef3 	bl	800a7a8 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80099c2:	237f      	movs	r3, #127	; 0x7f
 80099c4:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 80099c6:	7b38      	ldrb	r0, [r7, #12]
 80099c8:	f000 fa8b 	bl	8009ee2 <SUBGRF_Calibrate>
 80099cc:	e009      	b.n	80099e2 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80099ce:	2120      	movs	r1, #32
 80099d0:	f640 1011 	movw	r0, #2321	; 0x911
 80099d4:	f000 fee8 	bl	800a7a8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80099d8:	2120      	movs	r1, #32
 80099da:	f640 1012 	movw	r0, #2322	; 0x912
 80099de:	f000 fee3 	bl	800a7a8 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80099e2:	210e      	movs	r1, #14
 80099e4:	f640 101f 	movw	r0, #2335	; 0x91f
 80099e8:	f000 fede 	bl	800a7a8 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 80099ec:	f001 fa86 	bl	800aefc <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 80099f0:	4b05      	ldr	r3, [pc, #20]	; (8009a08 <SUBGRF_Init+0x8c>)
 80099f2:	2201      	movs	r2, #1
 80099f4:	701a      	strb	r2, [r3, #0]
}
 80099f6:	bf00      	nop
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	200009f8 	.word	0x200009f8
 8009a04:	200009f4 	.word	0x200009f4
 8009a08:	200009ec 	.word	0x200009ec

08009a0c <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	af00      	add	r7, sp, #0
    return OperatingMode;
 8009a10:	4b02      	ldr	r3, [pc, #8]	; (8009a1c <SUBGRF_GetOperatingMode+0x10>)
 8009a12:	781b      	ldrb	r3, [r3, #0]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bc80      	pop	{r7}
 8009a1a:	4770      	bx	lr
 8009a1c:	200009ec 	.word	0x200009ec

08009a20 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	460b      	mov	r3, r1
 8009a2a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8009a2c:	78fb      	ldrb	r3, [r7, #3]
 8009a2e:	461a      	mov	r2, r3
 8009a30:	6879      	ldr	r1, [r7, #4]
 8009a32:	2000      	movs	r0, #0
 8009a34:	f000 ff24 	bl	800a880 <SUBGRF_WriteBuffer>
}
 8009a38:	bf00      	nop
 8009a3a:	3708      	adds	r7, #8
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b086      	sub	sp, #24
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8009a52:	f107 0317 	add.w	r3, r7, #23
 8009a56:	4619      	mov	r1, r3
 8009a58:	68b8      	ldr	r0, [r7, #8]
 8009a5a:	f000 fe27 	bl	800a6ac <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	79fa      	ldrb	r2, [r7, #7]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d201      	bcs.n	8009a6c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e007      	b.n	8009a7c <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8009a6c:	7df8      	ldrb	r0, [r7, #23]
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	461a      	mov	r2, r3
 8009a74:	68f9      	ldr	r1, [r7, #12]
 8009a76:	f000 ff25 	bl	800a8c4 <SUBGRF_ReadBuffer>

    return 0;
 8009a7a:	2300      	movs	r3, #0
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3718      	adds	r7, #24
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	607a      	str	r2, [r7, #4]
 8009a90:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8009a92:	7afb      	ldrb	r3, [r7, #11]
 8009a94:	4619      	mov	r1, r3
 8009a96:	68f8      	ldr	r0, [r7, #12]
 8009a98:	f7ff ffc2 	bl	8009a20 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 f91b 	bl	8009cd8 <SUBGRF_SetTx>
}
 8009aa2:	bf00      	nop
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b082      	sub	sp, #8
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8009ab2:	2208      	movs	r2, #8
 8009ab4:	6879      	ldr	r1, [r7, #4]
 8009ab6:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8009aba:	f000 fe9d 	bl	800a7f8 <SUBGRF_WriteRegisters>
    return 0;
 8009abe:	2300      	movs	r3, #0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3708      	adds	r7, #8
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	4603      	mov	r3, r0
 8009ad0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8009ad2:	88fb      	ldrh	r3, [r7, #6]
 8009ad4:	0a1b      	lsrs	r3, r3, #8
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8009adc:	88fb      	ldrh	r3, [r7, #6]
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8009ae2:	f000 fb6f 	bl	800a1c4 <SUBGRF_GetPacketType>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d108      	bne.n	8009afe <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8009aec:	f107 030c 	add.w	r3, r7, #12
 8009af0:	2202      	movs	r2, #2
 8009af2:	4619      	mov	r1, r3
 8009af4:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8009af8:	f000 fe7e 	bl	800a7f8 <SUBGRF_WriteRegisters>
            break;
 8009afc:	e000      	b.n	8009b00 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8009afe:	bf00      	nop
    }
}
 8009b00:	bf00      	nop
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	4603      	mov	r3, r0
 8009b10:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8009b12:	88fb      	ldrh	r3, [r7, #6]
 8009b14:	0a1b      	lsrs	r3, r3, #8
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	b2db      	uxtb	r3, r3
 8009b1a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8009b1c:	88fb      	ldrh	r3, [r7, #6]
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8009b22:	f000 fb4f 	bl	800a1c4 <SUBGRF_GetPacketType>
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d108      	bne.n	8009b3e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8009b2c:	f107 030c 	add.w	r3, r7, #12
 8009b30:	2202      	movs	r2, #2
 8009b32:	4619      	mov	r1, r3
 8009b34:	f240 60be 	movw	r0, #1726	; 0x6be
 8009b38:	f000 fe5e 	bl	800a7f8 <SUBGRF_WriteRegisters>
            break;
 8009b3c:	e000      	b.n	8009b40 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8009b3e:	bf00      	nop
    }
}
 8009b40:	bf00      	nop
 8009b42:	3710      	adds	r7, #16
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	4603      	mov	r3, r0
 8009b50:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8009b52:	2300      	movs	r3, #0
 8009b54:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8009b56:	f000 fb35 	bl	800a1c4 <SUBGRF_GetPacketType>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d121      	bne.n	8009ba4 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8009b60:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8009b64:	f000 fe34 	bl	800a7d0 <SUBGRF_ReadRegister>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	f023 0301 	bic.w	r3, r3, #1
 8009b6e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8009b70:	88fb      	ldrh	r3, [r7, #6]
 8009b72:	0a1b      	lsrs	r3, r3, #8
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	b25b      	sxtb	r3, r3
 8009b78:	f003 0301 	and.w	r3, r3, #1
 8009b7c:	b25a      	sxtb	r2, r3
 8009b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b82:	4313      	orrs	r3, r2
 8009b84:	b25b      	sxtb	r3, r3
 8009b86:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8009b88:	7bfb      	ldrb	r3, [r7, #15]
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8009b90:	f000 fe0a 	bl	800a7a8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8009b94:	88fb      	ldrh	r3, [r7, #6]
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	4619      	mov	r1, r3
 8009b9a:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8009b9e:	f000 fe03 	bl	800a7a8 <SUBGRF_WriteRegister>
            break;
 8009ba2:	e000      	b.n	8009ba6 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8009ba4:	bf00      	nop
    }
}
 8009ba6:	bf00      	nop
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b082      	sub	sp, #8
 8009bb2:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8009bc0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8009bc4:	f000 fe04 	bl	800a7d0 <SUBGRF_ReadRegister>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8009bcc:	79fb      	ldrb	r3, [r7, #7]
 8009bce:	f023 0301 	bic.w	r3, r3, #1
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8009bda:	f000 fde5 	bl	800a7a8 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8009bde:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8009be2:	f000 fdf5 	bl	800a7d0 <SUBGRF_ReadRegister>
 8009be6:	4603      	mov	r3, r0
 8009be8:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8009bea:	79bb      	ldrb	r3, [r7, #6]
 8009bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8009bf8:	f000 fdd6 	bl	800a7a8 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8009bfc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8009c00:	f000 f88a 	bl	8009d18 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8009c04:	463b      	mov	r3, r7
 8009c06:	2204      	movs	r2, #4
 8009c08:	4619      	mov	r1, r3
 8009c0a:	f640 0019 	movw	r0, #2073	; 0x819
 8009c0e:	f000 fe15 	bl	800a83c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8009c12:	2000      	movs	r0, #0
 8009c14:	f000 f844 	bl	8009ca0 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8009c18:	79fb      	ldrb	r3, [r7, #7]
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8009c20:	f000 fdc2 	bl	800a7a8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8009c24:	79bb      	ldrb	r3, [r7, #6]
 8009c26:	4619      	mov	r1, r3
 8009c28:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8009c2c:	f000 fdbc 	bl	800a7a8 <SUBGRF_WriteRegister>

    return number;
 8009c30:	683b      	ldr	r3, [r7, #0]
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3708      	adds	r7, #8
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
	...

08009c3c <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8009c44:	2000      	movs	r0, #0
 8009c46:	f001 f999 	bl	800af7c <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8009c4a:	2002      	movs	r0, #2
 8009c4c:	f000 ffa4 	bl	800ab98 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009c50:	793b      	ldrb	r3, [r7, #4]
 8009c52:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8009c5c:	793b      	ldrb	r3, [r7, #4]
 8009c5e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009c66:	b25b      	sxtb	r3, r3
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8009c6c:	793b      	ldrb	r3, [r7, #4]
 8009c6e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8009c76:	4313      	orrs	r3, r2
 8009c78:	b25b      	sxtb	r3, r3
 8009c7a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009c7c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8009c7e:	f107 030f 	add.w	r3, r7, #15
 8009c82:	2201      	movs	r2, #1
 8009c84:	4619      	mov	r1, r3
 8009c86:	2084      	movs	r0, #132	; 0x84
 8009c88:	f000 fe3e 	bl	800a908 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8009c8c:	4b03      	ldr	r3, [pc, #12]	; (8009c9c <SUBGRF_SetSleep+0x60>)
 8009c8e:	2200      	movs	r2, #0
 8009c90:	701a      	strb	r2, [r3, #0]
}
 8009c92:	bf00      	nop
 8009c94:	3710      	adds	r7, #16
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	200009ec 	.word	0x200009ec

08009ca0 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8009caa:	1dfb      	adds	r3, r7, #7
 8009cac:	2201      	movs	r2, #1
 8009cae:	4619      	mov	r1, r3
 8009cb0:	2080      	movs	r0, #128	; 0x80
 8009cb2:	f000 fe29 	bl	800a908 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8009cb6:	79fb      	ldrb	r3, [r7, #7]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d103      	bne.n	8009cc4 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8009cbc:	4b05      	ldr	r3, [pc, #20]	; (8009cd4 <SUBGRF_SetStandby+0x34>)
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8009cc2:	e002      	b.n	8009cca <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8009cc4:	4b03      	ldr	r3, [pc, #12]	; (8009cd4 <SUBGRF_SetStandby+0x34>)
 8009cc6:	2202      	movs	r2, #2
 8009cc8:	701a      	strb	r2, [r3, #0]
}
 8009cca:	bf00      	nop
 8009ccc:	3708      	adds	r7, #8
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	200009ec 	.word	0x200009ec

08009cd8 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8009ce0:	4b0c      	ldr	r3, [pc, #48]	; (8009d14 <SUBGRF_SetTx+0x3c>)
 8009ce2:	2204      	movs	r2, #4
 8009ce4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	0c1b      	lsrs	r3, r3, #16
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	0a1b      	lsrs	r3, r3, #8
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8009cfc:	f107 030c 	add.w	r3, r7, #12
 8009d00:	2203      	movs	r2, #3
 8009d02:	4619      	mov	r1, r3
 8009d04:	2083      	movs	r0, #131	; 0x83
 8009d06:	f000 fdff 	bl	800a908 <SUBGRF_WriteCommand>
}
 8009d0a:	bf00      	nop
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	200009ec 	.word	0x200009ec

08009d18 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8009d20:	4b0c      	ldr	r3, [pc, #48]	; (8009d54 <SUBGRF_SetRx+0x3c>)
 8009d22:	2205      	movs	r2, #5
 8009d24:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	0c1b      	lsrs	r3, r3, #16
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	0a1b      	lsrs	r3, r3, #8
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8009d3c:	f107 030c 	add.w	r3, r7, #12
 8009d40:	2203      	movs	r2, #3
 8009d42:	4619      	mov	r1, r3
 8009d44:	2082      	movs	r0, #130	; 0x82
 8009d46:	f000 fddf 	bl	800a908 <SUBGRF_WriteCommand>
}
 8009d4a:	bf00      	nop
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	200009ec 	.word	0x200009ec

08009d58 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8009d60:	4b0e      	ldr	r3, [pc, #56]	; (8009d9c <SUBGRF_SetRxBoosted+0x44>)
 8009d62:	2205      	movs	r2, #5
 8009d64:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8009d66:	2197      	movs	r1, #151	; 0x97
 8009d68:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8009d6c:	f000 fd1c 	bl	800a7a8 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	0c1b      	lsrs	r3, r3, #16
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	0a1b      	lsrs	r3, r3, #8
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8009d86:	f107 030c 	add.w	r3, r7, #12
 8009d8a:	2203      	movs	r2, #3
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	2082      	movs	r0, #130	; 0x82
 8009d90:	f000 fdba 	bl	800a908 <SUBGRF_WriteCommand>
}
 8009d94:	bf00      	nop
 8009d96:	3710      	adds	r7, #16
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	200009ec 	.word	0x200009ec

08009da0 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	0c1b      	lsrs	r3, r3, #16
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	0a1b      	lsrs	r3, r3, #8
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	0c1b      	lsrs	r3, r3, #16
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	0a1b      	lsrs	r3, r3, #8
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8009dd6:	f107 0308 	add.w	r3, r7, #8
 8009dda:	2206      	movs	r2, #6
 8009ddc:	4619      	mov	r1, r3
 8009dde:	2094      	movs	r0, #148	; 0x94
 8009de0:	f000 fd92 	bl	800a908 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8009de4:	4b03      	ldr	r3, [pc, #12]	; (8009df4 <SUBGRF_SetRxDutyCycle+0x54>)
 8009de6:	2206      	movs	r2, #6
 8009de8:	701a      	strb	r2, [r3, #0]
}
 8009dea:	bf00      	nop
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	200009ec 	.word	0x200009ec

08009df8 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	2100      	movs	r1, #0
 8009e00:	20c5      	movs	r0, #197	; 0xc5
 8009e02:	f000 fd81 	bl	800a908 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8009e06:	4b02      	ldr	r3, [pc, #8]	; (8009e10 <SUBGRF_SetCad+0x18>)
 8009e08:	2207      	movs	r2, #7
 8009e0a:	701a      	strb	r2, [r3, #0]
}
 8009e0c:	bf00      	nop
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	200009ec 	.word	0x200009ec

08009e14 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8009e18:	2200      	movs	r2, #0
 8009e1a:	2100      	movs	r1, #0
 8009e1c:	20d1      	movs	r0, #209	; 0xd1
 8009e1e:	f000 fd73 	bl	800a908 <SUBGRF_WriteCommand>
}
 8009e22:	bf00      	nop
 8009e24:	bd80      	pop	{r7, pc}

08009e26 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8009e26:	b580      	push	{r7, lr}
 8009e28:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	20d2      	movs	r0, #210	; 0xd2
 8009e30:	f000 fd6a 	bl	800a908 <SUBGRF_WriteCommand>
}
 8009e34:	bf00      	nop
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	4603      	mov	r3, r0
 8009e40:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8009e42:	1dfb      	adds	r3, r7, #7
 8009e44:	2201      	movs	r2, #1
 8009e46:	4619      	mov	r1, r3
 8009e48:	209f      	movs	r0, #159	; 0x9f
 8009e4a:	f000 fd5d 	bl	800a908 <SUBGRF_WriteCommand>
}
 8009e4e:	bf00      	nop
 8009e50:	3708      	adds	r7, #8
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b084      	sub	sp, #16
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8009e60:	1dfb      	adds	r3, r7, #7
 8009e62:	2201      	movs	r2, #1
 8009e64:	4619      	mov	r1, r3
 8009e66:	20a0      	movs	r0, #160	; 0xa0
 8009e68:	f000 fd4e 	bl	800a908 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8009e6c:	79fb      	ldrb	r3, [r7, #7]
 8009e6e:	2b3f      	cmp	r3, #63	; 0x3f
 8009e70:	d91c      	bls.n	8009eac <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8009e72:	79fb      	ldrb	r3, [r7, #7]
 8009e74:	085b      	lsrs	r3, r3, #1
 8009e76:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8009e80:	e005      	b.n	8009e8e <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8009e82:	7bfb      	ldrb	r3, [r7, #15]
 8009e84:	089b      	lsrs	r3, r3, #2
 8009e86:	73fb      	strb	r3, [r7, #15]
            exp++;
 8009e88:	7bbb      	ldrb	r3, [r7, #14]
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8009e8e:	7bfb      	ldrb	r3, [r7, #15]
 8009e90:	2b1f      	cmp	r3, #31
 8009e92:	d8f6      	bhi.n	8009e82 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8009e94:	7bfb      	ldrb	r3, [r7, #15]
 8009e96:	00db      	lsls	r3, r3, #3
 8009e98:	b2da      	uxtb	r2, r3
 8009e9a:	7bbb      	ldrb	r3, [r7, #14]
 8009e9c:	4413      	add	r3, r2
 8009e9e:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8009ea0:	7b7b      	ldrb	r3, [r7, #13]
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	f240 7006 	movw	r0, #1798	; 0x706
 8009ea8:	f000 fc7e 	bl	800a7a8 <SUBGRF_WriteRegister>
    }
}
 8009eac:	bf00      	nop
 8009eae:	3710      	adds	r7, #16
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8009eba:	f001 f8d3 	bl	800b064 <RBI_IsDCDC>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d102      	bne.n	8009eca <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	71fb      	strb	r3, [r7, #7]
 8009ec8:	e001      	b.n	8009ece <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8009ece:	1dfb      	adds	r3, r7, #7
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	2096      	movs	r0, #150	; 0x96
 8009ed6:	f000 fd17 	bl	800a908 <SUBGRF_WriteCommand>
}
 8009eda:	bf00      	nop
 8009edc:	3708      	adds	r7, #8
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b084      	sub	sp, #16
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8009eea:	793b      	ldrb	r3, [r7, #4]
 8009eec:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	019b      	lsls	r3, r3, #6
 8009ef4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8009ef6:	793b      	ldrb	r3, [r7, #4]
 8009ef8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8009f00:	b25b      	sxtb	r3, r3
 8009f02:	4313      	orrs	r3, r2
 8009f04:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8009f06:	793b      	ldrb	r3, [r7, #4]
 8009f08:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8009f10:	b25b      	sxtb	r3, r3
 8009f12:	4313      	orrs	r3, r2
 8009f14:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8009f16:	793b      	ldrb	r3, [r7, #4]
 8009f18:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8009f20:	b25b      	sxtb	r3, r3
 8009f22:	4313      	orrs	r3, r2
 8009f24:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8009f26:	793b      	ldrb	r3, [r7, #4]
 8009f28:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8009f30:	b25b      	sxtb	r3, r3
 8009f32:	4313      	orrs	r3, r2
 8009f34:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8009f36:	793b      	ldrb	r3, [r7, #4]
 8009f38:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8009f40:	b25b      	sxtb	r3, r3
 8009f42:	4313      	orrs	r3, r2
 8009f44:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8009f46:	793b      	ldrb	r3, [r7, #4]
 8009f48:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8009f50:	4313      	orrs	r3, r2
 8009f52:	b25b      	sxtb	r3, r3
 8009f54:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8009f56:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8009f58:	f107 030f 	add.w	r3, r7, #15
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	4619      	mov	r1, r3
 8009f60:	2089      	movs	r0, #137	; 0x89
 8009f62:	f000 fcd1 	bl	800a908 <SUBGRF_WriteCommand>
}
 8009f66:	bf00      	nop
 8009f68:	3710      	adds	r7, #16
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
	...

08009f70 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4a1d      	ldr	r2, [pc, #116]	; (8009ff0 <SUBGRF_CalibrateImage+0x80>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d904      	bls.n	8009f8a <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8009f80:	23e1      	movs	r3, #225	; 0xe1
 8009f82:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8009f84:	23e9      	movs	r3, #233	; 0xe9
 8009f86:	737b      	strb	r3, [r7, #13]
 8009f88:	e027      	b.n	8009fda <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	4a19      	ldr	r2, [pc, #100]	; (8009ff4 <SUBGRF_CalibrateImage+0x84>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d904      	bls.n	8009f9c <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8009f92:	23d7      	movs	r3, #215	; 0xd7
 8009f94:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8009f96:	23db      	movs	r3, #219	; 0xdb
 8009f98:	737b      	strb	r3, [r7, #13]
 8009f9a:	e01e      	b.n	8009fda <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	4a16      	ldr	r2, [pc, #88]	; (8009ff8 <SUBGRF_CalibrateImage+0x88>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d904      	bls.n	8009fae <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8009fa4:	23c1      	movs	r3, #193	; 0xc1
 8009fa6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8009fa8:	23c5      	movs	r3, #197	; 0xc5
 8009faa:	737b      	strb	r3, [r7, #13]
 8009fac:	e015      	b.n	8009fda <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	4a12      	ldr	r2, [pc, #72]	; (8009ffc <SUBGRF_CalibrateImage+0x8c>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d904      	bls.n	8009fc0 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8009fb6:	2375      	movs	r3, #117	; 0x75
 8009fb8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8009fba:	2381      	movs	r3, #129	; 0x81
 8009fbc:	737b      	strb	r3, [r7, #13]
 8009fbe:	e00c      	b.n	8009fda <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4a0f      	ldr	r2, [pc, #60]	; (800a000 <SUBGRF_CalibrateImage+0x90>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d904      	bls.n	8009fd2 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8009fc8:	236b      	movs	r3, #107	; 0x6b
 8009fca:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8009fcc:	236f      	movs	r3, #111	; 0x6f
 8009fce:	737b      	strb	r3, [r7, #13]
 8009fd0:	e003      	b.n	8009fda <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 8009fd2:	2329      	movs	r3, #41	; 0x29
 8009fd4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8009fd6:	232b      	movs	r3, #43	; 0x2b
 8009fd8:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8009fda:	f107 030c 	add.w	r3, r7, #12
 8009fde:	2202      	movs	r2, #2
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	2098      	movs	r0, #152	; 0x98
 8009fe4:	f000 fc90 	bl	800a908 <SUBGRF_WriteCommand>
}
 8009fe8:	bf00      	nop
 8009fea:	3710      	adds	r7, #16
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	35a4e900 	.word	0x35a4e900
 8009ff4:	32a9f880 	.word	0x32a9f880
 8009ff8:	2de54480 	.word	0x2de54480
 8009ffc:	1b6b0b00 	.word	0x1b6b0b00
 800a000:	1954fc40 	.word	0x1954fc40

0800a004 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800a004:	b590      	push	{r4, r7, lr}
 800a006:	b085      	sub	sp, #20
 800a008:	af00      	add	r7, sp, #0
 800a00a:	4604      	mov	r4, r0
 800a00c:	4608      	mov	r0, r1
 800a00e:	4611      	mov	r1, r2
 800a010:	461a      	mov	r2, r3
 800a012:	4623      	mov	r3, r4
 800a014:	71fb      	strb	r3, [r7, #7]
 800a016:	4603      	mov	r3, r0
 800a018:	71bb      	strb	r3, [r7, #6]
 800a01a:	460b      	mov	r3, r1
 800a01c:	717b      	strb	r3, [r7, #5]
 800a01e:	4613      	mov	r3, r2
 800a020:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800a022:	79fb      	ldrb	r3, [r7, #7]
 800a024:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800a026:	79bb      	ldrb	r3, [r7, #6]
 800a028:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800a02a:	797b      	ldrb	r3, [r7, #5]
 800a02c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800a02e:	793b      	ldrb	r3, [r7, #4]
 800a030:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800a032:	f107 030c 	add.w	r3, r7, #12
 800a036:	2204      	movs	r2, #4
 800a038:	4619      	mov	r1, r3
 800a03a:	2095      	movs	r0, #149	; 0x95
 800a03c:	f000 fc64 	bl	800a908 <SUBGRF_WriteCommand>
}
 800a040:	bf00      	nop
 800a042:	3714      	adds	r7, #20
 800a044:	46bd      	mov	sp, r7
 800a046:	bd90      	pop	{r4, r7, pc}

0800a048 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800a048:	b590      	push	{r4, r7, lr}
 800a04a:	b085      	sub	sp, #20
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	4604      	mov	r4, r0
 800a050:	4608      	mov	r0, r1
 800a052:	4611      	mov	r1, r2
 800a054:	461a      	mov	r2, r3
 800a056:	4623      	mov	r3, r4
 800a058:	80fb      	strh	r3, [r7, #6]
 800a05a:	4603      	mov	r3, r0
 800a05c:	80bb      	strh	r3, [r7, #4]
 800a05e:	460b      	mov	r3, r1
 800a060:	807b      	strh	r3, [r7, #2]
 800a062:	4613      	mov	r3, r2
 800a064:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800a066:	88fb      	ldrh	r3, [r7, #6]
 800a068:	0a1b      	lsrs	r3, r3, #8
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800a070:	88fb      	ldrh	r3, [r7, #6]
 800a072:	b2db      	uxtb	r3, r3
 800a074:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800a076:	88bb      	ldrh	r3, [r7, #4]
 800a078:	0a1b      	lsrs	r3, r3, #8
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800a080:	88bb      	ldrh	r3, [r7, #4]
 800a082:	b2db      	uxtb	r3, r3
 800a084:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800a086:	887b      	ldrh	r3, [r7, #2]
 800a088:	0a1b      	lsrs	r3, r3, #8
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800a090:	887b      	ldrh	r3, [r7, #2]
 800a092:	b2db      	uxtb	r3, r3
 800a094:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800a096:	883b      	ldrh	r3, [r7, #0]
 800a098:	0a1b      	lsrs	r3, r3, #8
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800a0a0:	883b      	ldrh	r3, [r7, #0]
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800a0a6:	f107 0308 	add.w	r3, r7, #8
 800a0aa:	2208      	movs	r2, #8
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	2008      	movs	r0, #8
 800a0b0:	f000 fc2a 	bl	800a908 <SUBGRF_WriteCommand>
}
 800a0b4:	bf00      	nop
 800a0b6:	3714      	adds	r7, #20
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd90      	pop	{r4, r7, pc}

0800a0bc <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	6039      	str	r1, [r7, #0]
 800a0c6:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800a0c8:	79fb      	ldrb	r3, [r7, #7]
 800a0ca:	f003 0307 	and.w	r3, r3, #7
 800a0ce:	b2db      	uxtb	r3, r3
 800a0d0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	0c1b      	lsrs	r3, r3, #16
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	0a1b      	lsrs	r3, r3, #8
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800a0e8:	f107 030c 	add.w	r3, r7, #12
 800a0ec:	2204      	movs	r2, #4
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	2097      	movs	r0, #151	; 0x97
 800a0f2:	f000 fc09 	bl	800a908 <SUBGRF_WriteCommand>
}
 800a0f6:	bf00      	nop
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
	...

0800a100 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800a100:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a104:	b084      	sub	sp, #16
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800a10a:	2300      	movs	r3, #0
 800a10c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800a10e:	4b1d      	ldr	r3, [pc, #116]	; (800a184 <SUBGRF_SetRfFrequency+0x84>)
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	f083 0301 	eor.w	r3, r3, #1
 800a116:	b2db      	uxtb	r3, r3
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d005      	beq.n	800a128 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f7ff ff27 	bl	8009f70 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800a122:	4b18      	ldr	r3, [pc, #96]	; (800a184 <SUBGRF_SetRfFrequency+0x84>)
 800a124:	2201      	movs	r2, #1
 800a126:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	461c      	mov	r4, r3
 800a12e:	4615      	mov	r5, r2
 800a130:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800a134:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800a138:	4a13      	ldr	r2, [pc, #76]	; (800a188 <SUBGRF_SetRfFrequency+0x88>)
 800a13a:	f04f 0300 	mov.w	r3, #0
 800a13e:	4640      	mov	r0, r8
 800a140:	4649      	mov	r1, r9
 800a142:	f7f6 f86d 	bl	8000220 <__aeabi_uldivmod>
 800a146:	4602      	mov	r2, r0
 800a148:	460b      	mov	r3, r1
 800a14a:	4613      	mov	r3, r2
 800a14c:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	0e1b      	lsrs	r3, r3, #24
 800a152:	b2db      	uxtb	r3, r3
 800a154:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	0c1b      	lsrs	r3, r3, #16
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	0a1b      	lsrs	r3, r3, #8
 800a162:	b2db      	uxtb	r3, r3
 800a164:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800a16c:	f107 0308 	add.w	r3, r7, #8
 800a170:	2204      	movs	r2, #4
 800a172:	4619      	mov	r1, r3
 800a174:	2086      	movs	r0, #134	; 0x86
 800a176:	f000 fbc7 	bl	800a908 <SUBGRF_WriteCommand>
}
 800a17a:	bf00      	nop
 800a17c:	3710      	adds	r7, #16
 800a17e:	46bd      	mov	sp, r7
 800a180:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a184:	200009f4 	.word	0x200009f4
 800a188:	01e84800 	.word	0x01e84800

0800a18c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	4603      	mov	r3, r0
 800a194:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800a196:	79fa      	ldrb	r2, [r7, #7]
 800a198:	4b09      	ldr	r3, [pc, #36]	; (800a1c0 <SUBGRF_SetPacketType+0x34>)
 800a19a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800a19c:	79fb      	ldrb	r3, [r7, #7]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d104      	bne.n	800a1ac <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800a1a2:	2100      	movs	r1, #0
 800a1a4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800a1a8:	f000 fafe 	bl	800a7a8 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800a1ac:	1dfb      	adds	r3, r7, #7
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	208a      	movs	r0, #138	; 0x8a
 800a1b4:	f000 fba8 	bl	800a908 <SUBGRF_WriteCommand>
}
 800a1b8:	bf00      	nop
 800a1ba:	3708      	adds	r7, #8
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	200009ed 	.word	0x200009ed

0800a1c4 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	af00      	add	r7, sp, #0
    return PacketType;
 800a1c8:	4b02      	ldr	r3, [pc, #8]	; (800a1d4 <SUBGRF_GetPacketType+0x10>)
 800a1ca:	781b      	ldrb	r3, [r3, #0]
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bc80      	pop	{r7}
 800a1d2:	4770      	bx	lr
 800a1d4:	200009ed 	.word	0x200009ed

0800a1d8 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	4603      	mov	r3, r0
 800a1e0:	71fb      	strb	r3, [r7, #7]
 800a1e2:	460b      	mov	r3, r1
 800a1e4:	71bb      	strb	r3, [r7, #6]
 800a1e6:	4613      	mov	r3, r2
 800a1e8:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800a1ea:	79fb      	ldrb	r3, [r7, #7]
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d149      	bne.n	800a284 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	f000 ff42 	bl	800b07a <RBI_GetRFOMaxPowerConfig>
 800a1f6:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 800a1f8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	da01      	bge.n	800a206 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2b0e      	cmp	r3, #14
 800a20a:	d10e      	bne.n	800a22a <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800a20c:	2301      	movs	r3, #1
 800a20e:	2201      	movs	r2, #1
 800a210:	2100      	movs	r1, #0
 800a212:	2004      	movs	r0, #4
 800a214:	f7ff fef6 	bl	800a004 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a218:	79ba      	ldrb	r2, [r7, #6]
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	1ad3      	subs	r3, r2, r3
 800a220:	b2db      	uxtb	r3, r3
 800a222:	330e      	adds	r3, #14
 800a224:	b2db      	uxtb	r3, r3
 800a226:	71bb      	strb	r3, [r7, #6]
 800a228:	e01f      	b.n	800a26a <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2b0a      	cmp	r3, #10
 800a22e:	d10e      	bne.n	800a24e <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800a230:	2301      	movs	r3, #1
 800a232:	2201      	movs	r2, #1
 800a234:	2100      	movs	r1, #0
 800a236:	2001      	movs	r0, #1
 800a238:	f7ff fee4 	bl	800a004 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800a23c:	79ba      	ldrb	r2, [r7, #6]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	b2db      	uxtb	r3, r3
 800a242:	1ad3      	subs	r3, r2, r3
 800a244:	b2db      	uxtb	r3, r3
 800a246:	330d      	adds	r3, #13
 800a248:	b2db      	uxtb	r3, r3
 800a24a:	71bb      	strb	r3, [r7, #6]
 800a24c:	e00d      	b.n	800a26a <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800a24e:	2301      	movs	r3, #1
 800a250:	2201      	movs	r2, #1
 800a252:	2100      	movs	r1, #0
 800a254:	2007      	movs	r0, #7
 800a256:	f7ff fed5 	bl	800a004 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a25a:	79ba      	ldrb	r2, [r7, #6]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	1ad3      	subs	r3, r2, r3
 800a262:	b2db      	uxtb	r3, r3
 800a264:	330e      	adds	r3, #14
 800a266:	b2db      	uxtb	r3, r3
 800a268:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800a26a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a26e:	f113 0f11 	cmn.w	r3, #17
 800a272:	da01      	bge.n	800a278 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800a274:	23ef      	movs	r3, #239	; 0xef
 800a276:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800a278:	2118      	movs	r1, #24
 800a27a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800a27e:	f000 fa93 	bl	800a7a8 <SUBGRF_WriteRegister>
 800a282:	e067      	b.n	800a354 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800a284:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800a288:	f000 faa2 	bl	800a7d0 <SUBGRF_ReadRegister>
 800a28c:	4603      	mov	r3, r0
 800a28e:	f043 031e 	orr.w	r3, r3, #30
 800a292:	b2db      	uxtb	r3, r3
 800a294:	4619      	mov	r1, r3
 800a296:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800a29a:	f000 fa85 	bl	800a7a8 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800a29e:	2001      	movs	r0, #1
 800a2a0:	f000 feeb 	bl	800b07a <RBI_GetRFOMaxPowerConfig>
 800a2a4:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800a2a6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	da01      	bge.n	800a2b4 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2b14      	cmp	r3, #20
 800a2b8:	d10e      	bne.n	800a2d8 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	2200      	movs	r2, #0
 800a2be:	2105      	movs	r1, #5
 800a2c0:	2003      	movs	r0, #3
 800a2c2:	f7ff fe9f 	bl	800a004 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a2c6:	79ba      	ldrb	r2, [r7, #6]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	1ad3      	subs	r3, r2, r3
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	3316      	adds	r3, #22
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	71bb      	strb	r3, [r7, #6]
 800a2d6:	e031      	b.n	800a33c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2b11      	cmp	r3, #17
 800a2dc:	d10e      	bne.n	800a2fc <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800a2de:	2301      	movs	r3, #1
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	2103      	movs	r1, #3
 800a2e4:	2002      	movs	r0, #2
 800a2e6:	f7ff fe8d 	bl	800a004 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a2ea:	79ba      	ldrb	r2, [r7, #6]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	1ad3      	subs	r3, r2, r3
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	3316      	adds	r3, #22
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	71bb      	strb	r3, [r7, #6]
 800a2fa:	e01f      	b.n	800a33c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2b0e      	cmp	r3, #14
 800a300:	d10e      	bne.n	800a320 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800a302:	2301      	movs	r3, #1
 800a304:	2200      	movs	r2, #0
 800a306:	2102      	movs	r1, #2
 800a308:	2002      	movs	r0, #2
 800a30a:	f7ff fe7b 	bl	800a004 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a30e:	79ba      	ldrb	r2, [r7, #6]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	b2db      	uxtb	r3, r3
 800a314:	1ad3      	subs	r3, r2, r3
 800a316:	b2db      	uxtb	r3, r3
 800a318:	330e      	adds	r3, #14
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	71bb      	strb	r3, [r7, #6]
 800a31e:	e00d      	b.n	800a33c <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800a320:	2301      	movs	r3, #1
 800a322:	2200      	movs	r2, #0
 800a324:	2107      	movs	r1, #7
 800a326:	2004      	movs	r0, #4
 800a328:	f7ff fe6c 	bl	800a004 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a32c:	79ba      	ldrb	r2, [r7, #6]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	b2db      	uxtb	r3, r3
 800a332:	1ad3      	subs	r3, r2, r3
 800a334:	b2db      	uxtb	r3, r3
 800a336:	3316      	adds	r3, #22
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800a33c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a340:	f113 0f09 	cmn.w	r3, #9
 800a344:	da01      	bge.n	800a34a <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800a346:	23f7      	movs	r3, #247	; 0xf7
 800a348:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800a34a:	2138      	movs	r1, #56	; 0x38
 800a34c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800a350:	f000 fa2a 	bl	800a7a8 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800a354:	79bb      	ldrb	r3, [r7, #6]
 800a356:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 800a358:	797b      	ldrb	r3, [r7, #5]
 800a35a:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800a35c:	f107 0308 	add.w	r3, r7, #8
 800a360:	2202      	movs	r2, #2
 800a362:	4619      	mov	r1, r3
 800a364:	208e      	movs	r0, #142	; 0x8e
 800a366:	f000 facf 	bl	800a908 <SUBGRF_WriteCommand>
}
 800a36a:	bf00      	nop
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
	...

0800a374 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800a374:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a378:	b086      	sub	sp, #24
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800a37e:	2300      	movs	r3, #0
 800a380:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800a382:	4a61      	ldr	r2, [pc, #388]	; (800a508 <SUBGRF_SetModulationParams+0x194>)
 800a384:	f107 0308 	add.w	r3, r7, #8
 800a388:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a38c:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	781a      	ldrb	r2, [r3, #0]
 800a394:	4b5d      	ldr	r3, [pc, #372]	; (800a50c <SUBGRF_SetModulationParams+0x198>)
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d004      	beq.n	800a3a6 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7ff fef3 	bl	800a18c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	2b03      	cmp	r3, #3
 800a3ac:	f200 80a5 	bhi.w	800a4fa <SUBGRF_SetModulationParams+0x186>
 800a3b0:	a201      	add	r2, pc, #4	; (adr r2, 800a3b8 <SUBGRF_SetModulationParams+0x44>)
 800a3b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b6:	bf00      	nop
 800a3b8:	0800a3c9 	.word	0x0800a3c9
 800a3bc:	0800a489 	.word	0x0800a489
 800a3c0:	0800a44b 	.word	0x0800a44b
 800a3c4:	0800a4b7 	.word	0x0800a4b7
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800a3c8:	2308      	movs	r3, #8
 800a3ca:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	4a4f      	ldr	r2, [pc, #316]	; (800a510 <SUBGRF_SetModulationParams+0x19c>)
 800a3d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3d6:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	0c1b      	lsrs	r3, r3, #16
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	0a1b      	lsrs	r3, r3, #8
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	7b1b      	ldrb	r3, [r3, #12]
 800a3f2:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	7b5b      	ldrb	r3, [r3, #13]
 800a3f8:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	2200      	movs	r2, #0
 800a400:	461c      	mov	r4, r3
 800a402:	4615      	mov	r5, r2
 800a404:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800a408:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800a40c:	4a41      	ldr	r2, [pc, #260]	; (800a514 <SUBGRF_SetModulationParams+0x1a0>)
 800a40e:	f04f 0300 	mov.w	r3, #0
 800a412:	4640      	mov	r0, r8
 800a414:	4649      	mov	r1, r9
 800a416:	f7f5 ff03 	bl	8000220 <__aeabi_uldivmod>
 800a41a:	4602      	mov	r2, r0
 800a41c:	460b      	mov	r3, r1
 800a41e:	4613      	mov	r3, r2
 800a420:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	0c1b      	lsrs	r3, r3, #16
 800a426:	b2db      	uxtb	r3, r3
 800a428:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	0a1b      	lsrs	r3, r3, #8
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	b2db      	uxtb	r3, r3
 800a436:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a438:	7cfb      	ldrb	r3, [r7, #19]
 800a43a:	b29a      	uxth	r2, r3
 800a43c:	f107 0308 	add.w	r3, r7, #8
 800a440:	4619      	mov	r1, r3
 800a442:	208b      	movs	r0, #139	; 0x8b
 800a444:	f000 fa60 	bl	800a908 <SUBGRF_WriteCommand>
        break;
 800a448:	e058      	b.n	800a4fc <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800a44a:	2304      	movs	r3, #4
 800a44c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	691b      	ldr	r3, [r3, #16]
 800a452:	4a2f      	ldr	r2, [pc, #188]	; (800a510 <SUBGRF_SetModulationParams+0x19c>)
 800a454:	fbb2 f3f3 	udiv	r3, r2, r3
 800a458:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	0c1b      	lsrs	r3, r3, #16
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	0a1b      	lsrs	r3, r3, #8
 800a466:	b2db      	uxtb	r3, r3
 800a468:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	7d1b      	ldrb	r3, [r3, #20]
 800a474:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a476:	7cfb      	ldrb	r3, [r7, #19]
 800a478:	b29a      	uxth	r2, r3
 800a47a:	f107 0308 	add.w	r3, r7, #8
 800a47e:	4619      	mov	r1, r3
 800a480:	208b      	movs	r0, #139	; 0x8b
 800a482:	f000 fa41 	bl	800a908 <SUBGRF_WriteCommand>
        break;
 800a486:	e039      	b.n	800a4fc <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800a488:	2304      	movs	r3, #4
 800a48a:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	7e1b      	ldrb	r3, [r3, #24]
 800a490:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	7e5b      	ldrb	r3, [r3, #25]
 800a496:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	7e9b      	ldrb	r3, [r3, #26]
 800a49c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	7edb      	ldrb	r3, [r3, #27]
 800a4a2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a4a4:	7cfb      	ldrb	r3, [r7, #19]
 800a4a6:	b29a      	uxth	r2, r3
 800a4a8:	f107 0308 	add.w	r3, r7, #8
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	208b      	movs	r0, #139	; 0x8b
 800a4b0:	f000 fa2a 	bl	800a908 <SUBGRF_WriteCommand>

        break;
 800a4b4:	e022      	b.n	800a4fc <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800a4b6:	2305      	movs	r3, #5
 800a4b8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	4a14      	ldr	r2, [pc, #80]	; (800a510 <SUBGRF_SetModulationParams+0x19c>)
 800a4c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4c4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	0c1b      	lsrs	r3, r3, #16
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	0a1b      	lsrs	r3, r3, #8
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	7b1b      	ldrb	r3, [r3, #12]
 800a4e0:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	7b5b      	ldrb	r3, [r3, #13]
 800a4e6:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a4e8:	7cfb      	ldrb	r3, [r7, #19]
 800a4ea:	b29a      	uxth	r2, r3
 800a4ec:	f107 0308 	add.w	r3, r7, #8
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	208b      	movs	r0, #139	; 0x8b
 800a4f4:	f000 fa08 	bl	800a908 <SUBGRF_WriteCommand>
        break;
 800a4f8:	e000      	b.n	800a4fc <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800a4fa:	bf00      	nop
    }
}
 800a4fc:	bf00      	nop
 800a4fe:	3718      	adds	r7, #24
 800a500:	46bd      	mov	sp, r7
 800a502:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a506:	bf00      	nop
 800a508:	0800c788 	.word	0x0800c788
 800a50c:	200009ed 	.word	0x200009ed
 800a510:	3d090000 	.word	0x3d090000
 800a514:	01e84800 	.word	0x01e84800

0800a518 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b086      	sub	sp, #24
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800a520:	2300      	movs	r3, #0
 800a522:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800a524:	4a48      	ldr	r2, [pc, #288]	; (800a648 <SUBGRF_SetPacketParams+0x130>)
 800a526:	f107 030c 	add.w	r3, r7, #12
 800a52a:	ca07      	ldmia	r2, {r0, r1, r2}
 800a52c:	c303      	stmia	r3!, {r0, r1}
 800a52e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	781a      	ldrb	r2, [r3, #0]
 800a534:	4b45      	ldr	r3, [pc, #276]	; (800a64c <SUBGRF_SetPacketParams+0x134>)
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d004      	beq.n	800a546 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	4618      	mov	r0, r3
 800a542:	f7ff fe23 	bl	800a18c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	2b03      	cmp	r3, #3
 800a54c:	d878      	bhi.n	800a640 <SUBGRF_SetPacketParams+0x128>
 800a54e:	a201      	add	r2, pc, #4	; (adr r2, 800a554 <SUBGRF_SetPacketParams+0x3c>)
 800a550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a554:	0800a565 	.word	0x0800a565
 800a558:	0800a5f5 	.word	0x0800a5f5
 800a55c:	0800a5e9 	.word	0x0800a5e9
 800a560:	0800a565 	.word	0x0800a565
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	7a5b      	ldrb	r3, [r3, #9]
 800a568:	2bf1      	cmp	r3, #241	; 0xf1
 800a56a:	d10a      	bne.n	800a582 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800a56c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800a570:	f7ff faaa 	bl	8009ac8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800a574:	f248 0005 	movw	r0, #32773	; 0x8005
 800a578:	f7ff fac6 	bl	8009b08 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800a57c:	2302      	movs	r3, #2
 800a57e:	75bb      	strb	r3, [r7, #22]
 800a580:	e011      	b.n	800a5a6 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	7a5b      	ldrb	r3, [r3, #9]
 800a586:	2bf2      	cmp	r3, #242	; 0xf2
 800a588:	d10a      	bne.n	800a5a0 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800a58a:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800a58e:	f7ff fa9b 	bl	8009ac8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800a592:	f241 0021 	movw	r0, #4129	; 0x1021
 800a596:	f7ff fab7 	bl	8009b08 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800a59a:	2306      	movs	r3, #6
 800a59c:	75bb      	strb	r3, [r7, #22]
 800a59e:	e002      	b.n	800a5a6 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	7a5b      	ldrb	r3, [r3, #9]
 800a5a4:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800a5a6:	2309      	movs	r3, #9
 800a5a8:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	885b      	ldrh	r3, [r3, #2]
 800a5ae:	0a1b      	lsrs	r3, r3, #8
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	885b      	ldrh	r3, [r3, #2]
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	791b      	ldrb	r3, [r3, #4]
 800a5c2:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	795b      	ldrb	r3, [r3, #5]
 800a5c8:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	799b      	ldrb	r3, [r3, #6]
 800a5ce:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	79db      	ldrb	r3, [r3, #7]
 800a5d4:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	7a1b      	ldrb	r3, [r3, #8]
 800a5da:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800a5dc:	7dbb      	ldrb	r3, [r7, #22]
 800a5de:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	7a9b      	ldrb	r3, [r3, #10]
 800a5e4:	753b      	strb	r3, [r7, #20]
        break;
 800a5e6:	e022      	b.n	800a62e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	7b1b      	ldrb	r3, [r3, #12]
 800a5f0:	733b      	strb	r3, [r7, #12]
        break;
 800a5f2:	e01c      	b.n	800a62e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800a5f4:	2306      	movs	r3, #6
 800a5f6:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	89db      	ldrh	r3, [r3, #14]
 800a5fc:	0a1b      	lsrs	r3, r3, #8
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	b2db      	uxtb	r3, r3
 800a602:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	89db      	ldrh	r3, [r3, #14]
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	7c1a      	ldrb	r2, [r3, #16]
 800a610:	4b0f      	ldr	r3, [pc, #60]	; (800a650 <SUBGRF_SetPacketParams+0x138>)
 800a612:	4611      	mov	r1, r2
 800a614:	7019      	strb	r1, [r3, #0]
 800a616:	4613      	mov	r3, r2
 800a618:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	7c5b      	ldrb	r3, [r3, #17]
 800a61e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	7c9b      	ldrb	r3, [r3, #18]
 800a624:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	7cdb      	ldrb	r3, [r3, #19]
 800a62a:	747b      	strb	r3, [r7, #17]
        break;
 800a62c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800a62e:	7dfb      	ldrb	r3, [r7, #23]
 800a630:	b29a      	uxth	r2, r3
 800a632:	f107 030c 	add.w	r3, r7, #12
 800a636:	4619      	mov	r1, r3
 800a638:	208c      	movs	r0, #140	; 0x8c
 800a63a:	f000 f965 	bl	800a908 <SUBGRF_WriteCommand>
 800a63e:	e000      	b.n	800a642 <SUBGRF_SetPacketParams+0x12a>
        return;
 800a640:	bf00      	nop
}
 800a642:	3718      	adds	r7, #24
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}
 800a648:	0800c790 	.word	0x0800c790
 800a64c:	200009ed 	.word	0x200009ed
 800a650:	200009ee 	.word	0x200009ee

0800a654 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	4603      	mov	r3, r0
 800a65c:	460a      	mov	r2, r1
 800a65e:	71fb      	strb	r3, [r7, #7]
 800a660:	4613      	mov	r3, r2
 800a662:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800a664:	79fb      	ldrb	r3, [r7, #7]
 800a666:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800a668:	79bb      	ldrb	r3, [r7, #6]
 800a66a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800a66c:	f107 030c 	add.w	r3, r7, #12
 800a670:	2202      	movs	r2, #2
 800a672:	4619      	mov	r1, r3
 800a674:	208f      	movs	r0, #143	; 0x8f
 800a676:	f000 f947 	bl	800a908 <SUBGRF_WriteCommand>
}
 800a67a:	bf00      	nop
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b082      	sub	sp, #8
 800a686:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800a688:	2300      	movs	r3, #0
 800a68a:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800a68c:	1d3b      	adds	r3, r7, #4
 800a68e:	2201      	movs	r2, #1
 800a690:	4619      	mov	r1, r3
 800a692:	2015      	movs	r0, #21
 800a694:	f000 f95a 	bl	800a94c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800a698:	793b      	ldrb	r3, [r7, #4]
 800a69a:	425b      	negs	r3, r3
 800a69c:	105b      	asrs	r3, r3, #1
 800a69e:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800a6a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3708      	adds	r7, #8
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800a6b6:	f107 030c 	add.w	r3, r7, #12
 800a6ba:	2202      	movs	r2, #2
 800a6bc:	4619      	mov	r1, r3
 800a6be:	2013      	movs	r0, #19
 800a6c0:	f000 f944 	bl	800a94c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800a6c4:	f7ff fd7e 	bl	800a1c4 <SUBGRF_GetPacketType>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d10d      	bne.n	800a6ea <SUBGRF_GetRxBufferStatus+0x3e>
 800a6ce:	4b0c      	ldr	r3, [pc, #48]	; (800a700 <SUBGRF_GetRxBufferStatus+0x54>)
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d108      	bne.n	800a6ea <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800a6d8:	f240 7002 	movw	r0, #1794	; 0x702
 800a6dc:	f000 f878 	bl	800a7d0 <SUBGRF_ReadRegister>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	701a      	strb	r2, [r3, #0]
 800a6e8:	e002      	b.n	800a6f0 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800a6ea:	7b3a      	ldrb	r2, [r7, #12]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800a6f0:	7b7a      	ldrb	r2, [r7, #13]
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	701a      	strb	r2, [r3, #0]
}
 800a6f6:	bf00      	nop
 800a6f8:	3710      	adds	r7, #16
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	200009ee 	.word	0x200009ee

0800a704 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800a70c:	f107 030c 	add.w	r3, r7, #12
 800a710:	2203      	movs	r2, #3
 800a712:	4619      	mov	r1, r3
 800a714:	2014      	movs	r0, #20
 800a716:	f000 f919 	bl	800a94c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800a71a:	f7ff fd53 	bl	800a1c4 <SUBGRF_GetPacketType>
 800a71e:	4603      	mov	r3, r0
 800a720:	461a      	mov	r2, r3
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d002      	beq.n	800a734 <SUBGRF_GetPacketStatus+0x30>
 800a72e:	2b01      	cmp	r3, #1
 800a730:	d013      	beq.n	800a75a <SUBGRF_GetPacketStatus+0x56>
 800a732:	e02a      	b.n	800a78a <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800a734:	7b3a      	ldrb	r2, [r7, #12]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800a73a:	7b7b      	ldrb	r3, [r7, #13]
 800a73c:	425b      	negs	r3, r3
 800a73e:	105b      	asrs	r3, r3, #1
 800a740:	b25a      	sxtb	r2, r3
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800a746:	7bbb      	ldrb	r3, [r7, #14]
 800a748:	425b      	negs	r3, r3
 800a74a:	105b      	asrs	r3, r3, #1
 800a74c:	b25a      	sxtb	r2, r3
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2200      	movs	r2, #0
 800a756:	609a      	str	r2, [r3, #8]
            break;
 800a758:	e020      	b.n	800a79c <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800a75a:	7b3b      	ldrb	r3, [r7, #12]
 800a75c:	425b      	negs	r3, r3
 800a75e:	105b      	asrs	r3, r3, #1
 800a760:	b25a      	sxtb	r2, r3
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800a766:	7b7b      	ldrb	r3, [r7, #13]
 800a768:	b25b      	sxtb	r3, r3
 800a76a:	3302      	adds	r3, #2
 800a76c:	109b      	asrs	r3, r3, #2
 800a76e:	b25a      	sxtb	r2, r3
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800a774:	7bbb      	ldrb	r3, [r7, #14]
 800a776:	425b      	negs	r3, r3
 800a778:	105b      	asrs	r3, r3, #1
 800a77a:	b25a      	sxtb	r2, r3
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800a780:	4b08      	ldr	r3, [pc, #32]	; (800a7a4 <SUBGRF_GetPacketStatus+0xa0>)
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	611a      	str	r2, [r3, #16]
            break;
 800a788:	e008      	b.n	800a79c <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800a78a:	2214      	movs	r2, #20
 800a78c:	2100      	movs	r1, #0
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 fca7 	bl	800b0e2 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	220f      	movs	r2, #15
 800a798:	701a      	strb	r2, [r3, #0]
            break;
 800a79a:	bf00      	nop
    }
}
 800a79c:	bf00      	nop
 800a79e:	3710      	adds	r7, #16
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	200009f0 	.word	0x200009f0

0800a7a8 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	460a      	mov	r2, r1
 800a7b2:	80fb      	strh	r3, [r7, #6]
 800a7b4:	4613      	mov	r3, r2
 800a7b6:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800a7b8:	1d7a      	adds	r2, r7, #5
 800a7ba:	88f9      	ldrh	r1, [r7, #6]
 800a7bc:	2301      	movs	r3, #1
 800a7be:	4803      	ldr	r0, [pc, #12]	; (800a7cc <SUBGRF_WriteRegister+0x24>)
 800a7c0:	f7fa fdaa 	bl	8005318 <HAL_SUBGHZ_WriteRegisters>
}
 800a7c4:	bf00      	nop
 800a7c6:	3708      	adds	r7, #8
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	200004b8 	.word	0x200004b8

0800a7d0 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800a7da:	f107 020f 	add.w	r2, r7, #15
 800a7de:	88f9      	ldrh	r1, [r7, #6]
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	4804      	ldr	r0, [pc, #16]	; (800a7f4 <SUBGRF_ReadRegister+0x24>)
 800a7e4:	f7fa fdf7 	bl	80053d6 <HAL_SUBGHZ_ReadRegisters>
    return data;
 800a7e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3710      	adds	r7, #16
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	200004b8 	.word	0x200004b8

0800a7f8 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b086      	sub	sp, #24
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	4603      	mov	r3, r0
 800a800:	6039      	str	r1, [r7, #0]
 800a802:	80fb      	strh	r3, [r7, #6]
 800a804:	4613      	mov	r3, r2
 800a806:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a808:	f3ef 8310 	mrs	r3, PRIMASK
 800a80c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a80e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a810:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a812:	b672      	cpsid	i
}
 800a814:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800a816:	88bb      	ldrh	r3, [r7, #4]
 800a818:	88f9      	ldrh	r1, [r7, #6]
 800a81a:	683a      	ldr	r2, [r7, #0]
 800a81c:	4806      	ldr	r0, [pc, #24]	; (800a838 <SUBGRF_WriteRegisters+0x40>)
 800a81e:	f7fa fd7b 	bl	8005318 <HAL_SUBGHZ_WriteRegisters>
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	f383 8810 	msr	PRIMASK, r3
}
 800a82c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a82e:	bf00      	nop
 800a830:	3718      	adds	r7, #24
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	200004b8 	.word	0x200004b8

0800a83c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b086      	sub	sp, #24
 800a840:	af00      	add	r7, sp, #0
 800a842:	4603      	mov	r3, r0
 800a844:	6039      	str	r1, [r7, #0]
 800a846:	80fb      	strh	r3, [r7, #6]
 800a848:	4613      	mov	r3, r2
 800a84a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a84c:	f3ef 8310 	mrs	r3, PRIMASK
 800a850:	60fb      	str	r3, [r7, #12]
  return(result);
 800a852:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a854:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a856:	b672      	cpsid	i
}
 800a858:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800a85a:	88bb      	ldrh	r3, [r7, #4]
 800a85c:	88f9      	ldrh	r1, [r7, #6]
 800a85e:	683a      	ldr	r2, [r7, #0]
 800a860:	4806      	ldr	r0, [pc, #24]	; (800a87c <SUBGRF_ReadRegisters+0x40>)
 800a862:	f7fa fdb8 	bl	80053d6 <HAL_SUBGHZ_ReadRegisters>
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	f383 8810 	msr	PRIMASK, r3
}
 800a870:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a872:	bf00      	nop
 800a874:	3718      	adds	r7, #24
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	200004b8 	.word	0x200004b8

0800a880 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b086      	sub	sp, #24
 800a884:	af00      	add	r7, sp, #0
 800a886:	4603      	mov	r3, r0
 800a888:	6039      	str	r1, [r7, #0]
 800a88a:	71fb      	strb	r3, [r7, #7]
 800a88c:	4613      	mov	r3, r2
 800a88e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a890:	f3ef 8310 	mrs	r3, PRIMASK
 800a894:	60fb      	str	r3, [r7, #12]
  return(result);
 800a896:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a898:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a89a:	b672      	cpsid	i
}
 800a89c:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800a89e:	79bb      	ldrb	r3, [r7, #6]
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	79f9      	ldrb	r1, [r7, #7]
 800a8a4:	683a      	ldr	r2, [r7, #0]
 800a8a6:	4806      	ldr	r0, [pc, #24]	; (800a8c0 <SUBGRF_WriteBuffer+0x40>)
 800a8a8:	f7fa fea9 	bl	80055fe <HAL_SUBGHZ_WriteBuffer>
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	f383 8810 	msr	PRIMASK, r3
}
 800a8b6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a8b8:	bf00      	nop
 800a8ba:	3718      	adds	r7, #24
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	200004b8 	.word	0x200004b8

0800a8c4 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b086      	sub	sp, #24
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	6039      	str	r1, [r7, #0]
 800a8ce:	71fb      	strb	r3, [r7, #7]
 800a8d0:	4613      	mov	r3, r2
 800a8d2:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8d4:	f3ef 8310 	mrs	r3, PRIMASK
 800a8d8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a8da:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a8dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a8de:	b672      	cpsid	i
}
 800a8e0:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800a8e2:	79bb      	ldrb	r3, [r7, #6]
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	79f9      	ldrb	r1, [r7, #7]
 800a8e8:	683a      	ldr	r2, [r7, #0]
 800a8ea:	4806      	ldr	r0, [pc, #24]	; (800a904 <SUBGRF_ReadBuffer+0x40>)
 800a8ec:	f7fa feda 	bl	80056a4 <HAL_SUBGHZ_ReadBuffer>
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	f383 8810 	msr	PRIMASK, r3
}
 800a8fa:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a8fc:	bf00      	nop
 800a8fe:	3718      	adds	r7, #24
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}
 800a904:	200004b8 	.word	0x200004b8

0800a908 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b086      	sub	sp, #24
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	4603      	mov	r3, r0
 800a910:	6039      	str	r1, [r7, #0]
 800a912:	71fb      	strb	r3, [r7, #7]
 800a914:	4613      	mov	r3, r2
 800a916:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a918:	f3ef 8310 	mrs	r3, PRIMASK
 800a91c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a91e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a920:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a922:	b672      	cpsid	i
}
 800a924:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800a926:	88bb      	ldrh	r3, [r7, #4]
 800a928:	79f9      	ldrb	r1, [r7, #7]
 800a92a:	683a      	ldr	r2, [r7, #0]
 800a92c:	4806      	ldr	r0, [pc, #24]	; (800a948 <SUBGRF_WriteCommand+0x40>)
 800a92e:	f7fa fdb3 	bl	8005498 <HAL_SUBGHZ_ExecSetCmd>
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	f383 8810 	msr	PRIMASK, r3
}
 800a93c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a93e:	bf00      	nop
 800a940:	3718      	adds	r7, #24
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}
 800a946:	bf00      	nop
 800a948:	200004b8 	.word	0x200004b8

0800a94c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b086      	sub	sp, #24
 800a950:	af00      	add	r7, sp, #0
 800a952:	4603      	mov	r3, r0
 800a954:	6039      	str	r1, [r7, #0]
 800a956:	71fb      	strb	r3, [r7, #7]
 800a958:	4613      	mov	r3, r2
 800a95a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a95c:	f3ef 8310 	mrs	r3, PRIMASK
 800a960:	60fb      	str	r3, [r7, #12]
  return(result);
 800a962:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a964:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a966:	b672      	cpsid	i
}
 800a968:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800a96a:	88bb      	ldrh	r3, [r7, #4]
 800a96c:	79f9      	ldrb	r1, [r7, #7]
 800a96e:	683a      	ldr	r2, [r7, #0]
 800a970:	4806      	ldr	r0, [pc, #24]	; (800a98c <SUBGRF_ReadCommand+0x40>)
 800a972:	f7fa fdf0 	bl	8005556 <HAL_SUBGHZ_ExecGetCmd>
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	f383 8810 	msr	PRIMASK, r3
}
 800a980:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a982:	bf00      	nop
 800a984:	3718      	adds	r7, #24
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	200004b8 	.word	0x200004b8

0800a990 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	4603      	mov	r3, r0
 800a998:	460a      	mov	r2, r1
 800a99a:	71fb      	strb	r3, [r7, #7]
 800a99c:	4613      	mov	r3, r2
 800a99e:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800a9a4:	79bb      	ldrb	r3, [r7, #6]
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	d10d      	bne.n	800a9c6 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800a9aa:	79fb      	ldrb	r3, [r7, #7]
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d104      	bne.n	800a9ba <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800a9b0:	2302      	movs	r3, #2
 800a9b2:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800a9b4:	2004      	movs	r0, #4
 800a9b6:	f000 f8ef 	bl	800ab98 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800a9ba:	79fb      	ldrb	r3, [r7, #7]
 800a9bc:	2b02      	cmp	r3, #2
 800a9be:	d107      	bne.n	800a9d0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800a9c0:	2303      	movs	r3, #3
 800a9c2:	73fb      	strb	r3, [r7, #15]
 800a9c4:	e004      	b.n	800a9d0 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800a9c6:	79bb      	ldrb	r3, [r7, #6]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d101      	bne.n	800a9d0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800a9d0:	7bfb      	ldrb	r3, [r7, #15]
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f000 fad2 	bl	800af7c <RBI_ConfigRFSwitch>
}
 800a9d8:	bf00      	nop
 800a9da:	3710      	adds	r7, #16
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800a9ee:	f000 fb23 	bl	800b038 <RBI_GetTxConfig>
 800a9f2:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	2b02      	cmp	r3, #2
 800a9f8:	d016      	beq.n	800aa28 <SUBGRF_SetRfTxPower+0x48>
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	2b02      	cmp	r3, #2
 800a9fe:	dc16      	bgt.n	800aa2e <SUBGRF_SetRfTxPower+0x4e>
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d003      	beq.n	800aa0e <SUBGRF_SetRfTxPower+0x2e>
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d00a      	beq.n	800aa22 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800aa0c:	e00f      	b.n	800aa2e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800aa0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa12:	2b0f      	cmp	r3, #15
 800aa14:	dd02      	ble.n	800aa1c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800aa16:	2302      	movs	r3, #2
 800aa18:	73fb      	strb	r3, [r7, #15]
            break;
 800aa1a:	e009      	b.n	800aa30 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	73fb      	strb	r3, [r7, #15]
            break;
 800aa20:	e006      	b.n	800aa30 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800aa22:	2301      	movs	r3, #1
 800aa24:	73fb      	strb	r3, [r7, #15]
            break;
 800aa26:	e003      	b.n	800aa30 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800aa28:	2302      	movs	r3, #2
 800aa2a:	73fb      	strb	r3, [r7, #15]
            break;
 800aa2c:	e000      	b.n	800aa30 <SUBGRF_SetRfTxPower+0x50>
            break;
 800aa2e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800aa30:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800aa34:	7bfb      	ldrb	r3, [r7, #15]
 800aa36:	2202      	movs	r2, #2
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f7ff fbcd 	bl	800a1d8 <SUBGRF_SetTxParams>

    return paSelect;
 800aa3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3710      	adds	r7, #16
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800aa48:	b480      	push	{r7}
 800aa4a:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800aa4c:	2301      	movs	r3, #1
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bc80      	pop	{r7}
 800aa54:	4770      	bx	lr
	...

0800aa58 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800aa60:	4b03      	ldr	r3, [pc, #12]	; (800aa70 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	2001      	movs	r0, #1
 800aa66:	4798      	blx	r3
}
 800aa68:	bf00      	nop
 800aa6a:	3708      	adds	r7, #8
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	200009f8 	.word	0x200009f8

0800aa74 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b082      	sub	sp, #8
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800aa7c:	4b03      	ldr	r3, [pc, #12]	; (800aa8c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2002      	movs	r0, #2
 800aa82:	4798      	blx	r3
}
 800aa84:	bf00      	nop
 800aa86:	3708      	adds	r7, #8
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	200009f8 	.word	0x200009f8

0800aa90 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800aa98:	4b03      	ldr	r3, [pc, #12]	; (800aaa8 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	2040      	movs	r0, #64	; 0x40
 800aa9e:	4798      	blx	r3
}
 800aaa0:	bf00      	nop
 800aaa2:	3708      	adds	r7, #8
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}
 800aaa8:	200009f8 	.word	0x200009f8

0800aaac <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b082      	sub	sp, #8
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	460b      	mov	r3, r1
 800aab6:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800aab8:	78fb      	ldrb	r3, [r7, #3]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d002      	beq.n	800aac4 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800aabe:	2b01      	cmp	r3, #1
 800aac0:	d005      	beq.n	800aace <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800aac2:	e00a      	b.n	800aada <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800aac4:	4b07      	ldr	r3, [pc, #28]	; (800aae4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	2080      	movs	r0, #128	; 0x80
 800aaca:	4798      	blx	r3
            break;
 800aacc:	e005      	b.n	800aada <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800aace:	4b05      	ldr	r3, [pc, #20]	; (800aae4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f44f 7080 	mov.w	r0, #256	; 0x100
 800aad6:	4798      	blx	r3
            break;
 800aad8:	bf00      	nop
    }
}
 800aada:	bf00      	nop
 800aadc:	3708      	adds	r7, #8
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	200009f8 	.word	0x200009f8

0800aae8 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800aaf0:	4b04      	ldr	r3, [pc, #16]	; (800ab04 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800aaf8:	4798      	blx	r3
}
 800aafa:	bf00      	nop
 800aafc:	3708      	adds	r7, #8
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	200009f8 	.word	0x200009f8

0800ab08 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800ab10:	4b03      	ldr	r3, [pc, #12]	; (800ab20 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	2020      	movs	r0, #32
 800ab16:	4798      	blx	r3
}
 800ab18:	bf00      	nop
 800ab1a:	3708      	adds	r7, #8
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}
 800ab20:	200009f8 	.word	0x200009f8

0800ab24 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800ab2c:	4b03      	ldr	r3, [pc, #12]	; (800ab3c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	2004      	movs	r0, #4
 800ab32:	4798      	blx	r3
}
 800ab34:	bf00      	nop
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	200009f8 	.word	0x200009f8

0800ab40 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800ab48:	4b03      	ldr	r3, [pc, #12]	; (800ab58 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	2008      	movs	r0, #8
 800ab4e:	4798      	blx	r3
}
 800ab50:	bf00      	nop
 800ab52:	3708      	adds	r7, #8
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	200009f8 	.word	0x200009f8

0800ab5c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b082      	sub	sp, #8
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800ab64:	4b03      	ldr	r3, [pc, #12]	; (800ab74 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	2010      	movs	r0, #16
 800ab6a:	4798      	blx	r3
}
 800ab6c:	bf00      	nop
 800ab6e:	3708      	adds	r7, #8
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}
 800ab74:	200009f8 	.word	0x200009f8

0800ab78 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800ab80:	4b04      	ldr	r3, [pc, #16]	; (800ab94 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800ab88:	4798      	blx	r3
}
 800ab8a:	bf00      	nop
 800ab8c:	3708      	adds	r7, #8
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
 800ab92:	bf00      	nop
 800ab94:	200009f8 	.word	0x200009f8

0800ab98 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	4603      	mov	r3, r0
 800aba0:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800aba2:	f000 fa5f 	bl	800b064 <RBI_IsDCDC>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d112      	bne.n	800abd2 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800abac:	f640 1023 	movw	r0, #2339	; 0x923
 800abb0:	f7ff fe0e 	bl	800a7d0 <SUBGRF_ReadRegister>
 800abb4:	4603      	mov	r3, r0
 800abb6:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800abb8:	7bfb      	ldrb	r3, [r7, #15]
 800abba:	f023 0306 	bic.w	r3, r3, #6
 800abbe:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800abc0:	7bfa      	ldrb	r2, [r7, #15]
 800abc2:	79fb      	ldrb	r3, [r7, #7]
 800abc4:	4313      	orrs	r3, r2
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	4619      	mov	r1, r3
 800abca:	f640 1023 	movw	r0, #2339	; 0x923
 800abce:	f7ff fdeb 	bl	800a7a8 <SUBGRF_WriteRegister>
  }
}
 800abd2:	bf00      	nop
 800abd4:	3710      	adds	r7, #16
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
	...

0800abdc <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800abdc:	b480      	push	{r7}
 800abde:	b085      	sub	sp, #20
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d101      	bne.n	800abee <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800abea:	231f      	movs	r3, #31
 800abec:	e016      	b.n	800ac1c <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800abee:	2300      	movs	r3, #0
 800abf0:	73fb      	strb	r3, [r7, #15]
 800abf2:	e00f      	b.n	800ac14 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800abf4:	7bfb      	ldrb	r3, [r7, #15]
 800abf6:	4a0c      	ldr	r2, [pc, #48]	; (800ac28 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800abf8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d205      	bcs.n	800ac0e <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800ac02:	7bfb      	ldrb	r3, [r7, #15]
 800ac04:	4a08      	ldr	r2, [pc, #32]	; (800ac28 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800ac06:	00db      	lsls	r3, r3, #3
 800ac08:	4413      	add	r3, r2
 800ac0a:	791b      	ldrb	r3, [r3, #4]
 800ac0c:	e006      	b.n	800ac1c <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800ac0e:	7bfb      	ldrb	r3, [r7, #15]
 800ac10:	3301      	adds	r3, #1
 800ac12:	73fb      	strb	r3, [r7, #15]
 800ac14:	7bfb      	ldrb	r3, [r7, #15]
 800ac16:	2b15      	cmp	r3, #21
 800ac18:	d9ec      	bls.n	800abf4 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800ac1a:	e7fe      	b.n	800ac1a <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3714      	adds	r7, #20
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bc80      	pop	{r7}
 800ac24:	4770      	bx	lr
 800ac26:	bf00      	nop
 800ac28:	0800c920 	.word	0x0800c920

0800ac2c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b08a      	sub	sp, #40	; 0x28
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800ac36:	4b35      	ldr	r3, [pc, #212]	; (800ad0c <SUBGRF_GetCFO+0xe0>)
 800ac38:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800ac3a:	f640 0007 	movw	r0, #2055	; 0x807
 800ac3e:	f7ff fdc7 	bl	800a7d0 <SUBGRF_ReadRegister>
 800ac42:	4603      	mov	r3, r0
 800ac44:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800ac46:	7ffb      	ldrb	r3, [r7, #31]
 800ac48:	08db      	lsrs	r3, r3, #3
 800ac4a:	b2db      	uxtb	r3, r3
 800ac4c:	f003 0303 	and.w	r3, r3, #3
 800ac50:	3328      	adds	r3, #40	; 0x28
 800ac52:	443b      	add	r3, r7
 800ac54:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800ac58:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800ac5a:	7ffb      	ldrb	r3, [r7, #31]
 800ac5c:	f003 0307 	and.w	r3, r3, #7
 800ac60:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800ac62:	7fba      	ldrb	r2, [r7, #30]
 800ac64:	7f7b      	ldrb	r3, [r7, #29]
 800ac66:	3301      	adds	r3, #1
 800ac68:	fa02 f303 	lsl.w	r3, r2, r3
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	4b28      	ldr	r3, [pc, #160]	; (800ad10 <SUBGRF_GetCFO+0xe4>)
 800ac70:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac74:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800ac76:	69ba      	ldr	r2, [r7, #24]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac7e:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800ac80:	2301      	movs	r3, #1
 800ac82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800ac86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac8a:	697a      	ldr	r2, [r7, #20]
 800ac8c:	fb02 f303 	mul.w	r3, r2, r3
 800ac90:	2b07      	cmp	r3, #7
 800ac92:	d802      	bhi.n	800ac9a <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800ac94:	2302      	movs	r3, #2
 800ac96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800ac9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac9e:	697a      	ldr	r2, [r7, #20]
 800aca0:	fb02 f303 	mul.w	r3, r2, r3
 800aca4:	2b03      	cmp	r3, #3
 800aca6:	d802      	bhi.n	800acae <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800aca8:	2304      	movs	r3, #4
 800acaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800acae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	fb02 f303 	mul.w	r3, r2, r3
 800acb8:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800acba:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800acbe:	f7ff fd87 	bl	800a7d0 <SUBGRF_ReadRegister>
 800acc2:	4603      	mov	r3, r0
 800acc4:	021b      	lsls	r3, r3, #8
 800acc6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800acca:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800accc:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800acd0:	f7ff fd7e 	bl	800a7d0 <SUBGRF_ReadRegister>
 800acd4:	4603      	mov	r3, r0
 800acd6:	461a      	mov	r2, r3
 800acd8:	6a3b      	ldr	r3, [r7, #32]
 800acda:	4313      	orrs	r3, r2
 800acdc:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800acde:	6a3b      	ldr	r3, [r7, #32]
 800ace0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d005      	beq.n	800acf4 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800ace8:	6a3b      	ldr	r3, [r7, #32]
 800acea:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800acee:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800acf2:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	095b      	lsrs	r3, r3, #5
 800acf8:	6a3a      	ldr	r2, [r7, #32]
 800acfa:	fb02 f303 	mul.w	r3, r2, r3
 800acfe:	11da      	asrs	r2, r3, #7
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	601a      	str	r2, [r3, #0]
}
 800ad04:	bf00      	nop
 800ad06:	3728      	adds	r7, #40	; 0x28
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	0c0a0804 	.word	0x0c0a0804
 800ad10:	01e84800 	.word	0x01e84800

0800ad14 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800ad14:	b480      	push	{r7}
 800ad16:	b087      	sub	sp, #28
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	607a      	str	r2, [r7, #4]
 800ad20:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800ad22:	2300      	movs	r3, #0
 800ad24:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800ad26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad2a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800ad2c:	697b      	ldr	r3, [r7, #20]
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	371c      	adds	r7, #28
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bc80      	pop	{r7}
 800ad36:	4770      	bx	lr

0800ad38 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b087      	sub	sp, #28
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	4603      	mov	r3, r0
 800ad40:	60b9      	str	r1, [r7, #8]
 800ad42:	607a      	str	r2, [r7, #4]
 800ad44:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800ad46:	2300      	movs	r3, #0
 800ad48:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800ad4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad4e:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800ad50:	697b      	ldr	r3, [r7, #20]
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	371c      	adds	r7, #28
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bc80      	pop	{r7}
 800ad5a:	4770      	bx	lr

0800ad5c <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b085      	sub	sp, #20
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800ad68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3714      	adds	r7, #20
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bc80      	pop	{r7}
 800ad74:	4770      	bx	lr

0800ad76 <RFW_DeInit>:

void RFW_DeInit( void )
{
 800ad76:	b480      	push	{r7}
 800ad78:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800ad7a:	bf00      	nop
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bc80      	pop	{r7}
 800ad80:	4770      	bx	lr

0800ad82 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800ad82:	b480      	push	{r7}
 800ad84:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800ad86:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bc80      	pop	{r7}
 800ad8e:	4770      	bx	lr

0800ad90 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800ad90:	b480      	push	{r7}
 800ad92:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800ad94:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bc80      	pop	{r7}
 800ad9c:	4770      	bx	lr

0800ad9e <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800ad9e:	b480      	push	{r7}
 800ada0:	b083      	sub	sp, #12
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	4603      	mov	r3, r0
 800ada6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800ada8:	bf00      	nop
 800adaa:	370c      	adds	r7, #12
 800adac:	46bd      	mov	sp, r7
 800adae:	bc80      	pop	{r7}
 800adb0:	4770      	bx	lr

0800adb2 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800adb2:	b480      	push	{r7}
 800adb4:	b087      	sub	sp, #28
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	60f8      	str	r0, [r7, #12]
 800adba:	460b      	mov	r3, r1
 800adbc:	607a      	str	r2, [r7, #4]
 800adbe:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800adc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800adc4:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800adc6:	697b      	ldr	r3, [r7, #20]
}
 800adc8:	4618      	mov	r0, r3
 800adca:	371c      	adds	r7, #28
 800adcc:	46bd      	mov	sp, r7
 800adce:	bc80      	pop	{r7}
 800add0:	4770      	bx	lr

0800add2 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800add2:	b480      	push	{r7}
 800add4:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800add6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800adda:	4618      	mov	r0, r3
 800addc:	46bd      	mov	sp, r7
 800adde:	bc80      	pop	{r7}
 800ade0:	4770      	bx	lr

0800ade2 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800ade2:	b480      	push	{r7}
 800ade4:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800ade6:	bf00      	nop
 800ade8:	46bd      	mov	sp, r7
 800adea:	bc80      	pop	{r7}
 800adec:	4770      	bx	lr

0800adee <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800adee:	b480      	push	{r7}
 800adf0:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800adf2:	bf00      	nop
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bc80      	pop	{r7}
 800adf8:	4770      	bx	lr

0800adfa <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800adfa:	b480      	push	{r7}
 800adfc:	b083      	sub	sp, #12
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	4603      	mov	r3, r0
 800ae02:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800ae04:	bf00      	nop
 800ae06:	370c      	adds	r7, #12
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bc80      	pop	{r7}
 800ae0c:	4770      	bx	lr

0800ae0e <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800ae0e:	b580      	push	{r7, lr}
 800ae10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800ae12:	f7f7 fb8a 	bl	800252a <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800ae16:	f000 f809 	bl	800ae2c <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800ae1a:	bf00      	nop
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800ae1e:	b480      	push	{r7}
 800ae20:	af00      	add	r7, sp, #0

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_OS */

  /* USER CODE END MX_SubGHz_Phy_Process_OS */
}
 800ae22:	bf00      	nop
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bc80      	pop	{r7}
 800ae28:	4770      	bx	lr
	...

0800ae2c <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800ae30:	4b0a      	ldr	r3, [pc, #40]	; (800ae5c <SubghzApp_Init+0x30>)
 800ae32:	4a0b      	ldr	r2, [pc, #44]	; (800ae60 <SubghzApp_Init+0x34>)
 800ae34:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800ae36:	4b09      	ldr	r3, [pc, #36]	; (800ae5c <SubghzApp_Init+0x30>)
 800ae38:	4a0a      	ldr	r2, [pc, #40]	; (800ae64 <SubghzApp_Init+0x38>)
 800ae3a:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800ae3c:	4b07      	ldr	r3, [pc, #28]	; (800ae5c <SubghzApp_Init+0x30>)
 800ae3e:	4a0a      	ldr	r2, [pc, #40]	; (800ae68 <SubghzApp_Init+0x3c>)
 800ae40:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800ae42:	4b06      	ldr	r3, [pc, #24]	; (800ae5c <SubghzApp_Init+0x30>)
 800ae44:	4a09      	ldr	r2, [pc, #36]	; (800ae6c <SubghzApp_Init+0x40>)
 800ae46:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800ae48:	4b04      	ldr	r3, [pc, #16]	; (800ae5c <SubghzApp_Init+0x30>)
 800ae4a:	4a09      	ldr	r2, [pc, #36]	; (800ae70 <SubghzApp_Init+0x44>)
 800ae4c:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800ae4e:	4b09      	ldr	r3, [pc, #36]	; (800ae74 <SubghzApp_Init+0x48>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	4802      	ldr	r0, [pc, #8]	; (800ae5c <SubghzApp_Init+0x30>)
 800ae54:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 800ae56:	bf00      	nop
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	200009fc 	.word	0x200009fc
 800ae60:	0800ae79 	.word	0x0800ae79
 800ae64:	0800ae85 	.word	0x0800ae85
 800ae68:	0800aea9 	.word	0x0800aea9
 800ae6c:	0800aeb5 	.word	0x0800aeb5
 800ae70:	0800aec1 	.word	0x0800aec1
 800ae74:	0800c890 	.word	0x0800c890

0800ae78 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 800ae7c:	bf00      	nop
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bc80      	pop	{r7}
 800ae82:	4770      	bx	lr

0800ae84 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b085      	sub	sp, #20
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	4608      	mov	r0, r1
 800ae8e:	4611      	mov	r1, r2
 800ae90:	461a      	mov	r2, r3
 800ae92:	4603      	mov	r3, r0
 800ae94:	817b      	strh	r3, [r7, #10]
 800ae96:	460b      	mov	r3, r1
 800ae98:	813b      	strh	r3, [r7, #8]
 800ae9a:	4613      	mov	r3, r2
 800ae9c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 800ae9e:	bf00      	nop
 800aea0:	3714      	adds	r7, #20
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bc80      	pop	{r7}
 800aea6:	4770      	bx	lr

0800aea8 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 800aeac:	bf00      	nop
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bc80      	pop	{r7}
 800aeb2:	4770      	bx	lr

0800aeb4 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 800aeb8:	bf00      	nop
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bc80      	pop	{r7}
 800aebe:	4770      	bx	lr

0800aec0 <OnRxError>:

static void OnRxError(void)
{
 800aec0:	b480      	push	{r7}
 800aec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 800aec4:	bf00      	nop
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bc80      	pop	{r7}
 800aeca:	4770      	bx	lr

0800aecc <LL_AHB2_GRP1_EnableClock>:
{
 800aecc:	b480      	push	{r7}
 800aece:	b085      	sub	sp, #20
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800aed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aed8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aeda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	4313      	orrs	r3, r2
 800aee2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800aee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aee8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	4013      	ands	r3, r2
 800aeee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800aef0:	68fb      	ldr	r3, [r7, #12]
}
 800aef2:	bf00      	nop
 800aef4:	3714      	adds	r7, #20
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bc80      	pop	{r7}
 800aefa:	4770      	bx	lr

0800aefc <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b086      	sub	sp, #24
 800af00:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800af02:	2300      	movs	r3, #0
 800af04:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN RBI_Init_2 */
	GPIO_InitTypeDef gpio_init_structure = { 0 };
 800af06:	463b      	mov	r3, r7
 800af08:	2200      	movs	r2, #0
 800af0a:	601a      	str	r2, [r3, #0]
 800af0c:	605a      	str	r2, [r3, #4]
 800af0e:	609a      	str	r2, [r3, #8]
 800af10:	60da      	str	r2, [r3, #12]
 800af12:	611a      	str	r2, [r3, #16]

	/* Enable the Radio Switch Clock */
	RF_SW_CTRL3_GPIO_CLK_ENABLE();
 800af14:	2004      	movs	r0, #4
 800af16:	f7ff ffd9 	bl	800aecc <LL_AHB2_GRP1_EnableClock>

	/* Configure the Radio Switch pin */
	gpio_init_structure.Pin = RF_SW_CTRL1_PIN;
 800af1a:	2310      	movs	r3, #16
 800af1c:	603b      	str	r3, [r7, #0]
	gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800af1e:	2301      	movs	r3, #1
 800af20:	607b      	str	r3, [r7, #4]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800af22:	2300      	movs	r3, #0
 800af24:	60bb      	str	r3, [r7, #8]
	gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af26:	2303      	movs	r3, #3
 800af28:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800af2a:	463b      	mov	r3, r7
 800af2c:	4619      	mov	r1, r3
 800af2e:	4812      	ldr	r0, [pc, #72]	; (800af78 <RBI_Init+0x7c>)
 800af30:	f7f8 fc4e 	bl	80037d0 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800af34:	2320      	movs	r3, #32
 800af36:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800af38:	463b      	mov	r3, r7
 800af3a:	4619      	mov	r1, r3
 800af3c:	480e      	ldr	r0, [pc, #56]	; (800af78 <RBI_Init+0x7c>)
 800af3e:	f7f8 fc47 	bl	80037d0 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 800af42:	2308      	movs	r3, #8
 800af44:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 800af46:	463b      	mov	r3, r7
 800af48:	4619      	mov	r1, r3
 800af4a:	480b      	ldr	r0, [pc, #44]	; (800af78 <RBI_Init+0x7c>)
 800af4c:	f7f8 fc40 	bl	80037d0 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800af50:	2200      	movs	r2, #0
 800af52:	2120      	movs	r1, #32
 800af54:	4808      	ldr	r0, [pc, #32]	; (800af78 <RBI_Init+0x7c>)
 800af56:	f7f8 fd9b 	bl	8003a90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800af5a:	2200      	movs	r2, #0
 800af5c:	2110      	movs	r1, #16
 800af5e:	4806      	ldr	r0, [pc, #24]	; (800af78 <RBI_Init+0x7c>)
 800af60:	f7f8 fd96 	bl	8003a90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 800af64:	2200      	movs	r2, #0
 800af66:	2108      	movs	r1, #8
 800af68:	4803      	ldr	r0, [pc, #12]	; (800af78 <RBI_Init+0x7c>)
 800af6a:	f7f8 fd91 	bl	8003a90 <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800af6e:	697b      	ldr	r3, [r7, #20]
#endif  /* USE_BSP_DRIVER  */
}
 800af70:	4618      	mov	r0, r3
 800af72:	3718      	adds	r7, #24
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}
 800af78:	48000800 	.word	0x48000800

0800af7c <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	4603      	mov	r3, r0
 800af84:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800af86:	2300      	movs	r3, #0
 800af88:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
	switch (Config) {
 800af8a:	79fb      	ldrb	r3, [r7, #7]
 800af8c:	2b03      	cmp	r3, #3
 800af8e:	d84b      	bhi.n	800b028 <RBI_ConfigRFSwitch+0xac>
 800af90:	a201      	add	r2, pc, #4	; (adr r2, 800af98 <RBI_ConfigRFSwitch+0x1c>)
 800af92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af96:	bf00      	nop
 800af98:	0800afa9 	.word	0x0800afa9
 800af9c:	0800afc9 	.word	0x0800afc9
 800afa0:	0800afe9 	.word	0x0800afe9
 800afa4:	0800b009 	.word	0x0800b009
	case RADIO_SWITCH_OFF: {
		/* Turn off switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN,
 800afa8:	2200      	movs	r2, #0
 800afaa:	2108      	movs	r1, #8
 800afac:	4821      	ldr	r0, [pc, #132]	; (800b034 <RBI_ConfigRFSwitch+0xb8>)
 800afae:	f7f8 fd6f 	bl	8003a90 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800afb2:	2200      	movs	r2, #0
 800afb4:	2110      	movs	r1, #16
 800afb6:	481f      	ldr	r0, [pc, #124]	; (800b034 <RBI_ConfigRFSwitch+0xb8>)
 800afb8:	f7f8 fd6a 	bl	8003a90 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 800afbc:	2200      	movs	r2, #0
 800afbe:	2120      	movs	r1, #32
 800afc0:	481c      	ldr	r0, [pc, #112]	; (800b034 <RBI_ConfigRFSwitch+0xb8>)
 800afc2:	f7f8 fd65 	bl	8003a90 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 800afc6:	e030      	b.n	800b02a <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RX: {
		/*Turns On in Rx Mode the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800afc8:	2201      	movs	r2, #1
 800afca:	2108      	movs	r1, #8
 800afcc:	4819      	ldr	r0, [pc, #100]	; (800b034 <RBI_ConfigRFSwitch+0xb8>)
 800afce:	f7f8 fd5f 	bl	8003a90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800afd2:	2201      	movs	r2, #1
 800afd4:	2110      	movs	r1, #16
 800afd6:	4817      	ldr	r0, [pc, #92]	; (800b034 <RBI_ConfigRFSwitch+0xb8>)
 800afd8:	f7f8 fd5a 	bl	8003a90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 800afdc:	2200      	movs	r2, #0
 800afde:	2120      	movs	r1, #32
 800afe0:	4814      	ldr	r0, [pc, #80]	; (800b034 <RBI_ConfigRFSwitch+0xb8>)
 800afe2:	f7f8 fd55 	bl	8003a90 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 800afe6:	e020      	b.n	800b02a <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_LP: {
		/*Turns On in Tx Low Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800afe8:	2201      	movs	r2, #1
 800afea:	2108      	movs	r1, #8
 800afec:	4811      	ldr	r0, [pc, #68]	; (800b034 <RBI_ConfigRFSwitch+0xb8>)
 800afee:	f7f8 fd4f 	bl	8003a90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800aff2:	2201      	movs	r2, #1
 800aff4:	2110      	movs	r1, #16
 800aff6:	480f      	ldr	r0, [pc, #60]	; (800b034 <RBI_ConfigRFSwitch+0xb8>)
 800aff8:	f7f8 fd4a 	bl	8003a90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800affc:	2201      	movs	r2, #1
 800affe:	2120      	movs	r1, #32
 800b000:	480c      	ldr	r0, [pc, #48]	; (800b034 <RBI_ConfigRFSwitch+0xb8>)
 800b002:	f7f8 fd45 	bl	8003a90 <HAL_GPIO_WritePin>
		break;
 800b006:	e010      	b.n	800b02a <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_HP: {
		/*Turns On in Tx High Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800b008:	2201      	movs	r2, #1
 800b00a:	2108      	movs	r1, #8
 800b00c:	4809      	ldr	r0, [pc, #36]	; (800b034 <RBI_ConfigRFSwitch+0xb8>)
 800b00e:	f7f8 fd3f 	bl	8003a90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800b012:	2200      	movs	r2, #0
 800b014:	2110      	movs	r1, #16
 800b016:	4807      	ldr	r0, [pc, #28]	; (800b034 <RBI_ConfigRFSwitch+0xb8>)
 800b018:	f7f8 fd3a 	bl	8003a90 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800b01c:	2201      	movs	r2, #1
 800b01e:	2120      	movs	r1, #32
 800b020:	4804      	ldr	r0, [pc, #16]	; (800b034 <RBI_ConfigRFSwitch+0xb8>)
 800b022:	f7f8 fd35 	bl	8003a90 <HAL_GPIO_WritePin>
		break;
 800b026:	e000      	b.n	800b02a <RBI_ConfigRFSwitch+0xae>
	}
	default:
		break;
 800b028:	bf00      	nop
	}
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800b02a:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3710      	adds	r7, #16
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}
 800b034:	48000800 	.word	0x48000800

0800b038 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800b038:	b480      	push	{r7}
 800b03a:	b083      	sub	sp, #12
 800b03c:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800b03e:	2300      	movs	r3, #0
 800b040:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
	return RADIO_CONF_RFO_LP_HP;
 800b042:	2300      	movs	r3, #0
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800b044:	4618      	mov	r0, r3
 800b046:	370c      	adds	r7, #12
 800b048:	46bd      	mov	sp, r7
 800b04a:	bc80      	pop	{r7}
 800b04c:	4770      	bx	lr

0800b04e <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800b04e:	b480      	push	{r7}
 800b050:	b083      	sub	sp, #12
 800b052:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800b054:	2301      	movs	r3, #1
 800b056:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
	return IS_TCXO_SUPPORTED;
 800b058:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	370c      	adds	r7, #12
 800b05e:	46bd      	mov	sp, r7
 800b060:	bc80      	pop	{r7}
 800b062:	4770      	bx	lr

0800b064 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800b064:	b480      	push	{r7}
 800b066:	b083      	sub	sp, #12
 800b068:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800b06a:	2301      	movs	r3, #1
 800b06c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
	return IS_DCDC_SUPPORTED;
 800b06e:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b070:	4618      	mov	r0, r3
 800b072:	370c      	adds	r7, #12
 800b074:	46bd      	mov	sp, r7
 800b076:	bc80      	pop	{r7}
 800b078:	4770      	bx	lr

0800b07a <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800b07a:	b480      	push	{r7}
 800b07c:	b085      	sub	sp, #20
 800b07e:	af00      	add	r7, sp, #0
 800b080:	4603      	mov	r3, r0
 800b082:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800b084:	2300      	movs	r3, #0
 800b086:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
// #warning user to provide its board code or to call his board driver functions
	if (Config == RBI_RFO_LP_MAXPOWER) {
 800b088:	79fb      	ldrb	r3, [r7, #7]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d102      	bne.n	800b094 <RBI_GetRFOMaxPowerConfig+0x1a>
		ret = 15; /*dBm*/
 800b08e:	230f      	movs	r3, #15
 800b090:	60fb      	str	r3, [r7, #12]
 800b092:	e001      	b.n	800b098 <RBI_GetRFOMaxPowerConfig+0x1e>
	} else {
		ret = 22; /*dBm*/
 800b094:	2316      	movs	r3, #22
 800b096:	60fb      	str	r3, [r7, #12]
	}
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800b098:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3714      	adds	r7, #20
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bc80      	pop	{r7}
 800b0a2:	4770      	bx	lr

0800b0a4 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b087      	sub	sp, #28
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	60f8      	str	r0, [r7, #12]
 800b0ac:	60b9      	str	r1, [r7, #8]
 800b0ae:	4613      	mov	r3, r2
 800b0b0:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	613b      	str	r3, [r7, #16]

  while( size-- )
 800b0ba:	e007      	b.n	800b0cc <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800b0bc:	693a      	ldr	r2, [r7, #16]
 800b0be:	1c53      	adds	r3, r2, #1
 800b0c0:	613b      	str	r3, [r7, #16]
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	1c59      	adds	r1, r3, #1
 800b0c6:	6179      	str	r1, [r7, #20]
 800b0c8:	7812      	ldrb	r2, [r2, #0]
 800b0ca:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b0cc:	88fb      	ldrh	r3, [r7, #6]
 800b0ce:	1e5a      	subs	r2, r3, #1
 800b0d0:	80fa      	strh	r2, [r7, #6]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d1f2      	bne.n	800b0bc <UTIL_MEM_cpy_8+0x18>
    }
}
 800b0d6:	bf00      	nop
 800b0d8:	bf00      	nop
 800b0da:	371c      	adds	r7, #28
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bc80      	pop	{r7}
 800b0e0:	4770      	bx	lr

0800b0e2 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800b0e2:	b480      	push	{r7}
 800b0e4:	b085      	sub	sp, #20
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	6078      	str	r0, [r7, #4]
 800b0ea:	460b      	mov	r3, r1
 800b0ec:	70fb      	strb	r3, [r7, #3]
 800b0ee:	4613      	mov	r3, r2
 800b0f0:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800b0f6:	e004      	b.n	800b102 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	1c5a      	adds	r2, r3, #1
 800b0fc:	60fa      	str	r2, [r7, #12]
 800b0fe:	78fa      	ldrb	r2, [r7, #3]
 800b100:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b102:	883b      	ldrh	r3, [r7, #0]
 800b104:	1e5a      	subs	r2, r3, #1
 800b106:	803a      	strh	r2, [r7, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d1f5      	bne.n	800b0f8 <UTIL_MEM_set_8+0x16>
  }
}
 800b10c:	bf00      	nop
 800b10e:	bf00      	nop
 800b110:	3714      	adds	r7, #20
 800b112:	46bd      	mov	sp, r7
 800b114:	bc80      	pop	{r7}
 800b116:	4770      	bx	lr

0800b118 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b084      	sub	sp, #16
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	60f8      	str	r0, [r7, #12]
 800b120:	60b9      	str	r1, [r7, #8]
 800b122:	603b      	str	r3, [r7, #0]
 800b124:	4613      	mov	r3, r2
 800b126:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d023      	beq.n	800b176 <UTIL_TIMER_Create+0x5e>
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d020      	beq.n	800b176 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2200      	movs	r2, #0
 800b138:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800b13a:	4b11      	ldr	r3, [pc, #68]	; (800b180 <UTIL_TIMER_Create+0x68>)
 800b13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b13e:	68b8      	ldr	r0, [r7, #8]
 800b140:	4798      	blx	r3
 800b142:	4602      	mov	r2, r0
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2200      	movs	r2, #0
 800b14c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2200      	movs	r2, #0
 800b152:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2200      	movs	r2, #0
 800b158:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	683a      	ldr	r2, [r7, #0]
 800b15e:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	69ba      	ldr	r2, [r7, #24]
 800b164:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	79fa      	ldrb	r2, [r7, #7]
 800b16a:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2200      	movs	r2, #0
 800b170:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800b172:	2300      	movs	r3, #0
 800b174:	e000      	b.n	800b178 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800b176:	2301      	movs	r3, #1
  }
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3710      	adds	r7, #16
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	0800c83c 	.word	0x0800c83c

0800b184 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b08a      	sub	sp, #40	; 0x28
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b18c:	2300      	movs	r3, #0
 800b18e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d056      	beq.n	800b246 <UTIL_TIMER_Start+0xc2>
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 f929 	bl	800b3f0 <TimerExists>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	f083 0301 	eor.w	r3, r3, #1
 800b1a4:	b2db      	uxtb	r3, r3
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d04d      	beq.n	800b246 <UTIL_TIMER_Start+0xc2>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	7a5b      	ldrb	r3, [r3, #9]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d149      	bne.n	800b246 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1b2:	f3ef 8310 	mrs	r3, PRIMASK
 800b1b6:	613b      	str	r3, [r7, #16]
  return(result);
 800b1b8:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b1ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b1bc:	b672      	cpsid	i
}
 800b1be:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800b1c6:	4b24      	ldr	r3, [pc, #144]	; (800b258 <UTIL_TIMER_Start+0xd4>)
 800b1c8:	6a1b      	ldr	r3, [r3, #32]
 800b1ca:	4798      	blx	r3
 800b1cc:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800b1ce:	6a3a      	ldr	r2, [r7, #32]
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d201      	bcs.n	800b1da <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800b1d6:	69bb      	ldr	r3, [r7, #24]
 800b1d8:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6a3a      	ldr	r2, [r7, #32]
 800b1de:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800b1f2:	4b1a      	ldr	r3, [pc, #104]	; (800b25c <UTIL_TIMER_Start+0xd8>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d106      	bne.n	800b208 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800b1fa:	4b17      	ldr	r3, [pc, #92]	; (800b258 <UTIL_TIMER_Start+0xd4>)
 800b1fc:	691b      	ldr	r3, [r3, #16]
 800b1fe:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f000 f96b 	bl	800b4dc <TimerInsertNewHeadTimer>
 800b206:	e017      	b.n	800b238 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800b208:	4b13      	ldr	r3, [pc, #76]	; (800b258 <UTIL_TIMER_Start+0xd4>)
 800b20a:	699b      	ldr	r3, [r3, #24]
 800b20c:	4798      	blx	r3
 800b20e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681a      	ldr	r2, [r3, #0]
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	441a      	add	r2, r3
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	4b0e      	ldr	r3, [pc, #56]	; (800b25c <UTIL_TIMER_Start+0xd8>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	429a      	cmp	r2, r3
 800b228:	d203      	bcs.n	800b232 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 f956 	bl	800b4dc <TimerInsertNewHeadTimer>
 800b230:	e002      	b.n	800b238 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 f922 	bl	800b47c <TimerInsertTimer>
 800b238:	69fb      	ldr	r3, [r7, #28]
 800b23a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f383 8810 	msr	PRIMASK, r3
}
 800b242:	bf00      	nop
  {
 800b244:	e002      	b.n	800b24c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800b246:	2301      	movs	r3, #1
 800b248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800b24c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b250:	4618      	mov	r0, r3
 800b252:	3728      	adds	r7, #40	; 0x28
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}
 800b258:	0800c83c 	.word	0x0800c83c
 800b25c:	20000a18 	.word	0x20000a18

0800b260 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b088      	sub	sp, #32
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b268:	2300      	movs	r3, #0
 800b26a:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d05b      	beq.n	800b32a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b272:	f3ef 8310 	mrs	r3, PRIMASK
 800b276:	60fb      	str	r3, [r7, #12]
  return(result);
 800b278:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b27a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b27c:	b672      	cpsid	i
}
 800b27e:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800b280:	4b2d      	ldr	r3, [pc, #180]	; (800b338 <UTIL_TIMER_Stop+0xd8>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800b286:	4b2c      	ldr	r3, [pc, #176]	; (800b338 <UTIL_TIMER_Stop+0xd8>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2201      	movs	r2, #1
 800b290:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800b292:	4b29      	ldr	r3, [pc, #164]	; (800b338 <UTIL_TIMER_Stop+0xd8>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d041      	beq.n	800b31e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2200      	movs	r2, #0
 800b29e:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800b2a0:	4b25      	ldr	r3, [pc, #148]	; (800b338 <UTIL_TIMER_Stop+0xd8>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	687a      	ldr	r2, [r7, #4]
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d134      	bne.n	800b314 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800b2aa:	4b23      	ldr	r3, [pc, #140]	; (800b338 <UTIL_TIMER_Stop+0xd8>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800b2b2:	4b21      	ldr	r3, [pc, #132]	; (800b338 <UTIL_TIMER_Stop+0xd8>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	695b      	ldr	r3, [r3, #20]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d00a      	beq.n	800b2d2 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800b2bc:	4b1e      	ldr	r3, [pc, #120]	; (800b338 <UTIL_TIMER_Stop+0xd8>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	695b      	ldr	r3, [r3, #20]
 800b2c2:	4a1d      	ldr	r2, [pc, #116]	; (800b338 <UTIL_TIMER_Stop+0xd8>)
 800b2c4:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800b2c6:	4b1c      	ldr	r3, [pc, #112]	; (800b338 <UTIL_TIMER_Stop+0xd8>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f000 f8ac 	bl	800b428 <TimerSetTimeout>
 800b2d0:	e023      	b.n	800b31a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800b2d2:	4b1a      	ldr	r3, [pc, #104]	; (800b33c <UTIL_TIMER_Stop+0xdc>)
 800b2d4:	68db      	ldr	r3, [r3, #12]
 800b2d6:	4798      	blx	r3
            TimerListHead = NULL;
 800b2d8:	4b17      	ldr	r3, [pc, #92]	; (800b338 <UTIL_TIMER_Stop+0xd8>)
 800b2da:	2200      	movs	r2, #0
 800b2dc:	601a      	str	r2, [r3, #0]
 800b2de:	e01c      	b.n	800b31a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800b2e0:	697a      	ldr	r2, [r7, #20]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d110      	bne.n	800b30a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	695b      	ldr	r3, [r3, #20]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d006      	beq.n	800b2fe <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	695b      	ldr	r3, [r3, #20]
 800b2f4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	697a      	ldr	r2, [r7, #20]
 800b2fa:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800b2fc:	e00d      	b.n	800b31a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800b2fe:	2300      	movs	r3, #0
 800b300:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	697a      	ldr	r2, [r7, #20]
 800b306:	615a      	str	r2, [r3, #20]
            break;
 800b308:	e007      	b.n	800b31a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	695b      	ldr	r3, [r3, #20]
 800b312:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d1e2      	bne.n	800b2e0 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800b31a:	2300      	movs	r3, #0
 800b31c:	77fb      	strb	r3, [r7, #31]
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	f383 8810 	msr	PRIMASK, r3
}
 800b328:	e001      	b.n	800b32e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800b32a:	2301      	movs	r3, #1
 800b32c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800b32e:	7ffb      	ldrb	r3, [r7, #31]
}
 800b330:	4618      	mov	r0, r3
 800b332:	3720      	adds	r7, #32
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}
 800b338:	20000a18 	.word	0x20000a18
 800b33c:	0800c83c 	.word	0x0800c83c

0800b340 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b084      	sub	sp, #16
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b34a:	2300      	movs	r3, #0
 800b34c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d102      	bne.n	800b35a <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800b354:	2301      	movs	r3, #1
 800b356:	73fb      	strb	r3, [r7, #15]
 800b358:	e014      	b.n	800b384 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800b35a:	4b0d      	ldr	r3, [pc, #52]	; (800b390 <UTIL_TIMER_SetPeriod+0x50>)
 800b35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b35e:	6838      	ldr	r0, [r7, #0]
 800b360:	4798      	blx	r3
 800b362:	4602      	mov	r2, r0
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f000 f841 	bl	800b3f0 <TimerExists>
 800b36e:	4603      	mov	r3, r0
 800b370:	2b00      	cmp	r3, #0
 800b372:	d007      	beq.n	800b384 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f7ff ff73 	bl	800b260 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f7ff ff02 	bl	800b184 <UTIL_TIMER_Start>
 800b380:	4603      	mov	r3, r0
 800b382:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800b384:	7bfb      	ldrb	r3, [r7, #15]
}
 800b386:	4618      	mov	r0, r3
 800b388:	3710      	adds	r7, #16
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	0800c83c 	.word	0x0800c83c

0800b394 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800b39a:	4b06      	ldr	r3, [pc, #24]	; (800b3b4 <UTIL_TIMER_GetCurrentTime+0x20>)
 800b39c:	69db      	ldr	r3, [r3, #28]
 800b39e:	4798      	blx	r3
 800b3a0:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800b3a2:	4b04      	ldr	r3, [pc, #16]	; (800b3b4 <UTIL_TIMER_GetCurrentTime+0x20>)
 800b3a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	4798      	blx	r3
 800b3aa:	4603      	mov	r3, r0
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3708      	adds	r7, #8
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}
 800b3b4:	0800c83c 	.word	0x0800c83c

0800b3b8 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800b3c0:	4b0a      	ldr	r3, [pc, #40]	; (800b3ec <UTIL_TIMER_GetElapsedTime+0x34>)
 800b3c2:	69db      	ldr	r3, [r3, #28]
 800b3c4:	4798      	blx	r3
 800b3c6:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800b3c8:	4b08      	ldr	r3, [pc, #32]	; (800b3ec <UTIL_TIMER_GetElapsedTime+0x34>)
 800b3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	4798      	blx	r3
 800b3d0:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800b3d2:	4b06      	ldr	r3, [pc, #24]	; (800b3ec <UTIL_TIMER_GetElapsedTime+0x34>)
 800b3d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3d6:	68f9      	ldr	r1, [r7, #12]
 800b3d8:	68ba      	ldr	r2, [r7, #8]
 800b3da:	1a8a      	subs	r2, r1, r2
 800b3dc:	4610      	mov	r0, r2
 800b3de:	4798      	blx	r3
 800b3e0:	4603      	mov	r3, r0
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3710      	adds	r7, #16
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
 800b3ea:	bf00      	nop
 800b3ec:	0800c83c 	.word	0x0800c83c

0800b3f0 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b085      	sub	sp, #20
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b3f8:	4b0a      	ldr	r3, [pc, #40]	; (800b424 <TimerExists+0x34>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800b3fe:	e008      	b.n	800b412 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800b400:	68fa      	ldr	r2, [r7, #12]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	429a      	cmp	r2, r3
 800b406:	d101      	bne.n	800b40c <TimerExists+0x1c>
    {
      return true;
 800b408:	2301      	movs	r3, #1
 800b40a:	e006      	b.n	800b41a <TimerExists+0x2a>
    }
    cur = cur->Next;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	695b      	ldr	r3, [r3, #20]
 800b410:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d1f3      	bne.n	800b400 <TimerExists+0x10>
  }
  return false;
 800b418:	2300      	movs	r3, #0
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3714      	adds	r7, #20
 800b41e:	46bd      	mov	sp, r7
 800b420:	bc80      	pop	{r7}
 800b422:	4770      	bx	lr
 800b424:	20000a18 	.word	0x20000a18

0800b428 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800b428:	b590      	push	{r4, r7, lr}
 800b42a:	b085      	sub	sp, #20
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800b430:	4b11      	ldr	r3, [pc, #68]	; (800b478 <TimerSetTimeout+0x50>)
 800b432:	6a1b      	ldr	r3, [r3, #32]
 800b434:	4798      	blx	r3
 800b436:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2201      	movs	r2, #1
 800b43c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681c      	ldr	r4, [r3, #0]
 800b442:	4b0d      	ldr	r3, [pc, #52]	; (800b478 <TimerSetTimeout+0x50>)
 800b444:	699b      	ldr	r3, [r3, #24]
 800b446:	4798      	blx	r3
 800b448:	4602      	mov	r2, r0
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	4413      	add	r3, r2
 800b44e:	429c      	cmp	r4, r3
 800b450:	d207      	bcs.n	800b462 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800b452:	4b09      	ldr	r3, [pc, #36]	; (800b478 <TimerSetTimeout+0x50>)
 800b454:	699b      	ldr	r3, [r3, #24]
 800b456:	4798      	blx	r3
 800b458:	4602      	mov	r2, r0
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	441a      	add	r2, r3
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800b462:	4b05      	ldr	r3, [pc, #20]	; (800b478 <TimerSetTimeout+0x50>)
 800b464:	689b      	ldr	r3, [r3, #8]
 800b466:	687a      	ldr	r2, [r7, #4]
 800b468:	6812      	ldr	r2, [r2, #0]
 800b46a:	4610      	mov	r0, r2
 800b46c:	4798      	blx	r3
}
 800b46e:	bf00      	nop
 800b470:	3714      	adds	r7, #20
 800b472:	46bd      	mov	sp, r7
 800b474:	bd90      	pop	{r4, r7, pc}
 800b476:	bf00      	nop
 800b478:	0800c83c 	.word	0x0800c83c

0800b47c <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b085      	sub	sp, #20
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b484:	4b14      	ldr	r3, [pc, #80]	; (800b4d8 <TimerInsertTimer+0x5c>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800b48a:	4b13      	ldr	r3, [pc, #76]	; (800b4d8 <TimerInsertTimer+0x5c>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	695b      	ldr	r3, [r3, #20]
 800b490:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800b492:	e012      	b.n	800b4ba <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681a      	ldr	r2, [r3, #0]
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d905      	bls.n	800b4ac <TimerInsertTimer+0x30>
    {
        cur = next;
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	695b      	ldr	r3, [r3, #20]
 800b4a8:	60bb      	str	r3, [r7, #8]
 800b4aa:	e006      	b.n	800b4ba <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	68ba      	ldr	r2, [r7, #8]
 800b4b6:	615a      	str	r2, [r3, #20]
        return;
 800b4b8:	e009      	b.n	800b4ce <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	695b      	ldr	r3, [r3, #20]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d1e8      	bne.n	800b494 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	615a      	str	r2, [r3, #20]
}
 800b4ce:	3714      	adds	r7, #20
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bc80      	pop	{r7}
 800b4d4:	4770      	bx	lr
 800b4d6:	bf00      	nop
 800b4d8:	20000a18 	.word	0x20000a18

0800b4dc <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b4e4:	4b0b      	ldr	r3, [pc, #44]	; (800b514 <TimerInsertNewHeadTimer+0x38>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d002      	beq.n	800b4f6 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	68fa      	ldr	r2, [r7, #12]
 800b4fa:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800b4fc:	4a05      	ldr	r2, [pc, #20]	; (800b514 <TimerInsertNewHeadTimer+0x38>)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800b502:	4b04      	ldr	r3, [pc, #16]	; (800b514 <TimerInsertNewHeadTimer+0x38>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4618      	mov	r0, r3
 800b508:	f7ff ff8e 	bl	800b428 <TimerSetTimeout>
}
 800b50c:	bf00      	nop
 800b50e:	3710      	adds	r7, #16
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}
 800b514:	20000a18 	.word	0x20000a18

0800b518 <_vsniprintf_r>:
 800b518:	b530      	push	{r4, r5, lr}
 800b51a:	4614      	mov	r4, r2
 800b51c:	2c00      	cmp	r4, #0
 800b51e:	b09b      	sub	sp, #108	; 0x6c
 800b520:	4605      	mov	r5, r0
 800b522:	461a      	mov	r2, r3
 800b524:	da05      	bge.n	800b532 <_vsniprintf_r+0x1a>
 800b526:	238b      	movs	r3, #139	; 0x8b
 800b528:	6003      	str	r3, [r0, #0]
 800b52a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b52e:	b01b      	add	sp, #108	; 0x6c
 800b530:	bd30      	pop	{r4, r5, pc}
 800b532:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b536:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b53a:	bf14      	ite	ne
 800b53c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800b540:	4623      	moveq	r3, r4
 800b542:	9302      	str	r3, [sp, #8]
 800b544:	9305      	str	r3, [sp, #20]
 800b546:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b54a:	9100      	str	r1, [sp, #0]
 800b54c:	9104      	str	r1, [sp, #16]
 800b54e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b552:	4669      	mov	r1, sp
 800b554:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b556:	f000 f8b5 	bl	800b6c4 <_svfiprintf_r>
 800b55a:	1c43      	adds	r3, r0, #1
 800b55c:	bfbc      	itt	lt
 800b55e:	238b      	movlt	r3, #139	; 0x8b
 800b560:	602b      	strlt	r3, [r5, #0]
 800b562:	2c00      	cmp	r4, #0
 800b564:	d0e3      	beq.n	800b52e <_vsniprintf_r+0x16>
 800b566:	9b00      	ldr	r3, [sp, #0]
 800b568:	2200      	movs	r2, #0
 800b56a:	701a      	strb	r2, [r3, #0]
 800b56c:	e7df      	b.n	800b52e <_vsniprintf_r+0x16>
	...

0800b570 <vsniprintf>:
 800b570:	b507      	push	{r0, r1, r2, lr}
 800b572:	9300      	str	r3, [sp, #0]
 800b574:	4613      	mov	r3, r2
 800b576:	460a      	mov	r2, r1
 800b578:	4601      	mov	r1, r0
 800b57a:	4803      	ldr	r0, [pc, #12]	; (800b588 <vsniprintf+0x18>)
 800b57c:	6800      	ldr	r0, [r0, #0]
 800b57e:	f7ff ffcb 	bl	800b518 <_vsniprintf_r>
 800b582:	b003      	add	sp, #12
 800b584:	f85d fb04 	ldr.w	pc, [sp], #4
 800b588:	20000060 	.word	0x20000060

0800b58c <memset>:
 800b58c:	4402      	add	r2, r0
 800b58e:	4603      	mov	r3, r0
 800b590:	4293      	cmp	r3, r2
 800b592:	d100      	bne.n	800b596 <memset+0xa>
 800b594:	4770      	bx	lr
 800b596:	f803 1b01 	strb.w	r1, [r3], #1
 800b59a:	e7f9      	b.n	800b590 <memset+0x4>

0800b59c <__errno>:
 800b59c:	4b01      	ldr	r3, [pc, #4]	; (800b5a4 <__errno+0x8>)
 800b59e:	6818      	ldr	r0, [r3, #0]
 800b5a0:	4770      	bx	lr
 800b5a2:	bf00      	nop
 800b5a4:	20000060 	.word	0x20000060

0800b5a8 <__libc_init_array>:
 800b5a8:	b570      	push	{r4, r5, r6, lr}
 800b5aa:	4d0d      	ldr	r5, [pc, #52]	; (800b5e0 <__libc_init_array+0x38>)
 800b5ac:	4c0d      	ldr	r4, [pc, #52]	; (800b5e4 <__libc_init_array+0x3c>)
 800b5ae:	1b64      	subs	r4, r4, r5
 800b5b0:	10a4      	asrs	r4, r4, #2
 800b5b2:	2600      	movs	r6, #0
 800b5b4:	42a6      	cmp	r6, r4
 800b5b6:	d109      	bne.n	800b5cc <__libc_init_array+0x24>
 800b5b8:	4d0b      	ldr	r5, [pc, #44]	; (800b5e8 <__libc_init_array+0x40>)
 800b5ba:	4c0c      	ldr	r4, [pc, #48]	; (800b5ec <__libc_init_array+0x44>)
 800b5bc:	f000 fc68 	bl	800be90 <_init>
 800b5c0:	1b64      	subs	r4, r4, r5
 800b5c2:	10a4      	asrs	r4, r4, #2
 800b5c4:	2600      	movs	r6, #0
 800b5c6:	42a6      	cmp	r6, r4
 800b5c8:	d105      	bne.n	800b5d6 <__libc_init_array+0x2e>
 800b5ca:	bd70      	pop	{r4, r5, r6, pc}
 800b5cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5d0:	4798      	blx	r3
 800b5d2:	3601      	adds	r6, #1
 800b5d4:	e7ee      	b.n	800b5b4 <__libc_init_array+0xc>
 800b5d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5da:	4798      	blx	r3
 800b5dc:	3601      	adds	r6, #1
 800b5de:	e7f2      	b.n	800b5c6 <__libc_init_array+0x1e>
 800b5e0:	0800ca0c 	.word	0x0800ca0c
 800b5e4:	0800ca0c 	.word	0x0800ca0c
 800b5e8:	0800ca0c 	.word	0x0800ca0c
 800b5ec:	0800ca10 	.word	0x0800ca10

0800b5f0 <__retarget_lock_acquire_recursive>:
 800b5f0:	4770      	bx	lr

0800b5f2 <__retarget_lock_release_recursive>:
 800b5f2:	4770      	bx	lr

0800b5f4 <memcpy>:
 800b5f4:	440a      	add	r2, r1
 800b5f6:	4291      	cmp	r1, r2
 800b5f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b5fc:	d100      	bne.n	800b600 <memcpy+0xc>
 800b5fe:	4770      	bx	lr
 800b600:	b510      	push	{r4, lr}
 800b602:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b606:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b60a:	4291      	cmp	r1, r2
 800b60c:	d1f9      	bne.n	800b602 <memcpy+0xe>
 800b60e:	bd10      	pop	{r4, pc}

0800b610 <__ssputs_r>:
 800b610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b614:	688e      	ldr	r6, [r1, #8]
 800b616:	461f      	mov	r7, r3
 800b618:	42be      	cmp	r6, r7
 800b61a:	680b      	ldr	r3, [r1, #0]
 800b61c:	4682      	mov	sl, r0
 800b61e:	460c      	mov	r4, r1
 800b620:	4690      	mov	r8, r2
 800b622:	d82c      	bhi.n	800b67e <__ssputs_r+0x6e>
 800b624:	898a      	ldrh	r2, [r1, #12]
 800b626:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b62a:	d026      	beq.n	800b67a <__ssputs_r+0x6a>
 800b62c:	6965      	ldr	r5, [r4, #20]
 800b62e:	6909      	ldr	r1, [r1, #16]
 800b630:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b634:	eba3 0901 	sub.w	r9, r3, r1
 800b638:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b63c:	1c7b      	adds	r3, r7, #1
 800b63e:	444b      	add	r3, r9
 800b640:	106d      	asrs	r5, r5, #1
 800b642:	429d      	cmp	r5, r3
 800b644:	bf38      	it	cc
 800b646:	461d      	movcc	r5, r3
 800b648:	0553      	lsls	r3, r2, #21
 800b64a:	d527      	bpl.n	800b69c <__ssputs_r+0x8c>
 800b64c:	4629      	mov	r1, r5
 800b64e:	f000 f957 	bl	800b900 <_malloc_r>
 800b652:	4606      	mov	r6, r0
 800b654:	b360      	cbz	r0, 800b6b0 <__ssputs_r+0xa0>
 800b656:	6921      	ldr	r1, [r4, #16]
 800b658:	464a      	mov	r2, r9
 800b65a:	f7ff ffcb 	bl	800b5f4 <memcpy>
 800b65e:	89a3      	ldrh	r3, [r4, #12]
 800b660:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b668:	81a3      	strh	r3, [r4, #12]
 800b66a:	6126      	str	r6, [r4, #16]
 800b66c:	6165      	str	r5, [r4, #20]
 800b66e:	444e      	add	r6, r9
 800b670:	eba5 0509 	sub.w	r5, r5, r9
 800b674:	6026      	str	r6, [r4, #0]
 800b676:	60a5      	str	r5, [r4, #8]
 800b678:	463e      	mov	r6, r7
 800b67a:	42be      	cmp	r6, r7
 800b67c:	d900      	bls.n	800b680 <__ssputs_r+0x70>
 800b67e:	463e      	mov	r6, r7
 800b680:	6820      	ldr	r0, [r4, #0]
 800b682:	4632      	mov	r2, r6
 800b684:	4641      	mov	r1, r8
 800b686:	f000 fb86 	bl	800bd96 <memmove>
 800b68a:	68a3      	ldr	r3, [r4, #8]
 800b68c:	1b9b      	subs	r3, r3, r6
 800b68e:	60a3      	str	r3, [r4, #8]
 800b690:	6823      	ldr	r3, [r4, #0]
 800b692:	4433      	add	r3, r6
 800b694:	6023      	str	r3, [r4, #0]
 800b696:	2000      	movs	r0, #0
 800b698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b69c:	462a      	mov	r2, r5
 800b69e:	f000 fb4b 	bl	800bd38 <_realloc_r>
 800b6a2:	4606      	mov	r6, r0
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	d1e0      	bne.n	800b66a <__ssputs_r+0x5a>
 800b6a8:	6921      	ldr	r1, [r4, #16]
 800b6aa:	4650      	mov	r0, sl
 800b6ac:	f000 fb9e 	bl	800bdec <_free_r>
 800b6b0:	230c      	movs	r3, #12
 800b6b2:	f8ca 3000 	str.w	r3, [sl]
 800b6b6:	89a3      	ldrh	r3, [r4, #12]
 800b6b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6bc:	81a3      	strh	r3, [r4, #12]
 800b6be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6c2:	e7e9      	b.n	800b698 <__ssputs_r+0x88>

0800b6c4 <_svfiprintf_r>:
 800b6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6c8:	4698      	mov	r8, r3
 800b6ca:	898b      	ldrh	r3, [r1, #12]
 800b6cc:	061b      	lsls	r3, r3, #24
 800b6ce:	b09d      	sub	sp, #116	; 0x74
 800b6d0:	4607      	mov	r7, r0
 800b6d2:	460d      	mov	r5, r1
 800b6d4:	4614      	mov	r4, r2
 800b6d6:	d50e      	bpl.n	800b6f6 <_svfiprintf_r+0x32>
 800b6d8:	690b      	ldr	r3, [r1, #16]
 800b6da:	b963      	cbnz	r3, 800b6f6 <_svfiprintf_r+0x32>
 800b6dc:	2140      	movs	r1, #64	; 0x40
 800b6de:	f000 f90f 	bl	800b900 <_malloc_r>
 800b6e2:	6028      	str	r0, [r5, #0]
 800b6e4:	6128      	str	r0, [r5, #16]
 800b6e6:	b920      	cbnz	r0, 800b6f2 <_svfiprintf_r+0x2e>
 800b6e8:	230c      	movs	r3, #12
 800b6ea:	603b      	str	r3, [r7, #0]
 800b6ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6f0:	e0d0      	b.n	800b894 <_svfiprintf_r+0x1d0>
 800b6f2:	2340      	movs	r3, #64	; 0x40
 800b6f4:	616b      	str	r3, [r5, #20]
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	9309      	str	r3, [sp, #36]	; 0x24
 800b6fa:	2320      	movs	r3, #32
 800b6fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b700:	f8cd 800c 	str.w	r8, [sp, #12]
 800b704:	2330      	movs	r3, #48	; 0x30
 800b706:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b8ac <_svfiprintf_r+0x1e8>
 800b70a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b70e:	f04f 0901 	mov.w	r9, #1
 800b712:	4623      	mov	r3, r4
 800b714:	469a      	mov	sl, r3
 800b716:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b71a:	b10a      	cbz	r2, 800b720 <_svfiprintf_r+0x5c>
 800b71c:	2a25      	cmp	r2, #37	; 0x25
 800b71e:	d1f9      	bne.n	800b714 <_svfiprintf_r+0x50>
 800b720:	ebba 0b04 	subs.w	fp, sl, r4
 800b724:	d00b      	beq.n	800b73e <_svfiprintf_r+0x7a>
 800b726:	465b      	mov	r3, fp
 800b728:	4622      	mov	r2, r4
 800b72a:	4629      	mov	r1, r5
 800b72c:	4638      	mov	r0, r7
 800b72e:	f7ff ff6f 	bl	800b610 <__ssputs_r>
 800b732:	3001      	adds	r0, #1
 800b734:	f000 80a9 	beq.w	800b88a <_svfiprintf_r+0x1c6>
 800b738:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b73a:	445a      	add	r2, fp
 800b73c:	9209      	str	r2, [sp, #36]	; 0x24
 800b73e:	f89a 3000 	ldrb.w	r3, [sl]
 800b742:	2b00      	cmp	r3, #0
 800b744:	f000 80a1 	beq.w	800b88a <_svfiprintf_r+0x1c6>
 800b748:	2300      	movs	r3, #0
 800b74a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b74e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b752:	f10a 0a01 	add.w	sl, sl, #1
 800b756:	9304      	str	r3, [sp, #16]
 800b758:	9307      	str	r3, [sp, #28]
 800b75a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b75e:	931a      	str	r3, [sp, #104]	; 0x68
 800b760:	4654      	mov	r4, sl
 800b762:	2205      	movs	r2, #5
 800b764:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b768:	4850      	ldr	r0, [pc, #320]	; (800b8ac <_svfiprintf_r+0x1e8>)
 800b76a:	f7f4 fd09 	bl	8000180 <memchr>
 800b76e:	9a04      	ldr	r2, [sp, #16]
 800b770:	b9d8      	cbnz	r0, 800b7aa <_svfiprintf_r+0xe6>
 800b772:	06d0      	lsls	r0, r2, #27
 800b774:	bf44      	itt	mi
 800b776:	2320      	movmi	r3, #32
 800b778:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b77c:	0711      	lsls	r1, r2, #28
 800b77e:	bf44      	itt	mi
 800b780:	232b      	movmi	r3, #43	; 0x2b
 800b782:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b786:	f89a 3000 	ldrb.w	r3, [sl]
 800b78a:	2b2a      	cmp	r3, #42	; 0x2a
 800b78c:	d015      	beq.n	800b7ba <_svfiprintf_r+0xf6>
 800b78e:	9a07      	ldr	r2, [sp, #28]
 800b790:	4654      	mov	r4, sl
 800b792:	2000      	movs	r0, #0
 800b794:	f04f 0c0a 	mov.w	ip, #10
 800b798:	4621      	mov	r1, r4
 800b79a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b79e:	3b30      	subs	r3, #48	; 0x30
 800b7a0:	2b09      	cmp	r3, #9
 800b7a2:	d94d      	bls.n	800b840 <_svfiprintf_r+0x17c>
 800b7a4:	b1b0      	cbz	r0, 800b7d4 <_svfiprintf_r+0x110>
 800b7a6:	9207      	str	r2, [sp, #28]
 800b7a8:	e014      	b.n	800b7d4 <_svfiprintf_r+0x110>
 800b7aa:	eba0 0308 	sub.w	r3, r0, r8
 800b7ae:	fa09 f303 	lsl.w	r3, r9, r3
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	9304      	str	r3, [sp, #16]
 800b7b6:	46a2      	mov	sl, r4
 800b7b8:	e7d2      	b.n	800b760 <_svfiprintf_r+0x9c>
 800b7ba:	9b03      	ldr	r3, [sp, #12]
 800b7bc:	1d19      	adds	r1, r3, #4
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	9103      	str	r1, [sp, #12]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	bfbb      	ittet	lt
 800b7c6:	425b      	neglt	r3, r3
 800b7c8:	f042 0202 	orrlt.w	r2, r2, #2
 800b7cc:	9307      	strge	r3, [sp, #28]
 800b7ce:	9307      	strlt	r3, [sp, #28]
 800b7d0:	bfb8      	it	lt
 800b7d2:	9204      	strlt	r2, [sp, #16]
 800b7d4:	7823      	ldrb	r3, [r4, #0]
 800b7d6:	2b2e      	cmp	r3, #46	; 0x2e
 800b7d8:	d10c      	bne.n	800b7f4 <_svfiprintf_r+0x130>
 800b7da:	7863      	ldrb	r3, [r4, #1]
 800b7dc:	2b2a      	cmp	r3, #42	; 0x2a
 800b7de:	d134      	bne.n	800b84a <_svfiprintf_r+0x186>
 800b7e0:	9b03      	ldr	r3, [sp, #12]
 800b7e2:	1d1a      	adds	r2, r3, #4
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	9203      	str	r2, [sp, #12]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	bfb8      	it	lt
 800b7ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b7f0:	3402      	adds	r4, #2
 800b7f2:	9305      	str	r3, [sp, #20]
 800b7f4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800b8b0 <_svfiprintf_r+0x1ec>
 800b7f8:	7821      	ldrb	r1, [r4, #0]
 800b7fa:	2203      	movs	r2, #3
 800b7fc:	4650      	mov	r0, sl
 800b7fe:	f7f4 fcbf 	bl	8000180 <memchr>
 800b802:	b138      	cbz	r0, 800b814 <_svfiprintf_r+0x150>
 800b804:	9b04      	ldr	r3, [sp, #16]
 800b806:	eba0 000a 	sub.w	r0, r0, sl
 800b80a:	2240      	movs	r2, #64	; 0x40
 800b80c:	4082      	lsls	r2, r0
 800b80e:	4313      	orrs	r3, r2
 800b810:	3401      	adds	r4, #1
 800b812:	9304      	str	r3, [sp, #16]
 800b814:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b818:	4826      	ldr	r0, [pc, #152]	; (800b8b4 <_svfiprintf_r+0x1f0>)
 800b81a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b81e:	2206      	movs	r2, #6
 800b820:	f7f4 fcae 	bl	8000180 <memchr>
 800b824:	2800      	cmp	r0, #0
 800b826:	d038      	beq.n	800b89a <_svfiprintf_r+0x1d6>
 800b828:	4b23      	ldr	r3, [pc, #140]	; (800b8b8 <_svfiprintf_r+0x1f4>)
 800b82a:	bb1b      	cbnz	r3, 800b874 <_svfiprintf_r+0x1b0>
 800b82c:	9b03      	ldr	r3, [sp, #12]
 800b82e:	3307      	adds	r3, #7
 800b830:	f023 0307 	bic.w	r3, r3, #7
 800b834:	3308      	adds	r3, #8
 800b836:	9303      	str	r3, [sp, #12]
 800b838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b83a:	4433      	add	r3, r6
 800b83c:	9309      	str	r3, [sp, #36]	; 0x24
 800b83e:	e768      	b.n	800b712 <_svfiprintf_r+0x4e>
 800b840:	fb0c 3202 	mla	r2, ip, r2, r3
 800b844:	460c      	mov	r4, r1
 800b846:	2001      	movs	r0, #1
 800b848:	e7a6      	b.n	800b798 <_svfiprintf_r+0xd4>
 800b84a:	2300      	movs	r3, #0
 800b84c:	3401      	adds	r4, #1
 800b84e:	9305      	str	r3, [sp, #20]
 800b850:	4619      	mov	r1, r3
 800b852:	f04f 0c0a 	mov.w	ip, #10
 800b856:	4620      	mov	r0, r4
 800b858:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b85c:	3a30      	subs	r2, #48	; 0x30
 800b85e:	2a09      	cmp	r2, #9
 800b860:	d903      	bls.n	800b86a <_svfiprintf_r+0x1a6>
 800b862:	2b00      	cmp	r3, #0
 800b864:	d0c6      	beq.n	800b7f4 <_svfiprintf_r+0x130>
 800b866:	9105      	str	r1, [sp, #20]
 800b868:	e7c4      	b.n	800b7f4 <_svfiprintf_r+0x130>
 800b86a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b86e:	4604      	mov	r4, r0
 800b870:	2301      	movs	r3, #1
 800b872:	e7f0      	b.n	800b856 <_svfiprintf_r+0x192>
 800b874:	ab03      	add	r3, sp, #12
 800b876:	9300      	str	r3, [sp, #0]
 800b878:	462a      	mov	r2, r5
 800b87a:	4b10      	ldr	r3, [pc, #64]	; (800b8bc <_svfiprintf_r+0x1f8>)
 800b87c:	a904      	add	r1, sp, #16
 800b87e:	4638      	mov	r0, r7
 800b880:	f3af 8000 	nop.w
 800b884:	1c42      	adds	r2, r0, #1
 800b886:	4606      	mov	r6, r0
 800b888:	d1d6      	bne.n	800b838 <_svfiprintf_r+0x174>
 800b88a:	89ab      	ldrh	r3, [r5, #12]
 800b88c:	065b      	lsls	r3, r3, #25
 800b88e:	f53f af2d 	bmi.w	800b6ec <_svfiprintf_r+0x28>
 800b892:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b894:	b01d      	add	sp, #116	; 0x74
 800b896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b89a:	ab03      	add	r3, sp, #12
 800b89c:	9300      	str	r3, [sp, #0]
 800b89e:	462a      	mov	r2, r5
 800b8a0:	4b06      	ldr	r3, [pc, #24]	; (800b8bc <_svfiprintf_r+0x1f8>)
 800b8a2:	a904      	add	r1, sp, #16
 800b8a4:	4638      	mov	r0, r7
 800b8a6:	f000 f919 	bl	800badc <_printf_i>
 800b8aa:	e7eb      	b.n	800b884 <_svfiprintf_r+0x1c0>
 800b8ac:	0800c9d0 	.word	0x0800c9d0
 800b8b0:	0800c9d6 	.word	0x0800c9d6
 800b8b4:	0800c9da 	.word	0x0800c9da
 800b8b8:	00000000 	.word	0x00000000
 800b8bc:	0800b611 	.word	0x0800b611

0800b8c0 <sbrk_aligned>:
 800b8c0:	b570      	push	{r4, r5, r6, lr}
 800b8c2:	4e0e      	ldr	r6, [pc, #56]	; (800b8fc <sbrk_aligned+0x3c>)
 800b8c4:	460c      	mov	r4, r1
 800b8c6:	6831      	ldr	r1, [r6, #0]
 800b8c8:	4605      	mov	r5, r0
 800b8ca:	b911      	cbnz	r1, 800b8d2 <sbrk_aligned+0x12>
 800b8cc:	f000 fa7e 	bl	800bdcc <_sbrk_r>
 800b8d0:	6030      	str	r0, [r6, #0]
 800b8d2:	4621      	mov	r1, r4
 800b8d4:	4628      	mov	r0, r5
 800b8d6:	f000 fa79 	bl	800bdcc <_sbrk_r>
 800b8da:	1c43      	adds	r3, r0, #1
 800b8dc:	d00a      	beq.n	800b8f4 <sbrk_aligned+0x34>
 800b8de:	1cc4      	adds	r4, r0, #3
 800b8e0:	f024 0403 	bic.w	r4, r4, #3
 800b8e4:	42a0      	cmp	r0, r4
 800b8e6:	d007      	beq.n	800b8f8 <sbrk_aligned+0x38>
 800b8e8:	1a21      	subs	r1, r4, r0
 800b8ea:	4628      	mov	r0, r5
 800b8ec:	f000 fa6e 	bl	800bdcc <_sbrk_r>
 800b8f0:	3001      	adds	r0, #1
 800b8f2:	d101      	bne.n	800b8f8 <sbrk_aligned+0x38>
 800b8f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	bd70      	pop	{r4, r5, r6, pc}
 800b8fc:	20000b5c 	.word	0x20000b5c

0800b900 <_malloc_r>:
 800b900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b904:	1ccd      	adds	r5, r1, #3
 800b906:	f025 0503 	bic.w	r5, r5, #3
 800b90a:	3508      	adds	r5, #8
 800b90c:	2d0c      	cmp	r5, #12
 800b90e:	bf38      	it	cc
 800b910:	250c      	movcc	r5, #12
 800b912:	2d00      	cmp	r5, #0
 800b914:	4607      	mov	r7, r0
 800b916:	db01      	blt.n	800b91c <_malloc_r+0x1c>
 800b918:	42a9      	cmp	r1, r5
 800b91a:	d905      	bls.n	800b928 <_malloc_r+0x28>
 800b91c:	230c      	movs	r3, #12
 800b91e:	603b      	str	r3, [r7, #0]
 800b920:	2600      	movs	r6, #0
 800b922:	4630      	mov	r0, r6
 800b924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b928:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b9fc <_malloc_r+0xfc>
 800b92c:	f000 f9f8 	bl	800bd20 <__malloc_lock>
 800b930:	f8d8 3000 	ldr.w	r3, [r8]
 800b934:	461c      	mov	r4, r3
 800b936:	bb5c      	cbnz	r4, 800b990 <_malloc_r+0x90>
 800b938:	4629      	mov	r1, r5
 800b93a:	4638      	mov	r0, r7
 800b93c:	f7ff ffc0 	bl	800b8c0 <sbrk_aligned>
 800b940:	1c43      	adds	r3, r0, #1
 800b942:	4604      	mov	r4, r0
 800b944:	d155      	bne.n	800b9f2 <_malloc_r+0xf2>
 800b946:	f8d8 4000 	ldr.w	r4, [r8]
 800b94a:	4626      	mov	r6, r4
 800b94c:	2e00      	cmp	r6, #0
 800b94e:	d145      	bne.n	800b9dc <_malloc_r+0xdc>
 800b950:	2c00      	cmp	r4, #0
 800b952:	d048      	beq.n	800b9e6 <_malloc_r+0xe6>
 800b954:	6823      	ldr	r3, [r4, #0]
 800b956:	4631      	mov	r1, r6
 800b958:	4638      	mov	r0, r7
 800b95a:	eb04 0903 	add.w	r9, r4, r3
 800b95e:	f000 fa35 	bl	800bdcc <_sbrk_r>
 800b962:	4581      	cmp	r9, r0
 800b964:	d13f      	bne.n	800b9e6 <_malloc_r+0xe6>
 800b966:	6821      	ldr	r1, [r4, #0]
 800b968:	1a6d      	subs	r5, r5, r1
 800b96a:	4629      	mov	r1, r5
 800b96c:	4638      	mov	r0, r7
 800b96e:	f7ff ffa7 	bl	800b8c0 <sbrk_aligned>
 800b972:	3001      	adds	r0, #1
 800b974:	d037      	beq.n	800b9e6 <_malloc_r+0xe6>
 800b976:	6823      	ldr	r3, [r4, #0]
 800b978:	442b      	add	r3, r5
 800b97a:	6023      	str	r3, [r4, #0]
 800b97c:	f8d8 3000 	ldr.w	r3, [r8]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d038      	beq.n	800b9f6 <_malloc_r+0xf6>
 800b984:	685a      	ldr	r2, [r3, #4]
 800b986:	42a2      	cmp	r2, r4
 800b988:	d12b      	bne.n	800b9e2 <_malloc_r+0xe2>
 800b98a:	2200      	movs	r2, #0
 800b98c:	605a      	str	r2, [r3, #4]
 800b98e:	e00f      	b.n	800b9b0 <_malloc_r+0xb0>
 800b990:	6822      	ldr	r2, [r4, #0]
 800b992:	1b52      	subs	r2, r2, r5
 800b994:	d41f      	bmi.n	800b9d6 <_malloc_r+0xd6>
 800b996:	2a0b      	cmp	r2, #11
 800b998:	d917      	bls.n	800b9ca <_malloc_r+0xca>
 800b99a:	1961      	adds	r1, r4, r5
 800b99c:	42a3      	cmp	r3, r4
 800b99e:	6025      	str	r5, [r4, #0]
 800b9a0:	bf18      	it	ne
 800b9a2:	6059      	strne	r1, [r3, #4]
 800b9a4:	6863      	ldr	r3, [r4, #4]
 800b9a6:	bf08      	it	eq
 800b9a8:	f8c8 1000 	streq.w	r1, [r8]
 800b9ac:	5162      	str	r2, [r4, r5]
 800b9ae:	604b      	str	r3, [r1, #4]
 800b9b0:	4638      	mov	r0, r7
 800b9b2:	f104 060b 	add.w	r6, r4, #11
 800b9b6:	f000 f9b9 	bl	800bd2c <__malloc_unlock>
 800b9ba:	f026 0607 	bic.w	r6, r6, #7
 800b9be:	1d23      	adds	r3, r4, #4
 800b9c0:	1af2      	subs	r2, r6, r3
 800b9c2:	d0ae      	beq.n	800b922 <_malloc_r+0x22>
 800b9c4:	1b9b      	subs	r3, r3, r6
 800b9c6:	50a3      	str	r3, [r4, r2]
 800b9c8:	e7ab      	b.n	800b922 <_malloc_r+0x22>
 800b9ca:	42a3      	cmp	r3, r4
 800b9cc:	6862      	ldr	r2, [r4, #4]
 800b9ce:	d1dd      	bne.n	800b98c <_malloc_r+0x8c>
 800b9d0:	f8c8 2000 	str.w	r2, [r8]
 800b9d4:	e7ec      	b.n	800b9b0 <_malloc_r+0xb0>
 800b9d6:	4623      	mov	r3, r4
 800b9d8:	6864      	ldr	r4, [r4, #4]
 800b9da:	e7ac      	b.n	800b936 <_malloc_r+0x36>
 800b9dc:	4634      	mov	r4, r6
 800b9de:	6876      	ldr	r6, [r6, #4]
 800b9e0:	e7b4      	b.n	800b94c <_malloc_r+0x4c>
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	e7cc      	b.n	800b980 <_malloc_r+0x80>
 800b9e6:	230c      	movs	r3, #12
 800b9e8:	603b      	str	r3, [r7, #0]
 800b9ea:	4638      	mov	r0, r7
 800b9ec:	f000 f99e 	bl	800bd2c <__malloc_unlock>
 800b9f0:	e797      	b.n	800b922 <_malloc_r+0x22>
 800b9f2:	6025      	str	r5, [r4, #0]
 800b9f4:	e7dc      	b.n	800b9b0 <_malloc_r+0xb0>
 800b9f6:	605b      	str	r3, [r3, #4]
 800b9f8:	deff      	udf	#255	; 0xff
 800b9fa:	bf00      	nop
 800b9fc:	20000b58 	.word	0x20000b58

0800ba00 <_printf_common>:
 800ba00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba04:	4616      	mov	r6, r2
 800ba06:	4699      	mov	r9, r3
 800ba08:	688a      	ldr	r2, [r1, #8]
 800ba0a:	690b      	ldr	r3, [r1, #16]
 800ba0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba10:	4293      	cmp	r3, r2
 800ba12:	bfb8      	it	lt
 800ba14:	4613      	movlt	r3, r2
 800ba16:	6033      	str	r3, [r6, #0]
 800ba18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba1c:	4607      	mov	r7, r0
 800ba1e:	460c      	mov	r4, r1
 800ba20:	b10a      	cbz	r2, 800ba26 <_printf_common+0x26>
 800ba22:	3301      	adds	r3, #1
 800ba24:	6033      	str	r3, [r6, #0]
 800ba26:	6823      	ldr	r3, [r4, #0]
 800ba28:	0699      	lsls	r1, r3, #26
 800ba2a:	bf42      	ittt	mi
 800ba2c:	6833      	ldrmi	r3, [r6, #0]
 800ba2e:	3302      	addmi	r3, #2
 800ba30:	6033      	strmi	r3, [r6, #0]
 800ba32:	6825      	ldr	r5, [r4, #0]
 800ba34:	f015 0506 	ands.w	r5, r5, #6
 800ba38:	d106      	bne.n	800ba48 <_printf_common+0x48>
 800ba3a:	f104 0a19 	add.w	sl, r4, #25
 800ba3e:	68e3      	ldr	r3, [r4, #12]
 800ba40:	6832      	ldr	r2, [r6, #0]
 800ba42:	1a9b      	subs	r3, r3, r2
 800ba44:	42ab      	cmp	r3, r5
 800ba46:	dc26      	bgt.n	800ba96 <_printf_common+0x96>
 800ba48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ba4c:	1e13      	subs	r3, r2, #0
 800ba4e:	6822      	ldr	r2, [r4, #0]
 800ba50:	bf18      	it	ne
 800ba52:	2301      	movne	r3, #1
 800ba54:	0692      	lsls	r2, r2, #26
 800ba56:	d42b      	bmi.n	800bab0 <_printf_common+0xb0>
 800ba58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba5c:	4649      	mov	r1, r9
 800ba5e:	4638      	mov	r0, r7
 800ba60:	47c0      	blx	r8
 800ba62:	3001      	adds	r0, #1
 800ba64:	d01e      	beq.n	800baa4 <_printf_common+0xa4>
 800ba66:	6823      	ldr	r3, [r4, #0]
 800ba68:	6922      	ldr	r2, [r4, #16]
 800ba6a:	f003 0306 	and.w	r3, r3, #6
 800ba6e:	2b04      	cmp	r3, #4
 800ba70:	bf02      	ittt	eq
 800ba72:	68e5      	ldreq	r5, [r4, #12]
 800ba74:	6833      	ldreq	r3, [r6, #0]
 800ba76:	1aed      	subeq	r5, r5, r3
 800ba78:	68a3      	ldr	r3, [r4, #8]
 800ba7a:	bf0c      	ite	eq
 800ba7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba80:	2500      	movne	r5, #0
 800ba82:	4293      	cmp	r3, r2
 800ba84:	bfc4      	itt	gt
 800ba86:	1a9b      	subgt	r3, r3, r2
 800ba88:	18ed      	addgt	r5, r5, r3
 800ba8a:	2600      	movs	r6, #0
 800ba8c:	341a      	adds	r4, #26
 800ba8e:	42b5      	cmp	r5, r6
 800ba90:	d11a      	bne.n	800bac8 <_printf_common+0xc8>
 800ba92:	2000      	movs	r0, #0
 800ba94:	e008      	b.n	800baa8 <_printf_common+0xa8>
 800ba96:	2301      	movs	r3, #1
 800ba98:	4652      	mov	r2, sl
 800ba9a:	4649      	mov	r1, r9
 800ba9c:	4638      	mov	r0, r7
 800ba9e:	47c0      	blx	r8
 800baa0:	3001      	adds	r0, #1
 800baa2:	d103      	bne.n	800baac <_printf_common+0xac>
 800baa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800baa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baac:	3501      	adds	r5, #1
 800baae:	e7c6      	b.n	800ba3e <_printf_common+0x3e>
 800bab0:	18e1      	adds	r1, r4, r3
 800bab2:	1c5a      	adds	r2, r3, #1
 800bab4:	2030      	movs	r0, #48	; 0x30
 800bab6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800baba:	4422      	add	r2, r4
 800babc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bac0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bac4:	3302      	adds	r3, #2
 800bac6:	e7c7      	b.n	800ba58 <_printf_common+0x58>
 800bac8:	2301      	movs	r3, #1
 800baca:	4622      	mov	r2, r4
 800bacc:	4649      	mov	r1, r9
 800bace:	4638      	mov	r0, r7
 800bad0:	47c0      	blx	r8
 800bad2:	3001      	adds	r0, #1
 800bad4:	d0e6      	beq.n	800baa4 <_printf_common+0xa4>
 800bad6:	3601      	adds	r6, #1
 800bad8:	e7d9      	b.n	800ba8e <_printf_common+0x8e>
	...

0800badc <_printf_i>:
 800badc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bae0:	7e0f      	ldrb	r7, [r1, #24]
 800bae2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bae4:	2f78      	cmp	r7, #120	; 0x78
 800bae6:	4691      	mov	r9, r2
 800bae8:	4680      	mov	r8, r0
 800baea:	460c      	mov	r4, r1
 800baec:	469a      	mov	sl, r3
 800baee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800baf2:	d807      	bhi.n	800bb04 <_printf_i+0x28>
 800baf4:	2f62      	cmp	r7, #98	; 0x62
 800baf6:	d80a      	bhi.n	800bb0e <_printf_i+0x32>
 800baf8:	2f00      	cmp	r7, #0
 800bafa:	f000 80d4 	beq.w	800bca6 <_printf_i+0x1ca>
 800bafe:	2f58      	cmp	r7, #88	; 0x58
 800bb00:	f000 80c0 	beq.w	800bc84 <_printf_i+0x1a8>
 800bb04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb0c:	e03a      	b.n	800bb84 <_printf_i+0xa8>
 800bb0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb12:	2b15      	cmp	r3, #21
 800bb14:	d8f6      	bhi.n	800bb04 <_printf_i+0x28>
 800bb16:	a101      	add	r1, pc, #4	; (adr r1, 800bb1c <_printf_i+0x40>)
 800bb18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb1c:	0800bb75 	.word	0x0800bb75
 800bb20:	0800bb89 	.word	0x0800bb89
 800bb24:	0800bb05 	.word	0x0800bb05
 800bb28:	0800bb05 	.word	0x0800bb05
 800bb2c:	0800bb05 	.word	0x0800bb05
 800bb30:	0800bb05 	.word	0x0800bb05
 800bb34:	0800bb89 	.word	0x0800bb89
 800bb38:	0800bb05 	.word	0x0800bb05
 800bb3c:	0800bb05 	.word	0x0800bb05
 800bb40:	0800bb05 	.word	0x0800bb05
 800bb44:	0800bb05 	.word	0x0800bb05
 800bb48:	0800bc8d 	.word	0x0800bc8d
 800bb4c:	0800bbb5 	.word	0x0800bbb5
 800bb50:	0800bc47 	.word	0x0800bc47
 800bb54:	0800bb05 	.word	0x0800bb05
 800bb58:	0800bb05 	.word	0x0800bb05
 800bb5c:	0800bcaf 	.word	0x0800bcaf
 800bb60:	0800bb05 	.word	0x0800bb05
 800bb64:	0800bbb5 	.word	0x0800bbb5
 800bb68:	0800bb05 	.word	0x0800bb05
 800bb6c:	0800bb05 	.word	0x0800bb05
 800bb70:	0800bc4f 	.word	0x0800bc4f
 800bb74:	682b      	ldr	r3, [r5, #0]
 800bb76:	1d1a      	adds	r2, r3, #4
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	602a      	str	r2, [r5, #0]
 800bb7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb84:	2301      	movs	r3, #1
 800bb86:	e09f      	b.n	800bcc8 <_printf_i+0x1ec>
 800bb88:	6820      	ldr	r0, [r4, #0]
 800bb8a:	682b      	ldr	r3, [r5, #0]
 800bb8c:	0607      	lsls	r7, r0, #24
 800bb8e:	f103 0104 	add.w	r1, r3, #4
 800bb92:	6029      	str	r1, [r5, #0]
 800bb94:	d501      	bpl.n	800bb9a <_printf_i+0xbe>
 800bb96:	681e      	ldr	r6, [r3, #0]
 800bb98:	e003      	b.n	800bba2 <_printf_i+0xc6>
 800bb9a:	0646      	lsls	r6, r0, #25
 800bb9c:	d5fb      	bpl.n	800bb96 <_printf_i+0xba>
 800bb9e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bba2:	2e00      	cmp	r6, #0
 800bba4:	da03      	bge.n	800bbae <_printf_i+0xd2>
 800bba6:	232d      	movs	r3, #45	; 0x2d
 800bba8:	4276      	negs	r6, r6
 800bbaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbae:	485a      	ldr	r0, [pc, #360]	; (800bd18 <_printf_i+0x23c>)
 800bbb0:	230a      	movs	r3, #10
 800bbb2:	e012      	b.n	800bbda <_printf_i+0xfe>
 800bbb4:	682b      	ldr	r3, [r5, #0]
 800bbb6:	6820      	ldr	r0, [r4, #0]
 800bbb8:	1d19      	adds	r1, r3, #4
 800bbba:	6029      	str	r1, [r5, #0]
 800bbbc:	0605      	lsls	r5, r0, #24
 800bbbe:	d501      	bpl.n	800bbc4 <_printf_i+0xe8>
 800bbc0:	681e      	ldr	r6, [r3, #0]
 800bbc2:	e002      	b.n	800bbca <_printf_i+0xee>
 800bbc4:	0641      	lsls	r1, r0, #25
 800bbc6:	d5fb      	bpl.n	800bbc0 <_printf_i+0xe4>
 800bbc8:	881e      	ldrh	r6, [r3, #0]
 800bbca:	4853      	ldr	r0, [pc, #332]	; (800bd18 <_printf_i+0x23c>)
 800bbcc:	2f6f      	cmp	r7, #111	; 0x6f
 800bbce:	bf0c      	ite	eq
 800bbd0:	2308      	moveq	r3, #8
 800bbd2:	230a      	movne	r3, #10
 800bbd4:	2100      	movs	r1, #0
 800bbd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bbda:	6865      	ldr	r5, [r4, #4]
 800bbdc:	60a5      	str	r5, [r4, #8]
 800bbde:	2d00      	cmp	r5, #0
 800bbe0:	bfa2      	ittt	ge
 800bbe2:	6821      	ldrge	r1, [r4, #0]
 800bbe4:	f021 0104 	bicge.w	r1, r1, #4
 800bbe8:	6021      	strge	r1, [r4, #0]
 800bbea:	b90e      	cbnz	r6, 800bbf0 <_printf_i+0x114>
 800bbec:	2d00      	cmp	r5, #0
 800bbee:	d04b      	beq.n	800bc88 <_printf_i+0x1ac>
 800bbf0:	4615      	mov	r5, r2
 800bbf2:	fbb6 f1f3 	udiv	r1, r6, r3
 800bbf6:	fb03 6711 	mls	r7, r3, r1, r6
 800bbfa:	5dc7      	ldrb	r7, [r0, r7]
 800bbfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bc00:	4637      	mov	r7, r6
 800bc02:	42bb      	cmp	r3, r7
 800bc04:	460e      	mov	r6, r1
 800bc06:	d9f4      	bls.n	800bbf2 <_printf_i+0x116>
 800bc08:	2b08      	cmp	r3, #8
 800bc0a:	d10b      	bne.n	800bc24 <_printf_i+0x148>
 800bc0c:	6823      	ldr	r3, [r4, #0]
 800bc0e:	07de      	lsls	r6, r3, #31
 800bc10:	d508      	bpl.n	800bc24 <_printf_i+0x148>
 800bc12:	6923      	ldr	r3, [r4, #16]
 800bc14:	6861      	ldr	r1, [r4, #4]
 800bc16:	4299      	cmp	r1, r3
 800bc18:	bfde      	ittt	le
 800bc1a:	2330      	movle	r3, #48	; 0x30
 800bc1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bc20:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bc24:	1b52      	subs	r2, r2, r5
 800bc26:	6122      	str	r2, [r4, #16]
 800bc28:	f8cd a000 	str.w	sl, [sp]
 800bc2c:	464b      	mov	r3, r9
 800bc2e:	aa03      	add	r2, sp, #12
 800bc30:	4621      	mov	r1, r4
 800bc32:	4640      	mov	r0, r8
 800bc34:	f7ff fee4 	bl	800ba00 <_printf_common>
 800bc38:	3001      	adds	r0, #1
 800bc3a:	d14a      	bne.n	800bcd2 <_printf_i+0x1f6>
 800bc3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc40:	b004      	add	sp, #16
 800bc42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc46:	6823      	ldr	r3, [r4, #0]
 800bc48:	f043 0320 	orr.w	r3, r3, #32
 800bc4c:	6023      	str	r3, [r4, #0]
 800bc4e:	4833      	ldr	r0, [pc, #204]	; (800bd1c <_printf_i+0x240>)
 800bc50:	2778      	movs	r7, #120	; 0x78
 800bc52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bc56:	6823      	ldr	r3, [r4, #0]
 800bc58:	6829      	ldr	r1, [r5, #0]
 800bc5a:	061f      	lsls	r7, r3, #24
 800bc5c:	f851 6b04 	ldr.w	r6, [r1], #4
 800bc60:	d402      	bmi.n	800bc68 <_printf_i+0x18c>
 800bc62:	065f      	lsls	r7, r3, #25
 800bc64:	bf48      	it	mi
 800bc66:	b2b6      	uxthmi	r6, r6
 800bc68:	07df      	lsls	r7, r3, #31
 800bc6a:	bf48      	it	mi
 800bc6c:	f043 0320 	orrmi.w	r3, r3, #32
 800bc70:	6029      	str	r1, [r5, #0]
 800bc72:	bf48      	it	mi
 800bc74:	6023      	strmi	r3, [r4, #0]
 800bc76:	b91e      	cbnz	r6, 800bc80 <_printf_i+0x1a4>
 800bc78:	6823      	ldr	r3, [r4, #0]
 800bc7a:	f023 0320 	bic.w	r3, r3, #32
 800bc7e:	6023      	str	r3, [r4, #0]
 800bc80:	2310      	movs	r3, #16
 800bc82:	e7a7      	b.n	800bbd4 <_printf_i+0xf8>
 800bc84:	4824      	ldr	r0, [pc, #144]	; (800bd18 <_printf_i+0x23c>)
 800bc86:	e7e4      	b.n	800bc52 <_printf_i+0x176>
 800bc88:	4615      	mov	r5, r2
 800bc8a:	e7bd      	b.n	800bc08 <_printf_i+0x12c>
 800bc8c:	682b      	ldr	r3, [r5, #0]
 800bc8e:	6826      	ldr	r6, [r4, #0]
 800bc90:	6961      	ldr	r1, [r4, #20]
 800bc92:	1d18      	adds	r0, r3, #4
 800bc94:	6028      	str	r0, [r5, #0]
 800bc96:	0635      	lsls	r5, r6, #24
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	d501      	bpl.n	800bca0 <_printf_i+0x1c4>
 800bc9c:	6019      	str	r1, [r3, #0]
 800bc9e:	e002      	b.n	800bca6 <_printf_i+0x1ca>
 800bca0:	0670      	lsls	r0, r6, #25
 800bca2:	d5fb      	bpl.n	800bc9c <_printf_i+0x1c0>
 800bca4:	8019      	strh	r1, [r3, #0]
 800bca6:	2300      	movs	r3, #0
 800bca8:	6123      	str	r3, [r4, #16]
 800bcaa:	4615      	mov	r5, r2
 800bcac:	e7bc      	b.n	800bc28 <_printf_i+0x14c>
 800bcae:	682b      	ldr	r3, [r5, #0]
 800bcb0:	1d1a      	adds	r2, r3, #4
 800bcb2:	602a      	str	r2, [r5, #0]
 800bcb4:	681d      	ldr	r5, [r3, #0]
 800bcb6:	6862      	ldr	r2, [r4, #4]
 800bcb8:	2100      	movs	r1, #0
 800bcba:	4628      	mov	r0, r5
 800bcbc:	f7f4 fa60 	bl	8000180 <memchr>
 800bcc0:	b108      	cbz	r0, 800bcc6 <_printf_i+0x1ea>
 800bcc2:	1b40      	subs	r0, r0, r5
 800bcc4:	6060      	str	r0, [r4, #4]
 800bcc6:	6863      	ldr	r3, [r4, #4]
 800bcc8:	6123      	str	r3, [r4, #16]
 800bcca:	2300      	movs	r3, #0
 800bccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcd0:	e7aa      	b.n	800bc28 <_printf_i+0x14c>
 800bcd2:	6923      	ldr	r3, [r4, #16]
 800bcd4:	462a      	mov	r2, r5
 800bcd6:	4649      	mov	r1, r9
 800bcd8:	4640      	mov	r0, r8
 800bcda:	47d0      	blx	sl
 800bcdc:	3001      	adds	r0, #1
 800bcde:	d0ad      	beq.n	800bc3c <_printf_i+0x160>
 800bce0:	6823      	ldr	r3, [r4, #0]
 800bce2:	079b      	lsls	r3, r3, #30
 800bce4:	d413      	bmi.n	800bd0e <_printf_i+0x232>
 800bce6:	68e0      	ldr	r0, [r4, #12]
 800bce8:	9b03      	ldr	r3, [sp, #12]
 800bcea:	4298      	cmp	r0, r3
 800bcec:	bfb8      	it	lt
 800bcee:	4618      	movlt	r0, r3
 800bcf0:	e7a6      	b.n	800bc40 <_printf_i+0x164>
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	4632      	mov	r2, r6
 800bcf6:	4649      	mov	r1, r9
 800bcf8:	4640      	mov	r0, r8
 800bcfa:	47d0      	blx	sl
 800bcfc:	3001      	adds	r0, #1
 800bcfe:	d09d      	beq.n	800bc3c <_printf_i+0x160>
 800bd00:	3501      	adds	r5, #1
 800bd02:	68e3      	ldr	r3, [r4, #12]
 800bd04:	9903      	ldr	r1, [sp, #12]
 800bd06:	1a5b      	subs	r3, r3, r1
 800bd08:	42ab      	cmp	r3, r5
 800bd0a:	dcf2      	bgt.n	800bcf2 <_printf_i+0x216>
 800bd0c:	e7eb      	b.n	800bce6 <_printf_i+0x20a>
 800bd0e:	2500      	movs	r5, #0
 800bd10:	f104 0619 	add.w	r6, r4, #25
 800bd14:	e7f5      	b.n	800bd02 <_printf_i+0x226>
 800bd16:	bf00      	nop
 800bd18:	0800c9e1 	.word	0x0800c9e1
 800bd1c:	0800c9f2 	.word	0x0800c9f2

0800bd20 <__malloc_lock>:
 800bd20:	4801      	ldr	r0, [pc, #4]	; (800bd28 <__malloc_lock+0x8>)
 800bd22:	f7ff bc65 	b.w	800b5f0 <__retarget_lock_acquire_recursive>
 800bd26:	bf00      	nop
 800bd28:	20000b54 	.word	0x20000b54

0800bd2c <__malloc_unlock>:
 800bd2c:	4801      	ldr	r0, [pc, #4]	; (800bd34 <__malloc_unlock+0x8>)
 800bd2e:	f7ff bc60 	b.w	800b5f2 <__retarget_lock_release_recursive>
 800bd32:	bf00      	nop
 800bd34:	20000b54 	.word	0x20000b54

0800bd38 <_realloc_r>:
 800bd38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd3c:	4680      	mov	r8, r0
 800bd3e:	4614      	mov	r4, r2
 800bd40:	460e      	mov	r6, r1
 800bd42:	b921      	cbnz	r1, 800bd4e <_realloc_r+0x16>
 800bd44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd48:	4611      	mov	r1, r2
 800bd4a:	f7ff bdd9 	b.w	800b900 <_malloc_r>
 800bd4e:	b92a      	cbnz	r2, 800bd5c <_realloc_r+0x24>
 800bd50:	f000 f84c 	bl	800bdec <_free_r>
 800bd54:	4625      	mov	r5, r4
 800bd56:	4628      	mov	r0, r5
 800bd58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd5c:	f000 f890 	bl	800be80 <_malloc_usable_size_r>
 800bd60:	4284      	cmp	r4, r0
 800bd62:	4607      	mov	r7, r0
 800bd64:	d802      	bhi.n	800bd6c <_realloc_r+0x34>
 800bd66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bd6a:	d812      	bhi.n	800bd92 <_realloc_r+0x5a>
 800bd6c:	4621      	mov	r1, r4
 800bd6e:	4640      	mov	r0, r8
 800bd70:	f7ff fdc6 	bl	800b900 <_malloc_r>
 800bd74:	4605      	mov	r5, r0
 800bd76:	2800      	cmp	r0, #0
 800bd78:	d0ed      	beq.n	800bd56 <_realloc_r+0x1e>
 800bd7a:	42bc      	cmp	r4, r7
 800bd7c:	4622      	mov	r2, r4
 800bd7e:	4631      	mov	r1, r6
 800bd80:	bf28      	it	cs
 800bd82:	463a      	movcs	r2, r7
 800bd84:	f7ff fc36 	bl	800b5f4 <memcpy>
 800bd88:	4631      	mov	r1, r6
 800bd8a:	4640      	mov	r0, r8
 800bd8c:	f000 f82e 	bl	800bdec <_free_r>
 800bd90:	e7e1      	b.n	800bd56 <_realloc_r+0x1e>
 800bd92:	4635      	mov	r5, r6
 800bd94:	e7df      	b.n	800bd56 <_realloc_r+0x1e>

0800bd96 <memmove>:
 800bd96:	4288      	cmp	r0, r1
 800bd98:	b510      	push	{r4, lr}
 800bd9a:	eb01 0402 	add.w	r4, r1, r2
 800bd9e:	d902      	bls.n	800bda6 <memmove+0x10>
 800bda0:	4284      	cmp	r4, r0
 800bda2:	4623      	mov	r3, r4
 800bda4:	d807      	bhi.n	800bdb6 <memmove+0x20>
 800bda6:	1e43      	subs	r3, r0, #1
 800bda8:	42a1      	cmp	r1, r4
 800bdaa:	d008      	beq.n	800bdbe <memmove+0x28>
 800bdac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bdb0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bdb4:	e7f8      	b.n	800bda8 <memmove+0x12>
 800bdb6:	4402      	add	r2, r0
 800bdb8:	4601      	mov	r1, r0
 800bdba:	428a      	cmp	r2, r1
 800bdbc:	d100      	bne.n	800bdc0 <memmove+0x2a>
 800bdbe:	bd10      	pop	{r4, pc}
 800bdc0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bdc4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bdc8:	e7f7      	b.n	800bdba <memmove+0x24>
	...

0800bdcc <_sbrk_r>:
 800bdcc:	b538      	push	{r3, r4, r5, lr}
 800bdce:	4d06      	ldr	r5, [pc, #24]	; (800bde8 <_sbrk_r+0x1c>)
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	4604      	mov	r4, r0
 800bdd4:	4608      	mov	r0, r1
 800bdd6:	602b      	str	r3, [r5, #0]
 800bdd8:	f7f6 fbce 	bl	8002578 <_sbrk>
 800bddc:	1c43      	adds	r3, r0, #1
 800bdde:	d102      	bne.n	800bde6 <_sbrk_r+0x1a>
 800bde0:	682b      	ldr	r3, [r5, #0]
 800bde2:	b103      	cbz	r3, 800bde6 <_sbrk_r+0x1a>
 800bde4:	6023      	str	r3, [r4, #0]
 800bde6:	bd38      	pop	{r3, r4, r5, pc}
 800bde8:	20000b60 	.word	0x20000b60

0800bdec <_free_r>:
 800bdec:	b538      	push	{r3, r4, r5, lr}
 800bdee:	4605      	mov	r5, r0
 800bdf0:	2900      	cmp	r1, #0
 800bdf2:	d041      	beq.n	800be78 <_free_r+0x8c>
 800bdf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdf8:	1f0c      	subs	r4, r1, #4
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	bfb8      	it	lt
 800bdfe:	18e4      	addlt	r4, r4, r3
 800be00:	f7ff ff8e 	bl	800bd20 <__malloc_lock>
 800be04:	4a1d      	ldr	r2, [pc, #116]	; (800be7c <_free_r+0x90>)
 800be06:	6813      	ldr	r3, [r2, #0]
 800be08:	b933      	cbnz	r3, 800be18 <_free_r+0x2c>
 800be0a:	6063      	str	r3, [r4, #4]
 800be0c:	6014      	str	r4, [r2, #0]
 800be0e:	4628      	mov	r0, r5
 800be10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be14:	f7ff bf8a 	b.w	800bd2c <__malloc_unlock>
 800be18:	42a3      	cmp	r3, r4
 800be1a:	d908      	bls.n	800be2e <_free_r+0x42>
 800be1c:	6820      	ldr	r0, [r4, #0]
 800be1e:	1821      	adds	r1, r4, r0
 800be20:	428b      	cmp	r3, r1
 800be22:	bf01      	itttt	eq
 800be24:	6819      	ldreq	r1, [r3, #0]
 800be26:	685b      	ldreq	r3, [r3, #4]
 800be28:	1809      	addeq	r1, r1, r0
 800be2a:	6021      	streq	r1, [r4, #0]
 800be2c:	e7ed      	b.n	800be0a <_free_r+0x1e>
 800be2e:	461a      	mov	r2, r3
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	b10b      	cbz	r3, 800be38 <_free_r+0x4c>
 800be34:	42a3      	cmp	r3, r4
 800be36:	d9fa      	bls.n	800be2e <_free_r+0x42>
 800be38:	6811      	ldr	r1, [r2, #0]
 800be3a:	1850      	adds	r0, r2, r1
 800be3c:	42a0      	cmp	r0, r4
 800be3e:	d10b      	bne.n	800be58 <_free_r+0x6c>
 800be40:	6820      	ldr	r0, [r4, #0]
 800be42:	4401      	add	r1, r0
 800be44:	1850      	adds	r0, r2, r1
 800be46:	4283      	cmp	r3, r0
 800be48:	6011      	str	r1, [r2, #0]
 800be4a:	d1e0      	bne.n	800be0e <_free_r+0x22>
 800be4c:	6818      	ldr	r0, [r3, #0]
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	6053      	str	r3, [r2, #4]
 800be52:	4408      	add	r0, r1
 800be54:	6010      	str	r0, [r2, #0]
 800be56:	e7da      	b.n	800be0e <_free_r+0x22>
 800be58:	d902      	bls.n	800be60 <_free_r+0x74>
 800be5a:	230c      	movs	r3, #12
 800be5c:	602b      	str	r3, [r5, #0]
 800be5e:	e7d6      	b.n	800be0e <_free_r+0x22>
 800be60:	6820      	ldr	r0, [r4, #0]
 800be62:	1821      	adds	r1, r4, r0
 800be64:	428b      	cmp	r3, r1
 800be66:	bf04      	itt	eq
 800be68:	6819      	ldreq	r1, [r3, #0]
 800be6a:	685b      	ldreq	r3, [r3, #4]
 800be6c:	6063      	str	r3, [r4, #4]
 800be6e:	bf04      	itt	eq
 800be70:	1809      	addeq	r1, r1, r0
 800be72:	6021      	streq	r1, [r4, #0]
 800be74:	6054      	str	r4, [r2, #4]
 800be76:	e7ca      	b.n	800be0e <_free_r+0x22>
 800be78:	bd38      	pop	{r3, r4, r5, pc}
 800be7a:	bf00      	nop
 800be7c:	20000b58 	.word	0x20000b58

0800be80 <_malloc_usable_size_r>:
 800be80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be84:	1f18      	subs	r0, r3, #4
 800be86:	2b00      	cmp	r3, #0
 800be88:	bfbc      	itt	lt
 800be8a:	580b      	ldrlt	r3, [r1, r0]
 800be8c:	18c0      	addlt	r0, r0, r3
 800be8e:	4770      	bx	lr

0800be90 <_init>:
 800be90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be92:	bf00      	nop
 800be94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be96:	bc08      	pop	{r3}
 800be98:	469e      	mov	lr, r3
 800be9a:	4770      	bx	lr

0800be9c <_fini>:
 800be9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be9e:	bf00      	nop
 800bea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bea2:	bc08      	pop	{r3}
 800bea4:	469e      	mov	lr, r3
 800bea6:	4770      	bx	lr
